{"Id": "46324129", "PostTypeId": "1", "CreationDate": "2017-09-20T13:59:44.047", "Score": "0", "ViewCount": "637", "Body": "<p>I have 3 parts to my application </p>\n\n<ul>\n<li>API Server (API Gateway)</li>\n<li>Frontend</li>\n<li>Lambda</li>\n</ul>\n\n<p>I have setup CodePipeline to build my application stack.</p>\n\n<p>I have CodeBuild to build my API gateway SAM application. And CloudFormation to deploy. This CloudFormation exports a variable <code>ApiEndpoint</code>. This variable is used my my web CodeBuild to use. </p>\n\n<p><a href=\"https://i.stack.imgur.com/cGE7H.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/cGE7H.png\" alt=\"enter image description here\"></a></p>\n\n<p>The problem now is CloudFormation is saying </p>\n\n<blockquote>\n  <p>No export named skynet-infra-server-ApiEndpoint found. Rollback requested by user.</p>\n</blockquote>\n\n<p>I understand now that its because the Server build has not complete thus that variable is not exported. But how can I resolve this? </p>\n\n<pre><code>AWSTemplateFormatVersion : '2010-09-09'\nDescription: 'Skynet stack for Infrastructure. CodePipeline, S3'\n\nParameters:\n  PipelineName:\n    Type: String\n    Description: Pipeline Name (Lower case only, since S3 bucket names can only have lowercase)\n    Default: skynet-pipeline\n  AppName:\n    Type: String\n    Description: App Name\n    Default: skynet\n  GitHubOwner:\n    Type: String\n    Description: GitHub Owner\n    Default: 2359media\n  GitHubRepo:\n    Type: String\n    Description: GitHub Repo\n    Default: 'skynet'\n  GitHubBranch:\n    Type: String\n    Description: GitHub Branch\n    Default: master\n  GitHubToken:\n    Type: String\n    Description: GitHub Token\n    NoEcho: true\n\nResources:\n  S3WebBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub '${AppName}-web'\n      WebsiteConfiguration:\n        IndexDocument: index.html\n        RoutingRules:\n          - RedirectRule:\n              ReplaceKeyPrefixWith: '#'\n            RoutingRuleCondition:\n              HttpErrorCodeReturnedEquals: '404'\n\n      AccessControl: PublicRead\n      Tags:\n        - Key: Cost Center\n          Value: !Ref AppName\n        - Key: Owner\n          Value: Jiew Meng\n\n  Pipeline:\n    Type: AWS::CodePipeline::Pipeline\n    Properties:\n      Name: !Ref PipelineName\n      RoleArn: !GetAtt [PipelineRole, Arn]\n      ArtifactStore:\n        Location: !Ref PipelineArtifactStore\n        Type: S3\n      DisableInboundStageTransitions: []\n      Stages:\n        - Name: GitHubSource\n          Actions:\n          - Name: Source\n            ActionTypeId:\n              Category: Source\n              Owner: ThirdParty\n              Version: 1\n              Provider: GitHub\n            Configuration:\n              Owner: !Ref GitHubOwner\n              Repo: !Ref GitHubRepo\n              Branch: !Ref GitHubBranch\n              OAuthToken: !Ref GitHubToken\n            OutputArtifacts:\n              - Name: SourceCode\n        - Name: Build\n          Actions:\n          - Name: Lambda\n            InputArtifacts:\n              - Name: SourceCode\n            OutputArtifacts:\n              - Name: LambdaPackage\n            ActionTypeId:\n              Category: Build\n              Owner: AWS\n              Version: 1\n              Provider: CodeBuild\n            Configuration:\n              ProjectName: !Ref CodeBuildLambda\n          - Name: Server\n            InputArtifacts:\n              - Name: SourceCode\n            OutputArtifacts:\n              - Name: ServerPackage\n            ActionTypeId:\n              Category: Build\n              Owner: AWS\n              Version: 1\n              Provider: CodeBuild\n            Configuration:\n              ProjectName: !Ref CodeBuildServer\n\n        - Name: CreateChangeSet\n          Actions:\n          - Name: Lambda\n            InputArtifacts:\n              - Name: LambdaPackage\n            OutputArtifacts:\n              - Name: LambdaDeployment\n            ActionTypeId:\n              Category: Deploy\n              Owner: AWS\n              Version: 1\n              Provider: CloudFormation\n            Configuration:\n              ActionMode: CHANGE_SET_REPLACE\n              ChangeSetName: !Sub\n                - '${PipelineName}-lambda'\n                - {PipelineName: !Ref PipelineName}\n              RoleArn: !GetAtt [CloudFormationRole, Arn]\n              StackName: !Sub\n                - '${PipelineName}-lambda'\n                - {PipelineName: !Ref PipelineName}\n              TemplatePath: 'LambdaPackage::SkynetLambdaPackaged.yml'\n              Capabilities: CAPABILITY_NAMED_IAM\n              ParameterOverrides: !Sub '{\"AppName\": \"${PipelineName}-lambda\"}'\n          - Name: Server\n            InputArtifacts:\n              - Name: ServerPackage\n            OutputArtifacts:\n              - Name: ServerDeployment\n            ActionTypeId:\n              Category: Deploy\n              Owner: AWS\n              Version: 1\n              Provider: CloudFormation\n            Configuration:\n              ActionMode: CHANGE_SET_REPLACE\n              ChangeSetName: !Sub\n                - '${PipelineName}-server'\n                - {PipelineName: !Ref PipelineName}\n              RoleArn: !GetAtt [CloudFormationRole, Arn]\n              StackName: !Sub\n                - '${PipelineName}-server'\n                - {PipelineName: !Ref PipelineName}\n              TemplatePath: 'ServerPackage::SkynetServerPackaged.yml'\n              Capabilities: CAPABILITY_NAMED_IAM\n              ParameterOverrides: !Sub '{\"AppName\": \"${PipelineName}-server\"}'\n\n        - Name: Deploy\n          Actions:\n          - Name: Lambda\n            ActionTypeId:\n              Category: Deploy\n              Owner: AWS\n              Version: 1\n              Provider: CloudFormation\n            Configuration:\n              ActionMode: CHANGE_SET_EXECUTE\n              ChangeSetName: !Sub\n                - '${PipelineName}-lambda'\n                - {PipelineName: !Ref PipelineName}\n              StackName: !Sub\n                - '${PipelineName}-lambda'\n                - {PipelineName: !Ref PipelineName}\n          - Name: Server\n            ActionTypeId:\n              Category: Deploy\n              Owner: AWS\n              Version: 1\n              Provider: CloudFormation\n            Configuration:\n              ActionMode: CHANGE_SET_EXECUTE\n              ChangeSetName: !Sub\n                - '${PipelineName}-server'\n                - {PipelineName: !Ref PipelineName}\n              StackName: !Sub\n                - '${PipelineName}-server'\n                - {PipelineName: !Ref PipelineName}\n          - Name: Web\n            InputArtifacts:\n              - Name: SourceCode\n            ActionTypeId:\n              Category: Build\n              Owner: AWS\n              Version: 1\n              Provider: CodeBuild\n            Configuration:\n              ProjectName: !Ref CodeBuildWeb\n\n  CodeBuildLambda:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub '${PipelineName}-lambda'\n      Artifacts:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/nodejs:7.0.0\n        Type: LINUX_CONTAINER\n        EnvironmentVariables:\n          - Name: S3_BUCKET\n            Value: !Ref PipelineArtifactStore\n      ServiceRole: !Ref CodeBuildRole\n      Source:\n        BuildSpec: 'lambda/buildspec.yml'\n        Type: CODEPIPELINE\n\n  CodeBuildServer:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub '${PipelineName}-server'\n      Artifacts:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/nodejs:7.0.0\n        Type: LINUX_CONTAINER\n        EnvironmentVariables:\n          - Name: S3_BUCKET\n            Value: !Ref PipelineArtifactStore\n      ServiceRole: !Ref CodeBuildRole\n      Source:\n        BuildSpec: 'server/buildspec.yml'\n        Type: CODEPIPELINE\n\n  CodeBuildWeb:\n    Type: AWS::CodeBuild::Project\n    Properties:\n      Name: !Sub '${PipelineName}-web'\n      Artifacts:\n        Type: CODEPIPELINE\n      Environment:\n        ComputeType: BUILD_GENERAL1_SMALL\n        Image: aws/codebuild/nodejs:7.0.0\n        Type: LINUX_CONTAINER\n        EnvironmentVariables:\n          - Name: S3_BUCKET\n            Value: !Ref S3WebBucket\n          - Name: API_URL\n            Value:\n              Fn::ImportValue:\n                !Sub '${PipelineName}-server-ApiEndpoint'\n      ServiceRole: !Ref CodeBuildRole\n      Source:\n        BuildSpec: 'web/buildspec.yml'\n        Type: CODEPIPELINE\n\n  PipelineArtifactStore:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub '${PipelineName}-artifacts'\n      VersioningConfiguration:\n        Status: Enabled\n\n  CodeBuildRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub '${PipelineName}-codebuild'\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          Effect: Allow\n          Principal:\n            Service: codebuild.amazonaws.com\n          Action: sts:AssumeRole\n      Policies:\n        - PolicyName: !Sub '${PipelineName}-codebuild'\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Resource: 'arn:aws:logs:*:*:*'\n                Action:\n                - 'logs:CreateLogGroup'\n                - 'logs:CreateLogStream'\n                - 'logs:PutLogEvents'\n              - Effect: Allow\n                Resource:\n                  - !Sub 'arn:aws:s3:::codepipeline-${AWS::Region}-*/*'\n                  - !Sub\n                    - '${PipelineArtifactStoreArn}/*'\n                    - {PipelineArtifactStoreArn: !GetAtt [PipelineArtifactStore, Arn]}\n                Action:\n                  - 's3:GetObject'\n                  - 's3:GetObjectVersion'\n                  - 's3:PutObject'\n              - Effect: Allow\n                Resource:\n                  - !Sub\n                    - '${S3WebArn}/*'\n                    - {S3WebArn: !GetAtt S3WebBucket.Arn}\n                Action:\n                  - 's3:*'\n\n  CloudFormationRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub '${PipelineName}-cloudformation'\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n        - Effect: Allow\n          Principal:\n            Service: cloudformation.amazonaws.com\n          Action:\n          - sts:AssumeRole\n      ManagedPolicyArns:\n        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'\n      Policies:\n        - PolicyName: !Sub '${PipelineName}-cloudformation'\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Resource: '*'\n                Action:\n                - 's3:GetObject'\n                - 's3:GetObjectVersion'\n                - 's3:GetBucketVersioning'\n              - Effect: Allow\n                Resource: 'arn:aws:s3:::codepipeline*'\n                Action:\n                - 's3:PutObject'\n              - Effect: Allow\n                Resource: '*'\n                Action:\n                - 'lambda:*'\n              - Effect: Allow\n                Resource: !Sub 'arn:aws:apigateway:${AWS::Region}::*'\n                Action:\n                - 'apigateway:*'\n              - Effect: Allow\n                Resource: '*'\n                Action:\n                - 'lambda:CreateEventSourceMapping'\n                - 'lambda:DeleteEventSourceMapping'\n                - 'lambda:GetEventSourceMapping'\n              - Effect: Allow\n                Resource: '*'\n                Action:\n                - 'iam:GetRole'\n                - 'iam:CreateRole'\n                - 'iam:DeleteRole'\n                - 'iam:PassRole'\n                - 'iam:AttachRolePolicy'\n                - 'iam:DetachRolePolicy'\n                - 'iam:DeleteRolePolicy'\n                - 'iam:PutRolePolicy'\n              - Effect: Allow\n                Resource: '*'\n                Action:\n                - 'iam:PassRole'\n              - Effect: Allow\n                Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31'\n                Action:\n                - 'cloudformation:CreateChangeSet'\n              - Effect: Allow\n                Resource: '*'\n                Action:\n                - 'events:*'\n\n  PipelineRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub '${PipelineName}-pipeline'\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n        - Action: ['sts:AssumeRole']\n          Effect: Allow\n          Principal:\n            Service: [codepipeline.amazonaws.com]\n      Path: /\n      Policies:\n        - PolicyName: SkynetPipeline\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Action:\n                - 's3:GetObject'\n                - 's3:GetObjectVersion'\n                - 's3:GetBucketVersioning'\n                Effect: 'Allow'\n                Resource: '*'\n              - Action:\n                - 's3:PutObject'\n                Effect: 'Allow'\n                Resource:\n                - !GetAtt [PipelineArtifactStore, Arn]\n              - Action:\n                - 'codecommit:CancelUploadArchive'\n                - 'codecommit:GetBranch'\n                - 'codecommit:GetCommit'\n                - 'codecommit:GetUploadArchiveStatus'\n                - 'codecommit:UploadArchive'\n                Effect: 'Allow'\n                Resource: '*'\n              - Action:\n                - 'codedeploy:CreateDeployment'\n                - 'codedeploy:GetApplicationRevision'\n                - 'codedeploy:GetDeployment'\n                - 'codedeploy:GetDeploymentConfig'\n                - 'codedeploy:RegisterApplicationRevision'\n                Effect: 'Allow'\n                Resource: '*'\n              - Action:\n                - 'elasticbeanstalk:*'\n                - 'ec2:*'\n                - 'elasticloadbalancing:*'\n                - 'autoscaling:*'\n                - 'cloudwatch:*'\n                - 's3:*'\n                - 'sns:*'\n                - 'cloudformation:*'\n                - 'rds:*'\n                - 'sqs:*'\n                - 'ecs:*'\n                - 'iam:PassRole'\n                Effect: 'Allow'\n                Resource: '*'\n              - Action:\n                - 'lambda:InvokeFunction'\n                - 'lambda:ListFunctions'\n                Effect: 'Allow'\n                Resource: '*'\n              - Action:\n                - 'opsworks:CreateDeployment'\n                - 'opsworks:DescribeApps'\n                - 'opsworks:DescribeCommands'\n                - 'opsworks:DescribeDeployments'\n                - 'opsworks:DescribeInstances'\n                - 'opsworks:DescribeStacks'\n                - 'opsworks:UpdateApp'\n                - 'opsworks:UpdateStack'\n                Effect: 'Allow'\n                Resource: '*'\n              - Action:\n                - 'cloudformation:CreateStack'\n                - 'cloudformation:DeleteStack'\n                - 'cloudformation:DescribeStacks'\n                - 'cloudformation:UpdateStack'\n                - 'cloudformation:CreateChangeSet'\n                - 'cloudformation:DeleteChangeSet'\n                - 'cloudformation:DescribeChangeSet'\n                - 'cloudformation:ExecuteChangeSet'\n                - 'cloudformation:SetStackPolicy'\n                - 'cloudformation:ValidateTemplate'\n                - 'iam:PassRole'\n                Effect: 'Allow'\n                Resource: '*'\n              - Action:\n                - 'codebuild:BatchGetBuilds'\n                - 'codebuild:StartBuild'\n                Effect: 'Allow'\n                Resource: '*'\n\nOutputs:\n  WebsiteUrl:\n    Description: Website URL\n    Value: !GetAtt S3WebBucket.WebsiteURL\n</code></pre>\n", "OwnerUserId": "292291", "LastActivityDate": "2017-09-26T17:06:02.963", "Title": "CodePipeline CloudFormation resource has dependency on exported variable created by a resource", "Tags": "|amazon-web-services|aws-cloudformation|aws-codepipeline|", "AnswerCount": "1", "CommentCount": "3", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "79609632", "PostId": "46324129", "Score": "0", "Text": "A step in `CodeBuildWeb` could fetch the `API_URL` using the AWS API.", "CreationDate": "2017-09-20T14:15:31.810", "UserId": "970247", "filtered-sentences": []}, {"Id": "79654422", "PostId": "46324129", "Score": "0", "Text": "@LaurentJalbertSimard, I guess thats a good idea ... but it seems alittle hackish", "CreationDate": "2017-09-21T14:53:03.160", "UserId": "292291", "filtered-sentences": []}, {"Id": "79654843", "PostId": "46324129", "Score": "0", "Text": "After years of using CloudFormation, there's a lot of time I wish there was a clean way to do everything but that's unrealistic. As long as your workaround doesn't break the ideas behind IaC (automation, replicability, immutability, etc), I no longer call them \"hacks\".", "CreationDate": "2017-09-21T15:02:57.930", "UserId": "970247", "filtered-sentences": []}], "history": [{"Id": "156589222", "PostHistoryTypeId": "2", "PostId": "46324129", "RevisionGUID": "2ec23952-99e0-4c80-8d6f-02b621f596de", "CreationDate": "2017-09-20T13:59:44.047", "UserId": "292291", "Text": "I have 3 parts to my application \r\n\r\n- API Server (API Gateway)\r\n- Frontend\r\n- Lambda\r\n\r\nI have setup CodePipeline to build my application stack.\r\n\r\nI have CodeBuild to build my API gateway SAM application. And CloudFormation to deploy. This CloudFormation exports a variable `ApiEndpoint`. This variable is used my my web CodeBuild to use. \r\n\r\n[![enter image description here][1]][1]\r\n\r\nThe problem now is CloudFormation is saying \r\n\r\n> No export named skynet-infra-server-ApiEndpoint found. Rollback requested by user.\r\n\r\nI understand now that its because the Server build has not complete thus that variable is not exported. But how can I resolve this? \r\n\r\n    AWSTemplateFormatVersion : '2010-09-09'\r\n    Description: 'Skynet stack for Infrastructure. CodePipeline, S3'\r\n    \r\n    Parameters:\r\n      PipelineName:\r\n        Type: String\r\n        Description: Pipeline Name (Lower case only, since S3 bucket names can only have lowercase)\r\n        Default: skynet-pipeline\r\n      AppName:\r\n        Type: String\r\n        Description: App Name\r\n        Default: skynet\r\n      GitHubOwner:\r\n        Type: String\r\n        Description: GitHub Owner\r\n        Default: 2359media\r\n      GitHubRepo:\r\n        Type: String\r\n        Description: GitHub Repo\r\n        Default: 'skynet'\r\n      GitHubBranch:\r\n        Type: String\r\n        Description: GitHub Branch\r\n        Default: master\r\n      GitHubToken:\r\n        Type: String\r\n        Description: GitHub Token\r\n        NoEcho: true\r\n    \r\n    Resources:\r\n      S3WebBucket:\r\n        Type: AWS::S3::Bucket\r\n        Properties:\r\n          BucketName: !Sub '${AppName}-web'\r\n          WebsiteConfiguration:\r\n            IndexDocument: index.html\r\n            RoutingRules:\r\n              - RedirectRule:\r\n                  ReplaceKeyPrefixWith: '#'\r\n                RoutingRuleCondition:\r\n                  HttpErrorCodeReturnedEquals: '404'\r\n    \r\n          AccessControl: PublicRead\r\n          Tags:\r\n            - Key: Cost Center\r\n              Value: !Ref AppName\r\n            - Key: Owner\r\n              Value: Jiew Meng\r\n    \r\n      Pipeline:\r\n        Type: AWS::CodePipeline::Pipeline\r\n        Properties:\r\n          Name: !Ref PipelineName\r\n          RoleArn: !GetAtt [PipelineRole, Arn]\r\n          ArtifactStore:\r\n            Location: !Ref PipelineArtifactStore\r\n            Type: S3\r\n          DisableInboundStageTransitions: []\r\n          Stages:\r\n            - Name: GitHubSource\r\n              Actions:\r\n              - Name: Source\r\n                ActionTypeId:\r\n                  Category: Source\r\n                  Owner: ThirdParty\r\n                  Version: 1\r\n                  Provider: GitHub\r\n                Configuration:\r\n                  Owner: !Ref GitHubOwner\r\n                  Repo: !Ref GitHubRepo\r\n                  Branch: !Ref GitHubBranch\r\n                  OAuthToken: !Ref GitHubToken\r\n                OutputArtifacts:\r\n                  - Name: SourceCode\r\n            - Name: Build\r\n              Actions:\r\n              - Name: Lambda\r\n                InputArtifacts:\r\n                  - Name: SourceCode\r\n                OutputArtifacts:\r\n                  - Name: LambdaPackage\r\n                ActionTypeId:\r\n                  Category: Build\r\n                  Owner: AWS\r\n                  Version: 1\r\n                  Provider: CodeBuild\r\n                Configuration:\r\n                  ProjectName: !Ref CodeBuildLambda\r\n              - Name: Server\r\n                InputArtifacts:\r\n                  - Name: SourceCode\r\n                OutputArtifacts:\r\n                  - Name: ServerPackage\r\n                ActionTypeId:\r\n                  Category: Build\r\n                  Owner: AWS\r\n                  Version: 1\r\n                  Provider: CodeBuild\r\n                Configuration:\r\n                  ProjectName: !Ref CodeBuildServer\r\n    \r\n            - Name: CreateChangeSet\r\n              Actions:\r\n              - Name: Lambda\r\n                InputArtifacts:\r\n                  - Name: LambdaPackage\r\n                OutputArtifacts:\r\n                  - Name: LambdaDeployment\r\n                ActionTypeId:\r\n                  Category: Deploy\r\n                  Owner: AWS\r\n                  Version: 1\r\n                  Provider: CloudFormation\r\n                Configuration:\r\n                  ActionMode: CHANGE_SET_REPLACE\r\n                  ChangeSetName: !Sub\r\n                    - '${PipelineName}-lambda'\r\n                    - {PipelineName: !Ref PipelineName}\r\n                  RoleArn: !GetAtt [CloudFormationRole, Arn]\r\n                  StackName: !Sub\r\n                    - '${PipelineName}-lambda'\r\n                    - {PipelineName: !Ref PipelineName}\r\n                  TemplatePath: 'LambdaPackage::SkynetLambdaPackaged.yml'\r\n                  Capabilities: CAPABILITY_NAMED_IAM\r\n                  ParameterOverrides: !Sub '{\"AppName\": \"${PipelineName}-lambda\"}'\r\n              - Name: Server\r\n                InputArtifacts:\r\n                  - Name: ServerPackage\r\n                OutputArtifacts:\r\n                  - Name: ServerDeployment\r\n                ActionTypeId:\r\n                  Category: Deploy\r\n                  Owner: AWS\r\n                  Version: 1\r\n                  Provider: CloudFormation\r\n                Configuration:\r\n                  ActionMode: CHANGE_SET_REPLACE\r\n                  ChangeSetName: !Sub\r\n                    - '${PipelineName}-server'\r\n                    - {PipelineName: !Ref PipelineName}\r\n                  RoleArn: !GetAtt [CloudFormationRole, Arn]\r\n                  StackName: !Sub\r\n                    - '${PipelineName}-server'\r\n                    - {PipelineName: !Ref PipelineName}\r\n                  TemplatePath: 'ServerPackage::SkynetServerPackaged.yml'\r\n                  Capabilities: CAPABILITY_NAMED_IAM\r\n                  ParameterOverrides: !Sub '{\"AppName\": \"${PipelineName}-server\"}'\r\n    \r\n            - Name: Deploy\r\n              Actions:\r\n              - Name: Lambda\r\n                ActionTypeId:\r\n                  Category: Deploy\r\n                  Owner: AWS\r\n                  Version: 1\r\n                  Provider: CloudFormation\r\n                Configuration:\r\n                  ActionMode: CHANGE_SET_EXECUTE\r\n                  ChangeSetName: !Sub\r\n                    - '${PipelineName}-lambda'\r\n                    - {PipelineName: !Ref PipelineName}\r\n                  StackName: !Sub\r\n                    - '${PipelineName}-lambda'\r\n                    - {PipelineName: !Ref PipelineName}\r\n              - Name: Server\r\n                ActionTypeId:\r\n                  Category: Deploy\r\n                  Owner: AWS\r\n                  Version: 1\r\n                  Provider: CloudFormation\r\n                Configuration:\r\n                  ActionMode: CHANGE_SET_EXECUTE\r\n                  ChangeSetName: !Sub\r\n                    - '${PipelineName}-server'\r\n                    - {PipelineName: !Ref PipelineName}\r\n                  StackName: !Sub\r\n                    - '${PipelineName}-server'\r\n                    - {PipelineName: !Ref PipelineName}\r\n              - Name: Web\r\n                InputArtifacts:\r\n                  - Name: SourceCode\r\n                ActionTypeId:\r\n                  Category: Build\r\n                  Owner: AWS\r\n                  Version: 1\r\n                  Provider: CodeBuild\r\n                Configuration:\r\n                  ProjectName: !Ref CodeBuildWeb\r\n    \r\n      CodeBuildLambda:\r\n        Type: AWS::CodeBuild::Project\r\n        Properties:\r\n          Name: !Sub '${PipelineName}-lambda'\r\n          Artifacts:\r\n            Type: CODEPIPELINE\r\n          Environment:\r\n            ComputeType: BUILD_GENERAL1_SMALL\r\n            Image: aws/codebuild/nodejs:7.0.0\r\n            Type: LINUX_CONTAINER\r\n            EnvironmentVariables:\r\n              - Name: S3_BUCKET\r\n                Value: !Ref PipelineArtifactStore\r\n          ServiceRole: !Ref CodeBuildRole\r\n          Source:\r\n            BuildSpec: 'lambda/buildspec.yml'\r\n            Type: CODEPIPELINE\r\n    \r\n      CodeBuildServer:\r\n        Type: AWS::CodeBuild::Project\r\n        Properties:\r\n          Name: !Sub '${PipelineName}-server'\r\n          Artifacts:\r\n            Type: CODEPIPELINE\r\n          Environment:\r\n            ComputeType: BUILD_GENERAL1_SMALL\r\n            Image: aws/codebuild/nodejs:7.0.0\r\n            Type: LINUX_CONTAINER\r\n            EnvironmentVariables:\r\n              - Name: S3_BUCKET\r\n                Value: !Ref PipelineArtifactStore\r\n          ServiceRole: !Ref CodeBuildRole\r\n          Source:\r\n            BuildSpec: 'server/buildspec.yml'\r\n            Type: CODEPIPELINE\r\n    \r\n      CodeBuildWeb:\r\n        Type: AWS::CodeBuild::Project\r\n        Properties:\r\n          Name: !Sub '${PipelineName}-web'\r\n          Artifacts:\r\n            Type: CODEPIPELINE\r\n          Environment:\r\n            ComputeType: BUILD_GENERAL1_SMALL\r\n            Image: aws/codebuild/nodejs:7.0.0\r\n            Type: LINUX_CONTAINER\r\n            EnvironmentVariables:\r\n              - Name: S3_BUCKET\r\n                Value: !Ref S3WebBucket\r\n              - Name: API_URL\r\n                Value:\r\n                  Fn::ImportValue:\r\n                    !Sub '${PipelineName}-server-ApiEndpoint'\r\n          ServiceRole: !Ref CodeBuildRole\r\n          Source:\r\n            BuildSpec: 'web/buildspec.yml'\r\n            Type: CODEPIPELINE\r\n    \r\n      PipelineArtifactStore:\r\n        Type: AWS::S3::Bucket\r\n        Properties:\r\n          BucketName: !Sub '${PipelineName}-artifacts'\r\n          VersioningConfiguration:\r\n            Status: Enabled\r\n    \r\n      CodeBuildRole:\r\n        Type: AWS::IAM::Role\r\n        Properties:\r\n          RoleName: !Sub '${PipelineName}-codebuild'\r\n          AssumeRolePolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n              Effect: Allow\r\n              Principal:\r\n                Service: codebuild.amazonaws.com\r\n              Action: sts:AssumeRole\r\n          Policies:\r\n            - PolicyName: !Sub '${PipelineName}-codebuild'\r\n              PolicyDocument:\r\n                Version: '2012-10-17'\r\n                Statement:\r\n                  - Effect: Allow\r\n                    Resource: 'arn:aws:logs:*:*:*'\r\n                    Action:\r\n                    - 'logs:CreateLogGroup'\r\n                    - 'logs:CreateLogStream'\r\n                    - 'logs:PutLogEvents'\r\n                  - Effect: Allow\r\n                    Resource:\r\n                      - !Sub 'arn:aws:s3:::codepipeline-${AWS::Region}-*/*'\r\n                      - !Sub\r\n                        - '${PipelineArtifactStoreArn}/*'\r\n                        - {PipelineArtifactStoreArn: !GetAtt [PipelineArtifactStore, Arn]}\r\n                    Action:\r\n                      - 's3:GetObject'\r\n                      - 's3:GetObjectVersion'\r\n                      - 's3:PutObject'\r\n                  - Effect: Allow\r\n                    Resource:\r\n                      - !Sub\r\n                        - '${S3WebArn}/*'\r\n                        - {S3WebArn: !GetAtt S3WebBucket.Arn}\r\n                    Action:\r\n                      - 's3:*'\r\n    \r\n      CloudFormationRole:\r\n        Type: AWS::IAM::Role\r\n        Properties:\r\n          RoleName: !Sub '${PipelineName}-cloudformation'\r\n          AssumeRolePolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n            - Effect: Allow\r\n              Principal:\r\n                Service: cloudformation.amazonaws.com\r\n              Action:\r\n              - sts:AssumeRole\r\n          ManagedPolicyArns:\r\n            - 'arn:aws:iam::aws:policy/AWSLambdaExecute'\r\n          Policies:\r\n            - PolicyName: !Sub '${PipelineName}-cloudformation'\r\n              PolicyDocument:\r\n                Version: '2012-10-17'\r\n                Statement:\r\n                  - Effect: Allow\r\n                    Resource: '*'\r\n                    Action:\r\n                    - 's3:GetObject'\r\n                    - 's3:GetObjectVersion'\r\n                    - 's3:GetBucketVersioning'\r\n                  - Effect: Allow\r\n                    Resource: 'arn:aws:s3:::codepipeline*'\r\n                    Action:\r\n                    - 's3:PutObject'\r\n                  - Effect: Allow\r\n                    Resource: '*'\r\n                    Action:\r\n                    - 'lambda:*'\r\n                  - Effect: Allow\r\n                    Resource: !Sub 'arn:aws:apigateway:${AWS::Region}::*'\r\n                    Action:\r\n                    - 'apigateway:*'\r\n                  - Effect: Allow\r\n                    Resource: '*'\r\n                    Action:\r\n                    - 'lambda:CreateEventSourceMapping'\r\n                    - 'lambda:DeleteEventSourceMapping'\r\n                    - 'lambda:GetEventSourceMapping'\r\n                  - Effect: Allow\r\n                    Resource: '*'\r\n                    Action:\r\n                    - 'iam:GetRole'\r\n                    - 'iam:CreateRole'\r\n                    - 'iam:DeleteRole'\r\n                    - 'iam:PassRole'\r\n                    - 'iam:AttachRolePolicy'\r\n                    - 'iam:DetachRolePolicy'\r\n                    - 'iam:DeleteRolePolicy'\r\n                    - 'iam:PutRolePolicy'\r\n                  - Effect: Allow\r\n                    Resource: '*'\r\n                    Action:\r\n                    - 'iam:PassRole'\r\n                  - Effect: Allow\r\n                    Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31'\r\n                    Action:\r\n                    - 'cloudformation:CreateChangeSet'\r\n                  - Effect: Allow\r\n                    Resource: '*'\r\n                    Action:\r\n                    - 'events:*'\r\n    \r\n      PipelineRole:\r\n        Type: AWS::IAM::Role\r\n        Properties:\r\n          RoleName: !Sub '${PipelineName}-pipeline'\r\n          AssumeRolePolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n            - Action: ['sts:AssumeRole']\r\n              Effect: Allow\r\n              Principal:\r\n                Service: [codepipeline.amazonaws.com]\r\n          Path: /\r\n          Policies:\r\n            - PolicyName: SkynetPipeline\r\n              PolicyDocument:\r\n                Version: '2012-10-17'\r\n                Statement:\r\n                  - Action:\r\n                    - 's3:GetObject'\r\n                    - 's3:GetObjectVersion'\r\n                    - 's3:GetBucketVersioning'\r\n                    Effect: 'Allow'\r\n                    Resource: '*'\r\n                  - Action:\r\n                    - 's3:PutObject'\r\n                    Effect: 'Allow'\r\n                    Resource:\r\n                    - !GetAtt [PipelineArtifactStore, Arn]\r\n                  - Action:\r\n                    - 'codecommit:CancelUploadArchive'\r\n                    - 'codecommit:GetBranch'\r\n                    - 'codecommit:GetCommit'\r\n                    - 'codecommit:GetUploadArchiveStatus'\r\n                    - 'codecommit:UploadArchive'\r\n                    Effect: 'Allow'\r\n                    Resource: '*'\r\n                  - Action:\r\n                    - 'codedeploy:CreateDeployment'\r\n                    - 'codedeploy:GetApplicationRevision'\r\n                    - 'codedeploy:GetDeployment'\r\n                    - 'codedeploy:GetDeploymentConfig'\r\n                    - 'codedeploy:RegisterApplicationRevision'\r\n                    Effect: 'Allow'\r\n                    Resource: '*'\r\n                  - Action:\r\n                    - 'elasticbeanstalk:*'\r\n                    - 'ec2:*'\r\n                    - 'elasticloadbalancing:*'\r\n                    - 'autoscaling:*'\r\n                    - 'cloudwatch:*'\r\n                    - 's3:*'\r\n                    - 'sns:*'\r\n                    - 'cloudformation:*'\r\n                    - 'rds:*'\r\n                    - 'sqs:*'\r\n                    - 'ecs:*'\r\n                    - 'iam:PassRole'\r\n                    Effect: 'Allow'\r\n                    Resource: '*'\r\n                  - Action:\r\n                    - 'lambda:InvokeFunction'\r\n                    - 'lambda:ListFunctions'\r\n                    Effect: 'Allow'\r\n                    Resource: '*'\r\n                  - Action:\r\n                    - 'opsworks:CreateDeployment'\r\n                    - 'opsworks:DescribeApps'\r\n                    - 'opsworks:DescribeCommands'\r\n                    - 'opsworks:DescribeDeployments'\r\n                    - 'opsworks:DescribeInstances'\r\n                    - 'opsworks:DescribeStacks'\r\n                    - 'opsworks:UpdateApp'\r\n                    - 'opsworks:UpdateStack'\r\n                    Effect: 'Allow'\r\n                    Resource: '*'\r\n                  - Action:\r\n                    - 'cloudformation:CreateStack'\r\n                    - 'cloudformation:DeleteStack'\r\n                    - 'cloudformation:DescribeStacks'\r\n                    - 'cloudformation:UpdateStack'\r\n                    - 'cloudformation:CreateChangeSet'\r\n                    - 'cloudformation:DeleteChangeSet'\r\n                    - 'cloudformation:DescribeChangeSet'\r\n                    - 'cloudformation:ExecuteChangeSet'\r\n                    - 'cloudformation:SetStackPolicy'\r\n                    - 'cloudformation:ValidateTemplate'\r\n                    - 'iam:PassRole'\r\n                    Effect: 'Allow'\r\n                    Resource: '*'\r\n                  - Action:\r\n                    - 'codebuild:BatchGetBuilds'\r\n                    - 'codebuild:StartBuild'\r\n                    Effect: 'Allow'\r\n                    Resource: '*'\r\n    \r\n    Outputs:\r\n      WebsiteUrl:\r\n        Description: Website URL\r\n        Value: !GetAtt S3WebBucket.WebsiteURL\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/cGE7H.png", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "CodePipeline, S3' Parameters: PipelineName: Type: String Description: Pipeline Name (Lower case only, since S3 bucket names can only have lowercase) Default: skynet-pipeline AppName: Type: String Description: App Name Default: skynet GitHubOwner: Type: String Description: GitHub Owner Default: 2359media GitHubRepo: Type: String Description: GitHub Repo Default: 'skynet' GitHubBranch: Type: String Description: GitHub Branch Default: master GitHubToken: Type: String Description: GitHub Token NoEcho: true Resources: S3WebBucket: Type: AWS::S3::Bucket Properties: BucketName: !Sub '${AppName}-web' WebsiteConfiguration: IndexDocument: index.html RoutingRules: - RedirectRule: ReplaceKeyPrefixWith: '#' RoutingRuleCondition: HttpErrorCodeReturnedEquals: '404' AccessControl: PublicRead Tags: - Key: Cost Center Value: !Ref AppName - Key: Owner Value: Jiew Meng Pipeline: Type: AWS::CodePipeline::Pipeline Properties: Name: !Ref PipelineName RoleArn: !GetAtt [PipelineRole, Arn] ArtifactStore: Location: !Ref PipelineArtifactStore Type: S3 DisableInboundStageTransitions: [] Stages: - Name: GitHubSource Actions: - Name: Source ActionTypeId: Category: Source Owner: ThirdParty Version: 1 Provider: GitHub Configuration: Owner: !Ref GitHubOwner Repo: !Ref GitHubRepo Branch: !Ref GitHubBranch OAuthToken: !Ref GitHubToken OutputArtifacts: - Name: SourceCode - Name: Build Actions: - Name: Lambda InputArtifacts: - Name: SourceCode OutputArtifacts: - Name: LambdaPackage ActionTypeId: Category: Build Owner: AWS Version: 1 Provider: CodeBuild Configuration: ProjectName: !Ref CodeBuildLambda - Name: Server InputArtifacts: - Name: SourceCode OutputArtifacts: - Name: ServerPackage ActionTypeId: Category: Build Owner: AWS Version: 1 Provider: CodeBuild Configuration: ProjectName: !Ref CodeBuildServer - Name: CreateChangeSet Actions: - Name: Lambda InputArtifacts: - Name: LambdaPackage OutputArtifacts: - Name: LambdaDeployment ActionTypeId: Category: Deploy Owner: AWS Version: 1 Provider: CloudFormation Configuration: ActionMode: CHANGE_SET_REPLACE ChangeSetName: !Sub - '${PipelineName}-lambda' - {PipelineName: !Ref PipelineName} RoleArn: !GetAtt [CloudFormationRole, Arn] StackName: !Sub - '${PipelineName}-lambda' - {PipelineName: !Ref PipelineName} TemplatePath: 'LambdaPackage::SkynetLambdaPackaged.yml' Capabilities: CAPABILITY_NAMED_IAM ParameterOverrides: !Sub '{\"AppName\": \"${PipelineName}-lambda\"}' - Name: Server InputArtifacts: - Name: ServerPackage OutputArtifacts: - Name: ServerDeployment ActionTypeId: Category: Deploy Owner: AWS Version: 1 Provider: CloudFormation Configuration: ActionMode: CHANGE_SET_REPLACE ChangeSetName: !Sub - '${PipelineName}-server' - {PipelineName: !Ref PipelineName} RoleArn: !GetAtt [CloudFormationRole, Arn] StackName: !Sub - '${PipelineName}-server' - {PipelineName: !Ref PipelineName} TemplatePath: 'ServerPackage::SkynetServerPackaged.yml' Capabilities: CAPABILITY_NAMED_IAM ParameterOverrides: !Sub '{\"AppName\": \"${PipelineName}-server\"}' - Name: Deploy Actions: - Name: Lambda ActionTypeId: Category: Deploy Owner: AWS Version: 1 Provider: CloudFormation Configuration: ActionMode: CHANGE_SET_EXECUTE ChangeSetName: !Sub - '${PipelineName}-lambda' - {PipelineName: !Ref PipelineName} StackName: !Sub - '${PipelineName}-lambda' - {PipelineName: !Ref PipelineName} - Name: Server ActionTypeId: Category: Deploy Owner: AWS Version: 1 Provider: CloudFormation Configuration: ActionMode: CHANGE_SET_EXECUTE ChangeSetName: !Sub - '${PipelineName}-server' - {PipelineName: !Ref PipelineName} StackName: !Sub - '${PipelineName}-server' - {PipelineName: !Ref PipelineName} - Name: Web InputArtifacts: - Name: SourceCode ActionTypeId: Category: Build Owner: AWS Version: 1 Provider: CodeBuild Configuration: ProjectName: !Ref CodeBuildWeb CodeBuildLambda: Type: AWS::CodeBuild::Project Properties: Name: !Sub '${PipelineName}-lambda' Artifacts: Type: CODEPIPELINE Environment: ComputeType: BUILD_GENERAL1_SMALL Image: aws/codebuild/nodejs:7.0.0 Type: LINUX_CONTAINER EnvironmentVariables: - Name: S3_BUCKET Value: !Ref PipelineArtifactStore ServiceRole: !Ref CodeBuildRole Source: BuildSpec: 'lambda/buildspec.yml' Type: CODEPIPELINE CodeBuildServer: Type: AWS::CodeBuild::Project Properties: Name: !Sub '${PipelineName}-server' Artifacts: Type: CODEPIPELINE Environment: ComputeType: BUILD_GENERAL1_SMALL Image: aws/codebuild/nodejs:7.0.0 Type: LINUX_CONTAINER EnvironmentVariables: - Name: S3_BUCKET Value: !Ref PipelineArtifactStore ServiceRole: !Ref CodeBuildRole Source: BuildSpec: 'server/buildspec.yml' Type: CODEPIPELINE CodeBuildWeb: Type: AWS::CodeBuild::Project Properties: Name: !Sub '${PipelineName}-web' Artifacts: Type: CODEPIPELINE Environment: ComputeType: BUILD_GENERAL1_SMALL Image: aws/codebuild/nodejs:7.0.0 Type: LINUX_CONTAINER EnvironmentVariables: - Name: S3_BUCKET Value: !Ref S3WebBucket - Name: API_URL Value: Fn::ImportValue: !Sub '${PipelineName}-server-ApiEndpoint' ServiceRole: !Ref CodeBuildRole Source: BuildSpec: 'web/buildspec.yml' Type: CODEPIPELINE PipelineArtifactStore: Type: AWS::S3::Bucket Properties: BucketName: !Sub '${PipelineName}-artifacts' VersioningConfiguration: Status: Enabled CodeBuildRole: Type: AWS::IAM::Role Properties: RoleName: !Sub '${PipelineName}-codebuild' AssumeRolePolicyDocument: Version: '2012-10-17' Statement: Effect: Allow Principal: Service: codebuild.amazonaws.com Action: sts:AssumeRole Policies: - PolicyName: !Sub '${PipelineName}-codebuild' PolicyDocument: Version: '2012-10-17' Statement: - Effect: Allow Resource: 'arn:aws:logs:*:*:*' Action: - 'logs:CreateLogGroup' - 'logs:CreateLogStream' - 'logs:PutLogEvents' - Effect: Allow Resource: - !Sub 'arn:aws:s3:::codepipeline-${AWS::Region}-*/*' - !Sub - '${PipelineArtifactStoreArn}/*' - {PipelineArtifactStoreArn: !GetAtt [PipelineArtifactStore, Arn]} Action: - 's3:GetObject' - 's3:GetObjectVersion' - 's3:PutObject' - Effect: Allow Resource: - !Sub - '${S3WebArn}/*' - {S3WebArn: !GetAtt S3WebBucket.Arn} Action: - 's3:*' CloudFormationRole: Type: AWS::IAM::Role Properties: RoleName: !Sub '${PipelineName}-cloudformation' AssumeRolePolicyDocument: Version: '2012-10-17' Statement: - Effect: Allow Principal: Service: cloudformation.amazonaws.com Action: - sts:AssumeRole ManagedPolicyArns: - 'arn:aws:iam::aws:policy/AWSLambdaExecute' Policies: - PolicyName: !Sub '${PipelineName}-cloudformation' PolicyDocument: Version: '2012-10-17' Statement: - Effect: Allow Resource: '*' Action: - 's3:GetObject' - 's3:GetObjectVersion' - 's3:GetBucketVersioning' - Effect: Allow Resource: 'arn:aws:s3:::codepipeline*' Action: - 's3:PutObject' - Effect: Allow Resource: '*' Action: - 'lambda:*' - Effect: Allow Resource: !Sub 'arn:aws:apigateway:${AWS::Region}::*' Action: - 'apigateway:*' - Effect: Allow Resource: '*' Action: - 'lambda:CreateEventSourceMapping' - 'lambda:DeleteEventSourceMapping' - 'lambda:GetEventSourceMapping' - Effect: Allow Resource: '*' Action: - 'iam:GetRole' - 'iam:CreateRole' - 'iam:DeleteRole' - 'iam:PassRole' - 'iam:AttachRolePolicy' - 'iam:DetachRolePolicy' - 'iam:DeleteRolePolicy' - 'iam:PutRolePolicy' - Effect: Allow Resource: '*' Action: - 'iam:PassRole' - Effect: Allow Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31' Action: - 'cloudformation:CreateChangeSet' - Effect: Allow Resource: '*' Action: - 'events:*' PipelineRole: Type: AWS::IAM::Role Properties: RoleName: !Sub '${PipelineName}-pipeline' AssumeRolePolicyDocument: Version: '2012-10-17' Statement: - Action: ['sts:AssumeRole'] Effect: Allow Principal: Service: [codepipeline.amazonaws.com] Path: / Policies: - PolicyName: SkynetPipeline PolicyDocument: Version: '2012-10-17' Statement: - Action: - 's3:GetObject' - 's3:GetObjectVersion' - 's3:GetBucketVersioning' Effect: 'Allow' Resource: '*' - Action: - 's3:PutObject' Effect: 'Allow' Resource: - !GetAtt [PipelineArtifactStore, Arn] - Action: - 'codecommit:CancelUploadArchive' - 'codecommit:GetBranch' - 'codecommit:GetCommit' - 'codecommit:GetUploadArchiveStatus' - 'codecommit:UploadArchive' Effect: 'Allow' Resource: '*' - Action: - 'codedeploy:CreateDeployment' - 'codedeploy:GetApplicationRevision' - 'codedeploy:GetDeployment' - 'codedeploy:GetDeploymentConfig' - 'codedeploy:RegisterApplicationRevision' Effect: 'Allow' Resource: '*' - Action: - 'elasticbeanstalk:*' - 'ec2:*' - 'elasticloadbalancing:*' - 'autoscaling:*' - 'cloudwatch:*' - 's3:*' - 'sns:*' - 'cloudformation:*' - 'rds:*' - 'sqs:*' - 'ecs:*' - 'iam:PassRole' Effect: 'Allow' Resource: '*' - Action: - 'lambda:InvokeFunction' - 'lambda:ListFunctions' Effect: 'Allow' Resource: '*' - Action: - 'opsworks:CreateDeployment' - 'opsworks:DescribeApps' - 'opsworks:DescribeCommands' - 'opsworks:DescribeDeployments' - 'opsworks:DescribeInstances' - 'opsworks:DescribeStacks' - 'opsworks:UpdateApp' - 'opsworks:UpdateStack' Effect: 'Allow' Resource: '*' - Action: - 'cloudformation:CreateStack' - 'cloudformation:DeleteStack' - 'cloudformation:DescribeStacks' - 'cloudformation:UpdateStack' - 'cloudformation:CreateChangeSet' - 'cloudformation:DeleteChangeSet' - 'cloudformation:DescribeChangeSet' - 'cloudformation:ExecuteChangeSet' - 'cloudformation:SetStackPolicy' - 'cloudformation:ValidateTemplate' - 'iam:PassRole' Effect: 'Allow' Resource: '*' - Action: - 'codebuild:BatchGetBuilds' - 'codebuild:StartBuild' Effect: 'Allow' Resource: '*' Outputs: WebsiteUrl: Description: Website URL Value: !GetAtt S3WebBucket.WebsiteURL [1]: https://i.stack.imgur.com/cGE7H.png", "keywords": ["cost", "provider", "policy", "change"]}]}, {"Id": "156589223", "PostHistoryTypeId": "1", "PostId": "46324129", "RevisionGUID": "2ec23952-99e0-4c80-8d6f-02b621f596de", "CreationDate": "2017-09-20T13:59:44.047", "UserId": "292291", "Text": "CodePipeline CloudFormation resource has dependency on exported variable created by a resource", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "156589224", "PostHistoryTypeId": "3", "PostId": "46324129", "RevisionGUID": "2ec23952-99e0-4c80-8d6f-02b621f596de", "CreationDate": "2017-09-20T13:59:44.047", "UserId": "292291", "Text": "|amazon-web-services|aws-cloudformation|aws-codepipeline|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "46432161", "PostTypeId": "2", "ParentId": "46324129", "CreationDate": "2017-09-26T17:06:02.963", "Score": "0", "Body": "<p>Here's two approaches that should work:</p>\n\n<ol>\n<li><p>You could put the Web CodeBuild action after the Server CloudFormation update, and then pass the output from the CloudFormation action as input to CodeBuild. Seeing as CodePipeline only allows one input to the CodeBuild action you may need to put all your build logic inside an overridden buildspec rather than having it inside the artifact.</p></li>\n<li><p>Call the CloudFormation APIs to look up these values as part of the build.</p></li>\n</ol>\n", "OwnerUserId": "7433105", "LastActivityDate": "2017-09-26T17:06:02.963", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "157049535", "PostHistoryTypeId": "2", "PostId": "46432161", "RevisionGUID": "014c18a2-17d9-4a52-a38c-cd0a6685fe7f", "CreationDate": "2017-09-26T17:06:02.963", "UserId": "7433105", "Text": "Here's two approaches that should work:\r\n\r\n1. You could put the Web CodeBuild action after the Server CloudFormation update, and then pass the output from the CloudFormation action as input to CodeBuild. Seeing as CodePipeline only allows one input to the CodeBuild action you may need to put all your build logic inside an overridden buildspec rather than having it inside the artifact.\r\n\r\n2. Call the CloudFormation APIs to look up these values as part of the build.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}