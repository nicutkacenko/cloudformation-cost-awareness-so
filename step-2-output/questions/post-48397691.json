{"Id": "48397691", "PostTypeId": "1", "CreationDate": "2018-01-23T08:59:51.113", "Score": "0", "ViewCount": "444", "Body": "<p>I have a cloudformation template to launch a new instance with security group . When creating stack it ask a parameter, we can only give a type of instance in my template, but I need to choose the AMI architecture (like ubuntu, windows, Linux ). please share your idea or give sample template to achieve the same. \nmy template json is below which is taken from AWS site for reference (Copied from samples)</p>\n\n<pre><code>{\n\"AWSTemplateFormatVersion\": \"2010-09-09\",\n\"Description\": \"AWS CloudFormation Sample Template EC2_Instance_With_Ephemeral_Drives: Example to show how to attach ephemeral drives using EC2 block device mappings. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.\",\n\"Parameters\": {\n    \"KeyName\": {\n        \"Description\": \"Name of an existing EC2 KeyPair to enable SSH access to the web server\",\n        \"Type\": \"AWS::EC2::KeyPair::KeyName\",\n        \"ConstraintDescription\": \"must be the name of an existing EC2 KeyPair.\"\n    },\n    \"InstanceType\": {\n        \"Description\": \"WebServer EC2 instance type\",\n        \"Type\": \"String\",\n        \"Default\": \"t2.small\",\n        \"AllowedValues\": [\n            \"t1.micro\",\n            \"t2.nano\",\n            \"t2.micro\",\n            \"cc2.8xlarge\"\n        ],\n        \"ConstraintDescription\": \"must be a valid EC2 instance type.\"\n    },\n    \"SSHLocation\": {\n        \"Description\": \"Lockdown SSH access to the bastion host (default can be accessed from anywhere)\",\n        \"Type\": \"String\",\n        \"MinLength\": \"9\",\n        \"MaxLength\": \"18\",\n        \"Default\": \"0.0.0.0/0\",\n        \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\",\n        \"ConstraintDescription\": \"must be a valid CIDR range of the form x.x.x.x/x.\"\n    }\n},\n\"Mappings\": {\n    \"AWSInstanceType2Arch\": {\n        \"t1.micro\": {\n            \"Arch\": \"PV64\"\n        },\n        \"t2.nano\": {\n            \"Arch\": \"HVM64\"\n        },\n        \"t2.micro\": {\n            \"Arch\": \"HVM64\"\n        },\n        \"cc2.8xlarge\": {\n            \"Arch\": \"HVM64\"\n        }\n    },\n    \"AWSInstanceType2NATArch\": {\n        \"t1.micro\": {\n            \"Arch\": \"NATPV64\"\n        },\n        \"t2.nano\": {\n            \"Arch\": \"NATHVM64\"\n        },\n        \"t2.micro\": {\n            \"Arch\": \"NATHVM64\"\n        },\n        \"cc2.8xlarge\": {\n            \"Arch\": \"NATHVM64\"\n        }\n    },\n    \"AWSRegionArch2AMI\": {\n        \"us-east-1\": {\n            \"PV64\": \"ami-2a69aa47\",\n            \"HVM64\": \"ami-6869aa05\",\n            \"HVMG2\": \"ami-3353c649\"\n        },\n        \"us-west-2\": {\n            \"PV64\": \"ami-7f77b31f\",\n            \"HVM64\": \"ami-7172b611\",\n            \"HVMG2\": \"ami-58ce1220\"\n        },\n        \"us-west-1\": {\n            \"PV64\": \"ami-a2490dc2\",\n            \"HVM64\": \"ami-31490d51\",\n            \"HVMG2\": \"ami-62ad9502\"\n        },\n        \"eu-west-1\": {\n            \"PV64\": \"ami-4cdd453f\",\n            \"HVM64\": \"ami-f9dd458a\",\n            \"HVMG2\": \"ami-41bc0a38\"\n        },\n        \"eu-west-2\": {\n            \"PV64\": \"NOT_SUPPORTED\",\n            \"HVM64\": \"ami-886369ec\",\n            \"HVMG2\": \"NOT_SUPPORTED\"\n        },\n        \"eu-west-3\": {\n            \"PV64\": \"NOT_SUPPORTED\",\n            \"HVM64\": \"NOT_SUPPORTED\",\n            \"HVMG2\": \"NOT_SUPPORTED\"\n        },\n        \"eu-central-1\": {\n            \"PV64\": \"ami-6527cf0a\",\n            \"HVM64\": \"ami-ea26ce85\",\n            \"HVMG2\": \"ami-b50d8fda\"\n        },\n        \"ap-northeast-1\": {\n            \"PV64\": \"ami-3e42b65f\",\n            \"HVM64\": \"ami-374db956\",\n            \"HVMG2\": \"ami-14e45872\"\n        },\n        \"ap-northeast-2\": {\n            \"PV64\": \"NOT_SUPPORTED\",\n            \"HVM64\": \"ami-2b408b45\",\n            \"HVMG2\": \"NOT_SUPPORTED\"\n        },\n        \"ap-southeast-1\": {\n            \"PV64\": \"ami-df9e4cbc\",\n            \"HVM64\": \"ami-a59b49c6\",\n            \"HVMG2\": \"ami-2a80d649\"\n        },\n        \"ap-southeast-2\": {\n            \"PV64\": \"ami-63351d00\",\n            \"HVM64\": \"ami-dc361ebf\",\n            \"HVMG2\": \"ami-02c42e60\"\n        },\n        \"ap-south-1\": {\n            \"PV64\": \"NOT_SUPPORTED\",\n            \"HVM64\": \"ami-ffbdd790\",\n            \"HVMG2\": \"ami-f6165899\"\n        },\n        \"us-east-2\": {\n            \"PV64\": \"NOT_SUPPORTED\",\n            \"HVM64\": \"ami-f6035893\",\n            \"HVMG2\": \"NOT_SUPPORTED\"\n        },\n        \"ca-central-1\": {\n            \"PV64\": \"NOT_SUPPORTED\",\n            \"HVM64\": \"ami-730ebd17\",\n            \"HVMG2\": \"NOT_SUPPORTED\"\n        },\n        \"sa-east-1\": {\n            \"PV64\": \"ami-1ad34676\",\n            \"HVM64\": \"ami-6dd04501\",\n            \"HVMG2\": \"NOT_SUPPORTED\"\n        },\n        \"cn-north-1\": {\n            \"PV64\": \"ami-77559f1a\",\n            \"HVM64\": \"ami-8e6aa0e3\",\n            \"HVMG2\": \"NOT_SUPPORTED\"\n        },\n        \"cn-northwest-1\": {\n            \"PV64\": \"ami-80707be2\",\n            \"HVM64\": \"ami-cb858fa9\",\n            \"HVMG2\": \"NOT_SUPPORTED\"\n        }\n    }\n},\n\"Resources\": {\n    \"EC2Instance\": {\n        \"Type\": \"AWS::EC2::Instance\",\n        \"Properties\": {\n            \"KeyName\": {\n                \"Ref\": \"KeyName\"\n            },\n            \"InstanceType\": {\n                \"Ref\": \"InstanceType\"\n            },\n            \"ImageId\": {\n                \"Fn::FindInMap\": [\n                    \"AWSRegionArch2AMI\",\n                    {\n                        \"Ref\": \"AWS::Region\"\n                    },\n                    {\n                        \"Fn::FindInMap\": [\n                            \"AWSInstanceType2Arch\",\n                            {\n                                \"Ref\": \"InstanceType\"\n                            },\n                            \"Arch\"\n                        ]\n                    }\n                ]\n            },\n            \"SecurityGroups\": [\n                {\n                    \"Ref\": \"EC2SecurityGroup\"\n                }\n            ],\n            \"BlockDeviceMappings\": [\n                {\n                    \"DeviceName\": \"/dev/sdc\",\n                    \"VirtualName\": \"ephemeral0\"\n                }\n            ]\n        }\n    },\n    \"EC2SecurityGroup\": {\n        \"Type\": \"AWS::EC2::SecurityGroup\",\n        \"Properties\": {\n            \"GroupDescription\": \"SSH access\",\n            \"SecurityGroupIngress\": [\n                {\n                    \"IpProtocol\": \"tcp\",\n                    \"FromPort\": \"22\",\n                    \"ToPort\": \"22\",\n                    \"CidrIp\": {\n                        \"Ref\": \"SSHLocation\"\n                    }\n                }\n            ]\n        }\n    }\n},\n\"Outputs\": {\n    \"Instance\": {\n        \"Value\": {\n            \"Fn::GetAtt\": [\n                \"EC2Instance\",\n                \"PublicDnsName\"\n            ]\n        },\n        \"Description\": \"DNS Name of the newly created EC2 instance\"\n    }\n}\n</code></pre>\n\n<p>}</p>\n", "OwnerUserId": "8842148", "LastActivityDate": "2018-01-26T20:39:30.397", "Title": "Is there any way to show all public AMI using parameter in cloud formation template?", "Tags": "|amazon-web-services|parameters|aws-cloudformation|", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "165253722", "PostHistoryTypeId": "2", "PostId": "48397691", "RevisionGUID": "07cd4122-544b-4748-9ce3-137dd2deb50f", "CreationDate": "2018-01-23T08:59:51.113", "UserId": "8842148", "Text": "I have a cloudformation template to launch a new instance with security group . When creating stack it ask a parameter, we can only give a type of instance in my template, but I need to choose the AMI architecture (like ubuntu, windows, Linux ). please share your idea or give sample template to achieve the same. \r\nmy template json is below which is taken from AWS site for reference (Copied from samples)\r\n\r\n\r\n    {\r\n \"AWSTemplateFormatVersion\": \"2010-09-09\",\r\n \"Description\": \"AWS CloudFormation Sample Template EC2_Instance_With_Ephemeral_Drives: Example to show how to attach ephemeral drives using EC2 block device mappings. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.\",\r\n \"Parameters\": {\r\n  \"KeyName\": {\r\n   \"Description\": \"Name of an existing EC2 KeyPair to enable SSH access to the web server\",\r\n   \"Type\": \"AWS::EC2::KeyPair::KeyName\",\r\n   \"ConstraintDescription\": \"must be the name of an existing EC2 KeyPair.\"\r\n  },\r\n  \"InstanceType\": {\r\n   \"Description\": \"WebServer EC2 instance type\",\r\n   \"Type\": \"String\",\r\n   \"Default\": \"t2.small\",\r\n   \"AllowedValues\": [\r\n    \"t1.micro\",\r\n    \"t2.nano\",\r\n    \"t2.micro\",\r\n    \"cc2.8xlarge\"\r\n   ],\r\n   \"ConstraintDescription\": \"must be a valid EC2 instance type.\"\r\n  },\r\n  \"SSHLocation\": {\r\n   \"Description\": \"Lockdown SSH access to the bastion host (default can be accessed from anywhere)\",\r\n   \"Type\": \"String\",\r\n   \"MinLength\": \"9\",\r\n   \"MaxLength\": \"18\",\r\n   \"Default\": \"0.0.0.0/0\",\r\n   \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\",\r\n   \"ConstraintDescription\": \"must be a valid CIDR range of the form x.x.x.x/x.\"\r\n  }\r\n },\r\n \"Mappings\": {\r\n  \"AWSInstanceType2Arch\": {\r\n   \"t1.micro\": {\r\n    \"Arch\": \"PV64\"\r\n   },\r\n   \"t2.nano\": {\r\n    \"Arch\": \"HVM64\"\r\n   },\r\n   \"t2.micro\": {\r\n    \"Arch\": \"HVM64\"\r\n   },\r\n   \"cc2.8xlarge\": {\r\n    \"Arch\": \"HVM64\"\r\n   }\r\n  },\r\n  \"AWSInstanceType2NATArch\": {\r\n   \"t1.micro\": {\r\n    \"Arch\": \"NATPV64\"\r\n   },\r\n   \"t2.nano\": {\r\n    \"Arch\": \"NATHVM64\"\r\n   },\r\n   \"t2.micro\": {\r\n    \"Arch\": \"NATHVM64\"\r\n   },\r\n   \"cc2.8xlarge\": {\r\n    \"Arch\": \"NATHVM64\"\r\n   }\r\n  },\r\n  \"AWSRegionArch2AMI\": {\r\n   \"us-east-1\": {\r\n    \"PV64\": \"ami-2a69aa47\",\r\n    \"HVM64\": \"ami-6869aa05\",\r\n    \"HVMG2\": \"ami-3353c649\"\r\n   },\r\n   \"us-west-2\": {\r\n    \"PV64\": \"ami-7f77b31f\",\r\n    \"HVM64\": \"ami-7172b611\",\r\n    \"HVMG2\": \"ami-58ce1220\"\r\n   },\r\n   \"us-west-1\": {\r\n    \"PV64\": \"ami-a2490dc2\",\r\n    \"HVM64\": \"ami-31490d51\",\r\n    \"HVMG2\": \"ami-62ad9502\"\r\n   },\r\n   \"eu-west-1\": {\r\n    \"PV64\": \"ami-4cdd453f\",\r\n    \"HVM64\": \"ami-f9dd458a\",\r\n    \"HVMG2\": \"ami-41bc0a38\"\r\n   },\r\n   \"eu-west-2\": {\r\n    \"PV64\": \"NOT_SUPPORTED\",\r\n    \"HVM64\": \"ami-886369ec\",\r\n    \"HVMG2\": \"NOT_SUPPORTED\"\r\n   },\r\n   \"eu-west-3\": {\r\n    \"PV64\": \"NOT_SUPPORTED\",\r\n    \"HVM64\": \"NOT_SUPPORTED\",\r\n    \"HVMG2\": \"NOT_SUPPORTED\"\r\n   },\r\n   \"eu-central-1\": {\r\n    \"PV64\": \"ami-6527cf0a\",\r\n    \"HVM64\": \"ami-ea26ce85\",\r\n    \"HVMG2\": \"ami-b50d8fda\"\r\n   },\r\n   \"ap-northeast-1\": {\r\n    \"PV64\": \"ami-3e42b65f\",\r\n    \"HVM64\": \"ami-374db956\",\r\n    \"HVMG2\": \"ami-14e45872\"\r\n   },\r\n   \"ap-northeast-2\": {\r\n    \"PV64\": \"NOT_SUPPORTED\",\r\n    \"HVM64\": \"ami-2b408b45\",\r\n    \"HVMG2\": \"NOT_SUPPORTED\"\r\n   },\r\n   \"ap-southeast-1\": {\r\n    \"PV64\": \"ami-df9e4cbc\",\r\n    \"HVM64\": \"ami-a59b49c6\",\r\n    \"HVMG2\": \"ami-2a80d649\"\r\n   },\r\n   \"ap-southeast-2\": {\r\n    \"PV64\": \"ami-63351d00\",\r\n    \"HVM64\": \"ami-dc361ebf\",\r\n    \"HVMG2\": \"ami-02c42e60\"\r\n   },\r\n   \"ap-south-1\": {\r\n    \"PV64\": \"NOT_SUPPORTED\",\r\n    \"HVM64\": \"ami-ffbdd790\",\r\n    \"HVMG2\": \"ami-f6165899\"\r\n   },\r\n   \"us-east-2\": {\r\n    \"PV64\": \"NOT_SUPPORTED\",\r\n    \"HVM64\": \"ami-f6035893\",\r\n    \"HVMG2\": \"NOT_SUPPORTED\"\r\n   },\r\n   \"ca-central-1\": {\r\n    \"PV64\": \"NOT_SUPPORTED\",\r\n    \"HVM64\": \"ami-730ebd17\",\r\n    \"HVMG2\": \"NOT_SUPPORTED\"\r\n   },\r\n   \"sa-east-1\": {\r\n    \"PV64\": \"ami-1ad34676\",\r\n    \"HVM64\": \"ami-6dd04501\",\r\n    \"HVMG2\": \"NOT_SUPPORTED\"\r\n   },\r\n   \"cn-north-1\": {\r\n    \"PV64\": \"ami-77559f1a\",\r\n    \"HVM64\": \"ami-8e6aa0e3\",\r\n    \"HVMG2\": \"NOT_SUPPORTED\"\r\n   },\r\n   \"cn-northwest-1\": {\r\n    \"PV64\": \"ami-80707be2\",\r\n    \"HVM64\": \"ami-cb858fa9\",\r\n    \"HVMG2\": \"NOT_SUPPORTED\"\r\n   }\r\n  }\r\n },\r\n \"Resources\": {\r\n  \"EC2Instance\": {\r\n   \"Type\": \"AWS::EC2::Instance\",\r\n   \"Properties\": {\r\n    \"KeyName\": {\r\n     \"Ref\": \"KeyName\"\r\n    },\r\n    \"InstanceType\": {\r\n     \"Ref\": \"InstanceType\"\r\n    },\r\n    \"ImageId\": {\r\n     \"Fn::FindInMap\": [\r\n      \"AWSRegionArch2AMI\",\r\n      {\r\n       \"Ref\": \"AWS::Region\"\r\n      },\r\n      {\r\n       \"Fn::FindInMap\": [\r\n        \"AWSInstanceType2Arch\",\r\n        {\r\n         \"Ref\": \"InstanceType\"\r\n        },\r\n        \"Arch\"\r\n       ]\r\n      }\r\n     ]\r\n    },\r\n    \"SecurityGroups\": [\r\n     {\r\n      \"Ref\": \"EC2SecurityGroup\"\r\n     }\r\n    ],\r\n    \"BlockDeviceMappings\": [\r\n     {\r\n      \"DeviceName\": \"/dev/sdc\",\r\n      \"VirtualName\": \"ephemeral0\"\r\n     }\r\n    ]\r\n   }\r\n  },\r\n  \"EC2SecurityGroup\": {\r\n   \"Type\": \"AWS::EC2::SecurityGroup\",\r\n   \"Properties\": {\r\n    \"GroupDescription\": \"SSH access\",\r\n    \"SecurityGroupIngress\": [\r\n     {\r\n      \"IpProtocol\": \"tcp\",\r\n      \"FromPort\": \"22\",\r\n      \"ToPort\": \"22\",\r\n      \"CidrIp\": {\r\n       \"Ref\": \"SSHLocation\"\r\n      }\r\n     }\r\n    ]\r\n   }\r\n  }\r\n },\r\n \"Outputs\": {\r\n  \"Instance\": {\r\n   \"Value\": {\r\n    \"Fn::GetAtt\": [\r\n     \"EC2Instance\",\r\n     \"PublicDnsName\"\r\n    ]\r\n   },\r\n   \"Description\": \"DNS Name of the newly created EC2 instance\"\r\n  }\r\n }\r\n}", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "I have a cloudformation template to launch a new instance with security group . ", "keywords": ["instance"]}, {"source": "Text", "text": "When creating stack it ask a parameter, we can only give a type of instance in my template, but I need to choose the AMI architecture (like ubuntu, windows, Linux ). ", "keywords": ["instance"]}, {"source": "Text", "text": "This template creates an Amazon EC2 instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "You will be billed for the AWS resources used if you create a stack from this template.\", \"Parameters\": { \"KeyName\": { \"Description\": \"Name of an existing EC2 KeyPair to enable SSH access to the web server\", \"Type\": \"AWS::EC2::KeyPair::KeyName\", \"ConstraintDescription\": \"must be the name of an existing EC2 KeyPair.\" }, \"InstanceType\": { \"Description\": \"WebServer EC2 instance type\", \"Type\": \"String\", \"Default\": \"t2.small\", \"AllowedValues\": [ \"t1.micro\", \"t2.nano\", \"t2.micro\", \"cc2.8xlarge\" ], \"ConstraintDescription\": \"must be a valid EC2 instance type.\" }, \"SSHLocation\": { \"Description\": \"Lockdown SSH access to the bastion host (default can be accessed from anywhere)\", \"Type\": \"String\", \"MinLength\": \"9\", \"MaxLength\": \"18\", \"Default\": \"0.0.0.0/0\", \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\", \"ConstraintDescription\": \"must be a valid CIDR range of the form x.x.x.x/x.\" ", "keywords": ["bill", "instance"]}, {"source": "Text", "text": "}, \"cn-north-1\": { \"PV64\": \"ami-77559f1a\", \"HVM64\": \"ami-8e6aa0e3\", \"HVMG2\": \"NOT_SUPPORTED\" }, \"cn-northwest-1\": { \"PV64\": \"ami-80707be2\", \"HVM64\": \"ami-cb858fa9\", \"HVMG2\": \"NOT_SUPPORTED\" } } }, \"Resources\": { \"EC2Instance\": { \"Type\": \"AWS::EC2::Instance\", \"Properties\": { \"KeyName\": { \"Ref\": \"KeyName\" ", "keywords": ["instance"]}, {"source": "Text", "text": "} } ] } } }, \"Outputs\": { \"Instance\": { \"Value\": { \"Fn::GetAtt\": [ \"EC2Instance\", \"PublicDnsName\" ] }, \"Description\": \"DNS Name of the newly created EC2 instance\" ", "keywords": ["instance"]}]}, {"Id": "165253723", "PostHistoryTypeId": "1", "PostId": "48397691", "RevisionGUID": "07cd4122-544b-4748-9ce3-137dd2deb50f", "CreationDate": "2018-01-23T08:59:51.113", "UserId": "8842148", "Text": "Is there any way to show all public AMI using parameter in cloud formation template?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "165253724", "PostHistoryTypeId": "3", "PostId": "48397691", "RevisionGUID": "07cd4122-544b-4748-9ce3-137dd2deb50f", "CreationDate": "2018-01-23T08:59:51.113", "UserId": "8842148", "Text": "|amazon-web-services|parameters|aws-cloudformation|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "48469199", "PostTypeId": "2", "ParentId": "48397691", "CreationDate": "2018-01-26T20:39:30.397", "Score": "0", "Body": "<p>What you could do is create a parameter that provides a list to pick from. </p>\n\n<p>My below example allows you to pick 3 OS types within a specific region. I hard-coded the AMI identifiers so this may be out of date if AWS changes the AMI ID. The template uses a map to select the proper AMI ID from the value specified in the parameter and the region that the template is ran in. You could easily scale this up for many different regions or OS types.</p>\n\n<pre><code>{\n    \"AWSTemplateFormatVersion\": \"2010-09-09\",\n    \"Parameters\": {\n        \"osType\": {\n            \"Description\": \"OS Type\",\n            \"Type\": \"String\",\n            \"AllowedValues\": [\n                \"Server2016\",\n                \"SUSE\",\n                \"RHEL\"\n            ],\n            \"ConstraintDescription\": \"must be a prod or test\"\n        }\n    },\n    \"Mappings\": {\n        \"RegionAndInstanceTypeToAMIID\": {\n            \"us-east-1\": {\n                \"Server2016\": \"ami-8ff710e2\",\n                \"SUSE\": \"ami-f5f41398\",\n                \"RHEL\": \"ami-26ebbc5c\"\n            },\n            \"us-west-2\": {\n                \"Server2016\": \"ami-8ff710e2\",\n                \"SUSE\": \"ami-f5f41398\",\n                \"RHEL\": \"ami-26ebbc5c\"\n            }\n        }\n    },\n    \"Resources\": {\n        \"testInstance\": {\n            \"Type\": \"AWS::EC2::Instance\",\n            \"Properties\": {\n                \"ImageId\": {\n                    \"Fn::FindInMap\": [\n                        \"RegionAndInstanceTypeToAMIID\",\n                        {\n                            \"Ref\": \"AWS::Region\"\n                        },\n                        {\n                            \"Ref\": \"osType\"\n                        }\n                    ]\n                }\n            }\n        }\n    }\n}\n</code></pre>\n", "OwnerUserId": "9274337", "LastActivityDate": "2018-01-26T20:39:30.397", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "165542997", "PostHistoryTypeId": "2", "PostId": "48469199", "RevisionGUID": "8b853457-a069-4a5a-9c70-8e58392b5248", "CreationDate": "2018-01-26T20:39:30.397", "UserId": "9274337", "Text": "What you could do is create a parameter that provides a list to pick from. \r\n\r\nMy below example allows you to pick 3 OS types within a specific region. I hard-coded the AMI identifiers so this may be out of date if AWS changes the AMI ID. The template uses a map to select the proper AMI ID from the value specified in the parameter and the region that the template is ran in. You could easily scale this up for many different regions or OS types.\r\n\r\n    {\r\n        \"AWSTemplateFormatVersion\": \"2010-09-09\",\r\n        \"Parameters\": {\r\n            \"osType\": {\r\n                \"Description\": \"OS Type\",\r\n                \"Type\": \"String\",\r\n                \"AllowedValues\": [\r\n                    \"Server2016\",\r\n                    \"SUSE\",\r\n                    \"RHEL\"\r\n                ],\r\n                \"ConstraintDescription\": \"must be a prod or test\"\r\n            }\r\n        },\r\n        \"Mappings\": {\r\n            \"RegionAndInstanceTypeToAMIID\": {\r\n                \"us-east-1\": {\r\n                    \"Server2016\": \"ami-8ff710e2\",\r\n                    \"SUSE\": \"ami-f5f41398\",\r\n                    \"RHEL\": \"ami-26ebbc5c\"\r\n                },\r\n                \"us-west-2\": {\r\n                    \"Server2016\": \"ami-8ff710e2\",\r\n                    \"SUSE\": \"ami-f5f41398\",\r\n                    \"RHEL\": \"ami-26ebbc5c\"\r\n                }\r\n            }\r\n        },\r\n        \"Resources\": {\r\n            \"testInstance\": {\r\n                \"Type\": \"AWS::EC2::Instance\",\r\n                \"Properties\": {\r\n                    \"ImageId\": {\r\n                        \"Fn::FindInMap\": [\r\n                            \"RegionAndInstanceTypeToAMIID\",\r\n                            {\r\n                                \"Ref\": \"AWS::Region\"\r\n                            },\r\n                            {\r\n                                \"Ref\": \"osType\"\r\n                            }\r\n                        ]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "I hard-coded the AMI identifiers so this may be out of date if AWS changes the AMI ID. ", "keywords": ["change"]}, {"source": "Text", "text": "{ \"AWSTemplateFormatVersion\": \"2010-09-09\", \"Parameters\": { \"osType\": { \"Description\": \"OS Type\", \"Type\": \"String\", \"AllowedValues\": [ \"Server2016\", \"SUSE\", \"RHEL\" ], \"ConstraintDescription\": \"must be a prod or test\" } }, \"Mappings\": { \"RegionAndInstanceTypeToAMIID\": { \"us-east-1\": { \"Server2016\": \"ami-8ff710e2\", \"SUSE\": \"ami-f5f41398\", \"RHEL\": \"ami-26ebbc5c\" ", "keywords": ["test"]}, {"source": "Text", "text": "} } }, \"Resources\": { \"testInstance\": { \"Type\": \"AWS::EC2::Instance\", \"Properties\": { \"ImageId\": { \"Fn::FindInMap\": [ \"RegionAndInstanceTypeToAMIID\", { \"Ref\": \"AWS::Region\" ", "keywords": ["instance", "test"]}]}], "filtered-sentences": [{"source": "Body", "text": "I hard-coded the AMI identifiers so this may be out of date if AWS changes the AMI ID. ", "keywords": ["change"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I have a cloudformation template to launch a new instance with security group . ", "keywords": ["instance"]}, {"source": "Body", "text": "When creating stack it ask a parameter, we can only give a type of instance in my template, but I need to choose the AMI architecture (like ubuntu, windows, Linux ). ", "keywords": ["instance"]}]}