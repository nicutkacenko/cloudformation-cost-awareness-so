{"Id": "47957820", "PostTypeId": "1", "AcceptedAnswerId": "47962505", "CreationDate": "2017-12-24T03:23:51.383", "Score": "33", "ViewCount": "24309", "Body": "<p>I have created a stack that lambda in VPC using cloud formation. When I try to delete the entire stack, it takes 40-45 minutes of time.</p>\n\n<p>My Iam Role has the following permission:</p>\n\n<pre><code>Action:                            \n          - ec2:DescribeInstances\n          - ec2:CreateNetworkInterface\n          - ec2:AttachNetworkInterface\n          - ec2:DescribeNetworkInterfaces\n          - ec2:DeleteNetworkInterface\n          - ec2:DetachNetworkInterface\n          - ec2:ModifyNetworkInterfaceAttribute\n          - ec2:ResetNetworkInterfaceAttribute\n          - autoscaling:CompleteLifecycleAction\n          - iam:CreateRole\n          - iam:CreatePolicy\n          - iam:AttachRolePolicy\n          - iam:PassRole\n          - lambda:GetFunction\n          - lambda:ListFunctions\n          - lambda:CreateFunction\n          - lambda:DeleteFunction\n          - lambda:InvokeFunction\n          - lambda:GetFunctionConfiguration\n          - lambda:UpdateFunctionConfiguration\n          - lambda:UpdateFunctionCode\n          - lambda:CreateAlias\n          - lambda:UpdateAlias\n          - lambda:GetAlias\n          - lambda:ListAliases\n          - lambda:ListVersionsByFunction\n          - logs:FilterLogEvents\n          - cloudwatch:GetMetricStatistics\n</code></pre>\n\n<p>How to improve the deletion time of the stack?</p>\n", "OwnerUserId": "6025332", "LastEditorUserId": "913182", "LastEditDate": "2017-12-24T05:03:22.613", "LastActivityDate": "2019-02-21T15:48:47.683", "Title": "Lambda in VPC deletion takes more time", "Tags": "|aws-lambda|aws-cloudformation|", "AnswerCount": "1", "CommentCount": "2", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "82885290", "PostId": "47957820", "Score": "1", "Text": "The VPC can't be deleted until the subnets can be deleted, and that can't happen until Lambda terminates all the containers and releases the ENIs it has claimed for them.  Short of deleting those ENIs -- which I assume to be the cause of the hold-up, and which you might try deleting them manually in the console to see if it helps -- I don't know that you can hasten the process... but let's see if anyone has any other thoughts.", "CreationDate": "2017-12-24T04:12:39.823", "UserId": "1695906", "filtered-sentences": []}, {"Id": "82888767", "PostId": "47957820", "Score": "0", "Text": "Hi Michael, The problem is not with deletion of VPC, it is deletion of the lambda deployed in custom VPC.\nThe error i see that is holding is **CloudFormation is waiting for NetworkInterfaces associated with the Lambda Function to be cleaned up.**\nAfter 45 minutes, i see the entire stack is deleted, but just wanted if there are any solutions to wrap it up soon or this delay is expected?", "CreationDate": "2017-12-24T10:28:10.107", "UserId": "6025332", "filtered-sentences": []}], "history": [{"Id": "163408160", "PostHistoryTypeId": "2", "PostId": "47957820", "RevisionGUID": "aa317ec5-ebf5-441a-be46-1960ce60bbde", "CreationDate": "2017-12-24T03:23:51.383", "UserId": "6025332", "Text": "I have created a stack that lambda in VPC using cloud formation, when i try to delete the entire stack, it takes 40-45 minutes of time.\r\n\r\nMy Iam Role has following permission , \r\n\r\nAction:                            \r\n              - ec2:DescribeInstances\r\n              - ec2:CreateNetworkInterface\r\n              - ec2:AttachNetworkInterface\r\n              - ec2:DescribeNetworkInterfaces\r\n              - ec2:DeleteNetworkInterface\r\n              - ec2:DetachNetworkInterface\r\n              - ec2:ModifyNetworkInterfaceAttribute\r\n              - ec2:ResetNetworkInterfaceAttribute\r\n              - autoscaling:CompleteLifecycleAction\r\n              - iam:CreateRole\r\n              - iam:CreatePolicy\r\n              - iam:AttachRolePolicy\r\n              - iam:PassRole\r\n              - lambda:GetFunction\r\n              - lambda:ListFunctions\r\n              - lambda:CreateFunction\r\n              - lambda:DeleteFunction\r\n              - lambda:InvokeFunction\r\n              - lambda:GetFunctionConfiguration\r\n              - lambda:UpdateFunctionConfiguration\r\n              - lambda:UpdateFunctionCode\r\n              - lambda:CreateAlias\r\n              - lambda:UpdateAlias\r\n              - lambda:GetAlias\r\n              - lambda:ListAliases\r\n              - lambda:ListVersionsByFunction\r\n              - logs:FilterLogEvents\r\n              - cloudwatch:GetMetricStatistics\r\n\r\nHow to improve the deletion time of the stack ? ", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "163408161", "PostHistoryTypeId": "1", "PostId": "47957820", "RevisionGUID": "aa317ec5-ebf5-441a-be46-1960ce60bbde", "CreationDate": "2017-12-24T03:23:51.383", "UserId": "6025332", "Text": "Lambda in VPC deletion takes more time", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "163408162", "PostHistoryTypeId": "3", "PostId": "47957820", "RevisionGUID": "aa317ec5-ebf5-441a-be46-1960ce60bbde", "CreationDate": "2017-12-24T03:23:51.383", "UserId": "6025332", "Text": "|aws-lambda|aws-cloudformation|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "163409691", "PostHistoryTypeId": "5", "PostId": "47957820", "RevisionGUID": "71fa09df-f46e-418b-8cff-6ff4eb0dd8c6", "CreationDate": "2017-12-24T05:03:22.613", "UserId": "913182", "Comment": "Formatted code", "Text": "I have created a stack that lambda in VPC using cloud formation. When I try to delete the entire stack, it takes 40-45 minutes of time.\r\n\r\nMy Iam Role has the following permission:\r\n\r\n    Action:                            \r\n              - ec2:DescribeInstances\r\n              - ec2:CreateNetworkInterface\r\n              - ec2:AttachNetworkInterface\r\n              - ec2:DescribeNetworkInterfaces\r\n              - ec2:DeleteNetworkInterface\r\n              - ec2:DetachNetworkInterface\r\n              - ec2:ModifyNetworkInterfaceAttribute\r\n              - ec2:ResetNetworkInterfaceAttribute\r\n              - autoscaling:CompleteLifecycleAction\r\n              - iam:CreateRole\r\n              - iam:CreatePolicy\r\n              - iam:AttachRolePolicy\r\n              - iam:PassRole\r\n              - lambda:GetFunction\r\n              - lambda:ListFunctions\r\n              - lambda:CreateFunction\r\n              - lambda:DeleteFunction\r\n              - lambda:InvokeFunction\r\n              - lambda:GetFunctionConfiguration\r\n              - lambda:UpdateFunctionConfiguration\r\n              - lambda:UpdateFunctionCode\r\n              - lambda:CreateAlias\r\n              - lambda:UpdateAlias\r\n              - lambda:GetAlias\r\n              - lambda:ListAliases\r\n              - lambda:ListVersionsByFunction\r\n              - logs:FilterLogEvents\r\n              - cloudwatch:GetMetricStatistics\r\n\r\nHow to improve the deletion time of the stack?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "163409692", "PostHistoryTypeId": "24", "PostId": "47957820", "RevisionGUID": "71fa09df-f46e-418b-8cff-6ff4eb0dd8c6", "CreationDate": "2017-12-24T05:03:22.613", "Comment": "Proposed by 913182 approved by 8712097, 836330 edit id of 3480819", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "47962505", "PostTypeId": "2", "ParentId": "47957820", "CreationDate": "2017-12-24T17:04:37.157", "Score": "51", "Body": "<p>When a Lambda function executes within your VPC, an Elastic Network Interface (ENI) is created in order to give it network access.  You can think of an ENI as a virtual NIC.  It has a MAC address and at least one private IP address, and is \"plugged into\" any resource that connects to the VPC network and has an IP address inside the VPC (EC2 instances, RDS instances, ELB, ALB, NLB, EFS, etc.).</p>\n\n<p>While it does not appear to be explicitly documented, these interfaces as used by Lambda appear to be mapped 1:1 to container instances, each of which hosts one or more containers, depending on the size of each container's memory allocation.  The algorithm Lambda uses for provisioning these machines is not documented, but there is a documented formula for <em>approximating</em> the number that Lambda will create:</p>\n\n<blockquote>\n  <p>You can use the following formula to approximately determine the ENI requirements.</p>\n  \n  <p><code>Projected peak concurrent executions * (Memory in GB / 3GB)</code></p>\n  \n  <p><a href=\"https://docs.aws.amazon.com/lambda/latest/dg/vpc.htm\" rel=\"noreferrer\">https://docs.aws.amazon.com/lambda/latest/dg/vpc.htm</a></p>\n</blockquote>\n\n<p>This formula suggests that you will see more ENIs if you have either high concurrency or large memory footprints, or fewer ENIs if neither of those conditions is true.  (The reason for 3GB boundary seems to be based on the smallest instance Lambda appears to use, in the background, which is the m3.medium general purpose EC2 instance.  You can't see these among your EC2 instances, and you are not billed for them.)</p>\n\n<p>In any event, Lambda doesn't shut down containers or their host instances immediately after function execution because it might need them for reuse on subsequent invocations, and since containers (and their host instances) are not destroyed right away, neither are their associated ENIs. To do so would be inefficient.  In any event, the delay is documented:</p>\n\n<blockquote>\n  <p>There is a delay between the time your Lambda function executes and ENI deletion. </p>\n  \n  <p><a href=\"http://docs.aws.amazon.com/lambda/latest/dg/vpc.html\" rel=\"noreferrer\">http://docs.aws.amazon.com/lambda/latest/dg/vpc.html</a></p>\n</blockquote>\n\n<p>This makes sense, when we consider that the Lambda infrastructure's priorities should be focused on making resources available as needed and keeping them available for quick access performance reasons -- so tearing things down again is a secondary consideration that the service attends to in the background.</p>\n\n<p>In short, this delay is normal and expected.</p>\n\n<p>Presumably, CloudFormation has used tags to identify these interfaces, since it isn't readily apparent how to otherwise distinguish among them.</p>\n\n<p>ENIs are visible in the EC2 console's left hand navigation pane under <code>Network Interfaces</code>, so it's possible that you could delete these yourself and hasten the process...  but note that this action, assuming the system allows it, needs to be undertaken with due caution -- because if you delete an ENI that is attached to a container instance that Lambda subsequently tries to use, Lambda will not know that the interface is missing and the function will time out or throw an error at least until Lambda decides to destroy the attached container instance.</p>\n", "OwnerUserId": "1695906", "LastEditorUserId": "1695906", "LastEditDate": "2019-02-21T15:48:47.683", "LastActivityDate": "2019-02-21T15:48:47.683", "CommentCount": "7", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "82918260", "PostId": "47962505", "Score": "0", "Text": "Thanks for the update Michael, since this delay is expected can't do anything here. However, the deletion of ENI - is it ok to delete it manually and let it create when the cloud formation stack is run again? Will it create NEW ENI that time?", "CreationDate": "2017-12-26T06:03:37.530", "UserId": "6025332", "filtered-sentences": []}, {"Id": "84175487", "PostId": "47962505", "Score": "0", "Text": "Thank you, this answer is extremely helpful.", "CreationDate": "2018-02-02T18:58:44.510", "UserId": "1354026", "filtered-sentences": []}, {"Id": "86848863", "PostId": "47962505", "Score": "2", "Text": "Detaching and deleting the interface manually was the only way to make my deployment proceed.", "CreationDate": "2018-04-19T08:55:08.770", "UserId": "523100", "filtered-sentences": []}, {"Id": "86854447", "PostId": "47962505", "Score": "1", "Text": "@Czechnology how long did you wait before trying that?", "CreationDate": "2018-04-19T11:07:58.087", "UserId": "1695906", "filtered-sentences": []}, {"Id": "86854820", "PostId": "47962505", "Score": "0", "Text": "Don't have an exact time, maybe ten minutes, anyway considerably longer than any of the other tasks during the cloudwatch deployment.", "CreationDate": "2018-04-19T11:16:52.533", "UserId": "523100", "filtered-sentences": []}, {"Id": "86855242", "PostId": "47962505", "Score": "1", "Text": "Oh, I would expect it to take longer than that.  Lambda doesn't release these interfaces until it cleans up the unneeded containers, and it doesn't do that for some period of time (the intervals aren't documented).  It *should* be okay to delete these manually if you're sure they are associated with something that's being deleted... just use caution, since deleting an interface out from under a container housing a function that is in use will cause subsequent invocations to fail for an undetermined period of time.", "CreationDate": "2018-04-19T11:27:13.603", "UserId": "1695906", "filtered-sentences": []}, {"Id": "100477560", "PostId": "47962505", "Score": "0", "Text": "@Michael-sqlbot I think that \"an undetermined period of time\" is as long as the lambda container remains active. So I think when running in a production environment can be very long. What I tend to do is change the memory for the lambda function slightly, so the running containers are restarted. Right?", "CreationDate": "2019-07-10T12:16:46.187", "UserId": "1068370", "filtered-sentences": [{"source": "Text", "text": "What I tend to do is change the memory for the lambda function slightly, so the running containers are restarted. ", "keywords": ["change"]}]}], "history": [{"Id": "163427849", "PostHistoryTypeId": "2", "PostId": "47962505", "RevisionGUID": "c291daee-8f77-470c-befe-7f5d1a9bf7a2", "CreationDate": "2017-12-24T17:04:37.157", "UserId": "1695906", "Text": "When a Lambda function executes within your VPC, an Elastic Network Interface (ENI) is created in order to give it network access.  You can think of an ENI as a virtual NIC.  It has a MAC address and at least one private IP address, and is \"plugged into\" any resource that connects to the VPC network and has an IP address inside the VPC (EC2 instances, RDS instances, ELB, ALB, NLB, EFS, etc.).\r\n\r\nWhile it does not appear to be explicitly documented, these interfaces as used by Lambda appear to be mapped 1:1 to containers (speculation).  Lambda doesn't shut down containers immediately after function execution because it might need them for reuse on subsequent invocations (not speculation), and since containers are not destroyed right away, neither are their associated ENIs (speculation).  In any event, the delay is documented:\r\n\r\n>There is a delay between the time your Lambda function executes and ENI deletion. \r\n\r\n>http://docs.aws.amazon.com/lambda/latest/dg/vpc.html\r\n\r\nThis makes sense, when we consider that the Lambda infrastructure's priorities should be focused on making resources available as needed and keeping them available for quick access performance reasons -- so tearing things down again is a secondary consideration that the service attends to in the background.\r\n\r\nIn short, this delay is normal and expected.\r\n\r\nPresumably, CloudFormation has used tags to identify these interfaces, since it isn't readily apparent how to otherwise distinguish among them.\r\n\r\nENIs are visible in the EC2 console's left hand navigation pane under `Network Interfaces`, so it's possible that you could delete these yourself and hasten the process...  but note that this action, assuming the system allows it, needs to be undertaken with due caution -- because if you delete an ENI that is attached to a container that Lambda subsequently tries to use, Lambda will not know that the interface is missing and the function will time out or throw an error at least until Lambda decides to destroy the container.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "192137795", "PostHistoryTypeId": "5", "PostId": "47962505", "RevisionGUID": "96ee0531-27f0-41cc-9ab4-df46b1ef3d45", "CreationDate": "2019-02-21T15:48:47.683", "UserId": "1695906", "Comment": "update to reflect more info implicit from documentation", "Text": "When a Lambda function executes within your VPC, an Elastic Network Interface (ENI) is created in order to give it network access.  You can think of an ENI as a virtual NIC.  It has a MAC address and at least one private IP address, and is \"plugged into\" any resource that connects to the VPC network and has an IP address inside the VPC (EC2 instances, RDS instances, ELB, ALB, NLB, EFS, etc.).\r\n\r\nWhile it does not appear to be explicitly documented, these interfaces as used by Lambda appear to be mapped 1:1 to container instances, each of which hosts one or more containers, depending on the size of each container's memory allocation.  The algorithm Lambda uses for provisioning these machines is not documented, but there is a documented formula for *approximating* the number that Lambda will create:\r\n\r\n>You can use the following formula to approximately determine the ENI requirements.\r\n\r\n>`Projected peak concurrent executions * (Memory in GB / 3GB)`\r\n\r\n>https://docs.aws.amazon.com/lambda/latest/dg/vpc.htm\r\n\r\nThis formula suggests that you will see more ENIs if you have either high concurrency or large memory footprints, or fewer ENIs if neither of those conditions is true.  (The reason for 3GB boundary seems to be based on the smallest instance Lambda appears to use, in the background, which is the m3.medium general purpose EC2 instance.  You can't see these among your EC2 instances, and you are not billed for them.)\r\n\r\nIn any event, Lambda doesn't shut down containers or their host instances immediately after function execution because it might need them for reuse on subsequent invocations, and since containers (and their host instances) are not destroyed right away, neither are their associated ENIs. To do so would be inefficient.  In any event, the delay is documented:\r\n\r\n>There is a delay between the time your Lambda function executes and ENI deletion. \r\n\r\n>http://docs.aws.amazon.com/lambda/latest/dg/vpc.html\r\n\r\nThis makes sense, when we consider that the Lambda infrastructure's priorities should be focused on making resources available as needed and keeping them available for quick access performance reasons -- so tearing things down again is a secondary consideration that the service attends to in the background.\r\n\r\nIn short, this delay is normal and expected.\r\n\r\nPresumably, CloudFormation has used tags to identify these interfaces, since it isn't readily apparent how to otherwise distinguish among them.\r\n\r\nENIs are visible in the EC2 console's left hand navigation pane under `Network Interfaces`, so it's possible that you could delete these yourself and hasten the process...  but note that this action, assuming the system allows it, needs to be undertaken with due caution -- because if you delete an ENI that is attached to a container instance that Lambda subsequently tries to use, Lambda will not know that the interface is missing and the function will time out or throw an error at least until Lambda decides to destroy the attached container instance.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "(The reason for 3GB boundary seems to be based on the smallest instance Lambda appears to use, in the background, which is the m3.medium general purpose EC2 instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "You can't see these among your EC2 instances, and you are not billed for them.) ", "keywords": ["bill"]}, {"source": "Text", "text": "ENIs are visible in the EC2 console's left hand navigation pane under `Network Interfaces`, so it's possible that you could delete these yourself and hasten the process... but note that this action, assuming the system allows it, needs to be undertaken with due caution -- because if you delete an ENI that is attached to a container instance that Lambda subsequently tries to use, Lambda will not know that the interface is missing and the function will time out or throw an error at least until Lambda decides to destroy the attached container instance.", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "(The reason for 3GB boundary seems to be based on the smallest instance Lambda appears to use, in the background, which is the m3.medium general purpose EC2 instance. ", "keywords": ["instance"]}, {"source": "Body", "text": "You can't see these among your EC2 instances, and you are not billed for them.) ", "keywords": ["bill"]}, {"source": "Body", "text": "ENIs are visible in the EC2 console's left hand navigation pane under Network Interfaces, so it's possible that you could delete these yourself and hasten the process... but note that this action, assuming the system allows it, needs to be undertaken with due caution -- because if you delete an ENI that is attached to a container instance that Lambda subsequently tries to use, Lambda will not know that the interface is missing and the function will time out or throw an error at least until Lambda decides to destroy the attached container instance.", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": []}