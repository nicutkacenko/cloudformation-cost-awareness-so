{"Id": "33676847", "PostTypeId": "1", "CreationDate": "2015-11-12T16:47:50.393", "Score": "12", "ViewCount": "14565", "Body": "<p>I need all of my instances in AWS auto scaling group to be configured with (known) static IP's. I will be whitelisting all of these IPs in a mail server later (that's why need all of them to be static). Is it possible using the regular cloudformation approach? May be assigning a second NIC and assigning it an IP from a static IP range? Any ideas?</p>\n", "OwnerUserId": "4951038", "LastActivityDate": "2020-05-20T21:27:05.207", "Title": "Static IP for Auto Scale in AWS", "Tags": "|amazon-web-services|chef-infra|aws-cloudformation|", "AnswerCount": "5", "CommentCount": "2", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "55163305", "PostId": "33676847", "Score": "0", "Text": "Side approach: use Chef search feature to find your nodes with a specific role and build your mail server whitelist from IP attribute of the found nodes.", "CreationDate": "2015-11-13T15:15:37.387", "UserId": "3627607", "filtered-sentences": [{"source": "Text", "text": "Side approach: use Chef search feature to find your nodes with a specific role and build your mail server whitelist from IP attribute of the found nodes.", "keywords": ["feature"]}]}, {"Id": "55166450", "PostId": "33676847", "Score": "0", "Text": "are you interested in the public IPs or the private IPs?  This is more easily achieved with the private ones, but using AWS Config Rules, you could pretty easily do it with the public ones as well.", "CreationDate": "2015-11-13T16:30:23.173", "UserId": "4070979", "filtered-sentences": []}], "history": [{"Id": "103982302", "PostHistoryTypeId": "2", "PostId": "33676847", "RevisionGUID": "54668bf4-4291-48e5-9fee-02e4e501a6f1", "CreationDate": "2015-11-12T16:47:50.393", "UserId": "4951038", "Text": "I need all of my instances in AWS auto scaling group to be configured with (known) static IP's. I will be whitelisting all of these IPs in a mail server later (that's why need all of them to be static). Is it possible using the regular cloudformation approach? May be assigning a second NIC and assigning it an IP from a static IP range? Any ideas?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "103982303", "PostHistoryTypeId": "1", "PostId": "33676847", "RevisionGUID": "54668bf4-4291-48e5-9fee-02e4e501a6f1", "CreationDate": "2015-11-12T16:47:50.393", "UserId": "4951038", "Text": "Static IP for Auto Scale in AWS", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "103982304", "PostHistoryTypeId": "3", "PostId": "33676847", "RevisionGUID": "54668bf4-4291-48e5-9fee-02e4e501a6f1", "CreationDate": "2015-11-12T16:47:50.393", "UserId": "4951038", "Text": "|amazon-web-services|chef-infra|aws-cloudformation|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "33677300", "PostTypeId": "2", "ParentId": "33676847", "CreationDate": "2015-11-12T17:11:56.147", "Score": "1", "Body": "<p>It sounds like what you're looking for is an Elastic IP</p>\n\n<blockquote>\n  <p>An Elastic IP address is a static IP address designed for dynamic cloud computing. With an Elastic IP address, you can mask the failure of an instance or software by rapidly remapping the address to another instance in your account. Your Elastic IP address is associated with your AWS account, not a particular instance, and it remains associated with your account until you choose to release it explicitly.</p>\n</blockquote>\n\n<p><a href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html\" rel=\"nofollow\">http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html</a></p>\n", "OwnerUserId": "1477412", "LastActivityDate": "2015-11-12T17:11:56.147", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "103984113", "PostHistoryTypeId": "2", "PostId": "33677300", "RevisionGUID": "d9e59fe1-121b-4311-8547-b69c55d377e4", "CreationDate": "2015-11-12T17:11:56.147", "UserId": "1477412", "Text": "It sounds like what you're looking for is an Elastic IP\r\n\r\n> An Elastic IP address is a static IP address designed for dynamic cloud computing. With an Elastic IP address, you can mask the failure of an instance or software by rapidly remapping the address to another instance in your account. Your Elastic IP address is associated with your AWS account, not a particular instance, and it remains associated with your account until you choose to release it explicitly.\r\n\r\nhttp://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "With an Elastic IP address, you can mask the failure of an instance or software by rapidly remapping the address to another instance in your account. ", "keywords": ["instance"]}, {"source": "Text", "text": "Your Elastic IP address is associated with your AWS account, not a particular instance, and it remains associated with your account until you choose to release it explicitly. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "With an Elastic IP address, you can mask the failure of an instance or software by rapidly remapping the address to another instance in your account. ", "keywords": ["instance"]}, {"source": "Body", "text": "Your Elastic IP address is associated with your AWS account, not a particular instance, and it remains associated with your account until you choose to release it explicitly. ", "keywords": ["instance"]}]}, {"Id": "50532526", "PostTypeId": "2", "ParentId": "33676847", "CreationDate": "2018-05-25T15:26:51.327", "Score": "0", "Body": "<p>the @Saboo solution it's valid. You need to map the public ip when launch \n the subnet.</p>\n\n<p>Here is the script in Terraform, for this:</p>\n\n<p>Attaching an EIP to an Instance with a pre-assigned private IP (VPC Only):</p>\n\n<pre><code>resource \"aws_vpc\" \"default\" {\n  cidr_block           = \"10.0.0.0/16\"\n  enable_dns_hostnames = true\n}\n\nresource \"aws_internet_gateway\" \"gw\" {\n  vpc_id = \"${aws_vpc.default.id}\"\n}\n\nresource \"aws_subnet\" \"tf_test_subnet\" {\n  vpc_id                  = \"${aws_vpc.default.id}\"\n  cidr_block              = \"10.0.0.0/24\"\n  map_public_ip_on_launch = true\n\n  depends_on = [\"aws_internet_gateway.gw\"]\n}\n\nresource \"aws_instance\" \"foo\" {\n  # us-west-2\n  ami           = \"ami-5189a661\"\n  instance_type = \"t2.micro\"\n\n  private_ip = \"10.0.0.12\"\n  subnet_id  = \"${aws_subnet.tf_test_subnet.id}\"\n}\n\nresource \"aws_eip\" \"bar\" {\n  vpc = true\n\n  instance                  = \"${aws_instance.foo.id}\"\n  associate_with_private_ip = \"10.0.0.12\"\n  depends_on                = [\"aws_internet_gateway.gw\"]\n}\n</code></pre>\n", "OwnerUserId": "5521600", "LastActivityDate": "2018-05-25T15:26:51.327", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "174210250", "PostHistoryTypeId": "2", "PostId": "50532526", "RevisionGUID": "766107be-40b5-4afe-a667-c7600815c5d1", "CreationDate": "2018-05-25T15:26:51.327", "UserId": "5521600", "Text": "the @Saboo solution it's valid. You need to map the public ip when launch \r\n the subnet.\r\n\r\nHere is the script in Terraform, for this:\r\n\r\nAttaching an EIP to an Instance with a pre-assigned private IP (VPC Only):\r\n\r\n    resource \"aws_vpc\" \"default\" {\r\n      cidr_block           = \"10.0.0.0/16\"\r\n      enable_dns_hostnames = true\r\n    }\r\n    \r\n    resource \"aws_internet_gateway\" \"gw\" {\r\n      vpc_id = \"${aws_vpc.default.id}\"\r\n    }\r\n    \r\n    resource \"aws_subnet\" \"tf_test_subnet\" {\r\n      vpc_id                  = \"${aws_vpc.default.id}\"\r\n      cidr_block              = \"10.0.0.0/24\"\r\n      map_public_ip_on_launch = true\r\n    \r\n      depends_on = [\"aws_internet_gateway.gw\"]\r\n    }\r\n    \r\n    resource \"aws_instance\" \"foo\" {\r\n      # us-west-2\r\n      ami           = \"ami-5189a661\"\r\n      instance_type = \"t2.micro\"\r\n    \r\n      private_ip = \"10.0.0.12\"\r\n      subnet_id  = \"${aws_subnet.tf_test_subnet.id}\"\r\n    }\r\n    \r\n    resource \"aws_eip\" \"bar\" {\r\n      vpc = true\r\n    \r\n      instance                  = \"${aws_instance.foo.id}\"\r\n      associate_with_private_ip = \"10.0.0.12\"\r\n      depends_on                = [\"aws_internet_gateway.gw\"]\r\n    }", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Here is the script in Terraform, for this: Attaching an EIP to an Instance with a pre-assigned private IP (VPC Only): resource \"aws_vpc\" \"default\" { cidr_block = \"10.0.0.0/16\" enable_dns_hostnames = true } resource \"aws_internet_gateway\" \"gw\" { vpc_id = \"${aws_vpc.default.id}\" } resource \"aws_subnet\" \"tf_test_subnet\" { vpc_id = \"${aws_vpc.default.id}\" cidr_block = \"10.0.0.0/24\" map_public_ip_on_launch = true depends_on = [\"aws_internet_gateway.gw\"] } resource \"aws_instance\" \"foo\" { # us-west-2 ami = \"ami-5189a661\" instance_type = \"t2.micro\" private_ip = \"10.0.0.12\" subnet_id = \"${aws_subnet.tf_test_subnet.id}\" } resource \"aws_eip\" \"bar\" { vpc = true instance = \"${aws_instance.foo.id}\" associate_with_private_ip = \"10.0.0.12\" depends_on = [\"aws_internet_gateway.gw\"] ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "Here is the script in Terraform, for this: Attaching an EIP to an Instance with a pre-assigned private IP (VPC Only):", "keywords": ["instance"]}]}, {"Id": "33678292", "PostTypeId": "2", "ParentId": "33676847", "CreationDate": "2015-11-12T18:06:00.543", "Score": "1", "Body": "<p>We achieved this by assigning the static IPs using the cloud formation and the IP's were picked up from the VPC subnet.</p>\n", "OwnerUserId": "4951038", "LastActivityDate": "2015-11-12T18:06:00.543", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "103988020", "PostHistoryTypeId": "2", "PostId": "33678292", "RevisionGUID": "90cd5134-77a5-45f1-bde8-cc21136b99d7", "CreationDate": "2015-11-12T18:06:00.543", "UserId": "4951038", "Text": "We achieved this by assigning the static IPs using the cloud formation and the IP's were picked up from the VPC subnet.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "55810778", "PostTypeId": "2", "ParentId": "33676847", "CreationDate": "2019-04-23T12:00:44.783", "Score": "3", "Body": "<p>A workaround is making your instances use a NAT gateway to connect to the mail server. You'll have to put them in a subnet where requests for the email server get routed to the NATGW.</p>\n\n<p>You will just have to whitelist the elastic IP of the NATGW. </p>\n\n<p>Check the cost first though: NAT gateways have a fixed cost of about $2/day + small cost per GB of traffic. </p>\n", "OwnerUserId": "3498910", "LastActivityDate": "2019-04-23T12:00:44.783", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "196350853", "PostHistoryTypeId": "2", "PostId": "55810778", "RevisionGUID": "ae143818-dce9-4d98-863b-0d038888838c", "CreationDate": "2019-04-23T12:00:44.783", "UserId": "3498910", "Text": "A workaround is making your instances use a NAT gateway to connect to the mail server. You'll have to put them in a subnet where requests for the email server get routed to the NATGW.\r\n\r\nYou will just have to whitelist the elastic IP of the NATGW. \r\n\r\nCheck the cost first though: NAT gateways have a fixed cost of about $2/day + small cost per GB of traffic. ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "A workaround is making your instances use a NAT gateway to connect to the mail server. ", "keywords": ["nat"]}, {"source": "Text", "text": "Check the cost first though: NAT gateways have a fixed cost of about $2/day + small cost per GB of traffic.", "keywords": ["cost", "nat"]}]}], "filtered-sentences": [{"source": "Body", "text": "A workaround is making your instances use a NAT gateway to connect to the mail server. ", "keywords": ["nat"]}, {"source": "Body", "text": "Check the cost first though: NAT gateways have a fixed cost of about $2/day + small cost per GB of traffic.", "keywords": ["cost", "nat"]}]}, {"Id": "33678178", "PostTypeId": "2", "ParentId": "33676847", "CreationDate": "2015-11-12T17:59:18.497", "Score": "9", "Body": "<p>Unfortunately, you can't gain access to any custom IP range for your autoscaling group.</p>\n\n<p>You could get the IP range for the region you are working in, and whitelist all IPs from that region, but this wouldn't blacklist an instance from another AWS account. You can get these ranges <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html\" rel=\"noreferrer\">here</a>.</p>\n\n<p>You can configure static IPs in AWS - They're called Elastic IPs. An Elastic IP address will persist with an instance between a stop/start. Elastic IPs are also \"elastic\" in that they can be detached from one network interface or instance and attached to another.</p>\n\n<p>Unfortunately, there is no way to make autoscaling automatically assign an Elastic IP address to newly launched instances. You'd need to write a script that runs when a new instance is launched. You could run this script using EC2 user data. </p>\n\n<p>You could then use the CLI or an SDK. The script would need allocate a new Elastic IP address to your account, and then associate that Elastic IP with the instance.</p>\n\n<p>Alternatively, you could use Lambda to run a script to do the same thing, but in response to an autoscaling event.</p>\n\n<p>Other problems you might have:</p>\n\n<ol>\n<li>By default, you can only have 5 Elastic IPs in your account per region. You'll need to submit a limit increase to get more - and this could end up being an ongoing problem.</li>\n<li>What happens when an instance is terminated in the ASG? That Elastic IP will become disassociated - you get charged for disassociated Elastic IPs. You could always write a Lambda function that runs in response to an autosclaing events that releases any disassociated Elastic IPs - but thats even more overhead.</li>\n</ol>\n\n<p>Unfortunately, there is no nice solution to this problem. The easiest method would be to whitelist all Amazon IPs for that region, but you will still have potential security issues.</p>\n\n<p><strong>EDIT:</strong>\nYou could also just create a proxy instance. You could configure all the instances in your ASG to direct traffic through the proxy instance. Then you could give the proxy instance an Elastic IP and allow it in your firewalls.</p>\n\n<p>The only potential problem is your proxy server getting overloaded. You'd need to make sure the instance type you used for it could handle the max number of instances allowed in your ASG at full capacity.</p>\n", "OwnerUserId": "2620746", "LastEditorUserId": "2620746", "LastEditDate": "2015-11-12T19:27:15.903", "LastActivityDate": "2015-11-12T19:27:15.903", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "103987591", "PostHistoryTypeId": "2", "PostId": "33678178", "RevisionGUID": "d68591c6-4c6d-4337-ad10-0f9d510128db", "CreationDate": "2015-11-12T17:59:18.497", "UserId": "2620746", "Text": "Unfortunately, you can't gain access to any custom IP range for your autoscaling group.\r\n\r\nYou could get the IP range for the region you are working in, and whitelist all IPs from that region, but this wouldn't blacklist an instance from another AWS account. You can get these ranges [here][1].\r\n\r\nYou can configure static IPs in AWS - They're called Elastic IPs. An Elastic IP address will persist with an instance between a stop/start. Elastic IPs are also \"elastic\" in that they can be detached from one network interface or instance and attached to another.\r\n\r\nUnfortunately, there is no way to make autoscaling automatically assign an Elastic IP address to newly launched instances. You'd need to write a script that runs when a new instance is launched. You could run this script using EC2 user data. \r\n\r\nYou could then use the CLI or an SDK. The script would need allocate a new Elastic IP address to your account, and then associate that Elastic IP with the instance.\r\n\r\nAlternatively, you could use Lambda to run a script to do the same thing, but in response to an autoscaling event.\r\n\r\nOther problems you might have:\r\n\r\n 1. By default, you can only have 5 Elastic IPs in your account per region. You'll need to submit a limit increase to get more - and this could end up being an ongoing problem.\r\n 2. What happens when an instance is terminated in the ASG? That Elastic IP will become disassociated - you get charged for disassociated Elastic IPs. You could always write a Lambda function that runs in response to an autosclaing events that releases any disassociated Elastic IPs - but thats even more overhead.\r\n\r\n\r\nUnfortunately, there is no nice solution to this problem. The easiest method would be to whitelist all Amazon IPs for that region, but you will still have potential security issues.\r\n\r\n  [1]: http://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You could get the IP range for the region you are working in, and whitelist all IPs from that region, but this wouldn't blacklist an instance from another AWS account. ", "keywords": ["instance"]}, {"source": "Text", "text": "An Elastic IP address will persist with an instance between a stop/start. ", "keywords": ["instance"]}, {"source": "Text", "text": "Elastic IPs are also \"elastic\" in that they can be detached from one network interface or instance and attached to another. ", "keywords": ["instance"]}, {"source": "Text", "text": "You'd need to write a script that runs when a new instance is launched. ", "keywords": ["instance"]}, {"source": "Text", "text": "The script would need allocate a new Elastic IP address to your account, and then associate that Elastic IP with the instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "What happens when an instance is terminated in the ASG? ", "keywords": ["instance"]}]}, {"Id": "103993617", "PostHistoryTypeId": "5", "PostId": "33678178", "RevisionGUID": "a1eee88e-3722-447c-9597-aadede762736", "CreationDate": "2015-11-12T19:27:15.903", "UserId": "2620746", "Comment": "added 448 characters in body", "Text": "Unfortunately, you can't gain access to any custom IP range for your autoscaling group.\r\n\r\nYou could get the IP range for the region you are working in, and whitelist all IPs from that region, but this wouldn't blacklist an instance from another AWS account. You can get these ranges [here][1].\r\n\r\nYou can configure static IPs in AWS - They're called Elastic IPs. An Elastic IP address will persist with an instance between a stop/start. Elastic IPs are also \"elastic\" in that they can be detached from one network interface or instance and attached to another.\r\n\r\nUnfortunately, there is no way to make autoscaling automatically assign an Elastic IP address to newly launched instances. You'd need to write a script that runs when a new instance is launched. You could run this script using EC2 user data. \r\n\r\nYou could then use the CLI or an SDK. The script would need allocate a new Elastic IP address to your account, and then associate that Elastic IP with the instance.\r\n\r\nAlternatively, you could use Lambda to run a script to do the same thing, but in response to an autoscaling event.\r\n\r\nOther problems you might have:\r\n\r\n 1. By default, you can only have 5 Elastic IPs in your account per region. You'll need to submit a limit increase to get more - and this could end up being an ongoing problem.\r\n 2. What happens when an instance is terminated in the ASG? That Elastic IP will become disassociated - you get charged for disassociated Elastic IPs. You could always write a Lambda function that runs in response to an autosclaing events that releases any disassociated Elastic IPs - but thats even more overhead.\r\n\r\n\r\nUnfortunately, there is no nice solution to this problem. The easiest method would be to whitelist all Amazon IPs for that region, but you will still have potential security issues.\r\n\r\n  [1]: http://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html\r\n\r\n**EDIT:**\r\nYou could also just create a proxy instance. You could configure all the instances in your ASG to direct traffic through the proxy instance. Then you could give the proxy instance an Elastic IP and allow it in your firewalls.\r\n\r\nThe only potential problem is your proxy server getting overloaded. You'd need to make sure the instance type you used for it could handle the max number of instances allowed in your ASG at full capacity.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You could get the IP range for the region you are working in, and whitelist all IPs from that region, but this wouldn't blacklist an instance from another AWS account. ", "keywords": ["instance"]}, {"source": "Text", "text": "An Elastic IP address will persist with an instance between a stop/start. ", "keywords": ["instance"]}, {"source": "Text", "text": "Elastic IPs are also \"elastic\" in that they can be detached from one network interface or instance and attached to another. ", "keywords": ["instance"]}, {"source": "Text", "text": "You'd need to write a script that runs when a new instance is launched. ", "keywords": ["instance"]}, {"source": "Text", "text": "The script would need allocate a new Elastic IP address to your account, and then associate that Elastic IP with the instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "What happens when an instance is terminated in the ASG? ", "keywords": ["instance"]}, {"source": "Text", "text": "You could also just create a proxy instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "You could configure all the instances in your ASG to direct traffic through the proxy instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "Then you could give the proxy instance an Elastic IP and allow it in your firewalls. ", "keywords": ["instance"]}, {"source": "Text", "text": "You'd need to make sure the instance type you used for it could handle the max number of instances allowed in your ASG at full capacity.", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "You could get the IP range for the region you are working in, and whitelist all IPs from that region, but this wouldn't blacklist an instance from another AWS account. ", "keywords": ["instance"]}, {"source": "Body", "text": "An Elastic IP address will persist with an instance between a stop/start. ", "keywords": ["instance"]}, {"source": "Body", "text": "Elastic IPs are also \"elastic\" in that they can be detached from one network interface or instance and attached to another. ", "keywords": ["instance"]}, {"source": "Body", "text": "You'd need to write a script that runs when a new instance is launched. ", "keywords": ["instance"]}, {"source": "Body", "text": "The script would need allocate a new Elastic IP address to your account, and then associate that Elastic IP with the instance. ", "keywords": ["instance"]}, {"source": "Body", "text": "What happens when an instance is terminated in the ASG? ", "keywords": ["instance"]}, {"source": "Body", "text": "You could also just create a proxy instance. ", "keywords": ["instance"]}, {"source": "Body", "text": "You could configure all the instances in your ASG to direct traffic through the proxy instance. ", "keywords": ["instance"]}, {"source": "Body", "text": "Then you could give the proxy instance an Elastic IP and allow it in your firewalls. ", "keywords": ["instance"]}, {"source": "Body", "text": "You'd need to make sure the instance type you used for it could handle the max number of instances allowed in your ASG at full capacity.", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": []}