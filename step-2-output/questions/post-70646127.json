{"Id": "70646127", "PostTypeId": "1", "CreationDate": "2022-01-09T22:40:06.503", "Score": "3", "ViewCount": "1230", "Body": "<p>I have a project that I'm able to run locally, but it fails on AWS. To run the project locally I do <code>sam build</code> and then <code>sam local start-api --host 0.0.0.0</code>. Then I call <code>http://localhost:3000/skill2/task1</code> and get the hello world response back. When I call the api gateway <code>https://p4x0n2nemc.execute-api.us-east-2.amazonaws.com/Prod/skill2/task1</code> it fails. The error I see in cloudwatch is</p>\n<pre><code>Class not found: helloworld.App: java.lang.ClassNotFoundException\njava.lang.ClassNotFoundException: helloworld.App. Current classpath: file:/var/task/\n</code></pre>\n<p>I created the helloworld app with this command and copied it into my AWS Lambda Application.</p>\n<pre><code>sam init --name java11-demo-app --runtime java11 --dependency-manager gradle --app-template hello-world\n</code></pre>\n<p>Here is the Github repo for the AWS Lambda Application with the Java resource</p>\n<p><a href=\"https://github.com/bennebbenneb/sample-app\" rel=\"nofollow noreferrer\">https://github.com/bennebbenneb/sample-app</a></p>\n<p>How can I update this AWS Lambda Application so that it creates Java resources in addition to the NodeJS resources? I'm not trying to manually zip up the Java project and upload it. I want the Java code to be built as part of the pipeline.</p>\n<p>Local build output <code>sam build</code></p>\n<p><a href=\"https://i.stack.imgur.com/Vtm9D.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/Vtm9D.png\" alt=\"enter image description here\" /></a></p>\n<p>Java Lambda working on localhost</p>\n<p><a href=\"https://i.stack.imgur.com/uOr8O.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/uOr8O.png\" alt=\"enter image description here\" /></a></p>\n<p>AWS Lambda Applications can be created from the AWS Console. These are CloudFormation projects.\n<a href=\"https://us-east-2.console.aws.amazon.com/lambda/home?region=us-east-2#/create/application\" rel=\"nofollow noreferrer\">https://us-east-2.console.aws.amazon.com/lambda/home?region=us-east-2#/create/application</a></p>\n<p>Error when adding <code>sam build</code> to buildspec.yml\n<a href=\"https://i.stack.imgur.com/2pivg.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/2pivg.png\" alt=\"enter image description here\" /></a></p>\n<p>Error after removing <code>Architectures</code> config\n<a href=\"https://i.stack.imgur.com/C4p5k.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/C4p5k.png\" alt=\"enter image description here\" /></a></p>\n<p>Resources created by the AWS Lambda Application\n<a href=\"https://i.stack.imgur.com/sSwI5.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/sSwI5.png\" alt=\"enter image description here\" /></a></p>\n", "OwnerUserId": "157541", "LastEditorUserId": "157541", "LastEditDate": "2022-01-13T20:41:02.543", "LastActivityDate": "2022-01-18T22:35:36.943", "Title": "AWS Lambda Application with Java resource", "Tags": "|java|amazon-web-services|aws-lambda|aws-cloudformation|aws-sam|", "AnswerCount": "2", "CommentCount": "4", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "124989072", "PostId": "70646127", "Score": "0", "Text": "Are you trying to run both java and node js together?", "CreationDate": "2022-01-13T19:22:42.563", "UserId": "3002336", "filtered-sentences": []}, {"Id": "124989342", "PostId": "70646127", "Score": "0", "Text": "@AnandVarkeyPhilips I'm trying to have the project build one lambda that is NodeJS and another separate lambda that is Java. This is working on my localhost", "CreationDate": "2022-01-13T19:34:30.617", "UserId": "157541", "filtered-sentences": []}, {"Id": "125041697", "PostId": "70646127", "Score": "0", "Text": "#1 Did you solve your problem? #2 Are you trying to execute java code inside a nodejs lambda on aws? #3 Why not implement it with pure nodejs or pure java?", "CreationDate": "2022-01-16T15:54:25.960", "UserId": "3957754", "filtered-sentences": []}, {"Id": "125046406", "PostId": "70646127", "Score": "0", "Text": "@JRichardsz #1 I understand the problem better now, but it's not solved. I plan to accept the answer below before the bounty expires if there isn't a simpler solution to this. #2 I am trying to create 2 separate lambdas from the project. One lambda being Java and the other being NodeJS. #3 Each lambda is written in only one language. Also there isn't an option to select a Docker image with Java preinstalled, only NodeJS. I'm hoping that AWS allows us to customize the build image in the future to make this simpler", "CreationDate": "2022-01-16T21:11:53.060", "UserId": "157541", "filtered-sentences": []}], "history": [{"Id": "261606923", "PostHistoryTypeId": "5", "PostId": "70646127", "RevisionGUID": "c7f8f291-a3ef-49b5-bf78-cf6acbff1902", "CreationDate": "2022-01-09T23:46:32.580", "UserId": "157541", "Comment": "added 125 characters in body", "Text": "I have a project that I'm able to run locally, but it fails on AWS. To run the project locally I do `sam build` and then `sam local start-api --host 0.0.0.0`. Then I call `http://localhost:3000/skill2/task1` and get the hello world response back. When I call the api gateway `https://p4x0n2nemc.execute-api.us-east-2.amazonaws.com/Prod/skill2/task1` it fails. The error I see in cloudwatch is \r\n```\r\nClass not found: helloworld.App: java.lang.ClassNotFoundException\r\njava.lang.ClassNotFoundException: helloworld.App. Current classpath: file:/var/task/\r\n```\r\n\r\nI created the helloworld app with this command and copied it into my AWS Lambda Application.\r\n\r\n```\r\nsam init --name java11-demo-app --runtime java11 --dependency-manager gradle --app-template hello-world\r\n```\r\n\r\nHere is the Github repo for the AWS Lambda Application with the Java resource\r\n\r\nhttps://github.com/bennebbenneb/sample-app\r\n\r\nLocal build output `sam build`\r\n\r\n[![enter image description here][1]][1]\r\n\r\nJava Lambda working on localhost\r\n\r\n[![enter image description here][2]][2]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/Vtm9D.png\r\n  [2]: https://i.stack.imgur.com/uOr8O.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "261605113", "PostHistoryTypeId": "2", "PostId": "70646127", "RevisionGUID": "4a3ab7cc-d1ba-435e-a03f-6bef9b08001f", "CreationDate": "2022-01-09T22:40:06.503", "UserId": "157541", "Text": "I have a project that I'm able to run locally, but it fails on AWS. To run the project locally I do `sam build` and then `sam local start-api --host 0.0.0.0`. Then I call `http://localhost:3000/skill2/task1` and get the hello world response back. When I call the api gateway `https://p4x0n2nemc.execute-api.us-east-2.amazonaws.com/Prod/skill2/task1` it fails. The error I see in cloudwatch is \r\n```\r\nClass not found: helloworld.App: java.lang.ClassNotFoundException\r\njava.lang.ClassNotFoundException: helloworld.App. Current classpath: file:/var/task/\r\n```\r\n\r\nI created the helloworld app with this command and copied it into my AWS Lambda Application.\r\n\r\n```\r\nsam init --name java11-demo-app --runtime java11 --dependency-manager gradle --app-template hello-world\r\n```\r\n\r\nHere the Github repo for the AWS Lambda Application with the Java resource\r\n\r\nhttps://github.com/bennebbenneb/sample-app\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "261605115", "PostHistoryTypeId": "1", "PostId": "70646127", "RevisionGUID": "4a3ab7cc-d1ba-435e-a03f-6bef9b08001f", "CreationDate": "2022-01-09T22:40:06.503", "UserId": "157541", "Text": "AWS Lambda Application with Java resource", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "261605116", "PostHistoryTypeId": "3", "PostId": "70646127", "RevisionGUID": "4a3ab7cc-d1ba-435e-a03f-6bef9b08001f", "CreationDate": "2022-01-09T22:40:06.503", "UserId": "157541", "Text": "|java|amazon-web-services|aws-lambda|aws-cloudformation|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "261605349", "PostHistoryTypeId": "5", "PostId": "70646127", "RevisionGUID": "873bb816-5224-4d49-a81e-e3080ebaa7ed", "CreationDate": "2022-01-09T22:46:39.727", "UserId": "157541", "Comment": "added 3 characters in body", "Text": "I have a project that I'm able to run locally, but it fails on AWS. To run the project locally I do `sam build` and then `sam local start-api --host 0.0.0.0`. Then I call `http://localhost:3000/skill2/task1` and get the hello world response back. When I call the api gateway `https://p4x0n2nemc.execute-api.us-east-2.amazonaws.com/Prod/skill2/task1` it fails. The error I see in cloudwatch is \r\n```\r\nClass not found: helloworld.App: java.lang.ClassNotFoundException\r\njava.lang.ClassNotFoundException: helloworld.App. Current classpath: file:/var/task/\r\n```\r\n\r\nI created the helloworld app with this command and copied it into my AWS Lambda Application.\r\n\r\n```\r\nsam init --name java11-demo-app --runtime java11 --dependency-manager gradle --app-template hello-world\r\n```\r\n\r\nHere is the Github repo for the AWS Lambda Application with the Java resource\r\n\r\nhttps://github.com/bennebbenneb/sample-app\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "261606507", "PostHistoryTypeId": "5", "PostId": "70646127", "RevisionGUID": "a5be98ee-272e-4c05-ae04-122a268bc659", "CreationDate": "2022-01-09T23:27:49.540", "UserId": "157541", "Comment": "added 121 characters in body", "Text": "I have a project that I'm able to run locally, but it fails on AWS. To run the project locally I do `sam build` and then `sam local start-api --host 0.0.0.0`. Then I call `http://localhost:3000/skill2/task1` and get the hello world response back. When I call the api gateway `https://p4x0n2nemc.execute-api.us-east-2.amazonaws.com/Prod/skill2/task1` it fails. The error I see in cloudwatch is \r\n```\r\nClass not found: helloworld.App: java.lang.ClassNotFoundException\r\njava.lang.ClassNotFoundException: helloworld.App. Current classpath: file:/var/task/\r\n```\r\n\r\nI created the helloworld app with this command and copied it into my AWS Lambda Application.\r\n\r\n```\r\nsam init --name java11-demo-app --runtime java11 --dependency-manager gradle --app-template hello-world\r\n```\r\n\r\nHere is the Github repo for the AWS Lambda Application with the Java resource\r\n\r\nhttps://github.com/bennebbenneb/sample-app\r\n\r\nLocal build output `sam build`\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/Vtm9D.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "261851612", "PostHistoryTypeId": "5", "PostId": "70646127", "RevisionGUID": "51dc8571-4cfe-49b8-8eed-a0a0ceed6774", "CreationDate": "2022-01-13T08:23:29.677", "UserId": "157541", "Comment": "added 25 characters in body", "Text": "I have a project that I'm able to run locally, but it fails on AWS. To run the project locally I do `sam build` and then `sam local start-api --host 0.0.0.0`. Then I call `http://localhost:3000/skill2/task1` and get the hello world response back. When I call the api gateway `https://p4x0n2nemc.execute-api.us-east-2.amazonaws.com/Prod/skill2/task1` it fails. The error I see in cloudwatch is \r\n```\r\nClass not found: helloworld.App: java.lang.ClassNotFoundException\r\njava.lang.ClassNotFoundException: helloworld.App. Current classpath: file:/var/task/\r\n```\r\n\r\nI created the helloworld app with this command and copied it into my AWS Lambda Application.\r\n\r\n```\r\nsam init --name java11-demo-app --runtime java11 --dependency-manager gradle --app-template hello-world\r\n```\r\n\r\nHere is the Github repo for the AWS Lambda Application with the Java resource\r\n\r\nhttps://github.com/bennebbenneb/sample-app\r\n\r\nHow can I update this AWS Lambda Application so that it creates Java resources in addition to the NodeJS resources? I'm not trying to manually zip up the Java project and upload it. I want the Java code to be built as part of the pipeline.\r\n\r\nLocal build output `sam build`\r\n\r\n[![enter image description here][1]][1]\r\n\r\nJava Lambda working on localhost\r\n\r\n[![enter image description here][2]][2]\r\n\r\nAWS Lambda Applications can be created from the AWS Console. These are CloudFormation projects.\r\nhttps://us-east-2.console.aws.amazon.com/lambda/home?region=us-east-2#/create/application\r\n\r\n  [1]: https://i.stack.imgur.com/Vtm9D.png\r\n  [2]: https://i.stack.imgur.com/uOr8O.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "261845171", "PostHistoryTypeId": "5", "PostId": "70646127", "RevisionGUID": "f5e47a26-9389-48f9-85d5-6582cd1bcf8d", "CreationDate": "2022-01-13T06:06:13.920", "UserId": "157541", "Comment": "added 245 characters in body", "Text": "\r\nI have a project that I'm able to run locally, but it fails on AWS. To run the project locally I do `sam build` and then `sam local start-api --host 0.0.0.0`. Then I call `http://localhost:3000/skill2/task1` and get the hello world response back. When I call the api gateway `https://p4x0n2nemc.execute-api.us-east-2.amazonaws.com/Prod/skill2/task1` it fails. The error I see in cloudwatch is \r\n```\r\nClass not found: helloworld.App: java.lang.ClassNotFoundException\r\njava.lang.ClassNotFoundException: helloworld.App. Current classpath: file:/var/task/\r\n```\r\n\r\nI created the helloworld app with this command and copied it into my AWS Lambda Application.\r\n\r\n```\r\nsam init --name java11-demo-app --runtime java11 --dependency-manager gradle --app-template hello-world\r\n```\r\n\r\nHere is the Github repo for the AWS Lambda Application with the Java resource\r\n\r\nhttps://github.com/bennebbenneb/sample-app\r\n\r\nHow can I update this AWS Lambda Application so that it creates Java resources in addition to the NodeJS resources? I'm not trying to manually zip up the Java project and upload it. I want the Java code to be built as part of the pipeline.\r\n\r\nLocal build output `sam build`\r\n\r\n[![enter image description here][1]][1]\r\n\r\nJava Lambda working on localhost\r\n\r\n[![enter image description here][2]][2]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/Vtm9D.png\r\n  [2]: https://i.stack.imgur.com/uOr8O.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "261845261", "PostHistoryTypeId": "33", "PostId": "70646127", "RevisionGUID": "2b89c8fe-d30d-49f4-adb0-45de2fefb9e5", "CreationDate": "2022-01-13T06:08:21.117", "UserId": "157541", "Comment": "259801", "filtered-sentences": []}, {"Id": "261845416", "PostHistoryTypeId": "5", "PostId": "70646127", "RevisionGUID": "fac2d952-f9d6-4ad7-917d-50f695272dda", "CreationDate": "2022-01-13T06:13:41.583", "UserId": "157541", "Comment": "added 161 characters in body", "Text": "I have a project that I'm able to run locally, but it fails on AWS. To run the project locally I do `sam build` and then `sam local start-api --host 0.0.0.0`. Then I call `http://localhost:3000/skill2/task1` and get the hello world response back. When I call the api gateway `https://p4x0n2nemc.execute-api.us-east-2.amazonaws.com/Prod/skill2/task1` it fails. The error I see in cloudwatch is \r\n```\r\nClass not found: helloworld.App: java.lang.ClassNotFoundException\r\njava.lang.ClassNotFoundException: helloworld.App. Current classpath: file:/var/task/\r\n```\r\n\r\nI created the helloworld app with this command and copied it into my AWS Lambda Application.\r\n\r\n```\r\nsam init --name java11-demo-app --runtime java11 --dependency-manager gradle --app-template hello-world\r\n```\r\n\r\nHere is the Github repo for the AWS Lambda Application with the Java resource\r\n\r\nhttps://github.com/bennebbenneb/sample-app\r\n\r\nHow can I update this AWS Lambda Application so that it creates Java resources in addition to the NodeJS resources? I'm not trying to manually zip up the Java project and upload it. I want the Java code to be built as part of the pipeline.\r\n\r\nLocal build output `sam build`\r\n\r\n[![enter image description here][1]][1]\r\n\r\nJava Lambda working on localhost\r\n\r\n[![enter image description here][2]][2]\r\n\r\nCreate AWS Lambda from AWS Console. These are CloudFormation projects.\r\nhttps://us-east-2.console.aws.amazon.com/lambda/home?region=us-east-2#/create/application\r\n\r\n  [1]: https://i.stack.imgur.com/Vtm9D.png\r\n  [2]: https://i.stack.imgur.com/uOr8O.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "261845611", "PostHistoryTypeId": "6", "PostId": "70646127", "RevisionGUID": "3d79e252-2008-4209-a684-a660245c7e24", "CreationDate": "2022-01-13T06:18:44.500", "UserId": "157541", "Comment": "added 161 characters in body", "Text": "|java|amazon-web-services|aws-lambda|aws-cloudformation|aws-sam|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "261898169", "PostHistoryTypeId": "5", "PostId": "70646127", "RevisionGUID": "7354ca85-da1e-49f9-be8c-35177b2c026e", "CreationDate": "2022-01-13T20:00:01.810", "UserId": "157541", "Comment": "added 223 characters in body", "Text": "I have a project that I'm able to run locally, but it fails on AWS. To run the project locally I do `sam build` and then `sam local start-api --host 0.0.0.0`. Then I call `http://localhost:3000/skill2/task1` and get the hello world response back. When I call the api gateway `https://p4x0n2nemc.execute-api.us-east-2.amazonaws.com/Prod/skill2/task1` it fails. The error I see in cloudwatch is \r\n```\r\nClass not found: helloworld.App: java.lang.ClassNotFoundException\r\njava.lang.ClassNotFoundException: helloworld.App. Current classpath: file:/var/task/\r\n```\r\n\r\nI created the helloworld app with this command and copied it into my AWS Lambda Application.\r\n\r\n```\r\nsam init --name java11-demo-app --runtime java11 --dependency-manager gradle --app-template hello-world\r\n```\r\n\r\nHere is the Github repo for the AWS Lambda Application with the Java resource\r\n\r\nhttps://github.com/bennebbenneb/sample-app\r\n\r\nHow can I update this AWS Lambda Application so that it creates Java resources in addition to the NodeJS resources? I'm not trying to manually zip up the Java project and upload it. I want the Java code to be built as part of the pipeline.\r\n\r\nLocal build output `sam build`\r\n\r\n[![enter image description here][1]][1]\r\n\r\nJava Lambda working on localhost\r\n\r\n[![enter image description here][2]][2]\r\n\r\nAWS Lambda Applications can be created from the AWS Console. These are CloudFormation projects.\r\nhttps://us-east-2.console.aws.amazon.com/lambda/home?region=us-east-2#/create/application\r\n\r\nError when adding `sam build` to buildspec.yml\r\n[![enter image description here][3]][3]\r\n\r\nError after removing `Architectures` config\r\n[![enter image description here][4]][4]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/Vtm9D.png\r\n  [2]: https://i.stack.imgur.com/uOr8O.png\r\n  [3]: https://i.stack.imgur.com/2pivg.png\r\n  [4]: https://i.stack.imgur.com/C4p5k.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "261900262", "PostHistoryTypeId": "5", "PostId": "70646127", "RevisionGUID": "3c49f87e-89fb-404e-afd3-b597e485251c", "CreationDate": "2022-01-13T20:41:02.543", "UserId": "157541", "Comment": "added 136 characters in body", "Text": "I have a project that I'm able to run locally, but it fails on AWS. To run the project locally I do `sam build` and then `sam local start-api --host 0.0.0.0`. Then I call `http://localhost:3000/skill2/task1` and get the hello world response back. When I call the api gateway `https://p4x0n2nemc.execute-api.us-east-2.amazonaws.com/Prod/skill2/task1` it fails. The error I see in cloudwatch is \r\n```\r\nClass not found: helloworld.App: java.lang.ClassNotFoundException\r\njava.lang.ClassNotFoundException: helloworld.App. Current classpath: file:/var/task/\r\n```\r\n\r\nI created the helloworld app with this command and copied it into my AWS Lambda Application.\r\n\r\n```\r\nsam init --name java11-demo-app --runtime java11 --dependency-manager gradle --app-template hello-world\r\n```\r\n\r\nHere is the Github repo for the AWS Lambda Application with the Java resource\r\n\r\nhttps://github.com/bennebbenneb/sample-app\r\n\r\nHow can I update this AWS Lambda Application so that it creates Java resources in addition to the NodeJS resources? I'm not trying to manually zip up the Java project and upload it. I want the Java code to be built as part of the pipeline.\r\n\r\nLocal build output `sam build`\r\n\r\n[![enter image description here][1]][1]\r\n\r\nJava Lambda working on localhost\r\n\r\n[![enter image description here][2]][2]\r\n\r\nAWS Lambda Applications can be created from the AWS Console. These are CloudFormation projects.\r\nhttps://us-east-2.console.aws.amazon.com/lambda/home?region=us-east-2#/create/application\r\n\r\nError when adding `sam build` to buildspec.yml\r\n[![enter image description here][3]][3]\r\n\r\nError after removing `Architectures` config\r\n[![enter image description here][4]][4]\r\n\r\nResources created by the AWS Lambda Application\r\n[![enter image description here][5]][5]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/Vtm9D.png\r\n  [2]: https://i.stack.imgur.com/uOr8O.png\r\n  [3]: https://i.stack.imgur.com/2pivg.png\r\n  [4]: https://i.stack.imgur.com/C4p5k.png\r\n  [5]: https://i.stack.imgur.com/sSwI5.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "262377262", "PostHistoryTypeId": "34", "PostId": "70646127", "RevisionGUID": "8ac18058-e97f-4351-8bdd-0b9bbe17b522", "CreationDate": "2022-01-20T16:41:52.703", "UserId": "157541", "Comment": "259801", "filtered-sentences": []}], "answers": [{"Id": "70763217", "PostTypeId": "2", "ParentId": "70646127", "CreationDate": "2022-01-18T22:35:36.943", "Score": "0", "Body": "<p>There are Docker images for Java and NodeJS. I would suggest to use Docker Images as the base for your lambdas.</p>\n<blockquote>\n<p><strong>For Java</strong></p>\n</blockquote>\n<p>Example Dockerfile below:</p>\n<pre><code>FROM public.ecr.aws/lambda/java:11\n\n# Copy function code and runtime dependencies from Gradle layout\nCOPY build/classes/java/main ${LAMBDA_TASK_ROOT}\nCOPY build/dependency/* ${LAMBDA_TASK_ROOT}/lib/\n\n# Set the CMD to your handler (could also be done as a parameter override outside of the Dockerfile)\nCMD [ &quot;com.example.LambdaHandler::handleRequest&quot; ]\n</code></pre>\n<p>Example Gradle task definition to prepare the runtime dependencies:</p>\n<pre><code>task copyRuntimeDependencies(type: Copy) {\n    from configurations.runtimeClasspath\n    into 'build/dependency'\n}\n</code></pre>\n<blockquote>\n<p><strong>For NodeJS</strong></p>\n</blockquote>\n<p>Example Dockerfile below:</p>\n<pre><code>FROM public.ecr.aws/lambda/nodejs:12\n\n# Copy function code\nCOPY app.js ${LAMBDA_TASK_ROOT}\n\n# Set the CMD to your handler (could also be done as a parameter override outside of the Dockerfile)\nCMD [ &quot;app.handler&quot; ]\n</code></pre>\n<blockquote>\n<p><strong>To test both the images locally</strong></p>\n</blockquote>\n<p><strong>To build your image:</strong></p>\n<pre><code>docker build -t &lt;image name&gt; .\n</code></pre>\n<p><strong>To run your image locally:</strong></p>\n<pre><code>docker run -p 9000:8080 &lt;image name&gt;\n</code></pre>\n<p><strong>In a separate terminal, you can then locally invoke the function using cURL:</strong></p>\n<pre><code>curl -XPOST &quot;http://localhost:9000/2015-03-31/functions/function/invocations&quot; -d '{&quot;payload&quot;:&quot;hello world!&quot;}'\n</code></pre>\n<p><code>Reference:</code></p>\n<ul>\n<li><a href=\"https://gallery.ecr.aws/lambda/nodejs\" rel=\"nofollow noreferrer\">https://gallery.ecr.aws/lambda/nodejs</a></li>\n<li><a href=\"https://gallery.ecr.aws/lambda/java\" rel=\"nofollow noreferrer\">https://gallery.ecr.aws/lambda/java</a></li>\n</ul>\n<p>You can also try to create multi layer lambda. Not sure if it works.</p>\n", "OwnerUserId": "9870346", "LastActivityDate": "2022-01-18T22:35:36.943", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "125099250", "PostId": "70763217", "Score": "0", "Text": "My project is an `AWS Lambda Application` which is built on CloudFormation, but doesn't give me the ability to customize the image for AWS CodeBuild. What I want to do is customize the AWS CodeBuild image so it has both NodeJS and Java installed. Then it can build the NodeJS lambda in addition to the Java lambda. The project I have works locally, but fails to build on the AWS CodeBuild instance because Java is not installed. The other answer goes into installing Java on the build machine, but what I really want is for Java to be there already.", "CreationDate": "2022-01-18T23:34:40.397", "UserId": "157541", "filtered-sentences": [{"source": "Text", "text": "The project I have works locally, but fails to build on the AWS CodeBuild instance because Java is not installed. ", "keywords": ["instance"]}]}], "history": [{"Id": "262238169", "PostHistoryTypeId": "2", "PostId": "70763217", "RevisionGUID": "7694acaa-d76c-4307-936e-a31413b9ec82", "CreationDate": "2022-01-18T22:35:36.943", "UserId": "9870346", "Text": "There are Docker images for Java and NodeJS. I would suggest to use Docker Images as the base for your lambdas. \r\n\r\n> **For Java**\r\n\r\nExample Dockerfile below:\r\n\r\n    FROM public.ecr.aws/lambda/java:11\r\n    \r\n    # Copy function code and runtime dependencies from Gradle layout\r\n    COPY build/classes/java/main ${LAMBDA_TASK_ROOT}\r\n    COPY build/dependency/* ${LAMBDA_TASK_ROOT}/lib/\r\n    \r\n    # Set the CMD to your handler (could also be done as a parameter override outside of the Dockerfile)\r\n    CMD [ \"com.example.LambdaHandler::handleRequest\" ]\r\n\r\nExample Gradle task definition to prepare the runtime dependencies:\r\n\r\n    task copyRuntimeDependencies(type: Copy) {\r\n        from configurations.runtimeClasspath\r\n        into 'build/dependency'\r\n    }\r\n\r\n> **For NodeJS**\r\n\r\nExample Dockerfile below:\r\n\r\n    FROM public.ecr.aws/lambda/nodejs:12\r\n    \r\n    # Copy function code\r\n    COPY app.js ${LAMBDA_TASK_ROOT}\r\n    \r\n    # Set the CMD to your handler (could also be done as a parameter override outside of the Dockerfile)\r\n    CMD [ \"app.handler\" ]\r\n\r\n> **To test both the images locally**\r\n\r\n**To build your image:**\r\n\r\n    docker build -t <image name> .\r\n\r\n**To run your image locally:**\r\n\r\n    docker run -p 9000:8080 <image name>\r\n\r\n**In a separate terminal, you can then locally invoke the function using cURL:**\r\n\r\n    curl -XPOST \"http://localhost:9000/2015-03-31/functions/function/invocations\" -d '{\"payload\":\"hello world!\"}'\r\n\r\n`Reference:` \r\n\r\n - https://gallery.ecr.aws/lambda/nodejs\r\n - https://gallery.ecr.aws/lambda/java\r\n\r\nYou can also try to create multi layer lambda. Not sure if it works. \r\n\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "> **For Java** Example Dockerfile below: FROM public.ecr.aws/lambda/java:11 # Copy function code and runtime dependencies from Gradle layout COPY build/classes/java/main ${LAMBDA_TASK_ROOT} COPY build/dependency/* ${LAMBDA_TASK_ROOT}/lib/ # Set the CMD to your handler (could also be done as a parameter override outside of the Dockerfile) CMD [ \"com.example.LambdaHandler::handleRequest\" ] Example Gradle task definition to prepare the runtime dependencies: task copyRuntimeDependencies(type: Copy) { from configurations.runtimeClasspath into 'build/dependency' } > **For NodeJS** Example Dockerfile below: FROM public.ecr.aws/lambda/nodejs:12 # Copy function code COPY app.js ${LAMBDA_TASK_ROOT} # Set the CMD to your handler (could also be done as a parameter override outside of the Dockerfile) CMD [ \"app.handler\" ] > **To test both the images locally** **To build your image:** docker build -t . **To run your image locally:** docker run -p 9000:8080 **In a separate terminal, you can then locally invoke the function using cURL:** curl -XPOST \"http://localhost:9000/2015-03-31/functions/function/invocations\" -d '{\"payload\":\"hello world!\"}' `Reference:` - https://gallery.ecr.aws/lambda/nodejs - https://gallery.ecr.aws/lambda/java You can also try to create multi layer lambda", "keywords": ["test"]}]}], "filtered-sentences": [{"source": "Body", "text": "For Java Example Dockerfile below: Example Gradle task definition to prepare the runtime dependencies: For NodeJS Example Dockerfile below: To test both the images locally To build your image: To run your image locally: In a separate terminal, you can then locally invoke the function using cURL: Reference: https://gallery.ecr.aws/lambda/nodejs https://gallery.ecr.aws/lambda/java You can also try to create multi layer lambda. ", "keywords": ["test"]}]}, {"Id": "70702313", "PostTypeId": "2", "ParentId": "70646127", "CreationDate": "2022-01-13T19:50:29.487", "Score": "1", "Body": "<p>buildspec.yml if you want to deploy using AWS CodeBuild (would be an unusual flow):</p>\n<pre class=\"lang-yaml prettyprint-override\"><code>---\nversion: '0.2'\nphases:\n  install:\n    commands:\n    - echo Entered the install phase...\n    - npm install --global lerna\n    - lerna bootstrap --concurrency=1 -- --production\n  build:\n    commands:\n    - sam build\n    - sam deploy --stack-name stackoverflow-stack --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset\n      --s3-bucket your-bucket-name-here --parameter-overrides AppId=your-app-id-here\n</code></pre>\n<p>buildspec.yml if you only want to produce a CloudFormation template file which you can directly deploy (using CodeDeploy or other means). It is almost the same as what you already have, with the following difference:</p>\n<ul>\n<li>Adds <code>sam build</code></li>\n<li>Uses <code>sam package</code> instead of <code>aws cloudformation package</code>. <code>sam package</code> uses <code>.aws-sam/template.yaml</code> (output of sam build) instead of <code>template.yaml</code> as the first default.</li>\n</ul>\n<pre class=\"lang-yaml prettyprint-override\"><code>---\nversion: '0.2'\nphases:\n  install:\n    commands:\n    - echo Entered the install phase...\n    - npm install --global lerna\n    - lerna bootstrap --concurrency=1 -- --production\n  build:\n    commands:\n    - sam build\n    - sam package --s3-bucket your-bucket-name-here --output-template-file\n      template-export.yml\nartifacts:\n  files:\n  - template-export.yml\n</code></pre>\n<p>Edit2: OP's build project was created by Lambda applications. The build project uses <code>aws/lambda/nodejs:10-1.0</code> which has two issues:</p>\n<ul>\n<li>The SAM CLI version is outdated</li>\n<li>Java isn't installed because the image is meant to be used for nodejs based Lambda functions. Java is required to build the Java based AWS Lambda function</li>\n</ul>\n<p>The following buildspec.yaml can be used to fix both these issues:</p>\n<pre class=\"lang-yaml prettyprint-override\"><code>---\nversion: '0.2'\nphases:\n  install:\n    commands:\n    - echo Entered the install phase...\n    - npm install --global lerna\n    - lerna bootstrap --concurrency=1 -- --production\n    - yum install -y amazon-linux-extras which\n    - amazon-linux-extras install java-openjdk11\n    - pip install aws-sam-cli --upgrade\n  build:\n    commands:\n    - sam build\n    - sam package --s3-bucket cf-templates-fgoi5xu7d2hs-us-east-1 --output-template-file\n      template-export.yml\nartifacts:\n  files:\n  - template-export.yml\n</code></pre>\n", "OwnerUserId": "17896613", "LastEditorUserId": "17896613", "LastEditDate": "2022-01-15T10:36:58.130", "LastActivityDate": "2022-01-15T10:36:58.130", "CommentCount": "13", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "124989794", "PostId": "70702313", "Score": "1", "Text": "Hey Kaustubh, I've tried adding `sam build` to the build phase of the `buildspec.yml` file before and first it said that `Architectures` is not a valid config value. I tried delete that and then it said `nodejs14.x` is not a valid `Runtime` config value. I didn't try going any further than that. Was I on the right track? I updated my question to with the error message at the bottom", "CreationDate": "2022-01-13T19:55:59.110", "UserId": "157541", "filtered-sentences": []}, {"Id": "124989946", "PostId": "70702313", "Score": "1", "Text": "Yes, both the errors indicate that the sam cli version was old, since both are features released in 2021. I was actually able to run both the above buildspec.yaml and deploy your resources in my account, the only change I made was commenting out the permission boundary since it is account specific.", "CreationDate": "2022-01-13T20:04:18.760", "UserId": "17896613", "filtered-sentences": [{"source": "Text", "text": "yaml and deploy your resources in my account, the only change I made was commenting out the permission boundary since it is account specific.", "keywords": ["change"]}]}, {"Id": "124990015", "PostId": "70702313", "Score": "1", "Text": "For reference, I was using the image `aws/codebuild/standard:5.0` for codebuild", "CreationDate": "2022-01-13T20:08:34.743", "UserId": "17896613", "filtered-sentences": []}, {"Id": "124990172", "PostId": "70702313", "Score": "1", "Text": "Is my project pointed to an old version of codebuild? This project is only a couple weeks old so it should have a pretty recent version already. Do I need to update the version of sam as part of the `buildspec.yml` build script?", "CreationDate": "2022-01-13T20:18:03.910", "UserId": "157541", "filtered-sentences": []}, {"Id": "124990402", "PostId": "70702313", "Score": "1", "Text": "Which docker image are you using in your build project? The default version of SAM probably depends on this. `aws/codebuild/standard:5.0` worked for me. You can try updating the SAM CLI version in your `buildspec.yaml` if nothing else works.", "CreationDate": "2022-01-13T20:28:57.507", "UserId": "17896613", "filtered-sentences": []}, {"Id": "124990591", "PostId": "70702313", "Score": "1", "Text": "I dont have any references to docker anywhere in the project's source code. I also scanned through the `CodeBuildProject` build details and didn't see anything there either. I do have docker installed locally and the whole project works just file running on localhost.", "CreationDate": "2022-01-13T20:37:49.633", "UserId": "157541", "filtered-sentences": []}, {"Id": "124990843", "PostId": "70702313", "Score": "1", "Text": "I have edited my answer with the build project configuration", "CreationDate": "2022-01-13T20:51:11.713", "UserId": "17896613", "filtered-sentences": []}, {"Id": "124990902", "PostId": "70702313", "Score": "1", "Text": "My project is an `AWS Lambda Application` project which might just be a subset of CloudFormation. Did you create your project as an AWS Lambda Application?\nhttps://us-east-2.console.aws.amazon.com/lambda/home?region=us-east-2#/applications", "CreationDate": "2022-01-13T20:54:07.980", "UserId": "157541", "filtered-sentences": []}, {"Id": "124991108", "PostId": "70702313", "Score": "1", "Text": "In `serverlessrepo-testproject-toolchain` (or the equivalent CloudFormation stack) change the image `aws/lambda/nodejs:10-1.0` to `aws/codebuild/standard:5.0`. If this doesn't work or you don't want to touch the stack created by `AWS Lambda application`, you can add `pip install aws-sam-cli --upgrade` to your buildspec.yaml", "CreationDate": "2022-01-13T21:06:29.860", "UserId": "17896613", "filtered-sentences": [{"source": "Text", "text": "In `serverlessrepo-testproject-toolchain` (or the equivalent CloudFormation stack) change the image `aws/lambda/nodejs:10-1.0` to `aws/codebuild/standard:5.0`. ", "keywords": ["change", "test"]}]}, {"Id": "124991631", "PostId": "70702313", "Score": "1", "Text": "I tried modifying the stack image, but it would only create a new stack with the modifications. The AWS Lambda Application project is hooked up to a GitHub repo that deploys to the stack created by the Lambda project. I might be able to update this.\nI also tried updating the `aws-sam-cli` and got a different error message. \n```Build Failed\nError: JavaGradleWorkflow:Resolver - No Gradle executable found!``` I added `pip install gradle` and got the same error", "CreationDate": "2022-01-13T21:36:38.257", "UserId": "157541", "filtered-sentences": []}, {"Id": "125009967", "PostId": "70702313", "Score": "1", "Text": "I have edited my answer to include a buildspec which works with `aws/lambda/nodejs:10-1.0`. Your error is not due to `gradle` not being installed (you don't need to install `gradle` if you are using gradle wrapper), but because the image doesn't have Java installed, which is required to build a Java function.", "CreationDate": "2022-01-14T16:46:30.817", "UserId": "17896613", "filtered-sentences": []}, {"Id": "125015113", "PostId": "70702313", "Score": "1", "Text": "I'm seeing this error now. ```Running command export JAVA_HOME=$(realpath $(dirname $(realpath `which java`))/../..)\n/codebuild/output/tmp/script.sh: line 4: which: command not found\nrealpath: missing operand```\nI think the approach of changing the base image of the build so it includes the jdk and nodejs would be the way to do it, but that's not an option currently. Maybe they will update Lambda Applications so that we can customize the image of the build machine. I'll accept your answer before the bounty expires if there isn't some simple efficient way that we are missing.", "CreationDate": "2022-01-14T20:56:20.483", "UserId": "157541", "filtered-sentences": [{"source": "Text", "text": "I think the approach of changing the base image of the build so it includes the jdk and nodejs would be the way to do it, but that's not an option currently. ", "keywords": ["change"]}, {"source": "Text", "text": "I'll accept your answer before the bounty expires if there isn't some simple efficient way that we are missing.", "keywords": ["efficient"]}]}, {"Id": "125021949", "PostId": "70702313", "Score": "0", "Text": "Let us [continue this discussion in chat](https://chat.stackoverflow.com/rooms/241079/discussion-between-kaustubh-khavnekar-and-sissonb).", "CreationDate": "2022-01-15T10:05:57.217", "UserId": "17896613", "filtered-sentences": []}], "history": [{"Id": "261897587", "PostHistoryTypeId": "2", "PostId": "70702313", "RevisionGUID": "3a6c2b76-0528-4097-963c-5be4a70a1646", "CreationDate": "2022-01-13T19:50:29.487", "UserId": "17896613", "Text": "buildspec.yml if you want to deploy using AWS CodeBuild (would be an unusual flow):\r\n\r\n``` lang-yaml\r\n---\r\nversion: '0.2'\r\nphases:\r\n  install:\r\n    commands:\r\n    - echo Entered the install phase...\r\n    - npm install --global lerna\r\n    - lerna bootstrap --concurrency=1 -- --production\r\n  build:\r\n    commands:\r\n    - sam build\r\n    - sam deploy --stack-name stackoverflow-stack --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset\r\n      --s3-bucket your-bucket-name-here --parameter-overrides AppId=your-app-id-here\r\n```\r\n\r\nbuildspec.yml if you only want to produce a CloudFormation template file which you can directly deploy (using CodeDeploy or other means). It is almost the same as what you already have, with the following difference:\r\n- Adds `sam build`\r\n- Uses `sam package` instead of `aws cloudformation package`. `sam package` uses `.aws-sam/template.yaml` (output of sam build) instead of `template.yaml` as the first default.\r\n\r\n``` lang-yaml\r\n---\r\nversion: '0.2'\r\nphases:\r\n  install:\r\n    commands:\r\n    - echo Entered the install phase...\r\n    - npm install --global lerna\r\n    - lerna bootstrap --concurrency=1 -- --production\r\n  build:\r\n    commands:\r\n    - sam build\r\n    - sam package --s3-bucket your-bucket-name-here --output-template-file\r\n      template-export.yml\r\nartifacts:\r\n  files:\r\n  - template-export.yml\r\n```\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "buildspec.yml if you want to deploy using AWS CodeBuild (would be an unusual flow): ``` lang-yaml --- version: '0.2' phases: install: commands: - echo Entered the install phase... - npm install --global lerna - lerna bootstrap --concurrency=1 -- --production build: commands: - sam build - sam deploy --stack-name stackoverflow-stack --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset --s3-bucket your-bucket-name-here --parameter-overrides AppId=your-app-id-here ``` buildspec.yml if you only want to produce a CloudFormation template file which you can directly deploy (using CodeDeploy or other means). ", "keywords": ["change"]}]}, {"Id": "261957266", "PostHistoryTypeId": "5", "PostId": "70702313", "RevisionGUID": "73d47891-f99f-49f2-aa34-54283da587dd", "CreationDate": "2022-01-14T16:42:17.407", "UserId": "17896613", "Comment": "deleted 413 characters in body", "Text": "buildspec.yml if you want to deploy using AWS CodeBuild (would be an unusual flow):\r\n\r\n``` lang-yaml\r\n---\r\nversion: '0.2'\r\nphases:\r\n  install:\r\n    commands:\r\n    - echo Entered the install phase...\r\n    - npm install --global lerna\r\n    - lerna bootstrap --concurrency=1 -- --production\r\n  build:\r\n    commands:\r\n    - sam build\r\n    - sam deploy --stack-name stackoverflow-stack --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset\r\n      --s3-bucket your-bucket-name-here --parameter-overrides AppId=your-app-id-here\r\n```\r\n\r\nbuildspec.yml if you only want to produce a CloudFormation template file which you can directly deploy (using CodeDeploy or other means). It is almost the same as what you already have, with the following difference:\r\n- Adds `sam build`\r\n- Uses `sam package` instead of `aws cloudformation package`. `sam package` uses `.aws-sam/template.yaml` (output of sam build) instead of `template.yaml` as the first default.\r\n\r\n``` lang-yaml\r\n---\r\nversion: '0.2'\r\nphases:\r\n  install:\r\n    commands:\r\n    - echo Entered the install phase...\r\n    - npm install --global lerna\r\n    - lerna bootstrap --concurrency=1 -- --production\r\n  build:\r\n    commands:\r\n    - sam build\r\n    - sam package --s3-bucket your-bucket-name-here --output-template-file\r\n      template-export.yml\r\nartifacts:\r\n  files:\r\n  - template-export.yml\r\n```\r\n\r\nEdit2: OP's build project was created by Lambda applications. The build project uses `aws/lambda/nodejs:10-1.0` which has two issues:\r\n- The SAM CLI version is outdated\r\n- Java isn't installed because the image is meant to be used for nodejs based Lambda functions. Java is required to build the Java based AWS Lambda function\r\n\r\nThe following buildspec.yaml can be used to fix both these issues:\r\n``` lang-yaml\r\n---\r\nversion: '0.2'\r\nphases:\r\n  install:\r\n    commands:\r\n    - echo Entered the install phase...\r\n    - npm install --global lerna\r\n    - lerna bootstrap --concurrency=1 -- --production\r\n    - yum install -y amazon-linux-extras\r\n    - amazon-linux-extras install java-openjdk11\r\n    - export JAVA_HOME=$(realpath $(dirname $(realpath `which java`))/../..)\r\n    - pip install aws-sam-cli --upgrade\r\n  build:\r\n    commands:\r\n    - sam build\r\n    - sam package --s3-bucket cf-templates-fgoi5xu7d2hs-us-east-1 --output-template-file\r\n      template-export.yml\r\nartifacts:\r\n  files:\r\n  - template-export.yml\r\n```\r\n\r\nThe `JAVA_HOME` solution is taken from [here][1]. It is a bit hacky but it works.\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/68493816/17896613", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "buildspec.yml if you want to deploy using AWS CodeBuild (would be an unusual flow): ``` lang-yaml --- version: '0.2' phases: install: commands: - echo Entered the install phase... - npm install --global lerna - lerna bootstrap --concurrency=1 -- --production build: commands: - sam build - sam deploy --stack-name stackoverflow-stack --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset --s3-bucket your-bucket-name-here --parameter-overrides AppId=your-app-id-here ``` buildspec.yml if you only want to produce a CloudFormation template file which you can directly deploy (using CodeDeploy or other means). ", "keywords": ["change"]}]}, {"Id": "262015012", "PostHistoryTypeId": "5", "PostId": "70702313", "RevisionGUID": "dfd3c0f4-b486-4196-a316-fa4b57aba52a", "CreationDate": "2022-01-15T10:03:10.267", "UserId": "17896613", "Comment": "Fixed to correct answer link", "Text": "buildspec.yml if you want to deploy using AWS CodeBuild (would be an unusual flow):\r\n\r\n``` lang-yaml\r\n---\r\nversion: '0.2'\r\nphases:\r\n  install:\r\n    commands:\r\n    - echo Entered the install phase...\r\n    - npm install --global lerna\r\n    - lerna bootstrap --concurrency=1 -- --production\r\n  build:\r\n    commands:\r\n    - sam build\r\n    - sam deploy --stack-name stackoverflow-stack --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset\r\n      --s3-bucket your-bucket-name-here --parameter-overrides AppId=your-app-id-here\r\n```\r\n\r\nbuildspec.yml if you only want to produce a CloudFormation template file which you can directly deploy (using CodeDeploy or other means). It is almost the same as what you already have, with the following difference:\r\n- Adds `sam build`\r\n- Uses `sam package` instead of `aws cloudformation package`. `sam package` uses `.aws-sam/template.yaml` (output of sam build) instead of `template.yaml` as the first default.\r\n\r\n``` lang-yaml\r\n---\r\nversion: '0.2'\r\nphases:\r\n  install:\r\n    commands:\r\n    - echo Entered the install phase...\r\n    - npm install --global lerna\r\n    - lerna bootstrap --concurrency=1 -- --production\r\n  build:\r\n    commands:\r\n    - sam build\r\n    - sam package --s3-bucket your-bucket-name-here --output-template-file\r\n      template-export.yml\r\nartifacts:\r\n  files:\r\n  - template-export.yml\r\n```\r\n\r\nEdit2: OP's build project was created by Lambda applications. The build project uses `aws/lambda/nodejs:10-1.0` which has two issues:\r\n- The SAM CLI version is outdated\r\n- Java isn't installed because the image is meant to be used for nodejs based Lambda functions. Java is required to build the Java based AWS Lambda function\r\n\r\nThe following buildspec.yaml can be used to fix both these issues:\r\n``` lang-yaml\r\n---\r\nversion: '0.2'\r\nphases:\r\n  install:\r\n    commands:\r\n    - echo Entered the install phase...\r\n    - npm install --global lerna\r\n    - lerna bootstrap --concurrency=1 -- --production\r\n    - yum install -y amazon-linux-extras\r\n    - amazon-linux-extras install java-openjdk11\r\n    - export JAVA_HOME=$(realpath $(dirname $(realpath `which java`))/../..)\r\n    - pip install aws-sam-cli --upgrade\r\n  build:\r\n    commands:\r\n    - sam build\r\n    - sam package --s3-bucket cf-templates-fgoi5xu7d2hs-us-east-1 --output-template-file\r\n      template-export.yml\r\nartifacts:\r\n  files:\r\n  - template-export.yml\r\n```\r\n\r\nThe `JAVA_HOME` solution is taken from [here][1]. It is a bit hacky but it works.\r\n\r\n\r\n  [1]: https://stackoverflow.com/a/65770215/17896613", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "buildspec.yml if you want to deploy using AWS CodeBuild (would be an unusual flow): ``` lang-yaml --- version: '0.2' phases: install: commands: - echo Entered the install phase... - npm install --global lerna - lerna bootstrap --concurrency=1 -- --production build: commands: - sam build - sam deploy --stack-name stackoverflow-stack --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset --s3-bucket your-bucket-name-here --parameter-overrides AppId=your-app-id-here ``` buildspec.yml if you only want to produce a CloudFormation template file which you can directly deploy (using CodeDeploy or other means). ", "keywords": ["change"]}]}, {"Id": "261900789", "PostHistoryTypeId": "5", "PostId": "70702313", "RevisionGUID": "aa19de8e-9229-4cdc-a969-7c55a43d53a3", "CreationDate": "2022-01-13T20:49:24.397", "UserId": "17896613", "Comment": "added 1590 characters in body", "Text": "buildspec.yml if you want to deploy using AWS CodeBuild (would be an unusual flow):\r\n\r\n``` lang-yaml\r\n---\r\nversion: '0.2'\r\nphases:\r\n  install:\r\n    commands:\r\n    - echo Entered the install phase...\r\n    - npm install --global lerna\r\n    - lerna bootstrap --concurrency=1 -- --production\r\n  build:\r\n    commands:\r\n    - sam build\r\n    - sam deploy --stack-name stackoverflow-stack --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset\r\n      --s3-bucket your-bucket-name-here --parameter-overrides AppId=your-app-id-here\r\n```\r\n\r\nbuildspec.yml if you only want to produce a CloudFormation template file which you can directly deploy (using CodeDeploy or other means). It is almost the same as what you already have, with the following difference:\r\n- Adds `sam build`\r\n- Uses `sam package` instead of `aws cloudformation package`. `sam package` uses `.aws-sam/template.yaml` (output of sam build) instead of `template.yaml` as the first default.\r\n\r\n``` lang-yaml\r\n---\r\nversion: '0.2'\r\nphases:\r\n  install:\r\n    commands:\r\n    - echo Entered the install phase...\r\n    - npm install --global lerna\r\n    - lerna bootstrap --concurrency=1 -- --production\r\n  build:\r\n    commands:\r\n    - sam build\r\n    - sam package --s3-bucket your-bucket-name-here --output-template-file\r\n      template-export.yml\r\nartifacts:\r\n  files:\r\n  - template-export.yml\r\n```\r\n\r\nEdit: Adding more details on my Build Project configuration to help debugging the AWS SAM CLI issue\r\n\r\nCloudFormation snippet:\r\n``` lang-yaml\r\nPipelineBuildSynthCdkBuildProject6BEFA8E6:\r\n    Type: AWS::CodeBuild::Project\r\n    Properties:\r\n      Artifacts:\r\n        Type: CODEPIPELINE\r\n      Environment:\r\n        ComputeType: BUILD_GENERAL1_SMALL\r\n        Image: aws/codebuild/standard:5.0\r\n        ImagePullCredentialsType: CODEBUILD\r\n        PrivilegedMode: false\r\n        Type: LINUX_CONTAINER\r\n      ServiceRole:\r\n        Fn::GetAtt:\r\n          - PipelineBuildSynthCdkBuildProjectRole231EEA2A\r\n          - Arn\r\n      Source:\r\n        BuildSpec: |-\r\n          {\r\n            \"version\": \"0.2\",\r\n            \"phases\": {\r\n              \"install\": {\r\n                \"commands\": [\r\n                  \"echo Entered the install phase...\",\r\n                  \"npm install --global lerna\",\r\n                  \"lerna bootstrap --concurrency=1 -- --production\"\r\n                ]\r\n              },\r\n              \"build\": {\r\n                \"commands\": [\r\n                  \"sam build\",\r\n                  \"sam package --s3-bucket your-bucket-name-here --output-template-file template-export.yml\"\r\n                ]\r\n              }\r\n            },\r\n            \"artifacts\": {\r\n              \"files\": [\r\n                \"template-export.yml\"\r\n              ]\r\n            }\r\n          }\r\n        Type: CODEPIPELINE\r\n      Cache:\r\n        Type: NO_CACHE\r\n      EncryptionKey: alias/aws/s3\r\n```\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/Nt0TF.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "buildspec.yml if you want to deploy using AWS CodeBuild (would be an unusual flow): ``` lang-yaml --- version: '0.2' phases: install: commands: - echo Entered the install phase... - npm install --global lerna - lerna bootstrap --concurrency=1 -- --production build: commands: - sam build - sam deploy --stack-name stackoverflow-stack --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset --s3-bucket your-bucket-name-here --parameter-overrides AppId=your-app-id-here ``` buildspec.yml if you only want to produce a CloudFormation template file which you can directly deploy (using CodeDeploy or other means). ", "keywords": ["change"]}]}, {"Id": "262016089", "PostHistoryTypeId": "5", "PostId": "70702313", "RevisionGUID": "bb389d46-d584-4d23-adfd-850700d5f724", "CreationDate": "2022-01-15T10:36:58.130", "UserId": "17896613", "Comment": "Just install which command; deleted 143 characters in body", "Text": "buildspec.yml if you want to deploy using AWS CodeBuild (would be an unusual flow):\r\n\r\n``` lang-yaml\r\n---\r\nversion: '0.2'\r\nphases:\r\n  install:\r\n    commands:\r\n    - echo Entered the install phase...\r\n    - npm install --global lerna\r\n    - lerna bootstrap --concurrency=1 -- --production\r\n  build:\r\n    commands:\r\n    - sam build\r\n    - sam deploy --stack-name stackoverflow-stack --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset\r\n      --s3-bucket your-bucket-name-here --parameter-overrides AppId=your-app-id-here\r\n```\r\n\r\nbuildspec.yml if you only want to produce a CloudFormation template file which you can directly deploy (using CodeDeploy or other means). It is almost the same as what you already have, with the following difference:\r\n- Adds `sam build`\r\n- Uses `sam package` instead of `aws cloudformation package`. `sam package` uses `.aws-sam/template.yaml` (output of sam build) instead of `template.yaml` as the first default.\r\n\r\n``` lang-yaml\r\n---\r\nversion: '0.2'\r\nphases:\r\n  install:\r\n    commands:\r\n    - echo Entered the install phase...\r\n    - npm install --global lerna\r\n    - lerna bootstrap --concurrency=1 -- --production\r\n  build:\r\n    commands:\r\n    - sam build\r\n    - sam package --s3-bucket your-bucket-name-here --output-template-file\r\n      template-export.yml\r\nartifacts:\r\n  files:\r\n  - template-export.yml\r\n```\r\n\r\nEdit2: OP's build project was created by Lambda applications. The build project uses `aws/lambda/nodejs:10-1.0` which has two issues:\r\n- The SAM CLI version is outdated\r\n- Java isn't installed because the image is meant to be used for nodejs based Lambda functions. Java is required to build the Java based AWS Lambda function\r\n\r\nThe following buildspec.yaml can be used to fix both these issues:\r\n``` lang-yaml\r\n---\r\nversion: '0.2'\r\nphases:\r\n  install:\r\n    commands:\r\n    - echo Entered the install phase...\r\n    - npm install --global lerna\r\n    - lerna bootstrap --concurrency=1 -- --production\r\n    - yum install -y amazon-linux-extras which\r\n    - amazon-linux-extras install java-openjdk11\r\n    - pip install aws-sam-cli --upgrade\r\n  build:\r\n    commands:\r\n    - sam build\r\n    - sam package --s3-bucket cf-templates-fgoi5xu7d2hs-us-east-1 --output-template-file\r\n      template-export.yml\r\nartifacts:\r\n  files:\r\n  - template-export.yml\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "buildspec.yml if you want to deploy using AWS CodeBuild (would be an unusual flow): ``` lang-yaml --- version: '0.2' phases: install: commands: - echo Entered the install phase... - npm install --global lerna - lerna bootstrap --concurrency=1 -- --production build: commands: - sam build - sam deploy --stack-name stackoverflow-stack --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset --s3-bucket your-bucket-name-here --parameter-overrides AppId=your-app-id-here ``` buildspec.yml if you only want to produce a CloudFormation template file which you can directly deploy (using CodeDeploy or other means). ", "keywords": ["change"]}]}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}