{"Id": "50040465", "PostTypeId": "1", "AcceptedAnswerId": "50040466", "CreationDate": "2018-04-26T10:18:34.567", "Score": "0", "ViewCount": "731", "Body": "<p>I have been playing with configuring tag based resource permissions in EC2, using an approach similar to what is described in the answer to the following question: <a href=\"https://stackoverflow.com/a/9854181/7647013\">Within IAM, can I restrict a group of users to access/launch/terminate only certain EC2 AMIs or instances?</a></p>\n\n<p>I have been using this in conjunction with a lambda function to auto tag EC2 instances, setting the <code>Owner</code> and <code>PrincipalId</code> based on the IAM user who called the associated <code>ec2:RunInstances</code> action. The approach I have been following for this is documented in the following AWS blog post: <a href=\"https://aws.amazon.com/blogs/security/how-to-automatically-tag-amazon-ec2-resources-in-response-to-api-events/\" rel=\"nofollow noreferrer\">How to Automatically Tag Amazon EC2 Resources in Response to API Events</a></p>\n\n<p>The combination of these two approaches has resulted in my restricted user permissions for EC2 looking like this, in my CloudFormation template:</p>\n\n<pre><code>LimitedEC2Policy:\nType: \"AWS::IAM::Policy\"\nProperties:\n  PolicyName: UserLimitedEC2\n  PolicyDocument:\n    Version: 2012-10-17\n    Statement:\n      - Effect: Allow\n        Action: ec2:RunInstances\n        Resource:\n          - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetA}'\n          - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetB}'\n          - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetC}'\n          - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${BasicSSHAccessSecurityGroup.GroupId}'\n          - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/${AuthorizedKeyPair}'\n          - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*'\n          - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'\n          - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*'\n          - !Sub 'arn:aws:ec2:${AWS::Region}::image/ami-*'\n        Condition:\n          StringLikeIfExists:\n            ec2:Vpc: !Ref Vpc\n          StringLikeIfExists:\n            ec2:InstanceType: !Ref EC2AllowedInstanceTypes\n      - Effect: Allow\n        Action:\n          - ec2:TerminateInstances\n          - ec2:StopInstances\n          - ec2:StartInstances\n        Resource:\n          - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'\n        Condition:\n          StringEquals:\n            ec2:ResourceTag/Owner: !Ref UserName\n  Users:\n    - !Ref IAMUser\n</code></pre>\n\n<p>These IAM permissions restricts users to running EC2 instances within a limited set of subnets, within a single VPC and security group. Users are then only able to start/stop/terminate instances which have been tagged with their IAM user in the <code>Owner</code> tag.</p>\n\n<p>What I'd like to be able to do is allow users to also create and delete any additional tags on their EC2 resources, such as setting the <code>Name</code> tag. What I can't work out is how I can do this without also enabling them to change the <code>Owner</code> and <code>PrincipalId</code> tags on resources they don't \"own\".</p>\n\n<p>Is there a way one can limit the <code>ec2:createTags</code> and <code>ec2:deleteTags</code> actions to prevent users from setting certain tags?</p>\n", "OwnerUserId": "7647013", "LastEditorUserId": "7647013", "LastEditDate": "2018-04-26T10:31:36.340", "LastActivityDate": "2018-04-26T10:31:36.340", "Title": "How to enable IAM users to set the Name and other custom tags when limited by tag restricted resource-level permissions in EC2", "Tags": "|amazon-web-services|amazon-ec2|yaml|aws-cloudformation|amazon-iam|", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "172146128", "PostHistoryTypeId": "5", "PostId": "50040465", "RevisionGUID": "d66d9cd5-d080-47fb-803e-bba23d9ff81c", "CreationDate": "2018-04-26T10:31:36.340", "UserId": "7647013", "Comment": "Removed non-generic variable names.", "Text": "I have been playing with configuring tag based resource permissions in EC2, using an approach similar to what is described in the answer to the following question: [Within IAM, can I restrict a group of users to access/launch/terminate only certain EC2 AMIs or instances?][1]\r\n\r\nI have been using this in conjunction with a lambda function to auto tag EC2 instances, setting the `Owner` and `PrincipalId` based on the IAM user who called the associated `ec2:RunInstances` action. The approach I have been following for this is documented in the following AWS blog post: [How to Automatically Tag Amazon EC2 Resources in Response to API Events][2]\r\n\r\nThe combination of these two approaches has resulted in my restricted user permissions for EC2 looking like this, in my CloudFormation template:\r\n\r\n    LimitedEC2Policy:\r\n    Type: \"AWS::IAM::Policy\"\r\n    Properties:\r\n      PolicyName: UserLimitedEC2\r\n      PolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Action: ec2:RunInstances\r\n            Resource:\r\n              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetA}'\r\n              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetB}'\r\n              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetC}'\r\n              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${BasicSSHAccessSecurityGroup.GroupId}'\r\n              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/${AuthorizedKeyPair}'\r\n              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*'\r\n              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'\r\n              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*'\r\n              - !Sub 'arn:aws:ec2:${AWS::Region}::image/ami-*'\r\n            Condition:\r\n              StringLikeIfExists:\r\n                ec2:Vpc: !Ref Vpc\r\n              StringLikeIfExists:\r\n                ec2:InstanceType: !Ref EC2AllowedInstanceTypes\r\n          - Effect: Allow\r\n            Action:\r\n              - ec2:TerminateInstances\r\n              - ec2:StopInstances\r\n              - ec2:StartInstances\r\n            Resource:\r\n              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'\r\n            Condition:\r\n              StringEquals:\r\n                ec2:ResourceTag/Owner: !Ref UserName\r\n      Users:\r\n        - !Ref IAMUser\r\n    \r\nThese IAM permissions restricts users to running EC2 instances within a limited set of subnets, within a single VPC and security group. Users are then only able to start/stop/terminate instances which have been tagged with their IAM user in the `Owner` tag.\r\n\r\nWhat I'd like to be able to do is allow users to also create and delete any additional tags on their EC2 resources, such as setting the `Name` tag. What I can't work out is how I can do this without also enabling them to change the `Owner` and `PrincipalId` tags on resources they don't \"own\".\r\n\r\nIs there a way one can limit the `ec2:createTags` and `ec2:deleteTags` actions to prevent users from setting certain tags?\r\n\r\n  [1]: https://stackoverflow.com/a/9854181/7647013\r\n  [2]: https://aws.amazon.com/blogs/security/how-to-automatically-tag-amazon-ec2-resources-in-response-to-api-events/", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "The combination of these two approaches has resulted in my restricted user permissions for EC2 looking like this, in my CloudFormation template: LimitedEC2Policy: Type: \"AWS::IAM::Policy\" Properties: PolicyName: UserLimitedEC2 PolicyDocument: Version: 2012-10-17 Statement: - Effect: Allow Action: ec2:RunInstances Resource: - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetA}' - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetB}' - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetC}' - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${BasicSSHAccessSecurityGroup.GroupId}' - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/${AuthorizedKeyPair}' - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*' - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*' - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*' - !Sub 'arn:aws:ec2:${AWS::Region}::image/ami-*' Condition: StringLikeIfExists: ec2:Vpc: !Ref Vpc StringLikeIfExists: ec2:InstanceType: !Ref EC2AllowedInstanceTypes - Effect: Allow Action: - ec2:TerminateInstances - ec2:StopInstances - ec2:StartInstances Resource: - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*' Condition: StringEquals: ec2:ResourceTag/Owner: !Ref UserName Users: - !Ref IAMUser These IAM permissions restricts users to running EC2 instances within a limited set of subnets, within a single VPC and security group. ", "keywords": ["instance", "policy"]}, {"source": "Text", "text": "What I can't work out is how I can do this without also enabling them to change the `Owner` and `PrincipalId` tags on resources they don't \"own\". ", "keywords": ["change"]}]}, {"Id": "172145035", "PostHistoryTypeId": "2", "PostId": "50040465", "RevisionGUID": "31d566dc-55ba-44a7-83ea-dae68ee49261", "CreationDate": "2018-04-26T10:18:34.567", "UserId": "7647013", "Text": "I have been playing with configuring tag based resource permissions in EC2, using an approach similar to what is described in the answer to the following question: [Within IAM, can I restrict a group of users to access/launch/terminate only certain EC2 AMIs or instances?][1]\r\n\r\nI have been using this in conjunction with a lambda function to auto tag EC2 instances, setting the `Owner` and `PrincipalId` based on the IAM user who called the associated `ec2:RunInstances` action. The approach I have been following for this is documented in the following AWS blog post: [How to Automatically Tag Amazon EC2 Resources in Response to API Events][2]\r\n\r\nThe combination of these two approaches has resulted in my restricted user permissions for EC2 looking like this, in my CloudFormation template:\r\n\r\n    LimitedEC2Policy:\r\n    Type: \"AWS::IAM::Policy\"\r\n    Properties:\r\n      PolicyName: UserLimitedEC2\r\n      PolicyDocument:\r\n        Version: 2012-10-17\r\n        Statement:\r\n          - Effect: Allow\r\n            Action: ec2:RunInstances\r\n            Resource:\r\n              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetA}'\r\n              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetB}'\r\n              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetC}'\r\n              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${BasicSSHAccessSecurityGroup.GroupId}'\r\n              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/${AuthorizedKeyPair}'\r\n              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*'\r\n              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'\r\n              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*'\r\n              - !Sub 'arn:aws:ec2:${AWS::Region}::image/ami-*'\r\n            Condition:\r\n              StringLikeIfExists:\r\n                ec2:Vpc: !Ref Vpc\r\n              StringLikeIfExists:\r\n                ec2:InstanceType: !Ref QuorateMScStudentEC2AllowedInstanceTypes\r\n          - Effect: Allow\r\n            Action:\r\n              - ec2:TerminateInstances\r\n              - ec2:StopInstances\r\n              - ec2:StartInstances\r\n            Resource:\r\n              - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'\r\n            Condition:\r\n              StringEquals:\r\n                ec2:ResourceTag/Owner: !Ref UserName\r\n      Users:\r\n        - !Ref IAMUser\r\n    \r\nThese IAM permissions restricts users to running EC2 instances within a limited set of subnets, within a single VPC and security group. Users are then only able to start/stop/terminate instances which have been tagged with their IAM user in the `Owner` tag.\r\n\r\nWhat I'd like to be able to do is allow users to also create and delete any additional tags on their EC2 resources, such as setting the `Name` tag. What I can't work out is how I can do this without also enabling them to change the `Owner` and `PrincipalId` tags on resources they don't \"own\".\r\n\r\nIs there a way one can limit the `ec2:createTags` and `ec2:deleteTags` actions to prevent users from setting certain tags?\r\n\r\n  [1]: https://stackoverflow.com/a/9854181/7647013\r\n  [2]: https://aws.amazon.com/blogs/security/how-to-automatically-tag-amazon-ec2-resources-in-response-to-api-events/", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "The combination of these two approaches has resulted in my restricted user permissions for EC2 looking like this, in my CloudFormation template: LimitedEC2Policy: Type: \"AWS::IAM::Policy\" Properties: PolicyName: UserLimitedEC2 PolicyDocument: Version: 2012-10-17 Statement: - Effect: Allow Action: ec2:RunInstances Resource: - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetA}' - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetB}' - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetC}' - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${BasicSSHAccessSecurityGroup.GroupId}' - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/${AuthorizedKeyPair}' - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*' - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*' - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*' - !Sub 'arn:aws:ec2:${AWS::Region}::image/ami-*' Condition: StringLikeIfExists: ec2:Vpc: !Ref Vpc StringLikeIfExists: ec2:InstanceType: !Ref QuorateMScStudentEC2AllowedInstanceTypes - Effect: Allow Action: - ec2:TerminateInstances - ec2:StopInstances - ec2:StartInstances Resource: - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*' Condition: StringEquals: ec2:ResourceTag/Owner: !Ref UserName Users: - !Ref IAMUser These IAM permissions restricts users to running EC2 instances within a limited set of subnets, within a single VPC and security group. ", "keywords": ["instance", "policy"]}, {"source": "Text", "text": "What I can't work out is how I can do this without also enabling them to change the `Owner` and `PrincipalId` tags on resources they don't \"own\". ", "keywords": ["change"]}]}, {"Id": "172145036", "PostHistoryTypeId": "1", "PostId": "50040465", "RevisionGUID": "31d566dc-55ba-44a7-83ea-dae68ee49261", "CreationDate": "2018-04-26T10:18:34.567", "UserId": "7647013", "Text": "How to enable IAM users to set the Name and other custom tags when limited by tag restricted resource-level permissions in EC2", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "172145037", "PostHistoryTypeId": "3", "PostId": "50040465", "RevisionGUID": "31d566dc-55ba-44a7-83ea-dae68ee49261", "CreationDate": "2018-04-26T10:18:34.567", "UserId": "7647013", "Text": "|amazon-web-services|amazon-ec2|yaml|aws-cloudformation|amazon-iam|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "50040466", "PostTypeId": "2", "ParentId": "50040465", "CreationDate": "2018-04-26T10:18:34.567", "Score": "0", "Body": "<p>After much sifting through the AWS EC2 documentation I found the following: <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-iam-actions-resources.html?shortFooter=true#supported-iam-actions-tagging\" rel=\"nofollow noreferrer\">Resource-Level Permissions for Tagging</a></p>\n\n<p>This gives the example:</p>\n\n<blockquote>\n  <p>Use with the <code>ForAllValues</code> modifier to enforce specific tag keys if\n  they are provided in the request (if tags are specified in the\n  request, only specific tag keys are allowed; no other tags are\n  allowed). For example, the tag keys environment or cost-center are\n  allowed:</p>\n\n<pre><code>\"ForAllValues:StringEquals\": { \"aws:TagKeys\": [\"environment\",\"cost-center\"] }\n</code></pre>\n</blockquote>\n\n<p>Since what I want to achive is essentially the opposite of this (allow users to specify all tags, with the exception of specific tag keys) I have been able to prevent users from creating/deleting the Owner and PrincipalId tags by adding the following <code>PolicyDocument</code> statement to my user policy in my CloudFormation template:</p>\n\n<pre><code>- Effect: Allow\n    Action:\n      - ec2:CreateTags\n      - ec2:DeleteTags\n    Resource:\n      - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:*/*'\n    Condition:\n      \"ForAllValues:StringNotEquals\":\n        aws:TagKeys:\n          - \"Owner\"\n          - \"PrincipalId\"\n</code></pre>\n\n<p>This permits users to create/delete any tags they wish, so long as they aren't the <code>Owner</code> or <code>PrincipalId</code>.</p>\n", "OwnerUserId": "7647013", "LastActivityDate": "2018-04-26T10:18:34.567", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "172145040", "PostHistoryTypeId": "2", "PostId": "50040466", "RevisionGUID": "80a6648c-a863-41e3-afa7-8b4209168f28", "CreationDate": "2018-04-26T10:18:34.567", "UserId": "7647013", "Text": "After much sifting through the AWS EC2 documentation I found the following: [Resource-Level Permissions for Tagging][1]\r\n\r\nThis gives the example:\r\n\r\n> Use with the `ForAllValues` modifier to enforce specific tag keys if\r\n> they are provided in the request (if tags are specified in the\r\n> request, only specific tag keys are allowed; no other tags are\r\n> allowed). For example, the tag keys environment or cost-center are\r\n> allowed:\r\n> \r\n>     \"ForAllValues:StringEquals\": { \"aws:TagKeys\": [\"environment\",\"cost-center\"] }\r\n\r\nSince what I want to achive is essentially the opposite of this (allow users to specify all tags, with the exception of specific tag keys) I have been able to prevent users from creating/deleting the Owner and PrincipalId tags by adding the following `PolicyDocument` statement to my user policy in my CloudFormation template:\r\n\r\n    - Effect: Allow\r\n        Action:\r\n          - ec2:CreateTags\r\n          - ec2:DeleteTags\r\n        Resource:\r\n          - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:*/*'\r\n        Condition:\r\n          \"ForAllValues:StringNotEquals\":\r\n            aws:TagKeys:\r\n              - \"Owner\"\r\n              - \"PrincipalId\"\r\n\r\nThis permits users to create/delete any tags they wish, so long as they aren't the `Owner` or `PrincipalId`.\r\n\r\n\r\n  [1]: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-iam-actions-resources.html?shortFooter=true#supported-iam-actions-tagging", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "For example, the tag keys environment or cost-center are > allowed: > > \"ForAllValues:StringEquals\": { \"aws:TagKeys\": [\"environment\",\"cost-center\"] } Since what I want to achive is essentially the opposite of this (allow users to specify all tags, with the exception of specific tag keys) ", "keywords": ["cost"]}, {"source": "Text", "text": "I have been able to prevent users from creating/deleting the Owner and PrincipalId tags by adding the following `PolicyDocument` statement to my user policy in my CloudFormation template: - Effect: Allow Action: - ec2:CreateTags - ec2:DeleteTags Resource: - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:*/*' Condition: \"ForAllValues:StringNotEquals\": aws:TagKeys: - \"Owner\" - \"PrincipalId\" This permits users to create/delete any tags they wish, so long as they aren't the `Owner` or `PrincipalId`", "keywords": ["policy"]}]}], "filtered-sentences": [{"source": "Body", "text": "For example, the tag keys environment or cost-center are allowed: Since what I want to achive is essentially the opposite of this (allow users to specify all tags, with the exception of specific tag keys) I have been able to prevent users from creating/deleting the Owner and PrincipalId tags by adding the following PolicyDocument statement to my user policy in my CloudFormation template: This permits users to create/delete any tags they wish, so long as they aren't the Owner or PrincipalId.", "keywords": ["cost", "policy"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "What I can't work out is how I can do this without also enabling them to change the Owner and PrincipalId tags on resources they don't \"own\". ", "keywords": ["change"]}]}