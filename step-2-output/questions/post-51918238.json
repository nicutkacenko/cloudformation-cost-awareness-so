{"Id": "51918238", "PostTypeId": "1", "CreationDate": "2018-08-19T13:40:28.583", "Score": "12", "ViewCount": "23808", "Body": "<p>I get the error: </p>\n\n<pre><code>$ aws cloudformation deploy --template-file ./packaged-stack.yml --stack-name mystackname --capabilities CAPABILITY_NAMED_IAM`\n\n\nAn error occurred (ValidationError) when calling the CreateChangeSet operation: Unable to fetch parameters [XXX] from parameter store for this account.\n</code></pre>\n\n<p>What is wrong here? </p>\n\n<p>The weird thing is <code>XXX</code> is the value from paramter store, so CloudFormation is actually able to get the value ... but it seems like its trying to read from the paramter whose name is the value it got out ... I think my usage is incorrect? </p>\n\n<pre><code>AWSTemplateFormatVersion : '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: '...'\n\nParameters:\n  BaseStack:\n    Type: AWS::SSM::Parameter::Value&lt;String&gt;\n    Default: /some/thing/baseStack\n</code></pre>\n\n<p>The value stored in <code>/some/thing/baseStack</code> is <code>XXX</code> in this example</p>\n", "OwnerUserId": "292291", "LastActivityDate": "2022-04-29T13:41:24.107", "Title": "Unable to fetch paramters (Param Value) from parameter store for this account", "Tags": "|amazon-web-services|aws-cloudformation|ssm|", "AnswerCount": "5", "CommentCount": "3", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "91611668", "PostId": "51918238", "Score": "0", "Text": "Could this be a rights problem https://forums.aws.amazon.com/thread.jspa?messageID=804038 ?", "CreationDate": "2018-09-14T12:57:29.927", "UserId": "227821", "filtered-sentences": []}, {"Id": "91957778", "PostId": "51918238", "Score": "1", "Text": "I'm running into the same problem. Have you been able to figure this out?", "CreationDate": "2018-09-26T01:43:57.367", "UserId": "546709", "filtered-sentences": []}, {"Id": "135039607", "PostId": "51918238", "Score": "0", "Text": "Sorry to bother you, did you got this figured out, @JiewMeng. Thank you. I encountered a similar issue when deploy an AWS tutorial -https://aws.amazon.com/blogs/compute/deploy-and-publish-to-an-amazon-mq-broker-using-aws-serverless/ (and https://github.com/aws-samples/aws-sar-lambda-publish-amazonmq) Thank you!", "CreationDate": "2023-06-30T17:12:21.063", "UserId": "1491662", "filtered-sentences": []}], "history": [{"Id": "180051080", "PostHistoryTypeId": "2", "PostId": "51918238", "RevisionGUID": "3de638ac-d4c0-4f6e-bbaa-cd72dbc63c8e", "CreationDate": "2018-08-19T13:40:28.583", "UserId": "292291", "Text": "I get the error: \r\n\r\n    $ aws cloudformation deploy --template-file ./packaged-stack.yml --stack-name mystackname --capabilities CAPABILITY_NAMED_IAM`\r\n    \r\n    \r\n    An error occurred (ValidationError) when calling the CreateChangeSet operation: Unable to fetch parameters [XXX] from parameter store for this account.\r\n\r\nWhat is wrong here? \r\n\r\nThe weird thing is `XXX` is the value from paramter store, so CloudFormation is actually able to get the value ... but it seems like its trying to read from the paramter whose name is the value it got out ... I think my usage is incorrect? \r\n\r\n    AWSTemplateFormatVersion : '2010-09-09'\r\n    Transform: AWS::Serverless-2016-10-31\r\n    Description: '...'\r\n    \r\n    Parameters:\r\n      BaseStack:\r\n        Type: AWS::SSM::Parameter::Value<String>\r\n        Default: /some/thing/baseStack\r\n\r\nThe value stored in `/some/thing/baseStack` is `XXX` in this example", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "180051081", "PostHistoryTypeId": "1", "PostId": "51918238", "RevisionGUID": "3de638ac-d4c0-4f6e-bbaa-cd72dbc63c8e", "CreationDate": "2018-08-19T13:40:28.583", "UserId": "292291", "Text": "Unable to fetch paramters (Param Value) from parameter store for this account", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "180051082", "PostHistoryTypeId": "3", "PostId": "51918238", "RevisionGUID": "3de638ac-d4c0-4f6e-bbaa-cd72dbc63c8e", "CreationDate": "2018-08-19T13:40:28.583", "UserId": "292291", "Text": "|amazon-web-services|aws-cloudformation|ssm|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "72058788", "PostTypeId": "2", "ParentId": "51918238", "CreationDate": "2022-04-29T13:32:35.943", "Score": "0", "Body": "<p>When using nested stacks the param Type must be String as the Ref to the parameter in the main stack would result in being a String</p>\n<p><strong>main template -&gt; root stack</strong></p>\n<pre><code>&quot;Parameters&quot;: {\n  &quot;MyParam&quot;: {\n    &quot;Description&quot;: &quot;My description&quot;,\n    &quot;Type&quot;: &quot;AWS::SSM::Parameter::Value&lt;String&gt;&quot;\n  }\n}\n...\n&quot;MyNestedStack&quot;: {\n  &quot;Type&quot;: &quot;AWS::CloudFormation::Stack&quot;,\n  &quot;Properties&quot;: {\n    &quot;Parameters&quot;: {\n      &quot;MyParamFromMain&quot;: { &quot;Ref&quot;: &quot;MyParam&quot; }\n    }\n  }\n}\n</code></pre>\n<p><strong>2nd template -&gt; nested / child stack</strong></p>\n<pre><code>&quot;Parameters&quot;: {\n  &quot;MyParamFromMain&quot;: {\n    &quot;Description&quot;: &quot;My description&quot;,\n    &quot;Type&quot;: &quot;String&quot;\n  }\n}\n</code></pre>\n", "OwnerUserId": "2170425", "LastEditorUserId": "2170425", "LastEditDate": "2022-04-29T13:41:24.107", "LastActivityDate": "2022-04-29T13:41:24.107", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "269159879", "PostHistoryTypeId": "2", "PostId": "72058788", "RevisionGUID": "fd270fad-7766-4e3c-90e9-e879165b9a8f", "CreationDate": "2022-04-29T13:32:35.943", "UserId": "2170425", "Text": "When using nested stacks the param Type must be String as the Ref to the parameter in the main stack would result in being a String\r\n\r\n**main stack**\r\n```\r\n\"MyParam\": {\r\n  \"Description\": \"My description\",\r\n  \"Type\": \"AWS::SSM::Parameter::Value<String>\"\r\n}\r\n```\r\n**sub stack**\r\n```\r\n\"MyParam\": {\r\n  \"Description\": \"My description\",\r\n  \"Type\": \"String\"\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "269160562", "PostHistoryTypeId": "5", "PostId": "72058788", "RevisionGUID": "877fc186-6fb0-4bd7-ad0f-6696372b7918", "CreationDate": "2022-04-29T13:41:24.107", "UserId": "2170425", "Comment": "added 276 characters in body", "Text": "When using nested stacks the param Type must be String as the Ref to the parameter in the main stack would result in being a String\r\n\r\n**main template -> root stack**\r\n```\r\n\"Parameters\": {\r\n  \"MyParam\": {\r\n    \"Description\": \"My description\",\r\n    \"Type\": \"AWS::SSM::Parameter::Value<String>\"\r\n  }\r\n}\r\n...\r\n\"MyNestedStack\": {\r\n  \"Type\": \"AWS::CloudFormation::Stack\",\r\n  \"Properties\": {\r\n    \"Parameters\": {\r\n      \"MyParamFromMain\": { \"Ref\": \"MyParam\" }\r\n    }\r\n  }\r\n}\r\n```\r\n**2nd template -> nested / child stack**\r\n```\r\n\"Parameters\": {\r\n  \"MyParamFromMain\": {\r\n    \"Description\": \"My description\",\r\n    \"Type\": \"String\"\r\n  }\r\n}\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "54023285", "PostTypeId": "2", "ParentId": "51918238", "CreationDate": "2019-01-03T13:31:01.487", "Score": "10", "Body": "<p>We had a similar issue and found that we hit this issue when updating the definition of the parameter. </p>\n\n<p>Our situation was: </p>\n\n<p>Created stack with parameter StageName with type String default Dev.</p>\n\n<p>We then moved to using the parameter store and updated the parameter definition to be of type AWS::SSM::Parameter::Value and default with the parameter store path. </p>\n\n<p>When calling the update stack, Cloudformation was reading the existing value 'Dev' and passing this in as the default to the parameter and so it was then looking for the parameter store value at path Dev. Obviously this didn't exist and resulted in the error:</p>\n\n<p>An error occurred (ValidationError) when calling the CreateChangeSet operation: Unable to fetch parameters [Dev] from parameter store for this account.</p>\n\n<p>The easiest fix for us was to delete the stack and recreate but can see this being a problem for others. If anybody has a better 'upgrade' method it would be good to find out.</p>\n\n<p>We were deploying using sam deploy for a Lambda so not sure if this applied to update-stack for other stacks.</p>\n\n<p>UPDATE**</p>\n\n<p>I tried recreating this via create/update stack but failed so it looks like this issue is restricted to the pacakge/deploy upgrade mechanism</p>\n", "OwnerUserId": "10862849", "LastEditorUserId": "10862849", "LastEditDate": "2019-01-04T08:43:41.950", "LastActivityDate": "2019-01-04T08:43:41.950", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "188856826", "PostHistoryTypeId": "2", "PostId": "54023285", "RevisionGUID": "dd68dbbb-4d2c-4d70-928f-f8a1c47c16bc", "CreationDate": "2019-01-03T13:31:01.487", "UserId": "10862849", "Text": "We had a similar issue and found that we hit this issue when updating the definition of the parameter. \r\n\r\nOur situation was: \r\n\r\nCreated stack with parameter StageName with type String default Dev.\r\n\r\nWe then moved to using the parameter store and updated the parameter definition to be of type AWS::SSM::Parameter::Value<String> and default with the parameter store path. \r\n\r\nWhen calling the update stack, Cloudformation was reading the existing value 'Dev' and passing this in as the default to the parameter and so it was then looking for the parameter store value at path Dev. Obviously this didn't exist and resulted in the error:\r\n\r\nAn error occurred (ValidationError) when calling the CreateChangeSet operation: Unable to fetch parameters [Dev] from parameter store for this account.\r\n\r\nThe easiest fix for us was to delete the stack and recreate but can see this being a problem for others. If anybody has a better 'upgrade' method it would be good to find out.\r\n\r\nWe were deploying using sam deploy for a Lambda so not sure if this applied to update-stack for other stacks.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "188906216", "PostHistoryTypeId": "5", "PostId": "54023285", "RevisionGUID": "88b9db95-e1ea-4ccc-bb82-81bd12180e18", "CreationDate": "2019-01-04T08:43:41.950", "UserId": "10862849", "Comment": "added 156 characters in body", "Text": "We had a similar issue and found that we hit this issue when updating the definition of the parameter. \r\n\r\nOur situation was: \r\n\r\nCreated stack with parameter StageName with type String default Dev.\r\n\r\nWe then moved to using the parameter store and updated the parameter definition to be of type AWS::SSM::Parameter::Value<String> and default with the parameter store path. \r\n\r\nWhen calling the update stack, Cloudformation was reading the existing value 'Dev' and passing this in as the default to the parameter and so it was then looking for the parameter store value at path Dev. Obviously this didn't exist and resulted in the error:\r\n\r\nAn error occurred (ValidationError) when calling the CreateChangeSet operation: Unable to fetch parameters [Dev] from parameter store for this account.\r\n\r\nThe easiest fix for us was to delete the stack and recreate but can see this being a problem for others. If anybody has a better 'upgrade' method it would be good to find out.\r\n\r\nWe were deploying using sam deploy for a Lambda so not sure if this applied to update-stack for other stacks.\r\n\r\nUPDATE**\r\n\r\nI tried recreating this via create/update stack but failed so it looks like this issue is restricted to the pacakge/deploy upgrade mechanism", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "59002626", "PostTypeId": "2", "ParentId": "51918238", "CreationDate": "2019-11-22T22:33:39.773", "Score": "10", "Body": "<p>it seems that updating a stack will not update the default value for the stack parameters. if you want to update the default value, you need to rename the parameter and then update the stack. once that works, you can immediately rename the parameter back.</p>\n<p>side note: if you just want &quot;local variables&quot; or &quot;config&quot; data in a cloudformation yaml, just use the mappings section to store config rather than parameter defaults. honestly, this behavior of parameter defaults is so unintuitive, we just forbid them entirely in our codebase.</p>\n", "OwnerUserId": "4499923", "LastEditorUserId": "4499923", "LastEditDate": "2022-04-28T20:55:49.420", "LastActivityDate": "2022-04-28T20:55:49.420", "CommentCount": "3", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "105337069", "PostId": "59002626", "Score": "0", "Text": "This was the simplest answer and it worked best for me (changing the name back was not required in my case).", "CreationDate": "2020-01-03T21:02:48.753", "UserId": "1772103", "filtered-sentences": [{"source": "Text", "text": "This was the simplest answer and it worked best for me (changing the name back was not required in my case).", "keywords": ["change"]}]}, {"Id": "110405981", "PostId": "59002626", "Score": "0", "Text": "Great! This is a quick and efficient fix. Thank you! I prefer to do this rather than deleting and recreating the stack as I've been doing before and SteveB suggests.", "CreationDate": "2020-06-17T10:30:12.717", "UserId": "2083587", "filtered-sentences": [{"source": "Text", "text": "This is a quick and efficient fix. ", "keywords": ["efficient"]}]}, {"Id": "125647892", "PostId": "59002626", "Score": "1", "Text": "This was my fix too! I was baffled why this behaviour only happened in one environment/account.", "CreationDate": "2022-02-11T10:09:47.853", "UserId": "744648", "filtered-sentences": []}], "history": [{"Id": "209796695", "PostHistoryTypeId": "2", "PostId": "59002626", "RevisionGUID": "39f3b692-6c21-44e9-808c-12370b3aea3f", "CreationDate": "2019-11-22T22:33:39.773", "UserId": "4499923", "Text": "it seems that updating a stack will not update the default value for the stack parameters. if you want to update the default value, you need to rename the parameter and then update the stack. once that works, you can immediately rename the parameter back.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "263936683", "PostHistoryTypeId": "5", "PostId": "59002626", "RevisionGUID": "c61c92a5-442e-446d-96bc-36bb79e038bb", "CreationDate": "2022-02-11T18:44:47.280", "UserId": "4499923", "Comment": "added side note for mappings section", "Text": "it seems that updating a stack will not update the default value for the stack parameters. if you want to update the default value, you need to rename the parameter and then update the stack. once that works, you can immediately rename the parameter back.\r\n\r\nside note: if you just want \"local variables\" or \"config\" data in a cloudformation yaml, just use the mappings section to store config rather than parameter defaults.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "269114351", "PostHistoryTypeId": "5", "PostId": "59002626", "RevisionGUID": "36e01da0-08ea-4586-afb0-40441592972c", "CreationDate": "2022-04-28T20:55:49.420", "UserId": "4499923", "Comment": "added side note about avoiding parameter defaults", "Text": "it seems that updating a stack will not update the default value for the stack parameters. if you want to update the default value, you need to rename the parameter and then update the stack. once that works, you can immediately rename the parameter back.\r\n\r\nside note: if you just want \"local variables\" or \"config\" data in a cloudformation yaml, just use the mappings section to store config rather than parameter defaults. honestly, this behavior of parameter defaults is so unintuitive, we just forbid them entirely in our codebase.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "58295326", "PostTypeId": "2", "ParentId": "51918238", "CreationDate": "2019-10-08T23:51:35.797", "Score": "16", "Body": "<p>This usually happens when you pass the parameters from one template to another.</p>\n\n<pre><code>Template 1 has parameter reading from SSM store and passing it to another template\n</code></pre>\n\n<pre><code>Parameters:\n  SNSTopicArnParam:\n    Description: Arn of the SNS topic\n    Type: AWS::SSM::Parameter::Value&lt;String&gt;\n    Default: /arn/topics/topic1\nResources:\n  CallOtherStack:\n    Type: AWS::CloudFormation::Stack\n    Properties:\n      TemplateURL: someurl/template2.yaml\n      Parameters:\n        SNSTopicArn: !Ref SNSTopicArnParam\n</code></pre>\n\n<p>And Template 2 has the following parameter and resources (will be erroring with the Unable to fetch parameters error.)</p>\n\n<pre><code>Parameters:\n  SNSTopicArnFromCaller:\n    Description: Arn of the SNS topic\n    Type: AWS::SSM::Parameter::Value&lt;String&gt;\n    Default: /arn/topics/topic1\nResources:\n  NewSubscription:\n    Type: AWS::SNS::Subscription\n    Properties:\n      Parameters:\n        TopicArn: !Ref SNSTopicArnFromCaller\n        Endpoint: someValue\n        Protocol: SQS\n</code></pre>\n\n<p>This is because the template one would have the value of /arn/topics/topic1 (the arn of the topic) and pass the arn value to template2 while calling it. And template2 has the type of the value as another SSM parameter.</p>\n\n<p>To resolve this, the template2 parameter type should be just the type of the actual parameter value. In this case, it should be <strong>String</strong></p>\n\n<p>so, template 2 should be updated as below to work properly</p>\n\n<pre><code>Parameters:\n  SNSTopicArnFromCaller:\n    Description: Arn of the SNS topic\n    Type: String\nResources:\n  NewSubscription:\n    Type: AWS::SNS::Subscription\n    Properties:\n      Parameters:\n        TopicArn: !Ref SNSTopicArnFromCaller\n        Endpoint: someValue\n        Protocol: SQS\n</code></pre>\n", "OwnerUserId": "10248244", "LastActivityDate": "2019-10-08T23:51:35.797", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "206850534", "PostHistoryTypeId": "2", "PostId": "58295326", "RevisionGUID": "1c53752a-41a1-4584-850b-209fb3806f5f", "CreationDate": "2019-10-08T23:51:35.797", "UserId": "10248244", "Text": "This usually happens when you pass the parameters from one template to another.\r\n\r\n    Template 1 has parameter reading from SSM store and passing it to another template\r\n````\r\nParameters:\r\n  SNSTopicArnParam:\r\n    Description: Arn of the SNS topic\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n    Default: /arn/topics/topic1\r\nResources:\r\n  CallOtherStack:\r\n    Type: AWS::CloudFormation::Stack\r\n    Properties:\r\n      TemplateURL: someurl/template2.yaml\r\n      Parameters:\r\n        SNSTopicArn: !Ref SNSTopicArnParam\r\n````\r\n\r\nAnd Template 2 has the following parameter and resources (will be erroring with the Unable to fetch parameters error.)\r\n````\r\nParameters:\r\n  SNSTopicArnFromCaller:\r\n    Description: Arn of the SNS topic\r\n    Type: AWS::SSM::Parameter::Value<String>\r\n    Default: /arn/topics/topic1\r\nResources:\r\n  NewSubscription:\r\n    Type: AWS::SNS::Subscription\r\n    Properties:\r\n      Parameters:\r\n        TopicArn: !Ref SNSTopicArnFromCaller\r\n        Endpoint: someValue\r\n        Protocol: SQS\r\n````\r\n\r\n   This is because the template one would have the value of /arn/topics/topic1 (the arn of the topic) and pass the arn value to template2 while calling it. And template2 has the type of the value as another SSM parameter.\r\n\r\nTo resolve this, the template2 parameter type should be just the type of the actual parameter value. In this case, it should be **String**\r\n\r\nso, template 2 should be updated as below to work properly\r\n````\r\nParameters:\r\n  SNSTopicArnFromCaller:\r\n    Description: Arn of the SNS topic\r\n    Type: String\r\nResources:\r\n  NewSubscription:\r\n    Type: AWS::SNS::Subscription\r\n    Properties:\r\n      Parameters:\r\n        TopicArn: !Ref SNSTopicArnFromCaller\r\n        Endpoint: someValue\r\n        Protocol: SQS\r\n````\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "58980463", "PostTypeId": "2", "ParentId": "51918238", "CreationDate": "2019-11-21T17:21:30.483", "Score": "1", "Body": "<p>I had the same issue. Updated an existing stack set instance parameter from a string to a parameter store lookup and the stack instance update failed for one of three accounts with error <code>Unable to fetch parameters ['string'] from parameter store for this account</code>. Unfortunately, due to the fact that these instances were in production accounts, deleting and redeploying was not an option. </p>\n\n<p>I opened a support case with AWS and they agreed with the diagnosis in this thread. The following was the suggestion, which worked. </p>\n\n<ol>\n<li>Update the stuck stack instance while specifying a parameter list but with no parameter values. This should reset the parameters back to the StackSet defaults. \n\n<ul>\n<li>I did this successfully with the following AWS CLI command:\n<code>aws cloudformation update-stack-instances --stack-set-name stack-set-name --accounts \"############\" --regions us-east-1 --parameter-overrides</code></li>\n</ul></li>\n<li>Attempt to update the stack instance again with the desired parameters.</li>\n</ol>\n\n<p>In my case I did not need to perform step 2 because I wanted to use the default value of the parameters. Others may need to pass desired parameters in this second step.</p>\n\n<p>Hope this helps.</p>\n", "OwnerUserId": "6895791", "LastActivityDate": "2019-11-21T17:21:30.483", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "209706944", "PostHistoryTypeId": "2", "PostId": "58980463", "RevisionGUID": "a9a6beef-0996-43e6-bea1-7929b3180c5d", "CreationDate": "2019-11-21T17:21:30.483", "UserId": "6895791", "Text": "I had the same issue. Updated an existing stack set instance parameter from a string to a parameter store lookup and the stack instance update failed for one of three accounts with error ```Unable to fetch parameters ['string'] from parameter store for this account```. Unfortunately, due to the fact that these instances were in production accounts, deleting and redeploying was not an option. \r\n\r\nI opened a support case with AWS and they agreed with the diagnosis in this thread. The following was the suggestion, which worked. \r\n\r\n 1. Update the stuck stack instance while specifying a parameter list but with no parameter values. This should reset the parameters back to the StackSet defaults. \r\n    - I did this successfully with the following AWS CLI command:\r\n```aws cloudformation update-stack-instances --stack-set-name stack-set-name --accounts \"############\" --regions us-east-1 --parameter-overrides```\r\n 2. Attempt to update the stack instance again with the desired parameters.\r\n\r\nIn my case I did not need to perform step 2 because I wanted to use the default value of the parameters. Others may need to pass desired parameters in this second step.\r\n\r\nHope this helps.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Updated an existing stack set instance parameter from a string to a parameter store lookup and the stack instance update failed for one of three accounts with error ```Unable to fetch parameters ['string'] from parameter store for this account```. ", "keywords": ["instance"]}, {"source": "Text", "text": "1. Update the stuck stack instance while specifying a parameter list but with no parameter values. ", "keywords": ["instance"]}, {"source": "Text", "text": "Attempt to update the stack instance again with the desired parameters. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "Updated an existing stack set instance parameter from a string to a parameter store lookup and the stack instance update failed for one of three accounts with error Unable to fetch parameters ['string'] from parameter store for this account. ", "keywords": ["instance"]}, {"source": "Body", "text": "Update the stuck stack instance while specifying a parameter list but with no parameter values. ", "keywords": ["instance"]}, {"source": "Body", "text": "Attempt to update the stack instance again with the desired parameters. ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": []}