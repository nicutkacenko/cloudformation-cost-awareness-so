{"Id": "53669868", "PostTypeId": "1", "AcceptedAnswerId": "53741359", "CreationDate": "2018-12-07T12:46:36.047", "Score": "1", "ViewCount": "2424", "Body": "<p>I have an AWS Beanstalk application and environment created using the following CloudFormation template:</p>\n\n<pre><code>MyApp:\n    Type: 'AWS::ElasticBeanstalk::Application'\n    Properties:\n        ApplicationName: MyAppName\n\nInitialApplication:\n    Type: 'AWS::ElasticBeanstalk::ApplicationVersion'\n    Properties:\n        ApplicationName: !Ref MyApp\n        Description: Version 1.0\n        SourceBundle:\n            S3Bucket: !Sub 'elasticbeanstalk-samples-${AWS::Region}'\n            S3Key: ecs-sample.zip\n\nAppEnvironment:\n    Type: 'AWS::ElasticBeanstalk::Environment'\n    Properties:\n        ApplicationName: !Ref MyApp\n        Description: staging\n        TemplateName: !Ref AppConfigurationTemplate\n        VersionLabel: !Ref InitialApplication\n\nAppConfigurationTemplate:\n    Type: 'AWS::ElasticBeanstalk::ConfigurationTemplate'\n    DependsOn:\n        - MySecurityGroup\n    Properties:\n        ApplicationName: !Ref MyApp\n        Description: My Configuration Template\n        SolutionStackName: '64bit Amazon Linux 2018.03 v2.11.2 running Multi-container Docker 18.03.1-ce (Generic)'\n        OptionSettings:\n            # Lots of options here\n\n            # Application environment variables\n            - Namespace: aws:elasticbeanstalk:application:environment\n              OptionName: MY_APP_OPTION\n              Value: SOME_VALUE\n</code></pre>\n\n<p>The problem is that if I add an environment variable to my application (i.e. in the <code>aws:elasticbeanstalk:application:environment</code> namespace), Beanstalk resets the application version of the environment to the initial application. So suppose I created the CloudFormation stack a year ago and have since deployed 50 versions of my app... If I then add an environment variable through CloudFormation, the environment's application is reset to the sample application. This will of course break everything, as databases have changed, etc. What I want, is of course to add/modify environment variables without changing the deployed application version within the Beanstalk environment.</p>\n\n<p>Why does Beanstalk reset my application when making this change, and is there any way to prevent it?</p>\n\n<p>Thanks in advance!</p>\n", "OwnerUserId": "784841", "LastActivityDate": "2018-12-13T13:10:55.673", "Title": "Adding environment variable with AWS CloudFormation resets AWS Beanstalk app", "Tags": "|amazon-web-services|aws-cloudformation|amazon-elastic-beanstalk|", "AnswerCount": "3", "CommentCount": "6", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "94344365", "PostId": "53669868", "Score": "0", "Text": "How have you been making changes already? This most likely looks like a classic case of a Cloudformation stack deployed, and then the resources associated modified through the console/cli etc. and not inside cloudformation.  If you haven't updated the Cloudformation stack then this is expected behaviour, Cloudformation will see a newer version than the template's as drift and will try to reset it back to normal, which is the original template.  I don't know much about beanstalk but you might want to have a look at the InitialApplication part to make sure it's deploying an uptodate version.", "CreationDate": "2018-12-12T15:13:19.450", "UserId": "10775237", "filtered-sentences": [{"source": "Text", "text": "How have you been making changes already? ", "keywords": ["change"]}]}, {"Id": "94351785", "PostId": "53669868", "Score": "0", "Text": "Yes, I have deployed new application versions within the EB console, and also added environment variables. But before I did this (before there was a drift between the CF template and the EB environment), adding a new environment variable within the CF template would also rollback the application version. Perhaps because I had deployed a new application. So it seems like the CF template needs to always be up to date with the latest application version. I was hoping to only specify the initial version, because that would allow me to deploy through the EB console.", "CreationDate": "2018-12-12T18:54:11.210", "UserId": "784841", "filtered-sentences": []}, {"Id": "94354571", "PostId": "53669868", "Score": "0", "Text": "Yes keeping cloudformation up to date constantly is best practice and certainly recommended. If you don\u2019t do this then you will end up in awkward scenarios like you are now experiencing, it\u2019s unfortunate but fixable. You will need to update the bundled source inside the CF template to the most up to date version so that it will deploy, it may require to rebuild the infra as it\u2019s a big change that it doesn\u2019t know has happened.", "CreationDate": "2018-12-12T20:34:40.880", "UserId": "10775237", "filtered-sentences": [{"source": "Text", "text": "You will need to update the bundled source inside the CF template to the most up to date version so that it will deploy, it may require to rebuild the infra as it\u2019s a big change that it doesn\u2019t know has happened.", "keywords": ["change"]}]}, {"Id": "94376814", "PostId": "53669868", "Score": "0", "Text": "Yep, I just didn't think that I had to deploy through CF; I thought the application version was just the initial one. I will have to patch things up and pay attention to not break anything. Thanks a lot for your input!", "CreationDate": "2018-12-13T13:09:00.947", "UserId": "784841", "filtered-sentences": [{"source": "Text", "text": "I will have to patch things up and pay attention to not break anything. ", "keywords": ["pay"]}]}, {"Id": "94376843", "PostId": "53669868", "Score": "0", "Text": "No problem, I don't know if you want me to post an answer so you can accept to close the thread off or accept someone else's, just let me know.", "CreationDate": "2018-12-13T13:10:07.043", "UserId": "10775237", "filtered-sentences": []}, {"Id": "94408259", "PostId": "53669868", "Score": "0", "Text": "I accepted another answer that provided a bit more details. I gave your answer an upvote because you also pointed me in the direction in which I needed to go. Thanks a lot for your help!", "CreationDate": "2018-12-14T11:09:33.373", "UserId": "784841", "filtered-sentences": []}], "history": [{"Id": "187359321", "PostHistoryTypeId": "2", "PostId": "53669868", "RevisionGUID": "5496b967-7e2f-406b-a402-731c700979e2", "CreationDate": "2018-12-07T12:46:36.047", "UserId": "784841", "Text": "I have an AWS Beanstalk application and environment created using the following CloudFormation template:\r\n\r\n    MyApp:\r\n     Type: 'AWS::ElasticBeanstalk::Application'\r\n     Properties:\r\n      ApplicationName: MyAppName\r\n    \r\n    InitialApplication:\r\n     Type: 'AWS::ElasticBeanstalk::ApplicationVersion'\r\n     Properties:\r\n      ApplicationName: !Ref MyApp\r\n      Description: Version 1.0\r\n      SourceBundle:\r\n       S3Bucket: !Sub 'elasticbeanstalk-samples-${AWS::Region}'\r\n       S3Key: ecs-sample.zip\r\n    \r\n    AppEnvironment:\r\n     Type: 'AWS::ElasticBeanstalk::Environment'\r\n     Properties:\r\n      ApplicationName: !Ref MyApp\r\n      Description: staging\r\n      TemplateName: !Ref AppConfigurationTemplate\r\n      VersionLabel: !Ref InitialApplication\r\n    \r\n    AppConfigurationTemplate:\r\n     Type: 'AWS::ElasticBeanstalk::ConfigurationTemplate'\r\n     DependsOn:\r\n      - MySecurityGroup\r\n     Properties:\r\n      ApplicationName: !Ref MyApp\r\n      Description: My Configuration Template\r\n      SolutionStackName: '64bit Amazon Linux 2018.03 v2.11.2 running Multi-container Docker 18.03.1-ce (Generic)'\r\n      OptionSettings:\r\n       # Lots of options here\r\n    \r\n       # Application environment variables\r\n       - Namespace: aws:elasticbeanstalk:application:environment\r\n         OptionName: MY_APP_OPTION\r\n         Value: SOME_VALUE\r\n\r\nThe problem is that if I add an environment variable to my application (i.e. in the `aws:elasticbeanstalk:application:environment` namespace), Beanstalk resets the application version of the environment to the initial application. So suppose I created the CloudFormation stack a year ago and have since deployed 50 versions of my app... If I then add an environment variable through CloudFormation, the environment's application is reset to the sample application. This will of course break everything, as databases have changed, etc. What I want, is of course to add/modify environment variables without changing the deployed application version within the Beanstalk environment.\r\n\r\nWhy does Beanstalk reset my application when making this change, and is there any way to prevent it?\r\n\r\nThanks in advance!", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "This will of course break everything, as databases have changed, etc. ", "keywords": ["change"]}, {"source": "Text", "text": "What I want, is of course to add/modify environment variables without changing the deployed application version within the Beanstalk environment. ", "keywords": ["change"]}, {"source": "Text", "text": "Why does Beanstalk reset my application when making this change, and is there any way to prevent it? ", "keywords": ["change"]}]}, {"Id": "187359322", "PostHistoryTypeId": "1", "PostId": "53669868", "RevisionGUID": "5496b967-7e2f-406b-a402-731c700979e2", "CreationDate": "2018-12-07T12:46:36.047", "UserId": "784841", "Text": "Adding environment variable with AWS CloudFormation resets AWS Beanstalk app", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "187359323", "PostHistoryTypeId": "3", "PostId": "53669868", "RevisionGUID": "5496b967-7e2f-406b-a402-731c700979e2", "CreationDate": "2018-12-07T12:46:36.047", "UserId": "784841", "Text": "|amazon-web-services|aws-cloudformation|amazon-elastic-beanstalk|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "187667932", "PostHistoryTypeId": "33", "PostId": "53669868", "RevisionGUID": "5cfce672-570b-4d37-9225-a3ff8f325f4f", "CreationDate": "2018-12-12T10:31:20.547", "UserId": "784841", "Comment": "173122", "filtered-sentences": []}, {"Id": "187820554", "PostHistoryTypeId": "34", "PostId": "53669868", "RevisionGUID": "28a573c2-14ba-4f61-8cfb-bc357c58cb46", "CreationDate": "2018-12-14T11:08:30.907", "UserId": "784841", "Comment": "173122", "filtered-sentences": []}], "answers": [{"Id": "53762652", "PostTypeId": "2", "ParentId": "53669868", "CreationDate": "2018-12-13T13:10:55.673", "Score": "1", "Body": "<p>Keeping cloudformation up to date constantly is best practice and certainly recommended. If you don\u2019t do this then you will end up in awkward scenarios like you are now experiencing, it\u2019s unfortunate but fixable. You will need to update the bundled source inside the CF template to the most up to date version so that it will deploy, it may require to rebuild the infra as it\u2019s a big change that it doesn\u2019t know has happened</p>\n", "OwnerUserId": "10775237", "LastActivityDate": "2018-12-13T13:10:55.673", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "187756121", "PostHistoryTypeId": "2", "PostId": "53762652", "RevisionGUID": "509bb4ac-99e7-437b-a0aa-a531079e2f86", "CreationDate": "2018-12-13T13:10:55.673", "UserId": "10775237", "Text": "Keeping cloudformation up to date constantly is best practice and certainly recommended. If you don\u2019t do this then you will end up in awkward scenarios like you are now experiencing, it\u2019s unfortunate but fixable. You will need to update the bundled source inside the CF template to the most up to date version so that it will deploy, it may require to rebuild the infra as it\u2019s a big change that it doesn\u2019t know has happened", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You will need to update the bundled source inside the CF template to the most up to date version so that it will deploy, it may require to rebuild the infra as it\u2019s a big change that it doesn\u2019t know has happened", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "You will need to update the bundled source inside the CF template to the most up to date version so that it will deploy, it may require to rebuild the infra as it\u2019s a big change that it doesn\u2019t know has happened", "keywords": ["change"]}]}, {"Id": "53670596", "PostTypeId": "2", "ParentId": "53669868", "CreationDate": "2018-12-07T13:28:47.190", "Score": "-1", "Body": "<p>You need to execute the Environment Variable change through ChangeSet so that only enviorment variable change is executed and rest your stack remain as-is. </p>\n", "OwnerUserId": "10754138", "LastActivityDate": "2018-12-07T13:28:47.190", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "94201442", "PostId": "53670596", "Score": "0", "Text": "Does that make a difference? If I do a stack update, it shows me the change set before submitting the update. If I create a change set, it shows the same changes, only that I can create the change set and execute it later. But isn't the end result the same? Both approaches show that the configuration template will be replaced, and that the environment will be modified. For some reason this causes the application version to be reset. But do I misunderstand something in saying that both approaches have the same end result?", "CreationDate": "2018-12-07T15:01:36.670", "UserId": "784841", "filtered-sentences": [{"source": "Text", "text": "If I do a stack update, it shows me the change set before submitting the update. ", "keywords": ["change"]}, {"source": "Text", "text": "If I create a change set, it shows the same changes, only that I can create the change set and execute it later. ", "keywords": ["change"]}]}], "history": [{"Id": "187362118", "PostHistoryTypeId": "2", "PostId": "53670596", "RevisionGUID": "96ac2e97-9819-4d5d-9769-2c3c161cec38", "CreationDate": "2018-12-07T13:28:47.190", "UserId": "10754138", "Text": "You need to execute the Environment Variable change through ChangeSet so that only enviorment variable change is executed and rest your stack remain as-is. ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You need to execute the Environment Variable change through ChangeSet so that only enviorment variable change is executed and rest your stack remain as-is.", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "You need to execute the Environment Variable change through ChangeSet so that only enviorment variable change is executed and rest your stack remain as-is.", "keywords": ["change"]}]}, {"Id": "53741359", "PostTypeId": "2", "ParentId": "53669868", "CreationDate": "2018-12-12T10:50:17.647", "Score": "3", "Body": "<p>An important concept to understand here is why actually using CloudFormation to deploy your app, if you can initialize and then upload new versions of your app through the EB Console (as you state you were doing) or the EB API. CloudFormation is kind of a \"recipe\" for your application and it's designed to <a href=\"https://blog.codeship.com/elastic-beanstalk-and-cloudformation/\" rel=\"nofollow noreferrer\">keep the infrastructure definition under source control</a>. This is the reason why you were observing a rollback when updating only the environmental variables part in your \"recipe\" - the changes made in CloudFormation were triggering an update in the app and definitions from the template were applied - where the old app version was hard-coded. This is why ideally your <a href=\"https://stackoverflow.com/questions/48791799/can-an-elastic-beanstalk-environment-be-updated-in-cloudformation-without-affect#answer-48793461\">CloudFormation template should be parametrized</a> - each time you want to make an update in your app, you should pass the newest version name to the template.</p>\n\n<p>Of course you can manually update the EB version in its Console, but in that case the whole idea of using CloudFormation becomes pointless and will lead to complications that you are observing.</p>\n\n<p>As you specified in the comment, you can be uploading new app versions to S3 and then updating CloudFormation through the API passing the version as a parameter. This way the updates can be automatized. An example API call to make some updates in the stack (explanation in the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/cloudformation/update-stack.html\" rel=\"nofollow noreferrer\">AWS docs</a>):</p>\n\n<pre><code>aws cloudformation update-stack --stack-name mystack --template-url https://s3.amazonaws.com/sample/updated.template\n--parameters ParameterKey=VPCID,ParameterValue=SampleVPCID ParameterKey=SubnetIDs,ParameterValue=SampleSubnetID1\\\\,UpdatedSampleSubnetID2\n</code></pre>\n\n<p>In your case the parameter to update will be <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-version.html\" rel=\"nofollow noreferrer\">AWS::ElasticBeanstalk::ApplicationVersion</a> and especially the <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-sourcebundle.html\" rel=\"nofollow noreferrer\">SourceBundle</a>.</p>\n\n<p><strong>OLD ANSWER (updating the app in the EB Console, not touching CloudFormation)</strong></p>\n\n<p>I understand that you do not deploy the application using the Cloud Formation template (as it was not updated for a year), therefore you must be doing it programatically with <code>eb deploy</code> or in the Elastic Beanstalk Console. Why not updating the environmental variables there in the console, then?</p>\n\n<p>You can do that by going to the app's console, clicking on \"Configuration\" in the menu on the left, then the \"Modify\" button in the \"Software\" section. In the bottom you can add environmental variables that will exist in your app after each new deployment.</p>\n", "OwnerUserId": "8654161", "LastEditorUserId": "8654161", "LastEditDate": "2018-12-13T09:50:40.167", "LastActivityDate": "2018-12-13T09:50:40.167", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "94339054", "PostId": "53741359", "Score": "0", "Text": "That's actually what I have been doing due to the problem of the application version being reset by CloudFormation. To work around that issue, I have added the environment variables within the Console. The problem with that, is that this causes the actual configuration to drift away from the CF template. So if I were to create a new CF stack, things would not work because the environment variables that my application expects, are not present within the CF template. So I need these to be controlled by the CF template without resetting the application for every deployment.", "CreationDate": "2018-12-12T12:41:47.960", "UserId": "784841", "filtered-sentences": []}, {"Id": "94340254", "PostId": "53741359", "Score": "0", "Text": "Alright, so it looks like you need to pass the app version as a parameter to CloudFormation, because your Elastic Beanstalk app relies on this template. Take a look at [this answer](https://stackoverflow.com/questions/48791799/can-an-elastic-beanstalk-environment-be-updated-in-cloudformation-without-affect#answer-48793461).", "CreationDate": "2018-12-12T13:18:18.777", "UserId": "8654161", "filtered-sentences": []}, {"Id": "94351689", "PostId": "53741359", "Score": "0", "Text": "Thanks, that looks interesting. If I understand the answer correctly, I would actually be deploying a new application version through CloudFormation. Currently I compress a zip archive and upload that within the Beanstalk console. This new approach would require changes to my deployment scripts. So uploading the new version to S3 (e.g. `my-app-526`), and then make a stack update through the API and pass `my-app-526` as the version, which is then used for the initial application. That should deploy the new app, if I am not mistaken?", "CreationDate": "2018-12-12T18:51:19.803", "UserId": "784841", "filtered-sentences": [{"source": "Text", "text": "This new approach would require changes to my deployment scripts. ", "keywords": ["change"]}]}, {"Id": "94369939", "PostId": "53741359", "Score": "0", "Text": "Yes, you understand it right. I updated my answer with a broader explanation and some links.", "CreationDate": "2018-12-13T09:45:28.240", "UserId": "8654161", "filtered-sentences": []}, {"Id": "94408207", "PostId": "53741359", "Score": "0", "Text": "Awesome, it makes perfect sense. I will probably make a change set through the API so that I can review the changes before applying them. So the deployment will happen when I execute the change set. But it's essentially the same thing, just with an added manual step. :-) Thanks a lot for your help!", "CreationDate": "2018-12-14T11:08:21.200", "UserId": "784841", "filtered-sentences": [{"source": "Text", "text": "I will probably make a change set through the API so that I can review the changes before applying them. ", "keywords": ["change"]}, {"source": "Text", "text": "So the deployment will happen when I execute the change set. ", "keywords": ["change"]}]}], "history": [{"Id": "187669296", "PostHistoryTypeId": "2", "PostId": "53741359", "RevisionGUID": "e06899a4-14b9-431e-98d5-63ed191fa50d", "CreationDate": "2018-12-12T10:50:17.647", "UserId": "8654161", "Text": "I understand that you do do not deploy the application using the Cloud Formation template (as it was not updated for a year), therefore you must be doing it programatically with `eb deploy` or in the Elastic Beanstalk Console. Why not updating the environmental variables there in the console, then?\r\n\r\nYou can do that by going to the app's console, clicking on \"Configuration\" in the menu on the left, then the \"Modify\" button in the \"Software\" section. In the bottom you can add environmental variables that will exist in your app after each new deployment.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "187739967", "PostHistoryTypeId": "5", "PostId": "53741359", "RevisionGUID": "422b4b9f-881d-43d9-92d2-048771333f55", "CreationDate": "2018-12-13T09:22:13.920", "UserId": "8654161", "Comment": "added 1564 characters in body", "Text": "An important concept to understand here is why actually using CloudFormation to deploy your app, if you can initialize and then upload new versions of your app through the EB Console (as you state you were doing) or the EB API. CloudFormation is kind of a \"recipe\" for your application and its designed to [keep the infrastructure definition under source control][1]. This is the reason why you were observing a rollback when updating only the environmental variables part in your \"recipe\" - the changes made in CloudFormation were triggering an update in the app and definitions from the template were applied - where the old app version was hard-coded. This is why ideally your [CloudFormation template should be parametrized][2] - each time you want to make an update in your app, you should pass the newest version name to the template.\r\n\r\nOf course you can manually update the EB version in its Console, but in that case the whole idea of using CloudFormation becomes pointless and will lead to complications that you are observing.\r\n\r\nAs you specified in the comment, you can be uploading new app versions to S3 and then updating CloudFormation through the API passing the version name as a parameter. This way the updates can be automatized.\r\n\r\n\r\n**OLD ANSWER (updating the app in the EB Console, not touching CloudFormation)**\r\n\r\nI understand that you do not deploy the application using the Cloud Formation template (as it was not updated for a year), therefore you must be doing it programatically with `eb deploy` or in the Elastic Beanstalk Console. Why not updating the environmental variables there in the console, then?\r\n\r\nYou can do that by going to the app's console, clicking on \"Configuration\" in the menu on the left, then the \"Modify\" button in the \"Software\" section. In the bottom you can add environmental variables that will exist in your app after each new deployment.\r\n\r\n\r\n  [1]: https://blog.codeship.com/elastic-beanstalk-and-cloudformation/\r\n  [2]: https://stackoverflow.com/questions/48791799/can-an-elastic-beanstalk-environment-be-updated-in-cloudformation-without-affect#answer-48793461", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "This is the reason why you were observing a rollback when updating only the environmental variables part in your \"recipe\" - the changes made in CloudFormation were triggering an update in the app and definitions from the template were applied - where the old app version was hard-coded. ", "keywords": ["change"]}]}, {"Id": "187741277", "PostHistoryTypeId": "5", "PostId": "53741359", "RevisionGUID": "2055f8c6-bf0b-4614-87b7-64fa6274dfec", "CreationDate": "2018-12-13T09:41:09.150", "UserId": "8654161", "Comment": "added 794 characters in body", "Text": "An important concept to understand here is why actually using CloudFormation to deploy your app, if you can initialize and then upload new versions of your app through the EB Console (as you state you were doing) or the EB API. CloudFormation is kind of a \"recipe\" for your application and it's designed to [keep the infrastructure definition under source control][1]. This is the reason why you were observing a rollback when updating only the environmental variables part in your \"recipe\" - the changes made in CloudFormation were triggering an update in the app and definitions from the template were applied - where the old app version was hard-coded. This is why ideally your [CloudFormation template should be parametrized][2] - each time you want to make an update in your app, you should pass the newest version name to the template.\r\n\r\nOf course you can manually update the EB version in its Console, but in that case the whole idea of using CloudFormation becomes pointless and will lead to complications that you are observing.\r\n\r\nAs you specified in the comment, you can be uploading new app versions to S3 and then updating CloudFormation through the API passing the version as a parameter. This way the updates can be automatized. An example API call to update the stack's subnets (explanation in the [AWS docs][3]):\r\n\r\n    aws cloudformation update-stack --stack-name mystack --template-url https://s3.amazonaws.com/sample/updated.template\r\n    --parameters ParameterKey=VPCID,ParameterValue=SampleVPCID ParameterKey=SubnetIDs,ParameterValue=SampleSubnetID1\\\\,UpdatedSampleSubnetID2\r\n\r\nIn your case the parameter to update will be [AWS::ElasticBeanstalk::ApplicationVersion][4] and especially the [SourceBundle][5].\r\n\r\n\r\n**OLD ANSWER (updating the app in the EB Console, not touching CloudFormation)**\r\n\r\nI understand that you do not deploy the application using the Cloud Formation template (as it was not updated for a year), therefore you must be doing it programatically with `eb deploy` or in the Elastic Beanstalk Console. Why not updating the environmental variables there in the console, then?\r\n\r\nYou can do that by going to the app's console, clicking on \"Configuration\" in the menu on the left, then the \"Modify\" button in the \"Software\" section. In the bottom you can add environmental variables that will exist in your app after each new deployment.\r\n\r\n\r\n  [1]: https://blog.codeship.com/elastic-beanstalk-and-cloudformation/\r\n  [2]: https://stackoverflow.com/questions/48791799/can-an-elastic-beanstalk-environment-be-updated-in-cloudformation-without-affect#answer-48793461\r\n  [3]: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/update-stack.html\r\n  [4]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-version.html\r\n  [5]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-sourcebundle.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "This is the reason why you were observing a rollback when updating only the environmental variables part in your \"recipe\" - the changes made in CloudFormation were triggering an update in the app and definitions from the template were applied - where the old app version was hard-coded. ", "keywords": ["change"]}]}, {"Id": "187669829", "PostHistoryTypeId": "5", "PostId": "53741359", "RevisionGUID": "aa703247-1aa7-4dd5-9318-5a075ed66d43", "CreationDate": "2018-12-12T10:56:53.983", "UserId": "8654161", "Comment": "deleted 3 characters in body", "Text": "I understand that you do not deploy the application using the Cloud Formation template (as it was not updated for a year), therefore you must be doing it programatically with `eb deploy` or in the Elastic Beanstalk Console. Why not updating the environmental variables there in the console, then?\r\n\r\nYou can do that by going to the app's console, clicking on \"Configuration\" in the menu on the left, then the \"Modify\" button in the \"Software\" section. In the bottom you can add environmental variables that will exist in your app after each new deployment.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "187741883", "PostHistoryTypeId": "5", "PostId": "53741359", "RevisionGUID": "1cca4617-82d9-40be-a575-23e767657a78", "CreationDate": "2018-12-13T09:49:59.870", "UserId": "8654161", "Comment": "deleted 46 characters in body", "Text": "An important concept to understand here is why actually using CloudFormation to deploy your app, if you can initialize and then upload new versions of your app through the EB Console (as you state you were doing) or the EB API. CloudFormation is kind of a \"recipe\" for your application and it's designed to [keep the infrastructure definition under source control][1]. This is the reason why you were observing a rollback when updating only the environmental variables part in your \"recipe\" - the changes made in CloudFormation were triggering an update in the app and definitions from the template were applied - where the old app version was hard-coded. This is why ideally your [CloudFormation template should be parametrized][2] - each time you want to make an update in your app, you should pass the newest version name to the template.\r\n\r\nOf course you can manually update the EB version in its Console, but in that case the whole idea of using CloudFormation becomes pointless and will lead to complications that you are observing.\r\n\r\nAs you specified in the comment, you can be uploading new app versions to S3 and then updating CloudFormation through the API passing the version as a parameter. This way the updates can be automatized. An example API call to update the stack's subnets (explanation in the [AWS docs][3]):\r\n\r\n    aws cloudformation update-stack --stack-name mystack --template-url https://s3.amazonaws.com/sample/updated.template\r\n    --parameters ParameterKey=SubnetIDs,ParameterValue=SampleSubnetID1\\\\,UpdatedSampleSubnetID2\r\n\r\nIn your case the parameter to update will be [AWS::ElasticBeanstalk::ApplicationVersion][4] and especially the [SourceBundle][5].\r\n\r\n\r\n**OLD ANSWER (updating the app in the EB Console, not touching CloudFormation)**\r\n\r\nI understand that you do not deploy the application using the Cloud Formation template (as it was not updated for a year), therefore you must be doing it programatically with `eb deploy` or in the Elastic Beanstalk Console. Why not updating the environmental variables there in the console, then?\r\n\r\nYou can do that by going to the app's console, clicking on \"Configuration\" in the menu on the left, then the \"Modify\" button in the \"Software\" section. In the bottom you can add environmental variables that will exist in your app after each new deployment.\r\n\r\n\r\n  [1]: https://blog.codeship.com/elastic-beanstalk-and-cloudformation/\r\n  [2]: https://stackoverflow.com/questions/48791799/can-an-elastic-beanstalk-environment-be-updated-in-cloudformation-without-affect#answer-48793461\r\n  [3]: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/update-stack.html\r\n  [4]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-version.html\r\n  [5]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-sourcebundle.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "This is the reason why you were observing a rollback when updating only the environmental variables part in your \"recipe\" - the changes made in CloudFormation were triggering an update in the app and definitions from the template were applied - where the old app version was hard-coded. ", "keywords": ["change"]}]}, {"Id": "187741909", "PostHistoryTypeId": "8", "PostId": "53741359", "RevisionGUID": "1303600d-83d0-46ba-bc85-3d85e87e9e33", "CreationDate": "2018-12-13T09:50:15.907", "UserId": "8654161", "Comment": "Rollback to [2055f8c6-bf0b-4614-87b7-64fa6274dfec]", "Text": "An important concept to understand here is why actually using CloudFormation to deploy your app, if you can initialize and then upload new versions of your app through the EB Console (as you state you were doing) or the EB API. CloudFormation is kind of a \"recipe\" for your application and it's designed to [keep the infrastructure definition under source control][1]. This is the reason why you were observing a rollback when updating only the environmental variables part in your \"recipe\" - the changes made in CloudFormation were triggering an update in the app and definitions from the template were applied - where the old app version was hard-coded. This is why ideally your [CloudFormation template should be parametrized][2] - each time you want to make an update in your app, you should pass the newest version name to the template.\r\n\r\nOf course you can manually update the EB version in its Console, but in that case the whole idea of using CloudFormation becomes pointless and will lead to complications that you are observing.\r\n\r\nAs you specified in the comment, you can be uploading new app versions to S3 and then updating CloudFormation through the API passing the version as a parameter. This way the updates can be automatized. An example API call to update the stack's subnets (explanation in the [AWS docs][3]):\r\n\r\n    aws cloudformation update-stack --stack-name mystack --template-url https://s3.amazonaws.com/sample/updated.template\r\n    --parameters ParameterKey=VPCID,ParameterValue=SampleVPCID ParameterKey=SubnetIDs,ParameterValue=SampleSubnetID1\\\\,UpdatedSampleSubnetID2\r\n\r\nIn your case the parameter to update will be [AWS::ElasticBeanstalk::ApplicationVersion][4] and especially the [SourceBundle][5].\r\n\r\n\r\n**OLD ANSWER (updating the app in the EB Console, not touching CloudFormation)**\r\n\r\nI understand that you do not deploy the application using the Cloud Formation template (as it was not updated for a year), therefore you must be doing it programatically with `eb deploy` or in the Elastic Beanstalk Console. Why not updating the environmental variables there in the console, then?\r\n\r\nYou can do that by going to the app's console, clicking on \"Configuration\" in the menu on the left, then the \"Modify\" button in the \"Software\" section. In the bottom you can add environmental variables that will exist in your app after each new deployment.\r\n\r\n\r\n  [1]: https://blog.codeship.com/elastic-beanstalk-and-cloudformation/\r\n  [2]: https://stackoverflow.com/questions/48791799/can-an-elastic-beanstalk-environment-be-updated-in-cloudformation-without-affect#answer-48793461\r\n  [3]: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/update-stack.html\r\n  [4]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-version.html\r\n  [5]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-sourcebundle.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "This is the reason why you were observing a rollback when updating only the environmental variables part in your \"recipe\" - the changes made in CloudFormation were triggering an update in the app and definitions from the template were applied - where the old app version was hard-coded. ", "keywords": ["change"]}]}, {"Id": "187741935", "PostHistoryTypeId": "5", "PostId": "53741359", "RevisionGUID": "98a91aab-f1e3-4976-acd2-acd71aaba975", "CreationDate": "2018-12-13T09:50:40.167", "UserId": "8654161", "Comment": "added 4 characters in body", "Text": "An important concept to understand here is why actually using CloudFormation to deploy your app, if you can initialize and then upload new versions of your app through the EB Console (as you state you were doing) or the EB API. CloudFormation is kind of a \"recipe\" for your application and it's designed to [keep the infrastructure definition under source control][1]. This is the reason why you were observing a rollback when updating only the environmental variables part in your \"recipe\" - the changes made in CloudFormation were triggering an update in the app and definitions from the template were applied - where the old app version was hard-coded. This is why ideally your [CloudFormation template should be parametrized][2] - each time you want to make an update in your app, you should pass the newest version name to the template.\r\n\r\nOf course you can manually update the EB version in its Console, but in that case the whole idea of using CloudFormation becomes pointless and will lead to complications that you are observing.\r\n\r\nAs you specified in the comment, you can be uploading new app versions to S3 and then updating CloudFormation through the API passing the version as a parameter. This way the updates can be automatized. An example API call to make some updates in the stack (explanation in the [AWS docs][3]):\r\n\r\n    aws cloudformation update-stack --stack-name mystack --template-url https://s3.amazonaws.com/sample/updated.template\r\n    --parameters ParameterKey=VPCID,ParameterValue=SampleVPCID ParameterKey=SubnetIDs,ParameterValue=SampleSubnetID1\\\\,UpdatedSampleSubnetID2\r\n\r\nIn your case the parameter to update will be [AWS::ElasticBeanstalk::ApplicationVersion][4] and especially the [SourceBundle][5].\r\n\r\n\r\n**OLD ANSWER (updating the app in the EB Console, not touching CloudFormation)**\r\n\r\nI understand that you do not deploy the application using the Cloud Formation template (as it was not updated for a year), therefore you must be doing it programatically with `eb deploy` or in the Elastic Beanstalk Console. Why not updating the environmental variables there in the console, then?\r\n\r\nYou can do that by going to the app's console, clicking on \"Configuration\" in the menu on the left, then the \"Modify\" button in the \"Software\" section. In the bottom you can add environmental variables that will exist in your app after each new deployment.\r\n\r\n\r\n  [1]: https://blog.codeship.com/elastic-beanstalk-and-cloudformation/\r\n  [2]: https://stackoverflow.com/questions/48791799/can-an-elastic-beanstalk-environment-be-updated-in-cloudformation-without-affect#answer-48793461\r\n  [3]: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/update-stack.html\r\n  [4]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-version.html\r\n  [5]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-beanstalk-sourcebundle.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "This is the reason why you were observing a rollback when updating only the environmental variables part in your \"recipe\" - the changes made in CloudFormation were triggering an update in the app and definitions from the template were applied - where the old app version was hard-coded. ", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "This is the reason why you were observing a rollback when updating only the environmental variables part in your \"recipe\" - the changes made in CloudFormation were triggering an update in the app and definitions from the template were applied - where the old app version was hard-coded. ", "keywords": ["change"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "This will of course break everything, as databases have changed, etc. ", "keywords": ["change"]}, {"source": "Body", "text": "What I want, is of course to add/modify environment variables without changing the deployed application version within the Beanstalk environment. ", "keywords": ["change"]}, {"source": "Body", "text": "Why does Beanstalk reset my application when making this change, and is there any way to prevent it? ", "keywords": ["change"]}]}