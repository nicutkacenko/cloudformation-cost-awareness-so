{"Id": "66305014", "PostTypeId": "1", "AcceptedAnswerId": "66305367", "CreationDate": "2021-02-21T17:21:55.113", "Score": "1", "ViewCount": "197", "Body": "<p>I have an architectural question about the design and organisation of <code>AWS Serverless</code> resources using <code>CloudFormation</code>.</p>\n<p>Currently I have multiple stack organised by the domain specific purpose and this works well. Most of the stack that contain <code>Lambdas</code> have to transformed using <code>Serverless</code> (using <code>SAM</code> for all). The async communication is facilitated using a combination of <code>EventBridge</code> and <code>S3</code>+<code>Events</code> and works well. The issue I have is with synchronous communication.</p>\n<p>I don't want to reference <code>Lambdas</code> from other stacks using their exported names from other stacks and invoke them directly as this causes issues with updating and versions (if output exports are referenced in other stacks, I cannot change the resource unless the reference is removed first, not ideal for CI/CD and keeping the concerns separate).</p>\n<p>I have been using <code>API Gateway</code> as an abstraction but that feels rather heavy handed. It is nice to have that separation but having to have domain and DNS resolving + having the <code>API GW</code> exposed externally doesn't feel right. Maybe there is a better way to configure <code>API GW</code> to be internal only. If you had success with this, could you please point me in the direction?</p>\n<p>Is there a better way to abstract invocation of <code>Lambda</code> functions from different stacks in a synchronous way? (<code>Common template patterns</code> for CF or something along those lines?)</p>\n", "OwnerUserId": "4587498", "LastEditorUserId": "4587498", "LastEditDate": "2021-02-21T17:31:09.883", "LastActivityDate": "2021-02-21T18:03:45.420", "Title": "Organising stacks and shared resources in AWS CloudFromation and Serverless", "Tags": "|amazon-web-services|architecture|aws-cloudformation|aws-api-gateway|aws-serverless|", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "241273235", "PostHistoryTypeId": "2", "PostId": "66305014", "RevisionGUID": "d9b44cad-23d8-44ac-9529-5155b0836e2a", "CreationDate": "2021-02-21T17:21:55.113", "UserId": "4587498", "Text": "I have an architectural question about the design and organisation of `AWS Serverless` resources using `CloudFormation`.\r\n\r\nCurrently I have multiple stack organised by the domain specific purpose and this works well. The async communication is facilitated using a combination of `EventBridge` and `S3`+`Events` and works well. The issue I have is with synchronous communication.\r\n\r\nI don't want to reference `Lambdas` from other stacks using their exported names from other stacks and invoke them directly as this causes issues with updating and versions (if output exports are referenced in other stacks, I cannot change the resource unless the reference is removed first, not ideal for CI/CD and keeping the concerns separate).\r\n\r\nI have been using `API Gateway` as an abstraction but that feels rather heavy handed. It is nice to have that separation but having to have domain and DNS resolving + having the `API GW` exposed externally doesn't feel right. Maybe there is a better way to configure `API GW` to be internal only. If you had success with this, could you please point me in the direction?\r\n\r\nIs there a better way to abstract invocation of `Lambda` functions from different stacks in a synchronous way? (`Common template patterns` for CF or something along those lines?)", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Currently I have multiple stack organised by the domain specific purpose and this works well. ", "keywords": ["domain"]}, {"source": "Text", "text": "I don't want to reference `Lambdas` from other stacks using their exported names from other stacks and invoke them directly as this causes issues with updating and versions (if output exports are referenced in other stacks, I cannot change the resource unless the reference is removed first, not ideal for CI/CD and keeping the concerns separate). ", "keywords": ["change"]}, {"source": "Text", "text": "It is nice to have that separation but having to have domain and DNS resolving + having the `API GW` exposed externally doesn't feel right. ", "keywords": ["domain"]}]}, {"Id": "241273236", "PostHistoryTypeId": "1", "PostId": "66305014", "RevisionGUID": "d9b44cad-23d8-44ac-9529-5155b0836e2a", "CreationDate": "2021-02-21T17:21:55.113", "UserId": "4587498", "Text": "Organising stacks and shared resources in AWS CloudFromation and Serverless", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "241273237", "PostHistoryTypeId": "3", "PostId": "66305014", "RevisionGUID": "d9b44cad-23d8-44ac-9529-5155b0836e2a", "CreationDate": "2021-02-21T17:21:55.113", "UserId": "4587498", "Text": "|amazon-web-services|architecture|aws-cloudformation|aws-api-gateway|aws-serverless|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "241273633", "PostHistoryTypeId": "5", "PostId": "66305014", "RevisionGUID": "ecd2aa78-c78b-4405-8810-26fa2b8f327b", "CreationDate": "2021-02-21T17:31:09.883", "UserId": "4587498", "Comment": "added 103 characters in body", "Text": "I have an architectural question about the design and organisation of `AWS Serverless` resources using `CloudFormation`.\r\n\r\nCurrently I have multiple stack organised by the domain specific purpose and this works well. Most of the stack that contain `Lambdas` have to transformed using `Serverless` (using `SAM` for all). The async communication is facilitated using a combination of `EventBridge` and `S3`+`Events` and works well. The issue I have is with synchronous communication.\r\n\r\nI don't want to reference `Lambdas` from other stacks using their exported names from other stacks and invoke them directly as this causes issues with updating and versions (if output exports are referenced in other stacks, I cannot change the resource unless the reference is removed first, not ideal for CI/CD and keeping the concerns separate).\r\n\r\nI have been using `API Gateway` as an abstraction but that feels rather heavy handed. It is nice to have that separation but having to have domain and DNS resolving + having the `API GW` exposed externally doesn't feel right. Maybe there is a better way to configure `API GW` to be internal only. If you had success with this, could you please point me in the direction?\r\n\r\nIs there a better way to abstract invocation of `Lambda` functions from different stacks in a synchronous way? (`Common template patterns` for CF or something along those lines?)", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Currently I have multiple stack organised by the domain specific purpose and this works well. ", "keywords": ["domain"]}, {"source": "Text", "text": "I don't want to reference `Lambdas` from other stacks using their exported names from other stacks and invoke them directly as this causes issues with updating and versions (if output exports are referenced in other stacks, I cannot change the resource unless the reference is removed first, not ideal for CI/CD and keeping the concerns separate). ", "keywords": ["change"]}, {"source": "Text", "text": "It is nice to have that separation but having to have domain and DNS resolving + having the `API GW` exposed externally doesn't feel right. ", "keywords": ["domain"]}]}], "answers": [{"Id": "66305367", "PostTypeId": "2", "ParentId": "66305014", "CreationDate": "2021-02-21T17:57:49.547", "Score": "1", "Body": "<p>I see two questions:</p>\n<ol>\n<li>Alternatives for Synchronous Lambda Functions with API Gateway .</li>\n</ol>\n<ul>\n<li>Api Gateway is one easy way, with IAM Authentication to make it secure. HTTP Api is much simplified and cheaper option compared to REST APIs. We can choose Private Api rather than a Regional/Edge, which is not exposed outside VPC to make it even move secure.</li>\n<li>we can have a private ALB with target as Lambda functions, for a simple use case that doesn't need any API gateway features.(this will cost some amount every month)</li>\n<li>We can always call lambdas directly with AWS SDK invoke.</li>\n</ul>\n<ol start=\"2\">\n<li>Alternatives to share resources between templates.</li>\n</ol>\n<ul>\n<li>Exporting and Importing will be bit of problem if we need to delete and recreate the resource, shouldn't be a problem if we are just updating it though.</li>\n<li>We can always store the Arn of the Lambda function in an SSM parameter in source template and resolve the value of the Arn from SSM parameter in destination template. This is completely decoupled. This is better than simply hard coding the value of Arn.</li>\n</ul>\n", "OwnerUserId": "10186808", "LastEditorUserId": "10186808", "LastEditDate": "2021-02-21T18:03:45.420", "LastActivityDate": "2021-02-21T18:03:45.420", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "117222918", "PostId": "66305367", "Score": "0", "Text": "Hi, thank you for the suggestions. I quite like the idea of SSM parameters. Just have to consider IAM policies for consuming lambdas - would prefer to resolve dependency name  at runtime rather than in template to allow looser coupling. Also considering API GW using internal endpoint. Have not considered ALB but will have a read.", "CreationDate": "2021-02-21T18:45:47.300", "UserId": "4587498", "filtered-sentences": []}], "history": [{"Id": "241275001", "PostHistoryTypeId": "5", "PostId": "66305367", "RevisionGUID": "3ba1a9a2-7a55-485d-8392-fcead21e6612", "CreationDate": "2021-02-21T18:03:45.420", "UserId": "10186808", "Comment": "added 56 characters in body", "Text": "I see two questions:\r\n\r\n1. Alternatives for Synchronous Lambda Functions with API Gateway .\r\n\r\n * Api Gateway is one easy way, with IAM Authentication to make it secure. HTTP Api is much simplified and cheaper option compared to REST APIs. We can choose Private Api rather than a Regional/Edge, which is not exposed outside VPC to make it even move secure.\r\n * we can have a private ALB with target as Lambda functions, for a simple use case that doesn't need any API gateway features.(this will cost some amount every month)\r\n * We can always call lambdas directly with AWS SDK invoke.\r\n\r\n2. Alternatives to share resources between templates.\r\n * Exporting and Importing will be bit of problem if we need to delete and recreate the resource, shouldn't be a problem if we are just updating it though.\r\n * We can always store the Arn of the Lambda function in an SSM parameter in source template and resolve the value of the Arn from SSM parameter in destination template. This is completely decoupled. This is better than simply hard coding the value of Arn.  ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "HTTP Api is much simplified and cheaper option compared to REST APIs. ", "keywords": ["cheap"]}, {"source": "Text", "text": "(this will cost some amount every month) * We can always call lambdas directly with AWS SDK invoke. ", "keywords": ["cost"]}]}, {"Id": "241274751", "PostHistoryTypeId": "2", "PostId": "66305367", "RevisionGUID": "1f55685c-57b2-44da-ba38-b6c20cb92a0b", "CreationDate": "2021-02-21T17:57:49.547", "UserId": "10186808", "Text": "I see two questions:\r\n\r\n1. Alternatives for Synchronous Lambda Functions with API Gateway .\r\n\r\n * Api Gateway is one easy way with IAM Authentication, HTTP Api is much simplified and cheaper option to REST APIs. We can choose Private Api rather than a Regional/Edge, which is not exposed outside VPC.\r\n * we can have a private ALB with target as Lambda functions, for a simple use case that doesn't need any API gateway features.(this will cost some amount every month)\r\n * We can always call lambdas directly with AWS SDK invoke.\r\n\r\n2. Alternatives to share resources between templates.\r\n * Exporting and Importing will be bit of problem if we need to delete and recreate the resource, shouldn't be a problem if we are just updating it though.\r\n * We can always store the Arn of the Lambda function in an SSM parameter in source template and resolve the value of the Arn from SSM parameter in destination template. This is completely decoupled. This is better than simply hard coding the value of Arn.  ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "* Api Gateway is one easy way with IAM Authentication, HTTP Api is much simplified and cheaper option to REST APIs. ", "keywords": ["cheap"]}, {"source": "Text", "text": "(this will cost some amount every month) * We can always call lambdas directly with AWS SDK invoke. ", "keywords": ["cost"]}]}], "filtered-sentences": [{"source": "Body", "text": "HTTP Api is much simplified and cheaper option compared to REST APIs. ", "keywords": ["cheap"]}, {"source": "Body", "text": "we can have a private ALB with target as Lambda functions, for a simple use case that doesn't need any API gateway features.(this will cost some amount every month) ", "keywords": ["cost"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "Currently I have multiple stack organised by the domain specific purpose and this works well. ", "keywords": ["domain"]}, {"source": "Body", "text": "I don't want to reference Lambdas from other stacks using their exported names from other stacks and invoke them directly as this causes issues with updating and versions (if output exports are referenced in other stacks, I cannot change the resource unless the reference is removed first, not ideal for CI/CD and keeping the concerns separate). ", "keywords": ["change"]}, {"source": "Body", "text": "It is nice to have that separation but having to have domain and DNS resolving + having the API GW exposed externally doesn't feel right. ", "keywords": ["domain"]}]}