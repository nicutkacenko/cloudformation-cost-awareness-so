{"Id": "21310125", "PostTypeId": "1", "AcceptedAnswerId": "21371385", "CreationDate": "2014-01-23T13:53:08.850", "Score": "91", "ViewCount": "33782", "Body": "<p>I would like to know what are the advantages and disadvantages of using AWS OpsWorks vs AWS Beanstalk and AWS CloudFormation?</p>\n<p>I am interested in a system that can be auto scaled to handle any high number of simultaneous web requests (From 1000 requests per minute to 10 million rpm.), including a database layer that can be auto scalable as well.</p>\n<p>Instead of having a separate instance for each app, Ideally I would like to share some hardware resources efficiently. In the past I have used mostly an EC2 instance + RDS + Cloudfront + S3</p>\n<p>The stack system will host some high traffic ruby on rails apps that we are migrating from Heroku, also some python/django apps and some PHP apps as well.</p>\n", "OwnerUserId": "1112656", "LastEditorUserId": "11107541", "LastEditDate": "2022-12-18T23:13:35.553", "LastActivityDate": "2023-01-02T12:56:52.013", "Title": "AWS OpsWorks vs AWS Beanstalk vs AWS CloudFormation?", "Tags": "|ruby-on-rails|amazon-web-services|amazon-elastic-beanstalk|aws-cloudformation|aws-opsworks|", "AnswerCount": "9", "CommentCount": "1", "FavoriteCount": "0", "ClosedDate": "2023-01-02T14:33:35.013", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "45397866", "PostId": "21310125", "Score": "3", "Text": "This question is a bit off topic for Stackoverflow, but probably wouldn't fit well on ServerFault either... I have proposed a new site for questions like this, follow if you agree! http://area51.stackexchange.com/proposals/82757/cloud-computing-platforms", "CreationDate": "2015-02-16T13:14:44.903", "UserId": "1341806", "filtered-sentences": []}], "history": [{"Id": "56318591", "PostHistoryTypeId": "2", "PostId": "21310125", "RevisionGUID": "03ad550a-cfde-4b98-8b40-449d7ea0befe", "CreationDate": "2014-01-23T13:53:08.850", "UserId": "1112656", "Text": "I would like to know what are the advantages and disadvantages of using AWS OpsWorks vs AWS Beanstalk and AWS CLoudFormation?\r\n\r\nI am interested in a system that can be auto scaled to handle any high number of simultaneous web requests (From 1000 requests per minute to 10 million rpm.), including a database layer that can be auto scalable as well.\r\n\r\nInstead of having a separate instance for each app, Ideally I would like to share some hardware resources efficiently. In the past I have used mostly an EC2 instance + RDS + Cloudfront + S3\r\n\r\nThe stack system will host some high traffic ruby on rails apps that we are migrating from Heroku, also some python/django apps and some PHP apps as well.\r\n\r\nThanks in advance.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Instead of having a separate instance for each app, Ideally I would like to share some hardware resources efficiently. ", "keywords": ["instance"]}, {"source": "Text", "text": "In the past I have used mostly an EC2 instance + RDS + Cloudfront + S3 The stack system will host some high traffic ruby on rails apps that we are migrating from Heroku, also some python/django apps and some PHP apps as well. ", "keywords": ["instance"]}]}, {"Id": "56318592", "PostHistoryTypeId": "1", "PostId": "21310125", "RevisionGUID": "03ad550a-cfde-4b98-8b40-449d7ea0befe", "CreationDate": "2014-01-23T13:53:08.850", "UserId": "1112656", "Text": "AWS OpsWorks vs AWS Beanstalk vs AWS CLoudFormation?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "56318593", "PostHistoryTypeId": "3", "PostId": "21310125", "RevisionGUID": "03ad550a-cfde-4b98-8b40-449d7ea0befe", "CreationDate": "2014-01-23T13:53:08.850", "UserId": "1112656", "Text": "|ruby-on-rails|amazon-web-services|amazon-elastic-beanstalk|aws-cloudformation|aws-opsworks|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "91392670", "PostHistoryTypeId": "5", "PostId": "21310125", "RevisionGUID": "b1a5e7b5-c752-4733-a1d3-3e68c6103880", "CreationDate": "2015-05-27T04:28:21.810", "UserId": "2291321", "Comment": "edited body; edited title", "Text": "I would like to know what are the advantages and disadvantages of using AWS OpsWorks vs AWS Beanstalk and AWS CloudFormation?\r\n\r\nI am interested in a system that can be auto scaled to handle any high number of simultaneous web requests (From 1000 requests per minute to 10 million rpm.), including a database layer that can be auto scalable as well.\r\n\r\nInstead of having a separate instance for each app, Ideally I would like to share some hardware resources efficiently. In the past I have used mostly an EC2 instance + RDS + Cloudfront + S3\r\n\r\nThe stack system will host some high traffic ruby on rails apps that we are migrating from Heroku, also some python/django apps and some PHP apps as well.\r\n\r\nThanks in advance.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Instead of having a separate instance for each app, Ideally I would like to share some hardware resources efficiently. ", "keywords": ["instance"]}, {"source": "Text", "text": "In the past I have used mostly an EC2 instance + RDS + Cloudfront + S3 The stack system will host some high traffic ruby on rails apps that we are migrating from Heroku, also some python/django apps and some PHP apps as well. ", "keywords": ["instance"]}]}, {"Id": "91392671", "PostHistoryTypeId": "4", "PostId": "21310125", "RevisionGUID": "b1a5e7b5-c752-4733-a1d3-3e68c6103880", "CreationDate": "2015-05-27T04:28:21.810", "UserId": "2291321", "Comment": "edited body; edited title", "Text": "AWS OpsWorks vs AWS Beanstalk vs AWS CloudFormation?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "284550610", "PostHistoryTypeId": "5", "PostId": "21310125", "RevisionGUID": "f9dd0d5b-6ad6-4a79-b745-23b7d2ffccc5", "CreationDate": "2022-12-18T23:13:35.553", "UserId": "11107541", "Comment": "no need to say thanks: https://meta.stackexchange.com/q/2950/997587", "Text": "I would like to know what are the advantages and disadvantages of using AWS OpsWorks vs AWS Beanstalk and AWS CloudFormation?\r\n\r\nI am interested in a system that can be auto scaled to handle any high number of simultaneous web requests (From 1000 requests per minute to 10 million rpm.), including a database layer that can be auto scalable as well.\r\n\r\nInstead of having a separate instance for each app, Ideally I would like to share some hardware resources efficiently. In the past I have used mostly an EC2 instance + RDS + Cloudfront + S3\r\n\r\nThe stack system will host some high traffic ruby on rails apps that we are migrating from Heroku, also some python/django apps and some PHP apps as well.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Instead of having a separate instance for each app, Ideally I would like to share some hardware resources efficiently. ", "keywords": ["instance"]}, {"source": "Text", "text": "In the past I have used mostly an EC2 instance + RDS + Cloudfront + S3 The stack system will host some high traffic ruby on rails apps that we are migrating from Heroku, also some python/django apps and some PHP apps as well.", "keywords": ["instance"]}]}, {"Id": "285362548", "PostHistoryTypeId": "10", "PostId": "21310125", "RevisionGUID": "bb34b941-79c6-428d-938d-71900ab077ea", "CreationDate": "2023-01-02T14:33:35.013", "UserId": "-1", "Comment": "105", "Text": "{\"Voters\":[{\"Id\":308731,\"DisplayName\":\"Eyeslandic\"},{\"Id\":7508700,\"DisplayName\":\"David Buck\"},{\"Id\":2756409,\"DisplayName\":\"TylerH\"}]}", "filtered-sentences": []}], "answers": [{"Id": "51366144", "PostTypeId": "2", "ParentId": "21310125", "CreationDate": "2018-07-16T16:15:54.480", "Score": "-2", "Body": "<p>Just use terraform and ECS or EKS. </p>\n\n<p>opsworks, elastic beanstalk and cloudformation old tech now. -) </p>\n", "OwnerUserId": "392925", "LastActivityDate": "2018-07-16T16:15:54.480", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "177756881", "PostHistoryTypeId": "2", "PostId": "51366144", "RevisionGUID": "0794c7fb-af7f-4e67-ac27-7c5339ebbd82", "CreationDate": "2018-07-16T16:15:54.480", "UserId": "392925", "Text": "Just use terraform and ECS or EKS. \r\n\r\nopsworks, elastic beanstalk and cloudformation old tech now. -) ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "40397139", "PostTypeId": "2", "ParentId": "21310125", "CreationDate": "2016-11-03T08:48:59.567", "Score": "0", "Body": "<p>As many others have commented AWS Beanstalk, AWS OpsWorks and AWS Cloud Formation offers different solutions for different problems.</p>\n\n<p>In order to acomplish with </p>\n\n<pre><code>I am interested in a system that can be auto scaled to handle any high number of simultaneous web requests (From 1000 requests per minute to 10 million rpm.), including a database layer that can be auto scalable as well.\n</code></pre>\n\n<p>And taking into consideration you are in migration process I strongly recommend you to start taking a look at AWS Lambda &amp; AWS DynamoDB solution (or hybrid one).</p>\n\n<p>Both two are designed for <strong>auto</strong> scaling in a simple way and may be a very cheap solution.</p>\n", "OwnerUserId": "944703", "LastActivityDate": "2016-11-03T08:48:59.567", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "130716272", "PostHistoryTypeId": "2", "PostId": "40397139", "RevisionGUID": "1a921aa4-9f2e-4167-b2a8-3c81dc3d4e25", "CreationDate": "2016-11-03T08:48:59.567", "UserId": "944703", "Text": "As many others have commented AWS Beanstalk, AWS OpsWorks and AWS Cloud Formation offers different solutions for different problems.\r\n\r\nIn order to acomplish with \r\n\r\n    I am interested in a system that can be auto scaled to handle any high number of simultaneous web requests (From 1000 requests per minute to 10 million rpm.), including a database layer that can be auto scalable as well.\r\n\r\nAnd taking into consideration you are in migration process I strongly recommend you to start taking a look at AWS Lambda & AWS DynamoDB solution (or hybrid one).\r\n\r\nBoth two are designed for **auto** scaling in a simple way and may be a very cheap solution.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Both two are designed for **auto** scaling in a simple way and may be a very cheap solution.", "keywords": ["cheap"]}]}], "filtered-sentences": [{"source": "Body", "text": "Both two are designed for auto scaling in a simple way and may be a very cheap solution.", "keywords": ["cheap"]}]}, {"Id": "21371385", "PostTypeId": "2", "ParentId": "21310125", "CreationDate": "2014-01-27T00:56:37.197", "Score": "74", "Body": "<blockquote>\n  <p>I would like to know what are the advantages and disadvantages of using AWS OpsWorks vs AWS Beanstalk and AWS CLoudFormation?</p>\n</blockquote>\n\n<p>The answer is: it depends.</p>\n\n<p>AWS OpsWorks and AWS Beanstalk are (I've been told) simply different ways of managing your infrastructure, depending on how you think about it. CloudFormation is simply a way of templatizing your infrastructure.</p>\n\n<p>Personally, I'm more familiar with Elastic Beanstalk, but to each their own. I prefer it because it can do deployments via Git. It is public information that Elastic Beanstalk uses CloudFormation under the hood to launch its environments.</p>\n\n<p>For my projects, I use both in tandem. I use CloudFormation to construct a custom-configured VPC environment, S3 buckets and DynamoDB tables that I use for my app. Then I launch an Elastic Beanstalk environment inside of the custom VPC which knows how to speak to the S3/DynamoDB resources.</p>\n\n<blockquote>\n  <p>I am interested in a system that can be auto scaled to handle any high number of simultaneous web requests (From 1000 requests per minute to 10 million rpm.), including a database layer that can be auto scalable as well.</p>\n</blockquote>\n\n<p>Under the hood, OpsWorks and Elastic Beanstalk use EC2 + CloudWatch + Auto Scaling, which is capable of handling the loads you're talking about. RDS provides support for scalable SQL-based databases.</p>\n\n<blockquote>\n  <p>Instead of having a separate instance for each app, Ideally I would like to share some hardware resources efficiently. In the past I have used mostly an EC2 instance + RDS + Cloudfront + S3</p>\n</blockquote>\n\n<p>Depending on what you mean by \"<em>some</em> hardware resources\", you can always launch standalone EC2 instances alongside OpsWorks or Elastic Beanstalk environments. At present, Elastic Beanstalk supports one webapp per environment. I don't recall what OpsWorks supports.</p>\n\n<blockquote>\n  <p>The stack system will host some high traffic ruby on rails apps that we are migrating from Heroku, also some python/django apps and some PHP apps as well.</p>\n</blockquote>\n\n<p>All of this is fully supported by AWS. OpsWorks and Elastic Beanstalk have <em>optimized</em> themselves for an array of development environments (Ruby, Python and PHP are all on the list), while EC2 provides raw servers where you can install anything you'd like.</p>\n", "OwnerUserId": "228514", "LastActivityDate": "2014-01-27T00:56:37.197", "CommentCount": "2", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "37871408", "PostId": "21371385", "Score": "3", "Text": "OpsWorks handles git deployments as well albeit differently. Where ElasticBeanstalk git deployments are pushed from a repo using a CLI, OpsWorks uses read-only access to a repo using SSH (or HTTPS if public repo).", "CreationDate": "2014-06-28T18:19:17.760", "UserId": "920415", "filtered-sentences": []}, {"Id": "87250150", "PostId": "21371385", "Score": "0", "Text": "@Ryan As mentioned does Beanstalk uses Cloud formation type templates in the background to create the infrastructure required.", "CreationDate": "2018-05-01T12:31:21.003", "UserId": "7267213", "filtered-sentences": []}], "history": [{"Id": "56546774", "PostHistoryTypeId": "2", "PostId": "21371385", "RevisionGUID": "f5319c43-94ae-446e-8b5f-df49475f0291", "CreationDate": "2014-01-27T00:56:37.197", "UserId": "228514", "Text": "> I would like to know what are the advantages and disadvantages of using AWS OpsWorks vs AWS Beanstalk and AWS CLoudFormation?\r\n\r\nThe answer is: it depends.\r\n\r\nAWS OpsWorks and AWS Beanstalk are (I've been told) simply different ways of managing your infrastructure, depending on how you think about it. CloudFormation is simply a way of templatizing your infrastructure.\r\n\r\nPersonally, I'm more familiar with Elastic Beanstalk, but to each their own. I prefer it because it can do deployments via Git. It is public information that Elastic Beanstalk uses CloudFormation under the hood to launch its environments.\r\n\r\nFor my projects, I use both in tandem. I use CloudFormation to construct a custom-configured VPC environment, S3 buckets and DynamoDB tables that I use for my app. Then I launch an Elastic Beanstalk environment inside of the custom VPC which knows how to speak to the S3/DynamoDB resources.\r\n\r\n> I am interested in a system that can be auto scaled to handle any high number of simultaneous web requests (From 1000 requests per minute to 10 million rpm.), including a database layer that can be auto scalable as well.\r\n\r\nUnder the hood, OpsWorks and Elastic Beanstalk use EC2 + CloudWatch + Auto Scaling, which is capable of handling the loads you're talking about. RDS provides support for scalable SQL-based databases.\r\n\r\n> Instead of having a separate instance for each app, Ideally I would like to share some hardware resources efficiently. In the past I have used mostly an EC2 instance + RDS + Cloudfront + S3\r\n\r\nDepending on what you mean by \"_some_ hardware resources\", you can always launch standalone EC2 instances alongside OpsWorks or Elastic Beanstalk environments. At present, Elastic Beanstalk supports one webapp per environment. I don't recall what OpsWorks supports.\r\n\r\n> The stack system will host some high traffic ruby on rails apps that we are migrating from Heroku, also some python/django apps and some PHP apps as well.\r\n\r\nAll of this is fully supported by AWS. OpsWorks and Elastic Beanstalk have _optimized_ themselves for an array of development environments (Ruby, Python and PHP are all on the list), while EC2 provides raw servers where you can install anything you'd like.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "> Instead of having a separate instance for each app, Ideally I would like to share some hardware resources efficiently. ", "keywords": ["instance"]}, {"source": "Text", "text": "In the past I have used mostly an EC2 instance + RDS + Cloudfront + S3 Depending on what you mean by \"_some_ hardware resources\", you can always launch standalone EC2 instances alongside OpsWorks or Elastic Beanstalk environments. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "Instead of having a separate instance for each app, Ideally I would like to share some hardware resources efficiently. ", "keywords": ["instance"]}, {"source": "Body", "text": "In the past I have used mostly an EC2 instance + RDS + Cloudfront + S3 Depending on what you mean by \"some hardware resources\", you can always launch standalone EC2 instances alongside OpsWorks or Elastic Beanstalk environments. ", "keywords": ["instance"]}]}, {"Id": "38739440", "PostTypeId": "2", "ParentId": "21310125", "CreationDate": "2016-08-03T09:19:14.883", "Score": "2", "Body": "<p><strong>AWS OpsWorks</strong> - This is a part of AWS management service. It helps to configure the application using scripting. It uses Chef as the devops framework for this application management and operation. \nThere are templates which can be used for configuration of server, database, storage. The templates can also be customized to perform any other task. DevOps Engineers have control on application's dependencies and infrastructure.</p>\n\n<p><strong>AWS Beanstalk</strong> - It provides the environment for language like Java, Node Js, Python, Ruby Go. Elastic Bean stalk provide the resource to run the application. Developers not to worry about the infrastructure and they don't have control on infrastructure. </p>\n\n<p><strong>AWS CloudFormation</strong> - CloudFormation has sample templates to manage the AWS resources in order. </p>\n", "OwnerUserId": "2310053", "LastEditorUserId": "4745154", "LastEditDate": "2016-11-07T06:25:27.663", "LastActivityDate": "2016-11-07T06:25:27.663", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "124080800", "PostHistoryTypeId": "2", "PostId": "38739440", "RevisionGUID": "1a30da6a-844c-40bf-aae8-964089a3fe76", "CreationDate": "2016-08-03T09:19:14.883", "UserId": "2310053", "Text": "**AWS OpsWorks** - This is a part of AWS management service. It helps to configure the application using scripting. It uses Chef as the devops framework for this application management and operation. \r\nThere are templates which can be used for configuration of server, database, storage. The templates can also be customized to perform any other task.\r\n\r\n**AWS Beanstalk** - It provides the environment for language like Java, Node Js, Python, Ruby Go. Elastic Bean stalk provide the resource to run the application. \r\n\r\n**AWS CloudFormation** - CloudFormation has sample templates to manage the AWS resources in order.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "There are templates which can be used for configuration of server, database, storage. ", "keywords": ["storage"]}]}, {"Id": "130971887", "PostHistoryTypeId": "5", "PostId": "38739440", "RevisionGUID": "0145cd6d-4835-4c6d-8520-c67991476e5c", "CreationDate": "2016-11-07T06:25:27.663", "UserId": "4745154", "Comment": "Added few points...", "Text": "**AWS OpsWorks** - This is a part of AWS management service. It helps to configure the application using scripting. It uses Chef as the devops framework for this application management and operation. \r\nThere are templates which can be used for configuration of server, database, storage. The templates can also be customized to perform any other task. DevOps Engineers have control on application's dependencies and infrastructure.\r\n\r\n**AWS Beanstalk** - It provides the environment for language like Java, Node Js, Python, Ruby Go. Elastic Bean stalk provide the resource to run the application. Developers not to worry about the infrastructure and they don't have control on infrastructure. \r\n\r\n**AWS CloudFormation** - CloudFormation has sample templates to manage the AWS resources in order. ", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "There are templates which can be used for configuration of server, database, storage. ", "keywords": ["storage"]}]}, {"Id": "130971888", "PostHistoryTypeId": "24", "PostId": "38739440", "RevisionGUID": "0145cd6d-4835-4c6d-8520-c67991476e5c", "CreationDate": "2016-11-07T06:25:27.663", "Comment": "Proposed by 4745154 approved by 383839, 2702447, 2111085 edit id of 2806526", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "filtered-sentences": [{"source": "Body", "text": "There are templates which can be used for configuration of server, database, storage. ", "keywords": ["storage"]}]}, {"Id": "31673039", "PostTypeId": "2", "ParentId": "21310125", "CreationDate": "2015-07-28T09:59:52.187", "Score": "10", "Body": "<p><strong>AWS Beanstalk:</strong>\nIt is Deploy and manage applications in the AWS cloud without worrying about the infrastructure that runs yor web applications with Elastic Beanstalk.\nNo need to worry about EC2 or else installations.</p>\n\n<p><strong>AWS OpsWorks</strong>\nAWS OpsWorks is nothing but an application management service that makes it easy for the new DevOps users to model &amp; manage the entire their application</p>\n", "OwnerUserId": "4579740", "LastActivityDate": "2015-07-28T09:59:52.187", "CommentCount": "2", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "67411640", "PostId": "31673039", "Score": "2", "Text": "I think this answer is inaccurate. The fact is the other way around. While Elastic Beanstalk is just a PaaS, with OpsWorks, it's all your responsibility to create a stack using appropriate components. 'For new DevOps' definition would apply to EB users, not OpsWorks'.", "CreationDate": "2016-10-16T10:12:20.513", "UserId": "445144", "filtered-sentences": []}, {"Id": "125501647", "PostId": "31673039", "Score": "0", "Text": "I don't think is correct, or at least things have changed quite a lot since this answer.", "CreationDate": "2022-02-04T22:26:01.747", "UserId": "409517", "filtered-sentences": [{"source": "Text", "text": "I don't think is correct, or at least things have changed quite a lot since this answer.", "keywords": ["change"]}]}], "history": [{"Id": "96096947", "PostHistoryTypeId": "2", "PostId": "31673039", "RevisionGUID": "d8e310d8-d45d-497e-802e-9fdfac21a357", "CreationDate": "2015-07-28T09:59:52.187", "UserId": "4579740", "Text": "**AWS Beanstalk:**\r\nIt is Deploy and manage applications in the AWS cloud without worrying about the infrastructure that runs yor web applications with Elastic Beanstalk.\r\nNo need to worry about EC2 or else installations.\r\n\r\n**AWS OpsWorks**\r\nAWS OpsWorks is nothing but an application management service that makes it easy for the new DevOps users to model & manage the entire their application\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "66771620", "PostTypeId": "2", "ParentId": "21310125", "CreationDate": "2021-03-23T21:33:39.497", "Score": "-1", "Body": "<p>You should use OpsWorks in place of CloudFormation if you need to deploy an application that requires updates to its EC2 instances. If your application uses a lot of AWS resources and services, including EC2, use a combination of CloudFormation and OpsWorks</p>\n<p>If your application will need other AWS resources, such as database or storage service. In this scenario, use CloudFormation to deploy Elastic Beanstalk along with the other resources.</p>\n", "OwnerUserId": "4686538", "LastActivityDate": "2021-03-23T21:33:39.497", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "243275406", "PostHistoryTypeId": "2", "PostId": "66771620", "RevisionGUID": "022d8b5a-a915-4973-8309-6bf9a0244577", "CreationDate": "2021-03-23T21:33:39.497", "UserId": "4686538", "Text": "You should use OpsWorks in place of CloudFormation if you need to deploy an application that requires updates to its EC2 instances. If your application uses a lot of AWS resources and services, including EC2, use a combination of CloudFormation and OpsWorks\r\n\r\nIf your application will need other AWS resources, such as database or storage service. In this scenario, use CloudFormation to deploy Elastic Beanstalk along with the other resources.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "If your application will need other AWS resources, such as database or storage service. ", "keywords": ["storage"]}]}], "filtered-sentences": [{"source": "Body", "text": "If your application will need other AWS resources, such as database or storage service. ", "keywords": ["storage"]}]}, {"Id": "37773485", "PostTypeId": "2", "ParentId": "21310125", "CreationDate": "2016-06-12T11:04:16.050", "Score": "4", "Body": "<p>AWS CloudFormation - Create and Update your environments.</p>\n\n<p>AWS Opsworks - Manage your systems inside that environments like we do with Chef or Puppet</p>\n\n<p>AWS Beanstalk - Create, Manage and Deploy.</p>\n\n<p>But personally I like CloudFormation and OpsWorks both by using its full power for what they are meant for. </p>\n\n<p>Use CloudFormation to create your environment then you can call Opsworks from cloud formation scripts to launch your machine. Then you will have Opsworks stack to manage it. For example add a user in linux box by using Opsworks or do patching of your boxes using chef recipes. You can write down chef recipes for deployment also. Otherwise you can use CodeDeploy specifically build for deployment. </p>\n", "OwnerUserId": "2634203", "LastEditorUserId": "2634203", "LastEditDate": "2016-06-12T17:01:08.680", "LastActivityDate": "2016-06-12T17:01:08.680", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "120259467", "PostHistoryTypeId": "5", "PostId": "37773485", "RevisionGUID": "46868cd7-d801-42e9-90fe-c2ee094af498", "CreationDate": "2016-06-12T17:01:08.680", "UserId": "2634203", "Comment": "added 4 characters in body", "Text": "AWS CloudFormation - Create and Update your environments.\r\n\r\nAWS Opsworks - Manage your systems inside that environments like we do with Chef or Puppet\r\n\r\nAWS Beanstalk - Create, Manage and Deploy.\r\n\r\nBut personally I like CloudFormation and OpsWorks both by using its full power for what they are meant for. \r\n\r\nUse CloudFormation to create your environment then you can call Opsworks from cloud formation scripts to launch your machine. Then you will have Opsworks stack to manage it. For example add a user in linux box by using Opsworks or do patching of your boxes using chef recipes. You can write down chef recipes for deployment also. Otherwise you can use CodeDeploy specifically build for deployment. ", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "120245460", "PostHistoryTypeId": "2", "PostId": "37773485", "RevisionGUID": "06b41249-7e8f-4ebf-b454-f951242520f7", "CreationDate": "2016-06-12T11:04:16.050", "UserId": "2634203", "Text": "AWS CloudFormation - Create and Update your environments.\r\nAWS Opsworks - Manage your systems inside that environments like we do with Chef or Puppet\r\nAWS Beanstalk - Create, Manage and Deploy.\r\n\r\nBut personally I like CloudFormation and OpsWorks both by using its full power for what they are meant for. \r\n\r\nUse CloudFormation to create your environment then you can call Opsworks from cloud formation scripts to launch your machine. Then you will have Opsworks stack to manage it. For example add a user in linux box by using Opsworks or do patching of your boxes using chef recipes. You can write down chef recipes for deployment also. Otherwise you can use CodeDeploy specifically build for deployment. ", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "34881818", "PostTypeId": "2", "ParentId": "21310125", "CreationDate": "2016-01-19T16:22:08.693", "Score": "27", "Body": "<p>OpsWorks is an orchestration tool like Chef - in fact, it's derived from Chef - Puppet, Ansible or Saltstalk. You use Opsworks to specify the state that you want your network to be in by specifying the state that you want each resource - server instances, applications, storage - to be in. And you specify the state that you want each resource to be in by specifying the value that you want for each attribute of that state. For example, you might want the Apache service to be always up and running and start on boot-up with Apache as the user and Apache as the Linux group.</p>\n\n<p>CloudFormation is a json template (**) that specifies the state of the resource(s) that you want to deploy i.e. you want to deploy an AWS EC2 micro t2 instance in us-east-1 as part of VPC 192.168.1.0/24. In the case of an EC2 instance, you can specify what should run on that resource through your custom bash script in the user-data section of the EC2 resource. CloudFormation is just a template. The template gets fleshed ourt as a running resource only if you run it either through the AWS Management Console for CloudFormation or if you run the aws cli command for Cloudformation i.e. aws cloudformation ...</p>\n\n<p>ElasticBeanstalk is a PAAS- you can upload the specifically Ruby/Rails, node.js or Python/django or Python/Flask apps. If you're running anything else like Scala, Haskell or anything else, create a Docker image for it and upload that Docker image into Elastic Beanstalk (*).</p>\n\n<p>You can do the uploading of your app into Elastic Beanstalk by either running the aws cli for CloudFormation or you create a recipe for Opsworks to upload your app into Elastic Beanstalk. You can also run the aws cli for Cloudformation through Opsworks.</p>\n\n<p>(*) In fact, AWS's documentation on its Ruby app example was so poor that I lost patience and embedded the example app into a Docker image and uploaded the Docker image into Elastic Beanstalk.</p>\n\n<p>(**) As of Sep 2016, Cloudformation also supports YAML templates.</p>\n", "OwnerUserId": "2187089", "LastEditorUserId": "199682", "LastEditDate": "2018-07-02T10:23:21.923", "LastActivityDate": "2018-07-02T10:23:21.923", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "108805589", "PostHistoryTypeId": "2", "PostId": "34881818", "RevisionGUID": "7c92804f-b6c7-4705-92bc-7b3b4e4dedef", "CreationDate": "2016-01-19T16:22:08.693", "UserId": "2187089", "Text": "OpsWorks is an orchestration tool like Chef - in fact, it's derived from Chef - Puppet, Ansible or Saltstalk. You use Opsworks to specify the state that you want your network to be in by specifying the state that you want each resource - server instances, applications, storage - that you want that resource to be in. And you specify the state that you want each resource to be in by specifying the value that you want for each attribute of the state. For example, you might want the apache service to be always and up running and top always start on bootup with apache as the user and apache as the Linux group.\r\n\r\nCloudFormation is a json template that specifies the state of the resource(s) that you want to deploy i.e. you want to deploy an AWS EC2 micro t2 instance in us-east-1 as part of VPC 192.168.1.0/24. In the case of an EC2 instance, you can specify what should run on that resource through your custom bash script in the user-data section of the EC2 resource. CloudFormation is just a template. The template gets fleshed ourt as a running resource only if you run it either through the AWS Management Console for CloudFormation or if you run the aws cli command for Cloudformation i.e. aws cloudformation ...\r\n\r\nElasticBeanstalk is a PAAS- you can upload the specifically Ruby/Rails, node.js or Python/django or Python/Flask apps. If you're running anything else like Scala, Haskell or anything else, create a Docker image for it and upload that Docker image into Elastic Beanstalk.\r\n\r\nYou can do the uploading of your app into Elastic Beanstalk by either running the aws cli for CloudFormation or you create a recipe for Opsworks to upload your app into Elastic Beanstalk. You can also run the aws cli for Cloudfformation through Opsworks.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You use Opsworks to specify the state that you want your network to be in by specifying the state that you want each resource - server instances, applications, storage - that you want that resource to be in. ", "keywords": ["storage"]}, {"source": "Text", "text": "CloudFormation is a json template that specifies the state of the resource(s) that you want to deploy i.e. you want to deploy an AWS EC2 micro t2 instance in us-east-1 as part of VPC 192.168.1.0/24. ", "keywords": ["instance"]}, {"source": "Text", "text": "In the case of an EC2 instance, you can specify what should run on that resource through your custom bash script in the user-data section of the EC2 resource. ", "keywords": ["instance"]}]}, {"Id": "121976509", "PostHistoryTypeId": "5", "PostId": "34881818", "RevisionGUID": "eacc1e75-5d1a-4ffa-a8d8-4c61d2d046e5", "CreationDate": "2016-07-05T17:05:45.287", "UserId": "2187089", "Comment": "added 187 characters in body", "Text": "OpsWorks is an orchestration tool like Chef - in fact, it's derived from Chef - Puppet, Ansible or Saltstalk. You use Opsworks to specify the state that you want your network to be in by specifying the state that you want each resource - server instances, applications, storage - that you want that resource to be in. And you specify the state that you want each resource to be in by specifying the value that you want for each attribute of the state. For example, you might want the apache service to be always and up running and top always start on bootup with apache as the user and apache as the Linux group.\r\n\r\nCloudFormation is a json template that specifies the state of the resource(s) that you want to deploy i.e. you want to deploy an AWS EC2 micro t2 instance in us-east-1 as part of VPC 192.168.1.0/24. In the case of an EC2 instance, you can specify what should run on that resource through your custom bash script in the user-data section of the EC2 resource. CloudFormation is just a template. The template gets fleshed ourt as a running resource only if you run it either through the AWS Management Console for CloudFormation or if you run the aws cli command for Cloudformation i.e. aws cloudformation ...\r\n\r\nElasticBeanstalk is a PAAS- you can upload the specifically Ruby/Rails, node.js or Python/django or Python/Flask apps. If you're running anything else like Scala, Haskell or anything else, create a Docker image for it and upload that Docker image into Elastic Beanstalk (*).\r\n\r\nYou can do the uploading of your app into Elastic Beanstalk by either running the aws cli for CloudFormation or you create a recipe for Opsworks to upload your app into Elastic Beanstalk. You can also run the aws cli for Cloudfformation through Opsworks.\r\n\r\n(*) In fact, AWS's documentation on its Ruby app example was so poor that I lost patience and embedded the example app into a Docker image and uploaded the Docker image into Elastic Beanstalk.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You use Opsworks to specify the state that you want your network to be in by specifying the state that you want each resource - server instances, applications, storage - that you want that resource to be in. ", "keywords": ["storage"]}, {"source": "Text", "text": "CloudFormation is a json template that specifies the state of the resource(s) that you want to deploy i.e. you want to deploy an AWS EC2 micro t2 instance in us-east-1 as part of VPC 192.168.1.0/24. ", "keywords": ["instance"]}, {"source": "Text", "text": "In the case of an EC2 instance, you can specify what should run on that resource through your custom bash script in the user-data section of the EC2 resource. ", "keywords": ["instance"]}]}, {"Id": "123645707", "PostHistoryTypeId": "5", "PostId": "34881818", "RevisionGUID": "c19333b9-c2ac-4f3e-ba0f-96d826cdb502", "CreationDate": "2016-07-28T07:52:50.930", "UserId": "2187089", "Comment": "deleted 1 character in body", "Text": "OpsWorks is an orchestration tool like Chef - in fact, it's derived from Chef - Puppet, Ansible or Saltstalk. You use Opsworks to specify the state that you want your network to be in by specifying the state that you want each resource - server instances, applications, storage - that you want that resource to be in. And you specify the state that you want each resource to be in by specifying the value that you want for each attribute of the state. For example, you might want the apache service to be always and up running and top always start on bootup with apache as the user and apache as the Linux group.\r\n\r\nCloudFormation is a json template that specifies the state of the resource(s) that you want to deploy i.e. you want to deploy an AWS EC2 micro t2 instance in us-east-1 as part of VPC 192.168.1.0/24. In the case of an EC2 instance, you can specify what should run on that resource through your custom bash script in the user-data section of the EC2 resource. CloudFormation is just a template. The template gets fleshed ourt as a running resource only if you run it either through the AWS Management Console for CloudFormation or if you run the aws cli command for Cloudformation i.e. aws cloudformation ...\r\n\r\nElasticBeanstalk is a PAAS- you can upload the specifically Ruby/Rails, node.js or Python/django or Python/Flask apps. If you're running anything else like Scala, Haskell or anything else, create a Docker image for it and upload that Docker image into Elastic Beanstalk (*).\r\n\r\nYou can do the uploading of your app into Elastic Beanstalk by either running the aws cli for CloudFormation or you create a recipe for Opsworks to upload your app into Elastic Beanstalk. You can also run the aws cli for Cloudformation through Opsworks.\r\n\r\n(*) In fact, AWS's documentation on its Ruby app example was so poor that I lost patience and embedded the example app into a Docker image and uploaded the Docker image into Elastic Beanstalk.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You use Opsworks to specify the state that you want your network to be in by specifying the state that you want each resource - server instances, applications, storage - that you want that resource to be in. ", "keywords": ["storage"]}, {"source": "Text", "text": "CloudFormation is a json template that specifies the state of the resource(s) that you want to deploy i.e. you want to deploy an AWS EC2 micro t2 instance in us-east-1 as part of VPC 192.168.1.0/24. ", "keywords": ["instance"]}, {"source": "Text", "text": "In the case of an EC2 instance, you can specify what should run on that resource through your custom bash script in the user-data section of the EC2 resource. ", "keywords": ["instance"]}]}, {"Id": "142177857", "PostHistoryTypeId": "5", "PostId": "34881818", "RevisionGUID": "0ebaa242-2cde-47ec-aea8-66b92c6c093a", "CreationDate": "2017-04-03T08:49:20.527", "UserId": "2187089", "Comment": "added 75 characters in body", "Text": "OpsWorks is an orchestration tool like Chef - in fact, it's derived from Chef - Puppet, Ansible or Saltstalk. You use Opsworks to specify the state that you want your network to be in by specifying the state that you want each resource - server instances, applications, storage - that you want that resource to be in. And you specify the state that you want each resource to be in by specifying the value that you want for each attribute of the state. For example, you might want the apache service to be always and up running and top always start on bootup with apache as the user and apache as the Linux group.\r\n \r\nCloudFormation is a json template (**) that specifies the state of the resource(s) that you want to deploy i.e. you want to deploy an AWS EC2 micro t2 instance in us-east-1 as part of VPC 192.168.1.0/24. In the case of an EC2 instance, you can specify what should run on that resource through your custom bash script in the user-data section of the EC2 resource. CloudFormation is just a template. The template gets fleshed ourt as a running resource only if you run it either through the AWS Management Console for CloudFormation or if you run the aws cli command for Cloudformation i.e. aws cloudformation ...\r\n\r\nElasticBeanstalk is a PAAS- you can upload the specifically Ruby/Rails, node.js or Python/django or Python/Flask apps. If you're running anything else like Scala, Haskell or anything else, create a Docker image for it and upload that Docker image into Elastic Beanstalk (*).\r\n\r\nYou can do the uploading of your app into Elastic Beanstalk by either running the aws cli for CloudFormation or you create a recipe for Opsworks to upload your app into Elastic Beanstalk. You can also run the aws cli for Cloudformation through Opsworks.\r\n\r\n(*) In fact, AWS's documentation on its Ruby app example was so poor that I lost patience and embedded the example app into a Docker image and uploaded the Docker image into Elastic Beanstalk.\r\n\r\n(**) As of Sep 2016, Cloudformation also supports YAML templates.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You use Opsworks to specify the state that you want your network to be in by specifying the state that you want each resource - server instances, applications, storage - that you want that resource to be in. ", "keywords": ["storage"]}, {"source": "Text", "text": "CloudFormation is a json template (**) that specifies the state of the resource(s) that you want to deploy i.e. you want to deploy an AWS EC2 micro t2 instance in us-east-1 as part of VPC 192.168.1.0/24. ", "keywords": ["instance"]}, {"source": "Text", "text": "In the case of an EC2 instance, you can specify what should run on that resource through your custom bash script in the user-data section of the EC2 resource. ", "keywords": ["instance"]}]}, {"Id": "176740575", "PostHistoryTypeId": "5", "PostId": "34881818", "RevisionGUID": "b3d1a62c-c1fc-4be7-93d4-881077216612", "CreationDate": "2018-07-02T10:23:21.923", "UserId": "1923733", "Comment": "fixed grammer, corrected spelling", "Text": "OpsWorks is an orchestration tool like Chef - in fact, it's derived from Chef - Puppet, Ansible or Saltstalk. You use Opsworks to specify the state that you want your network to be in by specifying the state that you want each resource - server instances, applications, storage to be in. And you specify the state that you want each resource to be in by specifying the value that you want for each attribute of that state. For example, you might want the Apache service to be always up and running and start on boot-up with Apache as the user and Apache as the Linux group.\r\n \r\nCloudFormation is a json template (**) that specifies the state of the resource(s) that you want to deploy i.e. you want to deploy an AWS EC2 micro t2 instance in us-east-1 as part of VPC 192.168.1.0/24. In the case of an EC2 instance, you can specify what should run on that resource through your custom bash script in the user-data section of the EC2 resource. CloudFormation is just a template. The template gets fleshed ourt as a running resource only if you run it either through the AWS Management Console for CloudFormation or if you run the aws cli command for Cloudformation i.e. aws cloudformation ...\r\n\r\nElasticBeanstalk is a PAAS- you can upload the specifically Ruby/Rails, node.js or Python/django or Python/Flask apps. If you're running anything else like Scala, Haskell or anything else, create a Docker image for it and upload that Docker image into Elastic Beanstalk (*).\r\n\r\nYou can do the uploading of your app into Elastic Beanstalk by either running the aws cli for CloudFormation or you create a recipe for Opsworks to upload your app into Elastic Beanstalk. You can also run the aws cli for Cloudformation through Opsworks.\r\n\r\n(*) In fact, AWS's documentation on its Ruby app example was so poor that I lost patience and embedded the example app into a Docker image and uploaded the Docker image into Elastic Beanstalk.\r\n\r\n(**) As of Sep 2016, Cloudformation also supports YAML templates.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You use Opsworks to specify the state that you want your network to be in by specifying the state that you want each resource - server instances, applications, storage to be in. ", "keywords": ["storage"]}, {"source": "Text", "text": "CloudFormation is a json template (**) that specifies the state of the resource(s) that you want to deploy i.e. you want to deploy an AWS EC2 micro t2 instance in us-east-1 as part of VPC 192.168.1.0/24. ", "keywords": ["instance"]}, {"source": "Text", "text": "In the case of an EC2 instance, you can specify what should run on that resource through your custom bash script in the user-data section of the EC2 resource. ", "keywords": ["instance"]}]}, {"Id": "176740576", "PostHistoryTypeId": "24", "PostId": "34881818", "RevisionGUID": "b3d1a62c-c1fc-4be7-93d4-881077216612", "CreationDate": "2018-07-02T10:23:21.923", "Comment": "Proposed by 1923733 approved by 33204, -1 edit id of 3792584", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "176740577", "PostHistoryTypeId": "5", "PostId": "34881818", "RevisionGUID": "9cd3f006-0c6f-433d-ba6b-c72a44e259dd", "CreationDate": "2018-07-02T10:23:21.923", "UserId": "199682", "Comment": "fixed grammer, corrected spelling", "Text": "OpsWorks is an orchestration tool like Chef - in fact, it's derived from Chef - Puppet, Ansible or Saltstalk. You use Opsworks to specify the state that you want your network to be in by specifying the state that you want each resource - server instances, applications, storage - to be in. And you specify the state that you want each resource to be in by specifying the value that you want for each attribute of that state. For example, you might want the Apache service to be always up and running and start on boot-up with Apache as the user and Apache as the Linux group.\r\n \r\nCloudFormation is a json template (**) that specifies the state of the resource(s) that you want to deploy i.e. you want to deploy an AWS EC2 micro t2 instance in us-east-1 as part of VPC 192.168.1.0/24. In the case of an EC2 instance, you can specify what should run on that resource through your custom bash script in the user-data section of the EC2 resource. CloudFormation is just a template. The template gets fleshed ourt as a running resource only if you run it either through the AWS Management Console for CloudFormation or if you run the aws cli command for Cloudformation i.e. aws cloudformation ...\r\n\r\nElasticBeanstalk is a PAAS- you can upload the specifically Ruby/Rails, node.js or Python/django or Python/Flask apps. If you're running anything else like Scala, Haskell or anything else, create a Docker image for it and upload that Docker image into Elastic Beanstalk (*).\r\n\r\nYou can do the uploading of your app into Elastic Beanstalk by either running the aws cli for CloudFormation or you create a recipe for Opsworks to upload your app into Elastic Beanstalk. You can also run the aws cli for Cloudformation through Opsworks.\r\n\r\n(*) In fact, AWS's documentation on its Ruby app example was so poor that I lost patience and embedded the example app into a Docker image and uploaded the Docker image into Elastic Beanstalk.\r\n\r\n(**) As of Sep 2016, Cloudformation also supports YAML templates.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You use Opsworks to specify the state that you want your network to be in by specifying the state that you want each resource - server instances, applications, storage - to be in. ", "keywords": ["storage"]}, {"source": "Text", "text": "CloudFormation is a json template (**) that specifies the state of the resource(s) that you want to deploy i.e. you want to deploy an AWS EC2 micro t2 instance in us-east-1 as part of VPC 192.168.1.0/24. ", "keywords": ["instance"]}, {"source": "Text", "text": "In the case of an EC2 instance, you can specify what should run on that resource through your custom bash script in the user-data section of the EC2 resource. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "You use Opsworks to specify the state that you want your network to be in by specifying the state that you want each resource - server instances, applications, storage - to be in. ", "keywords": ["storage"]}, {"source": "Body", "text": "CloudFormation is a json template (**) that specifies the state of the resource(s) that you want to deploy i.e. you want to deploy an AWS EC2 micro t2 instance in us-east-1 as part of VPC 192.168.1.0/24. ", "keywords": ["instance"]}, {"source": "Body", "text": "In the case of an EC2 instance, you can specify what should run on that resource through your custom bash script in the user-data section of the EC2 resource. ", "keywords": ["instance"]}]}, {"Id": "21950118", "PostTypeId": "2", "ParentId": "21310125", "CreationDate": "2014-02-22T05:23:09.653", "Score": "8", "Body": "<p>In Opsworks you can share \"roles\" of layers across a stack to use less resources by combining the specific jobs an underlying instance maybe doing. </p>\n\n<p>Layer Compatibility List (as long as security groups are properly set): </p>\n\n<pre><code>HA Proxy : custom, db-master, and memcached.\nMySQL :  custom, lb, memcached, monitoring-master, nodejs-app, php-app, rails-app, and web.\nJava : custom, db-master, and memcached.\nNode.js : custom, db-master, memcached, and monitoring-master\nPHP : custom, db-master, memcached, monitoring-master, and rails-app.\nRails :  custom, db-master, memcached, monitoring-master, php-app.\nStatic :  custom, db-master, memcached.\nCustom : custom, db-master, lb, memcached, monitoring-master, nodejs-app, php-app, rails-app, and web \nGanglia :  custom, db-master, memcached, php-app, rails-app. \nMemcached :  custom, db-master, lb, monitoring-master, nodejs-app, php-app, rails-app, and web. \n</code></pre>\n\n<p>reference : <a href=\"http://docs.aws.amazon.com/opsworks/latest/userguide/layers.html\" rel=\"noreferrer\">http://docs.aws.amazon.com/opsworks/latest/userguide/layers.html</a> </p>\n", "OwnerUserId": "3188176", "LastEditorUserId": "3188176", "LastEditDate": "2014-02-26T02:19:47.210", "LastActivityDate": "2014-02-26T02:19:47.210", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "58668893", "PostHistoryTypeId": "2", "PostId": "21950118", "RevisionGUID": "b9761944-bc33-4758-a85f-36e201d30e04", "CreationDate": "2014-02-22T05:23:09.653", "UserId": "3188176", "Text": "In Opsworks you can share \"roles\" of layers across a stack to use less resources by combining the specific jobs an underlying instance maybe doing. \r\n\r\nLayer Compatibility List (as long as security groups are properly set): \r\n\r\nHA Proxy : custom, db-master, and memcached.\r\nMySQL :  custom, lb, memcached, monitoring-master, nodejs-app, php-app, rails-app, and web.\r\nJava : custom, db-master, and memcached.\r\nNode.js : custom, db-master, memcached, and monitoring-master\r\nPHP : custom, db-master, memcached, monitoring-master, and rails-app.\r\nRails :  custom, db-master, memcached, monitoring-master, php-app.\r\nStatic :  custom, db-master, memcached.\r\nCustom : custom, db-master, lb, memcached, monitoring-master, nodejs-app, php-app, rails-app, and web \r\nGanglia :  custom, db-master, memcached, php-app, rails-app. \r\nMemcached :  custom, db-master, lb, monitoring-master, nodejs-app, php-app, rails-app, and web. \r\n\r\nreference : http://docs.aws.amazon.com/opsworks/latest/userguide/layers.html ", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "In Opsworks you can share \"roles\" of layers across a stack to use less resources by combining the specific jobs an underlying instance maybe doing. ", "keywords": ["instance"]}]}, {"Id": "58971068", "PostHistoryTypeId": "5", "PostId": "21950118", "RevisionGUID": "60ac60ad-dc01-424b-8751-6c1515fb6331", "CreationDate": "2014-02-26T02:19:47.210", "UserId": "3188176", "Comment": "added 44 characters in body", "Text": "In Opsworks you can share \"roles\" of layers across a stack to use less resources by combining the specific jobs an underlying instance maybe doing. \r\n\r\nLayer Compatibility List (as long as security groups are properly set): \r\n    \r\n    HA Proxy : custom, db-master, and memcached.\r\n    MySQL :  custom, lb, memcached, monitoring-master, nodejs-app, php-app, rails-app, and web.\r\n    Java : custom, db-master, and memcached.\r\n    Node.js : custom, db-master, memcached, and monitoring-master\r\n    PHP : custom, db-master, memcached, monitoring-master, and rails-app.\r\n    Rails :  custom, db-master, memcached, monitoring-master, php-app.\r\n    Static :  custom, db-master, memcached.\r\n    Custom : custom, db-master, lb, memcached, monitoring-master, nodejs-app, php-app, rails-app, and web \r\n    Ganglia :  custom, db-master, memcached, php-app, rails-app. \r\n    Memcached :  custom, db-master, lb, monitoring-master, nodejs-app, php-app, rails-app, and web. \r\n\r\nreference : http://docs.aws.amazon.com/opsworks/latest/userguide/layers.html ", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "In Opsworks you can share \"roles\" of layers across a stack to use less resources by combining the specific jobs an underlying instance maybe doing. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "In Opsworks you can share \"roles\" of layers across a stack to use less resources by combining the specific jobs an underlying instance maybe doing. ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "Instead of having a separate instance for each app, Ideally I would like to share some hardware resources efficiently. ", "keywords": ["instance"]}, {"source": "Body", "text": "In the past I have used mostly an EC2 instance + RDS + Cloudfront + S3 The stack system will host some high traffic ruby on rails apps that we are migrating from Heroku, also some python/django apps and some PHP apps as well.", "keywords": ["instance"]}]}