{"Id": "46962263", "PostTypeId": "1", "AcceptedAnswerId": "46963760", "CreationDate": "2017-10-26T19:23:18.863", "Score": "6", "ViewCount": "8703", "Body": "<p>I am working with two simple web apps that need to talk to each other.  Within AWS CloudFormation I have a template that creates an EC2 instance and installs both applications on the same server (eventually I'll split them up, but for now they live on the same EC2 instance).</p>\n\n<p>As part of the EC2 instance, I have to define the SecurityGroup to use.  For now I have been using a default one, but I would like to build one dynamically.  In the group I allow SSH in from my machine, and a few ports from the box to itself.</p>\n\n<p>When using the default group, after the fact I can add in the server's public ip to its own security group to allow it to communicate to itself.  The problem is during the CloudFormation template, I am getting a circular reference between the SecurityGroup and the EC2 instance.  The instance needs a SecurityGroup to start, and that group needs to contain the Public IP rule for the EC2 box.</p>\n\n<p>Is there a better way to do this, or somehow lock in something along the lines of \"localhost\" to allow these traffic in for now?</p>\n", "OwnerUserId": "1426742", "LastEditorUserId": "213269", "LastEditDate": "2021-08-26T16:04:45.880", "LastActivityDate": "2021-08-26T16:04:45.880", "Title": "CloudFormation SecurityGroup Circular Reference", "Tags": "|amazon-web-services|amazon-ec2|aws-cloudformation|aws-security-group|", "AnswerCount": "2", "CommentCount": "3", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "80872683", "PostId": "46962263", "Score": "1", "Text": "After you create the instance with either the default or a dynamically created security group, you could create a AWS::EC2::SecurityGroupIngress object, which can reference your EC2 instance (I think). http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group-ingress.html", "CreationDate": "2017-10-26T19:39:49.800", "UserId": "4278870", "filtered-sentences": [{"source": "Text", "text": "After you create the instance with either the default or a dynamically created security group, you could create a AWS::EC2::SecurityGroupIngress object, which can reference your EC2 instance (I think). ", "keywords": ["instance"]}]}, {"Id": "80875009", "PostId": "46962263", "Score": "0", "Text": "That did the trick.  It allowed the EC2 to spin up with a non null group.  Then after init hooked up the IP.  Thanks again!", "CreationDate": "2017-10-26T20:52:30.627", "UserId": "1426742", "filtered-sentences": []}, {"Id": "80875127", "PostId": "46962263", "Score": "1", "Text": "The docs describe this case: If you want to cross-reference two security groups in the ingress and egress rules of those security groups, use the AWS::EC2::SecurityGroupEgress and AWS::EC2::SecurityGroupIngress resources to define your rules. Do not use the embedded ingress and egress rules in the AWS::EC2::SecurityGroup. Doing so creates a circular dependency, which AWS CloudFormation doesn't allow.", "CreationDate": "2017-10-26T20:55:46.990", "UserId": "271415", "filtered-sentences": []}], "history": [{"Id": "159233079", "PostHistoryTypeId": "2", "PostId": "46962263", "RevisionGUID": "36e5cf4d-0c72-441a-bcd5-9fac7239b198", "CreationDate": "2017-10-26T19:23:18.863", "UserId": "1426742", "Text": "I am working with two simple web apps that need to talk to each other.  Within AWS CloudFormation I have a template that creates an EC2 instance and installs both applications on the same server (eventually I'll split them up, but for now they live on the same EC2 instance).\r\n\r\nAs part of the EC2 instance, I have to define the SecurityGroup to use.  For now I have been using a default one, but I would like to build one dynamically.  In the group I allow SSH in from my machine, and a few ports from the box to itself.\r\n\r\nWhen using the default group, after the fact I can add in the server's public ip to its own security group to allow it to communicate to itself.  The problem is during the CloudFormation template, I am getting a circular reference between the SecurityGroup and the EC2 instance.  The instance needs a SecurityGroup to start, and that group needs to contain the Public IP rule for the EC2 box.\r\n\r\nIs there a better way to do this, or somehow lock in something along the lines of \"localhost\" to allow these traffic in for now?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Within AWS CloudFormation I have a template that creates an EC2 instance and installs both applications on the same server (eventually I'll split them up, but for now they live on the same EC2 instance). ", "keywords": ["instance"]}, {"source": "Text", "text": "As part of the EC2 instance, I have to define the SecurityGroup to use. ", "keywords": ["instance"]}, {"source": "Text", "text": "The problem is during the CloudFormation template, I am getting a circular reference between the SecurityGroup and the EC2 instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "The instance needs a SecurityGroup to start, and that group needs to contain the Public IP rule for the EC2 box. ", "keywords": ["instance"]}]}, {"Id": "159233080", "PostHistoryTypeId": "1", "PostId": "46962263", "RevisionGUID": "36e5cf4d-0c72-441a-bcd5-9fac7239b198", "CreationDate": "2017-10-26T19:23:18.863", "UserId": "1426742", "Text": "CloudFormation SecurityGroup Circular Reference", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "159233081", "PostHistoryTypeId": "3", "PostId": "46962263", "RevisionGUID": "36e5cf4d-0c72-441a-bcd5-9fac7239b198", "CreationDate": "2017-10-26T19:23:18.863", "UserId": "1426742", "Text": "|amazon-web-services|amazon-ec2|aws-cloudformation|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "252671075", "PostHistoryTypeId": "6", "PostId": "46962263", "RevisionGUID": "a8ad4075-d2cb-492f-9ced-40014cfabea9", "CreationDate": "2021-08-26T16:04:45.880", "UserId": "213269", "Comment": "edited tags", "Text": "|amazon-web-services|amazon-ec2|aws-cloudformation|aws-security-group|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "46963760", "PostTypeId": "2", "ParentId": "46962263", "CreationDate": "2017-10-26T21:02:22.323", "Score": "17", "Body": "<p>You have a couple of options:</p>\n\n<ol>\n<li>You can have a self referencing security group for this, which will mean the EC2 instance will be allowed to communicate to itself since is on that security group. There is a caveat, and that is don't use embedded ingress and egress rules in the <code>AWS::EC2::SecurityGroup</code>, instead use <code>AWS::EC2::SecurityGroupEgress</code> and <code>AWS::EC2::SecurityGroupIngress</code> separate, as noted <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html\" rel=\"noreferrer\">here</a>.</li>\n</ol>\n\n<p>Would look like:</p>\n\n<pre><code>\"Resources\" : {\n    \"SelfRefSecurityGroup\" : {\n      \"Type\" : \"AWS::EC2::SecurityGroup\",\n      \"Properties\" : {\n        \"GroupDescription\" : \"Has access to itself\",\n        \"VpcId\" : \"vpc-xxxxxx\"\n      }\n    },\n    \"MySecurityGroupIngress\" : {\n         \"Type\" : \"AWS::EC2::SecurityGroupIngress\",\n         \"Properties\" : {\n             \"GroupId\" : { \"Ref\" : \"SelfRefSecurityGroup\" },\n             \"IpProtocol\" : \"tcp\",\n             \"ToPort\" : \"65535\",\n             \"FromPort\" : \"0\",\n             \"SourceSecurityGroupId\" : { \"Ref\" : \"SelfRefSecurityGroup\" }\n         },\n         \"DependsOn\" : \"SelfRefSecurityGroup\"\n     }\n</code></pre>\n\n<ol start=\"2\">\n<li><p>Best option:\nCreate 2 host entries in the box (or better yet set the dns entries using a <a href=\"http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-private.html\" rel=\"noreferrer\">Route53 private hosted zone</a>):</p>\n\n<p>webapp1.com 127.0.0.1</p>\n\n<p>webapp2.com 127.0.0.1</p></li>\n</ol>\n\n<p>I wouldn't advice having the box talk to itself via its public IP. Probably you'll even incur in cost! (<a href=\"https://aws.amazon.com/ec2/pricing/on-demand/\" rel=\"noreferrer\">https://aws.amazon.com/ec2/pricing/on-demand/</a>)\nPlus the added maintenance of the SG.</p>\n", "OwnerUserId": "954852", "LastActivityDate": "2017-10-26T21:02:22.323", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "159239056", "PostHistoryTypeId": "2", "PostId": "46963760", "RevisionGUID": "41ffcc91-6a2d-4c52-a17a-0d34308fef99", "CreationDate": "2017-10-26T21:02:22.323", "UserId": "954852", "Text": "You have a couple of options:\r\n\r\n1. You can have a self referencing security group for this, which will mean the EC2 instance will be allowed to communicate to itself since is on that security group. There is a caveat, and that is don't use embedded ingress and egress rules in the `AWS::EC2::SecurityGroup`, instead use `AWS::EC2::SecurityGroupEgress` and `AWS::EC2::SecurityGroupIngress` separate, as noted [here][1].\r\n\r\nWould look like:\r\n\r\n    \"Resources\" : {\r\n        \"SelfRefSecurityGroup\" : {\r\n          \"Type\" : \"AWS::EC2::SecurityGroup\",\r\n          \"Properties\" : {\r\n            \"GroupDescription\" : \"Has access to itself\",\r\n            \"VpcId\" : \"vpc-xxxxxx\"\r\n          }\r\n        },\r\n        \"MySecurityGroupIngress\" : {\r\n             \"Type\" : \"AWS::EC2::SecurityGroupIngress\",\r\n             \"Properties\" : {\r\n                 \"GroupId\" : { \"Ref\" : \"SelfRefSecurityGroup\" },\r\n                 \"IpProtocol\" : \"tcp\",\r\n                 \"ToPort\" : \"65535\",\r\n                 \"FromPort\" : \"0\",\r\n                 \"SourceSecurityGroupId\" : { \"Ref\" : \"SelfRefSecurityGroup\" }\r\n             },\r\n             \"DependsOn\" : \"SelfRefSecurityGroup\"\r\n         }\r\n\r\n2. Best option:\r\nCreate 2 host entries in the box (or better yet set the dns entries using a [Route53 private hosted zone][2]):\r\n\r\n    webapp1.com 127.0.0.1\r\n\r\n    webapp2.com 127.0.0.1\r\n\r\nI wouldn't advice having the box talk to itself via its public IP. Probably you'll even incur in cost! (https://aws.amazon.com/ec2/pricing/on-demand/)\r\nPlus the added maintenance of the SG.\r\n\r\n\r\n  [1]: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html\r\n  [2]: http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-private.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You can have a self referencing security group for this, which will mean the EC2 instance will be allowed to communicate to itself since is on that security group. ", "keywords": ["instance"]}, {"source": "Text", "text": "Probably you'll even incur in cost! (https://aws.amazon.com/ec2/pricing/on-demand/) ", "keywords": ["cost"]}]}], "filtered-sentences": [{"source": "Body", "text": "You have a couple of options: You can have a self referencing security group for this, which will mean the EC2 instance will be allowed to communicate to itself since is on that security group. ", "keywords": ["instance"]}, {"source": "Body", "text": "Probably you'll even incur in cost! (https://aws.amazon.com/ec2/pricing/on-demand/) ", "keywords": ["cost"]}]}, {"Id": "61066010", "PostTypeId": "2", "ParentId": "46962263", "CreationDate": "2020-04-06T18:00:07.620", "Score": "0", "Body": "<p>We can self reference a security group during creation as such:</p>\n\n<pre><code>---\nDescription: Create a VPC with a SG which references itself\nAWSTemplateFormatVersion: '2010-09-09'\nResources:\n  vpctester:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: 172.16.0.0/23\n      EnableDnsSupport: false\n      EnableDnsHostnames: false\n      InstanceTenancy: default\n      Tags:\n      - Key: Name\n        Value: vpctester\n  sgtester:\n    Type: AWS::EC2::SecurityGroup\n    DependsOn: vpctester\n    Properties:\n      GroupDescription: vpc tester sg\n      VpcId:\n        Ref: vpctester\n  sgtesteringress:\n    Type: AWS::EC2::SecurityGroupIngress\n    DependsOn: sgtester\n    Properties:\n      GroupId:\n        Ref: sgtester\n      IpProtocol: tcp\n      FromPort: '0'\n      ToPort: '65535'\n      SourceSecurityGroupId:\n        Ref: sgtester\n\n</code></pre>\n\n<p>Please read my post for more info:\n<a href=\"https://dev.to/anupamncsu/self-referencing-security-groups-on-aws-59gb\" rel=\"nofollow noreferrer\">https://dev.to/anupamncsu/self-referencing-security-groups-on-aws-59gb</a></p>\n", "OwnerUserId": "5224134", "LastActivityDate": "2020-04-06T18:00:07.620", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "218578071", "PostHistoryTypeId": "2", "PostId": "61066010", "RevisionGUID": "8c9d7ba0-a7af-4b16-8a22-b131e56bb71f", "CreationDate": "2020-04-06T18:00:07.620", "UserId": "5224134", "Text": "We can self reference a security group during creation as such:\r\n\r\n```\r\n---\r\nDescription: Create a VPC with a SG which references itself\r\nAWSTemplateFormatVersion: '2010-09-09'\r\nResources:\r\n  vpctester:\r\n    Type: AWS::EC2::VPC\r\n    Properties:\r\n      CidrBlock: 172.16.0.0/23\r\n      EnableDnsSupport: false\r\n      EnableDnsHostnames: false\r\n      InstanceTenancy: default\r\n      Tags:\r\n      - Key: Name\r\n        Value: vpctester\r\n  sgtester:\r\n    Type: AWS::EC2::SecurityGroup\r\n    DependsOn: vpctester\r\n    Properties:\r\n      GroupDescription: vpc tester sg\r\n      VpcId:\r\n        Ref: vpctester\r\n  sgtesteringress:\r\n    Type: AWS::EC2::SecurityGroupIngress\r\n    DependsOn: sgtester\r\n    Properties:\r\n      GroupId:\r\n        Ref: sgtester\r\n      IpProtocol: tcp\r\n      FromPort: '0'\r\n      ToPort: '65535'\r\n      SourceSecurityGroupId:\r\n        Ref: sgtester\r\n\r\n```\r\n\r\nPlease read my post for more info:\r\nhttps://dev.to/anupamncsu/self-referencing-security-groups-on-aws-59gb", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "We can self reference a security group during creation as such: ``` --- Description: Create a VPC with a SG which references itself AWSTemplateFormatVersion: '2010-09-09' Resources: vpctester: Type: AWS::EC2::VPC Properties: CidrBlock: 172.16.0.0/23 EnableDnsSupport: false EnableDnsHostnames: false InstanceTenancy: default Tags: - Key: Name Value: vpctester sgtester: Type: AWS::EC2::SecurityGroup DependsOn: vpctester Properties: GroupDescription: vpc tester sg VpcId: Ref: vpctester sgtesteringress: Type: AWS::EC2::SecurityGroupIngress DependsOn: sgtester Properties: GroupId: Ref: sgtester IpProtocol: tcp FromPort: '0' ToPort: '65535' SourceSecurityGroupId: Ref: sgtester ``` Please read my post for more info: https://dev.to/anupamncsu/self-referencing-security-groups-on-aws-59gb", "keywords": ["test"]}]}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "Within AWS CloudFormation I have a template that creates an EC2 instance and installs both applications on the same server (eventually I'll split them up, but for now they live on the same EC2 instance). ", "keywords": ["instance"]}, {"source": "Body", "text": "As part of the EC2 instance, I have to define the SecurityGroup to use. ", "keywords": ["instance"]}, {"source": "Body", "text": "The problem is during the CloudFormation template, I am getting a circular reference between the SecurityGroup and the EC2 instance. ", "keywords": ["instance"]}, {"source": "Body", "text": "The instance needs a SecurityGroup to start, and that group needs to contain the Public IP rule for the EC2 box. ", "keywords": ["instance"]}]}