{"Id": "62013428", "PostTypeId": "1", "AcceptedAnswerId": "62013949", "CreationDate": "2020-05-26T01:53:48.217", "Score": "3", "ViewCount": "5639", "Body": "<p>I am trying to create a CloudFormation EC2 deployment where a webserver is automatically deployed.\nMy current setup is as follows:</p>\n\n<pre><code>{\n    \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n\n    \"Description\" : \"AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.\",\n\n    \"Parameters\" : {\n      \"KeyName\": {\n        \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instance\",\n        \"Type\": \"AWS::EC2::KeyPair::KeyName\",\n        \"ConstraintDescription\" : \"must be the name of an existing EC2 KeyPair.\"\n      },\n\n      \"InstanceType\" : {\n        \"Description\" : \"WebServer EC2 instance type\",\n        \"Type\" : \"String\",\n        \"Default\" : \"t2.micro\",\n        \"AllowedValues\" : [ \"t1.micro\", \"t2.nano\", \"t2.micro\"]\n  ,\n        \"ConstraintDescription\" : \"must be a valid EC2 instance type.\"\n      },\n\n      \"SSHLocation\" : {\n        \"Description\" : \"The IP address range that can be used to SSH to the EC2 instances\",\n        \"Type\": \"String\",\n        \"MinLength\": \"9\",\n        \"MaxLength\": \"18\",\n        \"Default\": \"0.0.0.0/0\",\n        \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\",\n        \"ConstraintDescription\": \"must be a valid IP CIDR range of the form x.x.x.x/x.\"\n     }\n    },\n\n    \"Mappings\" : {\n      \"AWSInstanceType2Arch\" : {\n        \"t2.micro\"    : { \"Arch\" : \"HVM64\"  }\n      },\n\n      \"AWSInstanceType2NATArch\" : {\n        \"t1.micro\"    : { \"Arch\" : \"NATHVM64\"  },\n        \"t2.nano\"     : { \"Arch\" : \"NATHVM64\"  },\n        \"t2.micro\"    : { \"Arch\" : \"NATHVM64\"  }\n      }\n  ,\n      \"AWSRegionArch2AMI\" : {\n        \"us-east-1\"        : {\"HVM64\" : \"ami-0080e4c5bc078760e\", \"HVMG2\" : \"ami-0aeb704d503081ea6\"},\n        \"us-west-2\"        : {\"HVM64\" : \"ami-01e24be29428c15b2\", \"HVMG2\" : \"ami-0fe84a5b4563d8f27\"},\n        \"us-west-1\"        : {\"HVM64\" : \"ami-0ec6517f6edbf8044\", \"HVMG2\" : \"ami-0a7fc72dc0e51aa77\"},\n        \"eu-west-1\"        : {\"HVM64\" : \"ami-08935252a36e25f85\", \"HVMG2\" : \"ami-0d5299b1c6112c3c7\"},\n        \"eu-west-2\"        : {\"HVM64\" : \"ami-01419b804382064e4\", \"HVMG2\" : \"NOT_SUPPORTED\"},\n        \"eu-west-3\"        : {\"HVM64\" : \"ami-0dd7e7ed60da8fb83\", \"HVMG2\" : \"NOT_SUPPORTED\"},\n        \"eu-central-1\"     : {\"HVM64\" : \"ami-0cfbf4f6db41068ac\", \"HVMG2\" : \"ami-0aa1822e3eb913a11\"},\n        \"eu-north-1\"       : {\"HVM64\" : \"ami-86fe70f8\", \"HVMG2\" : \"ami-32d55b4c\"}\n      }\n\n    },\n\n    \"Resources\" : {\n      \"EC2Instance\" : {\n        \"Type\" : \"AWS::EC2::Instance\",\n        \"Metadata\" : {\n            \"AWS::CloudFormation::Init\" : {\n                \"configSets\" : {\n                    \"Install\" : [ \"Install\" ]\n                },\n\n                \"Install\" : {\n                    \"packages\" : {         \n                        \"yum\": {\"httpd\":[], \"php\":[], \"mysql-server\":[], \"php-mysql\":[]}      \n                    },\n                    \"sources\" : {              \n                    },\n                    \"files\" : {               \n                    },\n                    \"commands\" : {               \n                    },\n                    \"services\" : {  \n                        \"sysvinit\" : {\"mysqld\"  : \n                            { \"enabled\" : \"true\", \"ensureRunning\" : \"true\" },\n                        \"httpd\"   : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\" }}             \n                    }\n              }\n            }\n          },\n        \"Properties\" : {\n          \"Tags\" : [{\"Key\" : \"StudentID\", \"Value\" : \"something\"},\n          {\"Key\" : \"StudentName\", \"Value\" : \"someone\"}],    \n          \"InstanceType\" : { \"Ref\" : \"InstanceType\" },\n          \"SecurityGroups\" : [ { \"Ref\" : \"WebServerSG\" } ],\n          \"KeyName\" : { \"Ref\" : \"KeyName\" },\n          \"ImageId\" : \"ami-01d025118d8e760db\",\n          \"UserData\": {\"Fn::Base64\":{\"Fn::Join\":[\"\", [\n          \"#!/bin/bash\",\n          \"yum update -y\",\n          \"yum install -y httpd24 php70 mysql56-server php70-mysqlnd\",\n          \"service httpd start\",\n          \"chkconfig httpd on\",\n          \"usermod -a -G apache ec2-user\",\n          \"chown -R ec2-user:apache /var/www\",\n          \"chmod 2775 /var/www\",\n          \"find /var/www -type d -exec sudo chmod 2775 {} +\",\n          \"find /var/www -type f -exec sudo chmod 0664 {} +\",\n          \"echo '&lt;?php echo '&lt;h2&gt;Welcome to COS80001. Installed PHP version: ' . phpversion() . '&lt;/h2&gt;'; ?&gt;' &gt; /var/www/html/phpinfo.php\"\n          ]]}}\n\n        }\n      },\n\n      \"WebServerSG\" : {\n        \"Type\" : \"AWS::EC2::SecurityGroup\",\n        \"Properties\" : { \n          \"GroupDescription\" : \"Web DMZ\",\n          \"SecurityGroupIngress\" : [ \n              {\n            \"IpProtocol\" : \"tcp\",\n            \"FromPort\" : \"22\",\n            \"ToPort\" : \"22\",\n            \"CidrIp\" : { \"Ref\" : \"SSHLocation\"}\n            },\n            {\n                \"IpProtocol\" : \"tcp\",\n                \"FromPort\" : \"80\",\n                \"ToPort\" : \"80\",\n                \"CidrIp\" : { \"Ref\" : \"SSHLocation\"}\n            },\n            {\n                \"IpProtocol\" : \"tcp\",\n                \"FromPort\" : \"443\",\n                \"ToPort\" : \"443\",\n                \"CidrIp\" : { \"Ref\" : \"SSHLocation\"}\n            }\n            ],\n\n          \"Tags\" : [{\"Key\" : \"StudentID\", \"Value\" : \"something\"},\n            {\"Key\" : \"StudentName\", \"Value\" : \"someone\"}\n        ]  \n        }\n      }\n    },\n\n    \"Outputs\" : {\n      \"InstanceId\" : {\n        \"Description\" : \"InstanceId of the newly created EC2 instance\",\n        \"Value\" : { \"Ref\" : \"EC2Instance\" }\n      },\n      \"AZ\" : {\n        \"Description\" : \"Availability Zone of the newly created EC2 instance\",\n        \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"AvailabilityZone\" ] }\n      },\n      \"PublicDNS\" : {\n        \"Description\" : \"Public DNSName of the newly created EC2 instance\",\n        \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicDnsName\" ] }\n      },\n      \"PublicIP\" : {\n        \"Description\" : \"Public IP address of the newly created EC2 instance\",\n        \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicIp\" ] }\n      }\n    }\n  }\n</code></pre>\n\n<p>My end goal is to have the following bash script implemented</p>\n\n<pre><code>\n#!/bin/bash\nyum update -y\nyum install -y httpd24 php70 mysql56-server php70-mysqlnd\nservice httpd start\nchkconfig httpd on\nusermod -a -G apache ec2-user\nchown -R ec2-user:apache /var/www\nchmod 2775 /var/www\nfind /var/www -type d -exec sudo chmod 2775 {} \\;\nfind /var/www -type f -exec sudo chmod 0664 {} \\;\necho \"&lt;?php echo '&lt;h2&gt;Welcome to COS80001. Installed PHP version: ' .\nphpversion() . '&lt;/h2&gt;'; ?&gt;\" &gt; /var/www/html/phpinfo.php\n</code></pre>\n\n<p>I have a few issues with concatenating the default webpage. I am confused on how to implement having 3 embedded apostrophes.\nI am also confused about the find \\; as the JSON file is not happy with its use.</p>\n", "OwnerUserId": "8904301", "LastEditorUserId": "8904301", "LastEditDate": "2020-05-26T02:14:57.340", "LastActivityDate": "2020-05-26T07:40:56.010", "Title": "AWS CloudFormation User Data \\; and new lines (JSON)", "Tags": "|json|amazon-web-services|amazon-ec2|aws-cloudformation|", "AnswerCount": "2", "CommentCount": "6", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "109680413", "PostId": "62013428", "Score": "0", "Text": "Can you provide all instance template? From what I see, your user data is incorrect anyway, regardless of your quotation marks.", "CreationDate": "2020-05-26T02:00:54.583", "UserId": "248823", "filtered-sentences": [{"source": "Text", "text": "Can you provide all instance template? ", "keywords": ["instance"]}]}, {"Id": "109680436", "PostId": "62013428", "Score": "1", "Text": "Also can you post any error messages you get?", "CreationDate": "2020-05-26T02:02:26.427", "UserId": "248823", "filtered-sentences": []}, {"Id": "109680637", "PostId": "62013428", "Score": "0", "Text": "I added the whole template. How do I view my error messages? im adding the template via. the CloudFormation and receive no errors... when importing. Should I be using the CLI?", "CreationDate": "2020-05-26T02:15:31.990", "UserId": "8904301", "filtered-sentences": []}, {"Id": "109680888", "PostId": "62013428", "Score": "0", "Text": "Thanks. I will have a look. You can start thinking, `AWS::CloudFormation::Init\"` will never get executed. You must explicitly use [cfn-init](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-init.html) in your user data to execute `AWS::CloudFormation::Init\"`. Debuging user data and init section is painful. Have to just run it, go to instance, and look for errors on the instance itself. Fix template, re-deploy stack, go to instance, look for errors, and repeat.", "CreationDate": "2020-05-26T02:33:09.823", "UserId": "248823", "filtered-sentences": [{"source": "Text", "text": "Have to just run it, go to instance, and look for errors on the instance itself. ", "keywords": ["instance"]}, {"source": "Text", "text": "Fix template, re-deploy stack, go to instance, look for errors, and repeat.", "keywords": ["instance"]}]}, {"Id": "109681358", "PostId": "62013428", "Score": "0", "Text": "Im confused on what Im doing wrong. So the AWS::CloudFormation::Init is the cfn-init and I should ONLY be using that, so I should delete the user-data? as what I could gather is that init updates the EC2 instance on updates while the userdata will complete wipe the instance", "CreationDate": "2020-05-26T03:03:56.343", "UserId": "8904301", "filtered-sentences": [{"source": "Text", "text": "So the AWS::CloudFormation::Init is the cfn-init and I should ONLY be using that, so I should delete the user-data? as what I could gather is that init updates the EC2 instance on updates while the userdata will complete wipe the instance", "keywords": ["instance"]}]}, {"Id": "118563951", "PostId": "62013428", "Score": "0", "Text": "hello one year later from COS20019 :)", "CreationDate": "2021-04-13T14:29:07.783", "UserId": "6396951", "filtered-sentences": []}], "history": [{"Id": "222539243", "PostHistoryTypeId": "2", "PostId": "62013428", "RevisionGUID": "d3debbeb-83b0-4b2c-adb7-556cc773aae7", "CreationDate": "2020-05-26T01:53:48.217", "UserId": "8904301", "Text": "I am trying to create a CloudFormation EC2 deployment where a webserver is automatically deployed.\r\nMy current setup is as follows:\r\n\r\n```\r\n \"UserData\": {\"Fn::Base64\":{\"Fn::Join\":[\"\", [\r\n          \"#!/bin/bash\",\r\n          \"yum update -y\",\r\n          \"yum install -y httpd24 php70 mysql56-server php70-mysqlnd\",\r\n          \"service httpd start\",\r\n          \"chkconfig httpd on\",\r\n          \"usermod -a -G apache ec2-user\",\r\n          \"chown -R ec2-user:apache /var/www\",\r\n          \"chmod 2775 /var/www\",\r\n          \"find /var/www -type d -exec sudo chmod 2775 {} +\",\r\n          \"find /var/www -type f -exec sudo chmod 0664 {} +\",\r\n          \"echo '<?php echo '<h2>Welcome to COS80001. Installed PHP version: ' . phpversion() . '</h2>'; ?>' > /var/www/html/phpinfo.php\"\r\n          ]]}}\r\n```\r\n```\r\n\"AWS::CloudFormation::Init\" : {\r\n                \"configSets\" : {\r\n                    \"Install\" : [ \"Install\" ]\r\n                },\r\n  \r\n                \"Install\" : {\r\n                    \"packages\" : {         \r\n                        \"yum\": {\"httpd\":[], \"php\":[], \"mysql-server\":[], \"php-mysql\":[]}      \r\n                    },\r\n                    \"sources\" : {              \r\n                    },\r\n                    \"files\" : {               \r\n                    },\r\n                    \"commands\" : {               \r\n                    },\r\n                    \"services\" : {  \r\n                        \"sysvinit\" : {\"mysqld\"  : \r\n                            { \"enabled\" : \"true\", \"ensureRunning\" : \"true\" },\r\n                        \"httpd\"   : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\" }}             \r\n                    }\r\n              }\r\n```\r\n\r\nMy end goal is to have the following bash script implemented\r\n```\r\n\r\n#!/bin/bash\r\nyum update -y\r\nyum install -y httpd24 php70 mysql56-server php70-mysqlnd\r\nservice httpd start\r\nchkconfig httpd on\r\nusermod -a -G apache ec2-user\r\nchown -R ec2-user:apache /var/www\r\nchmod 2775 /var/www\r\nfind /var/www -type d -exec sudo chmod 2775 {} \\;\r\nfind /var/www -type f -exec sudo chmod 0664 {} \\;\r\necho \"<?php echo '<h2>Welcome to COS80001. Installed PHP version: ' .\r\nphpversion() . '</h2>'; ?>\" > /var/www/html/phpinfo.php\r\n```\r\n\r\nI have a few issues with concatenating the default webpage. I am confused on how to implement having 3 embedded apostrophes.\r\nI am also confused about the find \\; as the JSON file is not happy with its use.\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "222539244", "PostHistoryTypeId": "1", "PostId": "62013428", "RevisionGUID": "d3debbeb-83b0-4b2c-adb7-556cc773aae7", "CreationDate": "2020-05-26T01:53:48.217", "UserId": "8904301", "Text": "AWS CloudFormation User Data \\; and new lines (JSON)", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "222539245", "PostHistoryTypeId": "3", "PostId": "62013428", "RevisionGUID": "d3debbeb-83b0-4b2c-adb7-556cc773aae7", "CreationDate": "2020-05-26T01:53:48.217", "UserId": "8904301", "Text": "|json|amazon-web-services|amazon-ec2|aws-cloudformation|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "222539837", "PostHistoryTypeId": "5", "PostId": "62013428", "RevisionGUID": "9a0e5d19-3221-4d64-be61-229c2cad1c5e", "CreationDate": "2020-05-26T02:14:57.340", "UserId": "8904301", "Comment": "added 4893 characters in body", "Text": "I am trying to create a CloudFormation EC2 deployment where a webserver is automatically deployed.\r\nMy current setup is as follows:\r\n\r\n```\r\n{\r\n    \"AWSTemplateFormatVersion\" : \"2010-09-09\",\r\n  \r\n    \"Description\" : \"AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.\",\r\n  \r\n    \"Parameters\" : {\r\n      \"KeyName\": {\r\n        \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instance\",\r\n        \"Type\": \"AWS::EC2::KeyPair::KeyName\",\r\n        \"ConstraintDescription\" : \"must be the name of an existing EC2 KeyPair.\"\r\n      },\r\n  \r\n      \"InstanceType\" : {\r\n        \"Description\" : \"WebServer EC2 instance type\",\r\n        \"Type\" : \"String\",\r\n        \"Default\" : \"t2.micro\",\r\n        \"AllowedValues\" : [ \"t1.micro\", \"t2.nano\", \"t2.micro\"]\r\n  ,\r\n        \"ConstraintDescription\" : \"must be a valid EC2 instance type.\"\r\n      },\r\n  \r\n      \"SSHLocation\" : {\r\n        \"Description\" : \"The IP address range that can be used to SSH to the EC2 instances\",\r\n        \"Type\": \"String\",\r\n        \"MinLength\": \"9\",\r\n        \"MaxLength\": \"18\",\r\n        \"Default\": \"0.0.0.0/0\",\r\n        \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\",\r\n        \"ConstraintDescription\": \"must be a valid IP CIDR range of the form x.x.x.x/x.\"\r\n     }\r\n    },\r\n  \r\n    \"Mappings\" : {\r\n      \"AWSInstanceType2Arch\" : {\r\n        \"t2.micro\"    : { \"Arch\" : \"HVM64\"  }\r\n      },\r\n  \r\n      \"AWSInstanceType2NATArch\" : {\r\n        \"t1.micro\"    : { \"Arch\" : \"NATHVM64\"  },\r\n        \"t2.nano\"     : { \"Arch\" : \"NATHVM64\"  },\r\n        \"t2.micro\"    : { \"Arch\" : \"NATHVM64\"  }\r\n      }\r\n  ,\r\n      \"AWSRegionArch2AMI\" : {\r\n        \"us-east-1\"        : {\"HVM64\" : \"ami-0080e4c5bc078760e\", \"HVMG2\" : \"ami-0aeb704d503081ea6\"},\r\n        \"us-west-2\"        : {\"HVM64\" : \"ami-01e24be29428c15b2\", \"HVMG2\" : \"ami-0fe84a5b4563d8f27\"},\r\n        \"us-west-1\"        : {\"HVM64\" : \"ami-0ec6517f6edbf8044\", \"HVMG2\" : \"ami-0a7fc72dc0e51aa77\"},\r\n        \"eu-west-1\"        : {\"HVM64\" : \"ami-08935252a36e25f85\", \"HVMG2\" : \"ami-0d5299b1c6112c3c7\"},\r\n        \"eu-west-2\"        : {\"HVM64\" : \"ami-01419b804382064e4\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n        \"eu-west-3\"        : {\"HVM64\" : \"ami-0dd7e7ed60da8fb83\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n        \"eu-central-1\"     : {\"HVM64\" : \"ami-0cfbf4f6db41068ac\", \"HVMG2\" : \"ami-0aa1822e3eb913a11\"},\r\n        \"eu-north-1\"       : {\"HVM64\" : \"ami-86fe70f8\", \"HVMG2\" : \"ami-32d55b4c\"}\r\n      }\r\n  \r\n    },\r\n  \r\n    \"Resources\" : {\r\n      \"EC2Instance\" : {\r\n        \"Type\" : \"AWS::EC2::Instance\",\r\n        \"Metadata\" : {\r\n            \"AWS::CloudFormation::Init\" : {\r\n                \"configSets\" : {\r\n                    \"Install\" : [ \"Install\" ]\r\n                },\r\n  \r\n                \"Install\" : {\r\n                    \"packages\" : {         \r\n                        \"yum\": {\"httpd\":[], \"php\":[], \"mysql-server\":[], \"php-mysql\":[]}      \r\n                    },\r\n                    \"sources\" : {              \r\n                    },\r\n                    \"files\" : {               \r\n                    },\r\n                    \"commands\" : {               \r\n                    },\r\n                    \"services\" : {  \r\n                        \"sysvinit\" : {\"mysqld\"  : \r\n                            { \"enabled\" : \"true\", \"ensureRunning\" : \"true\" },\r\n                        \"httpd\"   : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\" }}             \r\n                    }\r\n              }\r\n            }\r\n          },\r\n        \"Properties\" : {\r\n          \"Tags\" : [{\"Key\" : \"StudentID\", \"Value\" : \"something\"},\r\n          {\"Key\" : \"StudentName\", \"Value\" : \"someone\"}],    \r\n          \"InstanceType\" : { \"Ref\" : \"InstanceType\" },\r\n          \"SecurityGroups\" : [ { \"Ref\" : \"WebServerSG\" } ],\r\n          \"KeyName\" : { \"Ref\" : \"KeyName\" },\r\n          \"ImageId\" : \"ami-01d025118d8e760db\",\r\n          \"UserData\": {\"Fn::Base64\":{\"Fn::Join\":[\"\", [\r\n          \"#!/bin/bash\",\r\n          \"yum update -y\",\r\n          \"yum install -y httpd24 php70 mysql56-server php70-mysqlnd\",\r\n          \"service httpd start\",\r\n          \"chkconfig httpd on\",\r\n          \"usermod -a -G apache ec2-user\",\r\n          \"chown -R ec2-user:apache /var/www\",\r\n          \"chmod 2775 /var/www\",\r\n          \"find /var/www -type d -exec sudo chmod 2775 {} +\",\r\n          \"find /var/www -type f -exec sudo chmod 0664 {} +\",\r\n          \"echo '<?php echo '<h2>Welcome to COS80001. Installed PHP version: ' . phpversion() . '</h2>'; ?>' > /var/www/html/phpinfo.php\"\r\n          ]]}}\r\n\r\n        }\r\n      },\r\n  \r\n      \"WebServerSG\" : {\r\n        \"Type\" : \"AWS::EC2::SecurityGroup\",\r\n        \"Properties\" : { \r\n          \"GroupDescription\" : \"Web DMZ\",\r\n          \"SecurityGroupIngress\" : [ \r\n              {\r\n            \"IpProtocol\" : \"tcp\",\r\n            \"FromPort\" : \"22\",\r\n            \"ToPort\" : \"22\",\r\n            \"CidrIp\" : { \"Ref\" : \"SSHLocation\"}\r\n            },\r\n            {\r\n                \"IpProtocol\" : \"tcp\",\r\n                \"FromPort\" : \"80\",\r\n                \"ToPort\" : \"80\",\r\n                \"CidrIp\" : { \"Ref\" : \"SSHLocation\"}\r\n            },\r\n            {\r\n                \"IpProtocol\" : \"tcp\",\r\n                \"FromPort\" : \"443\",\r\n                \"ToPort\" : \"443\",\r\n                \"CidrIp\" : { \"Ref\" : \"SSHLocation\"}\r\n            }\r\n            ],\r\n\r\n          \"Tags\" : [{\"Key\" : \"StudentID\", \"Value\" : \"something\"},\r\n            {\"Key\" : \"StudentName\", \"Value\" : \"someone\"}\r\n        ]  \r\n        }\r\n      }\r\n    },\r\n  \r\n    \"Outputs\" : {\r\n      \"InstanceId\" : {\r\n        \"Description\" : \"InstanceId of the newly created EC2 instance\",\r\n        \"Value\" : { \"Ref\" : \"EC2Instance\" }\r\n      },\r\n      \"AZ\" : {\r\n        \"Description\" : \"Availability Zone of the newly created EC2 instance\",\r\n        \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"AvailabilityZone\" ] }\r\n      },\r\n      \"PublicDNS\" : {\r\n        \"Description\" : \"Public DNSName of the newly created EC2 instance\",\r\n        \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicDnsName\" ] }\r\n      },\r\n      \"PublicIP\" : {\r\n        \"Description\" : \"Public IP address of the newly created EC2 instance\",\r\n        \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicIp\" ] }\r\n      }\r\n    }\r\n  }\r\n```\r\n\r\nMy end goal is to have the following bash script implemented\r\n```\r\n\r\n#!/bin/bash\r\nyum update -y\r\nyum install -y httpd24 php70 mysql56-server php70-mysqlnd\r\nservice httpd start\r\nchkconfig httpd on\r\nusermod -a -G apache ec2-user\r\nchown -R ec2-user:apache /var/www\r\nchmod 2775 /var/www\r\nfind /var/www -type d -exec sudo chmod 2775 {} \\;\r\nfind /var/www -type f -exec sudo chmod 0664 {} \\;\r\necho \"<?php echo '<h2>Welcome to COS80001. Installed PHP version: ' .\r\nphpversion() . '</h2>'; ?>\" > /var/www/html/phpinfo.php\r\n```\r\n\r\nI have a few issues with concatenating the default webpage. I am confused on how to implement having 3 embedded apostrophes.\r\nI am also confused about the find \\; as the JSON file is not happy with its use.\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "My current setup is as follows: ``` { \"AWSTemplateFormatVersion\" : \"2010-09-09\", \"Description\" : \"AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. ", "keywords": ["instance"]}, {"source": "Text", "text": "This example creates an EC2 security group for the instance to give you SSH access. ", "keywords": ["instance"]}, {"source": "Text", "text": "This template creates an Amazon EC2 instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "You will be billed for the AWS resources used if you create a stack from this template.\", \"Parameters\" : { \"KeyName\": { \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instance\", \"Type\": \"AWS::EC2::KeyPair::KeyName\", \"ConstraintDescription\" : \"must be the name of an existing EC2 KeyPair.\" }, \"InstanceType\" : { \"Description\" : \"WebServer EC2 instance type\", \"Type\" : \"String\", \"Default\" : \"t2.micro\", \"AllowedValues\" : [ \"t1.micro\", \"t2.nano\", \"t2.micro\"] , \"ConstraintDescription\" : \"must be a valid EC2 instance type.\" }, \"SSHLocation\" : { \"Description\" : \"The IP address range that can be used to SSH to the EC2 instances\", \"Type\": \"String\", \"MinLength\": \"9\", \"MaxLength\": \"18\", \"Default\": \"0.0.0.0/0\", \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\", \"ConstraintDescription\": \"must be a valid IP CIDR range of the form x.x.x.x/x.\" } }, \"Mappings\" : { \"AWSInstanceType2Arch\" : { \"t2.micro\" : { \"Arch\" : \"HVM64\" ", "keywords": ["bill", "instance"]}, {"source": "Text", "text": "} } , \"AWSRegionArch2AMI\" : { \"us-east-1\" : {\"HVM64\" : \"ami-0080e4c5bc078760e\", \"HVMG2\" : \"ami-0aeb704d503081ea6\"}, \"us-west-2\" : {\"HVM64\" : \"ami-01e24be29428c15b2\", \"HVMG2\" : \"ami-0fe84a5b4563d8f27\"}, \"us-west-1\" : {\"HVM64\" : \"ami-0ec6517f6edbf8044\", \"HVMG2\" : \"ami-0a7fc72dc0e51aa77\"}, \"eu-west-1\" : {\"HVM64\" : \"ami-08935252a36e25f85\", \"HVMG2\" : \"ami-0d5299b1c6112c3c7\"}, \"eu-west-2\" : {\"HVM64\" : \"ami-01419b804382064e4\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"eu-west-3\" : {\"HVM64\" : \"ami-0dd7e7ed60da8fb83\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"eu-central-1\" : {\"HVM64\" : \"ami-0cfbf4f6db41068ac\", \"HVMG2\" : \"ami-0aa1822e3eb913a11\"}, \"eu-north-1\" : {\"HVM64\" : \"ami-86fe70f8\", \"HVMG2\" : \"ami-32d55b4c\"} } }, \"Resources\" : { \"EC2Instance\" : { \"Type\" : \"AWS::EC2::Instance\", \"Metadata\" : { \"AWS::CloudFormation::Init\" : { \"configSets\" : { \"Install\" : [ \"Install\" ] }, \"Install\" : { \"packages\" : { \"yum\": {\"httpd\":[], \"php\":[], \"mysql-server\":[], \"php-mysql\":[]} }, \"sources\" : { }, \"files\" : { }, \"commands\" : { }, \"services\" : { \"sysvinit\" : {\"mysqld\" : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\" }, \"httpd\" : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\" ", "keywords": ["instance"]}, {"source": "Text", "text": ">' > /var/www/html/phpinfo.php\" ]]}} } }, \"WebServerSG\" : { \"Type\" : \"AWS::EC2::SecurityGroup\", \"Properties\" : { \"GroupDescription\" : \"Web DMZ\", \"SecurityGroupIngress\" : [ { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"22\", \"ToPort\" : \"22\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"} }, { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"80\", \"ToPort\" : \"80\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"} }, { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"443\", \"ToPort\" : \"443\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"} } ], \"Tags\" : [{\"Key\" : \"StudentID\", \"Value\" : \"something\"}, {\"Key\" : \"StudentName\", \"Value\" : \"someone\"} ] } } }, \"Outputs\" : { \"InstanceId\" : { \"Description\" : \"InstanceId of the newly created EC2 instance\", \"Value\" : { \"Ref\" : \"EC2Instance\" } }, \"AZ\" : { \"Description\" : \"Availability Zone of the newly created EC2 instance\", \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"AvailabilityZone\" ] } }, \"PublicDNS\" : { \"Description\" : \"Public DNSName of the newly created EC2 instance\", \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicDnsName\" ] } }, \"PublicIP\" : { \"Description\" : \"Public IP address of the newly created EC2 instance\", \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicIp\" ] } } } } ``` ", "keywords": ["instance"]}]}], "answers": [{"Id": "62016943", "PostTypeId": "2", "ParentId": "62013428", "CreationDate": "2020-05-26T07:40:56.010", "Score": "2", "Body": "<p>What I've learned pretty early working with CloudFormation templates:</p>\n\n<ul>\n<li>Switch to YAML</li>\n<li>Use <a href=\"https://yaml-multiline.info/\" rel=\"nofollow noreferrer\">block scalar style keeping newlines</a> for UserData and other multiline text content.</li>\n</ul>\n\n<p>My typical <code>UserData</code>:</p>\n\n<pre><code>      UserData:\n        - !Base64 \n          'Fn::Sub': |\n            Content-Type: multipart/mixed; boundary=\"==BOUNDARY==\"\n            MIME-Version: 1.0\n\n            --==BOUNDARY==\n            Content-Type: text/x-shellscript; charset=\"us-ascii\"\n\n            #!/bin/bash\n            # Set any ECS agent configuration options\n            cat &lt;&lt;'EOF' &gt;&gt; /etc/ecs/ecs.config\n            ECS_CLUSTER=${AnonymisierungCluster}\n            ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=15m\n            EOF\n\n            --==BOUNDARY==--\n\n</code></pre>\n", "OwnerUserId": "303810", "LastActivityDate": "2020-05-26T07:40:56.010", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "222553855", "PostHistoryTypeId": "2", "PostId": "62016943", "RevisionGUID": "ab4c14d3-090f-4e7f-a6f4-7d7718bfe6e9", "CreationDate": "2020-05-26T07:40:56.010", "UserId": "303810", "Text": "What I've learned pretty early working with CloudFormation templates:\r\n\r\n * Switch to YAML\r\n * Use [block scalar style keeping newlines](https://yaml-multiline.info/) for UserData and other multiline text content.\r\n\r\nMy typical `UserData`:\r\n\r\n```\r\n      UserData:\r\n        - !Base64 \r\n          'Fn::Sub': |\r\n            Content-Type: multipart/mixed; boundary=\"==BOUNDARY==\"\r\n            MIME-Version: 1.0\r\n\r\n            --==BOUNDARY==\r\n            Content-Type: text/x-shellscript; charset=\"us-ascii\"\r\n\r\n            #!/bin/bash\r\n            # Set any ECS agent configuration options\r\n            cat <<'EOF' >> /etc/ecs/ecs.config\r\n            ECS_CLUSTER=${AnonymisierungCluster}\r\n            ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=15m\r\n            EOF\r\n\r\n            --==BOUNDARY==--\r\n       \r\n```\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "62013949", "PostTypeId": "2", "ParentId": "62013428", "CreationDate": "2020-05-26T03:01:51.903", "Score": "4", "Body": "<p>Template <strong>fixed</strong>. I removed <code>AWS::CloudFormation::Init</code>. I don't see point in this in your use case. I modified its keys, ami and parameters section, so you have to adjust them back to what you had originally. The <strong><code>UserData</code> works</strong> and the <code>phpinfo.php</code> is correclty deployed. </p>\n\n<pre><code>{\n  \"AWSTemplateFormatVersion\": \"2010-09-09\",\n\n  \"Description\": \"AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.\",\n\n  \"Parameters\": {\n\n    \"InstanceType\": {\n      \"Description\": \"WebServer EC2 instance type\",\n      \"Type\": \"String\",\n      \"Default\": \"t2.micro\",\n      \"AllowedValues\": [\"t1.micro\", \"t2.nano\", \"t2.micro\"],\n      \"ConstraintDescription\": \"must be a valid EC2 instance type.\"\n    },\n\n    \"SSHLocation\": {\n      \"Description\": \"The IP address range that can be used to SSH to the EC2 instances\",\n      \"Type\": \"String\",\n      \"MinLength\": \"9\",\n      \"MaxLength\": \"18\",\n      \"Default\": \"0.0.0.0/0\",\n      \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\",\n      \"ConstraintDescription\": \"must be a valid IP CIDR range of the form x.x.x.x/x.\"\n    }\n  },\n\n  \"Mappings\": {\n    \"AWSInstanceType2Arch\": {\n      \"t2.micro\": {\n        \"Arch\": \"HVM64\"\n      }\n    },\n\n    \"AWSInstanceType2NATArch\": {\n      \"t1.micro\": {\n        \"Arch\": \"NATHVM64\"\n      },\n      \"t2.nano\": {\n        \"Arch\": \"NATHVM64\"\n      },\n      \"t2.micro\": {\n        \"Arch\": \"NATHVM64\"\n      }\n    },\n    \"AWSRegionArch2AMI\": {\n      \"us-east-1\": {\n        \"HVM64\": \"ami-0080e4c5bc078760e\",\n        \"HVMG2\": \"ami-0aeb704d503081ea6\"\n      },\n      \"us-west-2\": {\n        \"HVM64\": \"ami-01e24be29428c15b2\",\n        \"HVMG2\": \"ami-0fe84a5b4563d8f27\"\n      },\n      \"us-west-1\": {\n        \"HVM64\": \"ami-0ec6517f6edbf8044\",\n        \"HVMG2\": \"ami-0a7fc72dc0e51aa77\"\n      },\n      \"eu-west-1\": {\n        \"HVM64\": \"ami-08935252a36e25f85\",\n        \"HVMG2\": \"ami-0d5299b1c6112c3c7\"\n      },\n      \"eu-west-2\": {\n        \"HVM64\": \"ami-01419b804382064e4\",\n        \"HVMG2\": \"NOT_SUPPORTED\"\n      },\n      \"eu-west-3\": {\n        \"HVM64\": \"ami-0dd7e7ed60da8fb83\",\n        \"HVMG2\": \"NOT_SUPPORTED\"\n      },\n      \"eu-central-1\": {\n        \"HVM64\": \"ami-0cfbf4f6db41068ac\",\n        \"HVMG2\": \"ami-0aa1822e3eb913a11\"\n      },\n      \"eu-north-1\": {\n        \"HVM64\": \"ami-86fe70f8\",\n        \"HVMG2\": \"ami-32d55b4c\"\n      }\n    }\n\n  },\n\n  \"Resources\": {\n    \"EC2Instance\": {\n      \"Type\": \"AWS::EC2::Instance\",\n      \"Properties\": {\n        \"Tags\": [{\n            \"Key\": \"StudentID\",\n            \"Value\": \"something\"\n          },\n          {\n            \"Key\": \"StudentName\",\n            \"Value\": \"someone\"\n          }\n        ],\n        \"InstanceType\": \"t2.micro\",\n        \"SecurityGroups\": [{\n          \"Ref\": \"WebServerSG\"\n        }],\n        \"KeyName\": \"MyKeyPair\",\n        \"ImageId\": \"ami-0323c3dd2da7fb37d\",\n        \"UserData\": {\n          \"Fn::Base64\": {\n            \"Fn::Join\": [\"\", [\n              \"#!/bin/bash -ex\\n\",\n              \"yum update -y\\n\",\n              \"yum install -y httpd php mysql-server php-mysqlnd\\n\",\n              \"systemctl enable httpd\\n\",\n              \"systemctl start httpd\\n\",\n              \"usermod -a -G apache ec2-user\\n\",\n              \"chown -R ec2-user:apache /var/www\\n\",\n              \"chmod 2775 /var/www\\n\",\n              \"find /var/www -type d -exec sudo chmod 2775 {} \\\\;\\n\",\n              \"find /var/www -type f -exec sudo chmod 0664 {} \\\\;\\n\",\n              \"echo \\\"&lt;?php echo '&lt;h2&gt;Welcome to COS80001. Installed PHP version: ' . phpversion() . '&lt;/h2&gt;'; ?&gt;\\\" &gt; /var/www/html/phpinfo.php\\n\"\n            ]]\n          }\n        }\n\n      }\n    },\n\n    \"WebServerSG\": {\n      \"Type\": \"AWS::EC2::SecurityGroup\",\n      \"Properties\": {\n        \"GroupDescription\": \"Web DMZ\",\n        \"SecurityGroupIngress\": [{\n            \"IpProtocol\": \"tcp\",\n            \"FromPort\": \"22\",\n            \"ToPort\": \"22\",\n            \"CidrIp\": {\n              \"Ref\": \"SSHLocation\"\n            }\n          },\n          {\n            \"IpProtocol\": \"tcp\",\n            \"FromPort\": \"80\",\n            \"ToPort\": \"80\",\n            \"CidrIp\": {\n              \"Ref\": \"SSHLocation\"\n            }\n          },\n          {\n            \"IpProtocol\": \"tcp\",\n            \"FromPort\": \"443\",\n            \"ToPort\": \"443\",\n            \"CidrIp\": {\n              \"Ref\": \"SSHLocation\"\n            }\n          }\n        ],\n\n        \"Tags\": [{\n            \"Key\": \"StudentID\",\n            \"Value\": \"something\"\n          },\n          {\n            \"Key\": \"StudentName\",\n            \"Value\": \"someone\"\n          }\n        ]\n      }\n    }\n  },\n\n  \"Outputs\": {\n    \"InstanceId\": {\n      \"Description\": \"InstanceId of the newly created EC2 instance\",\n      \"Value\": {\n        \"Ref\": \"EC2Instance\"\n      }\n    },\n    \"AZ\": {\n      \"Description\": \"Availability Zone of the newly created EC2 instance\",\n      \"Value\": {\n        \"Fn::GetAtt\": [\"EC2Instance\", \"AvailabilityZone\"]\n      }\n    },\n    \"PublicDNS\": {\n      \"Description\": \"Public DNSName of the newly created EC2 instance\",\n      \"Value\": {\n        \"Fn::GetAtt\": [\"EC2Instance\", \"PublicDnsName\"]\n      }\n    },\n    \"PublicIP\": {\n      \"Description\": \"Public IP address of the newly created EC2 instance\",\n      \"Value\": {\n        \"Fn::GetAtt\": [\"EC2Instance\", \"PublicIp\"]\n      }\n    }\n  }\n}\n</code></pre>\n", "OwnerUserId": "248823", "LastEditorUserId": "248823", "LastEditDate": "2020-05-26T03:26:22.383", "LastActivityDate": "2020-05-26T03:26:22.383", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "109681395", "PostId": "62013949", "Score": "0", "Text": "So if Im right. The problem was having both the init and userdata? as they do the same thing essentially?", "CreationDate": "2020-05-26T03:06:37.820", "UserId": "8904301", "filtered-sentences": []}, {"Id": "109681477", "PostId": "62013949", "Score": "1", "Text": "@PandaPlaysAll No really. There were many issues with your User Data. I fixed them all. `Init` is not needed in your scenario. You can compare my User Data with yours.  The template works now. I tested it on Amazon Linux 2.", "CreationDate": "2020-05-26T03:12:14.613", "UserId": "248823", "filtered-sentences": [{"source": "Text", "text": "I tested it on Amazon Linux 2.", "keywords": ["test"]}]}, {"Id": "109681951", "PostId": "62013949", "Score": "0", "Text": "I got everything working other then getting the default webpage to paste. Getting an error? did yours propery work? It is having a problem with the \\\"\\\"", "CreationDate": "2020-05-26T03:52:02.070", "UserId": "8904301", "filtered-sentences": []}, {"Id": "109681983", "PostId": "62013949", "Score": "0", "Text": "@PandaPlaysAll Paste what? I tested  by going to the `/phpinfo.php`.", "CreationDate": "2020-05-26T03:53:27.123", "UserId": "248823", "filtered-sentences": [{"source": "Text", "text": "I tested by going to the `/phpinfo.php`.", "keywords": ["test"]}]}], "history": [{"Id": "222541326", "PostHistoryTypeId": "2", "PostId": "62013949", "RevisionGUID": "005ed853-2d4b-4f04-92f2-e085fdccf974", "CreationDate": "2020-05-26T03:01:51.903", "UserId": "248823", "Text": "Template **fixed**. I removed `AWS::CloudFormation::Init`. I don't see point in this in your use case. I modified its keys and parameters, so you have to adjust them back to what you had originally. The **`UserData` works** and the `phpinfo.php` is correclty deployed. \r\n\r\n\r\n    {\r\n      \"AWSTemplateFormatVersion\": \"2010-09-09\",\r\n    \r\n      \"Description\": \"AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.\",\r\n    \r\n      \"Parameters\": {\r\n    \r\n        \"InstanceType\": {\r\n          \"Description\": \"WebServer EC2 instance type\",\r\n          \"Type\": \"String\",\r\n          \"Default\": \"t2.micro\",\r\n          \"AllowedValues\": [\"t1.micro\", \"t2.nano\", \"t2.micro\"],\r\n          \"ConstraintDescription\": \"must be a valid EC2 instance type.\"\r\n        },\r\n    \r\n        \"SSHLocation\": {\r\n          \"Description\": \"The IP address range that can be used to SSH to the EC2 instances\",\r\n          \"Type\": \"String\",\r\n          \"MinLength\": \"9\",\r\n          \"MaxLength\": \"18\",\r\n          \"Default\": \"0.0.0.0/0\",\r\n          \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\",\r\n          \"ConstraintDescription\": \"must be a valid IP CIDR range of the form x.x.x.x/x.\"\r\n        }\r\n      },\r\n    \r\n      \"Mappings\": {\r\n        \"AWSInstanceType2Arch\": {\r\n          \"t2.micro\": {\r\n            \"Arch\": \"HVM64\"\r\n          }\r\n        },\r\n    \r\n        \"AWSInstanceType2NATArch\": {\r\n          \"t1.micro\": {\r\n            \"Arch\": \"NATHVM64\"\r\n          },\r\n          \"t2.nano\": {\r\n            \"Arch\": \"NATHVM64\"\r\n          },\r\n          \"t2.micro\": {\r\n            \"Arch\": \"NATHVM64\"\r\n          }\r\n        },\r\n        \"AWSRegionArch2AMI\": {\r\n          \"us-east-1\": {\r\n            \"HVM64\": \"ami-0080e4c5bc078760e\",\r\n            \"HVMG2\": \"ami-0aeb704d503081ea6\"\r\n          },\r\n          \"us-west-2\": {\r\n            \"HVM64\": \"ami-01e24be29428c15b2\",\r\n            \"HVMG2\": \"ami-0fe84a5b4563d8f27\"\r\n          },\r\n          \"us-west-1\": {\r\n            \"HVM64\": \"ami-0ec6517f6edbf8044\",\r\n            \"HVMG2\": \"ami-0a7fc72dc0e51aa77\"\r\n          },\r\n          \"eu-west-1\": {\r\n            \"HVM64\": \"ami-08935252a36e25f85\",\r\n            \"HVMG2\": \"ami-0d5299b1c6112c3c7\"\r\n          },\r\n          \"eu-west-2\": {\r\n            \"HVM64\": \"ami-01419b804382064e4\",\r\n            \"HVMG2\": \"NOT_SUPPORTED\"\r\n          },\r\n          \"eu-west-3\": {\r\n            \"HVM64\": \"ami-0dd7e7ed60da8fb83\",\r\n            \"HVMG2\": \"NOT_SUPPORTED\"\r\n          },\r\n          \"eu-central-1\": {\r\n            \"HVM64\": \"ami-0cfbf4f6db41068ac\",\r\n            \"HVMG2\": \"ami-0aa1822e3eb913a11\"\r\n          },\r\n          \"eu-north-1\": {\r\n            \"HVM64\": \"ami-86fe70f8\",\r\n            \"HVMG2\": \"ami-32d55b4c\"\r\n          }\r\n        }\r\n    \r\n      },\r\n    \r\n      \"Resources\": {\r\n        \"EC2Instance\": {\r\n          \"Type\": \"AWS::EC2::Instance\",\r\n          \"Properties\": {\r\n            \"Tags\": [{\r\n                \"Key\": \"StudentID\",\r\n                \"Value\": \"something\"\r\n              },\r\n              {\r\n                \"Key\": \"StudentName\",\r\n                \"Value\": \"someone\"\r\n              }\r\n            ],\r\n            \"InstanceType\": \"t2.micro\",\r\n            \"SecurityGroups\": [{\r\n              \"Ref\": \"WebServerSG\"\r\n            }],\r\n            \"KeyName\": \"MyKeyPair\",\r\n            \"ImageId\": \"ami-0323c3dd2da7fb37d\",\r\n            \"UserData\": {\r\n              \"Fn::Base64\": {\r\n                \"Fn::Join\": [\"\", [\r\n                  \"#!/bin/bash -ex\\n\",\r\n                  \"yum update -y\\n\",\r\n                  \"yum install -y httpd php mysql-server php-mysqlnd\\n\",\r\n                  \"systemctl enable httpd\\n\",\r\n                  \"systemctl start httpd\\n\",\r\n                  \"usermod -a -G apache ec2-user\\n\",\r\n                  \"chown -R ec2-user:apache /var/www\\n\",\r\n                  \"chmod 2775 /var/www\\n\",\r\n                  \"find /var/www -type d -exec sudo chmod 2775 {} \\\\;\\n\",\r\n                  \"find /var/www -type f -exec sudo chmod 0664 {} \\\\;\\n\",\r\n                  \"echo \\\"<?php echo '<h2>Welcome to COS80001. Installed PHP version: ' . phpversion() . '</h2>'; ?>\\\" > /var/www/html/phpinfo.php\\n\"\r\n                ]]\r\n              }\r\n            }\r\n    \r\n          }\r\n        },\r\n    \r\n        \"WebServerSG\": {\r\n          \"Type\": \"AWS::EC2::SecurityGroup\",\r\n          \"Properties\": {\r\n            \"GroupDescription\": \"Web DMZ\",\r\n            \"SecurityGroupIngress\": [{\r\n                \"IpProtocol\": \"tcp\",\r\n                \"FromPort\": \"22\",\r\n                \"ToPort\": \"22\",\r\n                \"CidrIp\": {\r\n                  \"Ref\": \"SSHLocation\"\r\n                }\r\n              },\r\n              {\r\n                \"IpProtocol\": \"tcp\",\r\n                \"FromPort\": \"80\",\r\n                \"ToPort\": \"80\",\r\n                \"CidrIp\": {\r\n                  \"Ref\": \"SSHLocation\"\r\n                }\r\n              },\r\n              {\r\n                \"IpProtocol\": \"tcp\",\r\n                \"FromPort\": \"443\",\r\n                \"ToPort\": \"443\",\r\n                \"CidrIp\": {\r\n                  \"Ref\": \"SSHLocation\"\r\n                }\r\n              }\r\n            ],\r\n    \r\n            \"Tags\": [{\r\n                \"Key\": \"StudentID\",\r\n                \"Value\": \"something\"\r\n              },\r\n              {\r\n                \"Key\": \"StudentName\",\r\n                \"Value\": \"someone\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      },\r\n    \r\n      \"Outputs\": {\r\n        \"InstanceId\": {\r\n          \"Description\": \"InstanceId of the newly created EC2 instance\",\r\n          \"Value\": {\r\n            \"Ref\": \"EC2Instance\"\r\n          }\r\n        },\r\n        \"AZ\": {\r\n          \"Description\": \"Availability Zone of the newly created EC2 instance\",\r\n          \"Value\": {\r\n            \"Fn::GetAtt\": [\"EC2Instance\", \"AvailabilityZone\"]\r\n          }\r\n        },\r\n        \"PublicDNS\": {\r\n          \"Description\": \"Public DNSName of the newly created EC2 instance\",\r\n          \"Value\": {\r\n            \"Fn::GetAtt\": [\"EC2Instance\", \"PublicDnsName\"]\r\n          }\r\n        },\r\n        \"PublicIP\": {\r\n          \"Description\": \"Public IP address of the newly created EC2 instance\",\r\n          \"Value\": {\r\n            \"Fn::GetAtt\": [\"EC2Instance\", \"PublicIp\"]\r\n          }\r\n        }\r\n      }\r\n    }", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "{ \"AWSTemplateFormatVersion\": \"2010-09-09\", \"Description\": \"AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. ", "keywords": ["instance"]}, {"source": "Text", "text": "This example creates an EC2 security group for the instance to give you SSH access. ", "keywords": ["instance"]}, {"source": "Text", "text": "This template creates an Amazon EC2 instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "You will be billed for the AWS resources used if you create a stack from this template.\", \"Parameters\": { \"InstanceType\": { \"Description\": \"WebServer EC2 instance type\", \"Type\": \"String\", \"Default\": \"t2.micro\", \"AllowedValues\": [\"t1.micro\", \"t2.nano\", \"t2.micro\"], \"ConstraintDescription\": \"must be a valid EC2 instance type.\" }, \"SSHLocation\": { \"Description\": \"The IP address range that can be used to SSH to the EC2 instances\", \"Type\": \"String\", \"MinLength\": \"9\", \"MaxLength\": \"18\", \"Default\": \"0.0.0.0/0\", \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\", \"ConstraintDescription\": \"must be a valid IP CIDR range of the form x.x.x.x/x.\" ", "keywords": ["bill", "instance"]}, {"source": "Text", "text": "}, \"us-west-2\": { \"HVM64\": \"ami-01e24be29428c15b2\", \"HVMG2\": \"ami-0fe84a5b4563d8f27\" }, \"us-west-1\": { \"HVM64\": \"ami-0ec6517f6edbf8044\", \"HVMG2\": \"ami-0a7fc72dc0e51aa77\" }, \"eu-west-1\": { \"HVM64\": \"ami-08935252a36e25f85\", \"HVMG2\": \"ami-0d5299b1c6112c3c7\" }, \"eu-west-2\": { \"HVM64\": \"ami-01419b804382064e4\", \"HVMG2\": \"NOT_SUPPORTED\" }, \"eu-west-3\": { \"HVM64\": \"ami-0dd7e7ed60da8fb83\", \"HVMG2\": \"NOT_SUPPORTED\" }, \"eu-central-1\": { \"HVM64\": \"ami-0cfbf4f6db41068ac\", \"HVMG2\": \"ami-0aa1822e3eb913a11\" }, \"eu-north-1\": { \"HVM64\": \"ami-86fe70f8\", \"HVMG2\": \"ami-32d55b4c\" } } }, \"Resources\": { \"EC2Instance\": { \"Type\": \"AWS::EC2::Instance\", \"Properties\": { \"Tags\": [{ \"Key\": \"StudentID\", \"Value\": \"something\" }, { \"Key\": \"StudentName\", \"Value\": \"someone\" } ], \"InstanceType\": \"t2.micro\", \"SecurityGroups\": [{ \"Ref\": \"WebServerSG\" }], \"KeyName\": \"MyKeyPair\", \"ImageId\": \"ami-0323c3dd2da7fb37d\", \"UserData\": { \"Fn::Base64\": { \"Fn::Join\": [\"\", [ \"#!/bin/bash -ex\\n\", \"yum update -y\\n\", \"yum install -y httpd php mysql-server php-mysqlnd\\n\", \"systemctl enable httpd\\n\", \"systemctl start httpd\\n\", \"usermod -a -G apache ec2-user\\n\", \"chown -R ec2-user:apache /var/www\\n\", \"chmod 2775 /var/www\\n\", \"find /var/www -type d -exec sudo chmod 2775 {} \\\\;\\n\", \"find /var/www -type f -exec sudo chmod 0664 {} \\\\;\\n\", \"echo \\\"Welcome to COS80001. ", "keywords": ["instance"]}, {"source": "Text", "text": ">\\\" > /var/www/html/phpinfo.php\\n\" ]] } } } }, \"WebServerSG\": { \"Type\": \"AWS::EC2::SecurityGroup\", \"Properties\": { \"GroupDescription\": \"Web DMZ\", \"SecurityGroupIngress\": [{ \"IpProtocol\": \"tcp\", \"FromPort\": \"22\", \"ToPort\": \"22\", \"CidrIp\": { \"Ref\": \"SSHLocation\" } }, { \"IpProtocol\": \"tcp\", \"FromPort\": \"80\", \"ToPort\": \"80\", \"CidrIp\": { \"Ref\": \"SSHLocation\" } }, { \"IpProtocol\": \"tcp\", \"FromPort\": \"443\", \"ToPort\": \"443\", \"CidrIp\": { \"Ref\": \"SSHLocation\" } } ], \"Tags\": [{ \"Key\": \"StudentID\", \"Value\": \"something\" }, { \"Key\": \"StudentName\", \"Value\": \"someone\" } ] } } }, \"Outputs\": { \"InstanceId\": { \"Description\": \"InstanceId of the newly created EC2 instance\", \"Value\": { \"Ref\": \"EC2Instance\" } }, \"AZ\": { \"Description\": \"Availability Zone of the newly created EC2 instance\", \"Value\": { \"Fn::GetAtt\": [\"EC2Instance\", \"AvailabilityZone\"] } }, \"PublicDNS\": { \"Description\": \"Public DNSName of the newly created EC2 instance\", \"Value\": { \"Fn::GetAtt\": [\"EC2Instance\", \"PublicDnsName\"] } ", "keywords": ["instance"]}, {"source": "Text", "text": "}, \"PublicIP\": { \"Description\": \"Public IP address of the newly created EC2 instance\", \"Value\": { \"Fn::GetAtt\": [\"EC2Instance\", \"PublicIp\"] ", "keywords": ["instance"]}]}, {"Id": "222542617", "PostHistoryTypeId": "5", "PostId": "62013949", "RevisionGUID": "31b0582e-55ef-4bbe-8394-9e4c45f4bcd9", "CreationDate": "2020-05-26T03:26:22.383", "UserId": "248823", "Comment": "added 13 characters in body", "Text": "Template **fixed**. I removed `AWS::CloudFormation::Init`. I don't see point in this in your use case. I modified its keys, ami and parameters section, so you have to adjust them back to what you had originally. The **`UserData` works** and the `phpinfo.php` is correclty deployed. \r\n\r\n\r\n    {\r\n      \"AWSTemplateFormatVersion\": \"2010-09-09\",\r\n    \r\n      \"Description\": \"AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.\",\r\n    \r\n      \"Parameters\": {\r\n    \r\n        \"InstanceType\": {\r\n          \"Description\": \"WebServer EC2 instance type\",\r\n          \"Type\": \"String\",\r\n          \"Default\": \"t2.micro\",\r\n          \"AllowedValues\": [\"t1.micro\", \"t2.nano\", \"t2.micro\"],\r\n          \"ConstraintDescription\": \"must be a valid EC2 instance type.\"\r\n        },\r\n    \r\n        \"SSHLocation\": {\r\n          \"Description\": \"The IP address range that can be used to SSH to the EC2 instances\",\r\n          \"Type\": \"String\",\r\n          \"MinLength\": \"9\",\r\n          \"MaxLength\": \"18\",\r\n          \"Default\": \"0.0.0.0/0\",\r\n          \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\",\r\n          \"ConstraintDescription\": \"must be a valid IP CIDR range of the form x.x.x.x/x.\"\r\n        }\r\n      },\r\n    \r\n      \"Mappings\": {\r\n        \"AWSInstanceType2Arch\": {\r\n          \"t2.micro\": {\r\n            \"Arch\": \"HVM64\"\r\n          }\r\n        },\r\n    \r\n        \"AWSInstanceType2NATArch\": {\r\n          \"t1.micro\": {\r\n            \"Arch\": \"NATHVM64\"\r\n          },\r\n          \"t2.nano\": {\r\n            \"Arch\": \"NATHVM64\"\r\n          },\r\n          \"t2.micro\": {\r\n            \"Arch\": \"NATHVM64\"\r\n          }\r\n        },\r\n        \"AWSRegionArch2AMI\": {\r\n          \"us-east-1\": {\r\n            \"HVM64\": \"ami-0080e4c5bc078760e\",\r\n            \"HVMG2\": \"ami-0aeb704d503081ea6\"\r\n          },\r\n          \"us-west-2\": {\r\n            \"HVM64\": \"ami-01e24be29428c15b2\",\r\n            \"HVMG2\": \"ami-0fe84a5b4563d8f27\"\r\n          },\r\n          \"us-west-1\": {\r\n            \"HVM64\": \"ami-0ec6517f6edbf8044\",\r\n            \"HVMG2\": \"ami-0a7fc72dc0e51aa77\"\r\n          },\r\n          \"eu-west-1\": {\r\n            \"HVM64\": \"ami-08935252a36e25f85\",\r\n            \"HVMG2\": \"ami-0d5299b1c6112c3c7\"\r\n          },\r\n          \"eu-west-2\": {\r\n            \"HVM64\": \"ami-01419b804382064e4\",\r\n            \"HVMG2\": \"NOT_SUPPORTED\"\r\n          },\r\n          \"eu-west-3\": {\r\n            \"HVM64\": \"ami-0dd7e7ed60da8fb83\",\r\n            \"HVMG2\": \"NOT_SUPPORTED\"\r\n          },\r\n          \"eu-central-1\": {\r\n            \"HVM64\": \"ami-0cfbf4f6db41068ac\",\r\n            \"HVMG2\": \"ami-0aa1822e3eb913a11\"\r\n          },\r\n          \"eu-north-1\": {\r\n            \"HVM64\": \"ami-86fe70f8\",\r\n            \"HVMG2\": \"ami-32d55b4c\"\r\n          }\r\n        }\r\n    \r\n      },\r\n    \r\n      \"Resources\": {\r\n        \"EC2Instance\": {\r\n          \"Type\": \"AWS::EC2::Instance\",\r\n          \"Properties\": {\r\n            \"Tags\": [{\r\n                \"Key\": \"StudentID\",\r\n                \"Value\": \"something\"\r\n              },\r\n              {\r\n                \"Key\": \"StudentName\",\r\n                \"Value\": \"someone\"\r\n              }\r\n            ],\r\n            \"InstanceType\": \"t2.micro\",\r\n            \"SecurityGroups\": [{\r\n              \"Ref\": \"WebServerSG\"\r\n            }],\r\n            \"KeyName\": \"MyKeyPair\",\r\n            \"ImageId\": \"ami-0323c3dd2da7fb37d\",\r\n            \"UserData\": {\r\n              \"Fn::Base64\": {\r\n                \"Fn::Join\": [\"\", [\r\n                  \"#!/bin/bash -ex\\n\",\r\n                  \"yum update -y\\n\",\r\n                  \"yum install -y httpd php mysql-server php-mysqlnd\\n\",\r\n                  \"systemctl enable httpd\\n\",\r\n                  \"systemctl start httpd\\n\",\r\n                  \"usermod -a -G apache ec2-user\\n\",\r\n                  \"chown -R ec2-user:apache /var/www\\n\",\r\n                  \"chmod 2775 /var/www\\n\",\r\n                  \"find /var/www -type d -exec sudo chmod 2775 {} \\\\;\\n\",\r\n                  \"find /var/www -type f -exec sudo chmod 0664 {} \\\\;\\n\",\r\n                  \"echo \\\"<?php echo '<h2>Welcome to COS80001. Installed PHP version: ' . phpversion() . '</h2>'; ?>\\\" > /var/www/html/phpinfo.php\\n\"\r\n                ]]\r\n              }\r\n            }\r\n    \r\n          }\r\n        },\r\n    \r\n        \"WebServerSG\": {\r\n          \"Type\": \"AWS::EC2::SecurityGroup\",\r\n          \"Properties\": {\r\n            \"GroupDescription\": \"Web DMZ\",\r\n            \"SecurityGroupIngress\": [{\r\n                \"IpProtocol\": \"tcp\",\r\n                \"FromPort\": \"22\",\r\n                \"ToPort\": \"22\",\r\n                \"CidrIp\": {\r\n                  \"Ref\": \"SSHLocation\"\r\n                }\r\n              },\r\n              {\r\n                \"IpProtocol\": \"tcp\",\r\n                \"FromPort\": \"80\",\r\n                \"ToPort\": \"80\",\r\n                \"CidrIp\": {\r\n                  \"Ref\": \"SSHLocation\"\r\n                }\r\n              },\r\n              {\r\n                \"IpProtocol\": \"tcp\",\r\n                \"FromPort\": \"443\",\r\n                \"ToPort\": \"443\",\r\n                \"CidrIp\": {\r\n                  \"Ref\": \"SSHLocation\"\r\n                }\r\n              }\r\n            ],\r\n    \r\n            \"Tags\": [{\r\n                \"Key\": \"StudentID\",\r\n                \"Value\": \"something\"\r\n              },\r\n              {\r\n                \"Key\": \"StudentName\",\r\n                \"Value\": \"someone\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      },\r\n    \r\n      \"Outputs\": {\r\n        \"InstanceId\": {\r\n          \"Description\": \"InstanceId of the newly created EC2 instance\",\r\n          \"Value\": {\r\n            \"Ref\": \"EC2Instance\"\r\n          }\r\n        },\r\n        \"AZ\": {\r\n          \"Description\": \"Availability Zone of the newly created EC2 instance\",\r\n          \"Value\": {\r\n            \"Fn::GetAtt\": [\"EC2Instance\", \"AvailabilityZone\"]\r\n          }\r\n        },\r\n        \"PublicDNS\": {\r\n          \"Description\": \"Public DNSName of the newly created EC2 instance\",\r\n          \"Value\": {\r\n            \"Fn::GetAtt\": [\"EC2Instance\", \"PublicDnsName\"]\r\n          }\r\n        },\r\n        \"PublicIP\": {\r\n          \"Description\": \"Public IP address of the newly created EC2 instance\",\r\n          \"Value\": {\r\n            \"Fn::GetAtt\": [\"EC2Instance\", \"PublicIp\"]\r\n          }\r\n        }\r\n      }\r\n    }", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "{ \"AWSTemplateFormatVersion\": \"2010-09-09\", \"Description\": \"AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. ", "keywords": ["instance"]}, {"source": "Text", "text": "This example creates an EC2 security group for the instance to give you SSH access. ", "keywords": ["instance"]}, {"source": "Text", "text": "This template creates an Amazon EC2 instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "You will be billed for the AWS resources used if you create a stack from this template.\", \"Parameters\": { \"InstanceType\": { \"Description\": \"WebServer EC2 instance type\", \"Type\": \"String\", \"Default\": \"t2.micro\", \"AllowedValues\": [\"t1.micro\", \"t2.nano\", \"t2.micro\"], \"ConstraintDescription\": \"must be a valid EC2 instance type.\" }, \"SSHLocation\": { \"Description\": \"The IP address range that can be used to SSH to the EC2 instances\", \"Type\": \"String\", \"MinLength\": \"9\", \"MaxLength\": \"18\", \"Default\": \"0.0.0.0/0\", \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\", \"ConstraintDescription\": \"must be a valid IP CIDR range of the form x.x.x.x/x.\" } }, \"Mappings\": { \"AWSInstanceType2Arch\": { \"t2.micro\": { \"Arch\": \"HVM64\" ", "keywords": ["bill", "instance"]}, {"source": "Text", "text": "} }, \"AWSRegionArch2AMI\": { \"us-east-1\": { \"HVM64\": \"ami-0080e4c5bc078760e\", \"HVMG2\": \"ami-0aeb704d503081ea6\" }, \"us-west-2\": { \"HVM64\": \"ami-01e24be29428c15b2\", \"HVMG2\": \"ami-0fe84a5b4563d8f27\" }, \"us-west-1\": { \"HVM64\": \"ami-0ec6517f6edbf8044\", \"HVMG2\": \"ami-0a7fc72dc0e51aa77\" }, \"eu-west-1\": { \"HVM64\": \"ami-08935252a36e25f85\", \"HVMG2\": \"ami-0d5299b1c6112c3c7\" }, \"eu-west-2\": { \"HVM64\": \"ami-01419b804382064e4\", \"HVMG2\": \"NOT_SUPPORTED\" }, \"eu-west-3\": { \"HVM64\": \"ami-0dd7e7ed60da8fb83\", \"HVMG2\": \"NOT_SUPPORTED\" }, \"eu-central-1\": { \"HVM64\": \"ami-0cfbf4f6db41068ac\", \"HVMG2\": \"ami-0aa1822e3eb913a11\" }, \"eu-north-1\": { \"HVM64\": \"ami-86fe70f8\", \"HVMG2\": \"ami-32d55b4c\" } } }, \"Resources\": { \"EC2Instance\": { \"Type\": \"AWS::EC2::Instance\", \"Properties\": { \"Tags\": [{ \"Key\": \"StudentID\", \"Value\": \"something\" }, { \"Key\": \"StudentName\", \"Value\": \"someone\" } ], \"InstanceType\": \"t2.micro\", \"SecurityGroups\": [{ \"Ref\": \"WebServerSG\" }], \"KeyName\": \"MyKeyPair\", \"ImageId\": \"ami-0323c3dd2da7fb37d\", \"UserData\": { \"Fn::Base64\": { \"Fn::Join\": [\"\", [ \"#!/bin/bash -ex\\n\", \"yum update -y\\n\", \"yum install -y httpd php mysql-server php-mysqlnd\\n\", \"systemctl enable httpd\\n\", \"systemctl start httpd\\n\", \"usermod -a -G apache ec2-user\\n\", \"chown -R ec2-user:apache /var/www\\n\", \"chmod 2775 /var/www\\n\", \"find /var/www -type d -exec sudo chmod 2775 {} \\\\;\\n\", \"find /var/www -type f -exec sudo chmod 0664 {} \\\\;\\n\", \"echo \\\"Welcome to COS80001. ", "keywords": ["instance"]}, {"source": "Text", "text": "}, { \"Key\": \"StudentName\", \"Value\": \"someone\" } ] } } }, \"Outputs\": { \"InstanceId\": { \"Description\": \"InstanceId of the newly created EC2 instance\", \"Value\": { \"Ref\": \"EC2Instance\" } }, \"AZ\": { \"Description\": \"Availability Zone of the newly created EC2 instance\", \"Value\": { \"Fn::GetAtt\": [\"EC2Instance\", \"AvailabilityZone\"] } }, \"PublicDNS\": { \"Description\": \"Public DNSName of the newly created EC2 instance\", \"Value\": { \"Fn::GetAtt\": [\"EC2Instance\", \"PublicDnsName\"] } }, \"PublicIP\": { \"Description\": \"Public IP address of the newly created EC2 instance\", \"Value\": { \"Fn::GetAtt\": [\"EC2Instance\", \"PublicIp\"] } } } ", "keywords": ["instance"]}]}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}