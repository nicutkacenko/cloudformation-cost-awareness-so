{"Id": "61440878", "PostTypeId": "1", "AcceptedAnswerId": "61449201", "CreationDate": "2020-04-26T12:34:35.377", "Score": "1", "ViewCount": "1499", "Body": "<p>I'm trying to deploy my CloudFormation template to other regions for testing. My template works fine with us-east-1 via Boto3 but if it try another region I get no error output.</p>\n\n<p>Whilst trying different regions I got an email unexpectedly saying that the Canada region has been verified but since trying via Boto3 this has been unsuccessful. (billing console says all regions are now activated)</p>\n\n<p>I'm running Boto3 from Lambda (No VPC) that has been deployed using Zappa to us-east-1. It has an IAM policy that does not specify a specific region.</p>\n\n<p>Python:</p>\n\n<pre><code>cf_client = boto3.client(\n            'cloudformation', region_name=request.POST['region'])\n\ncf_client.create_stack(\n                StackName=stack_name,\n                TemplateURL='https://s3.amazonaws.com/#######/build_instance.yaml',\n                Parameters=[\n                    {\"ParameterKey\": \"FQDN\",\n                        \"ParameterValue\": instance_domain},\n                    {\"ParameterKey\": \"BucketName\",\n                        \"ParameterValue\": bucket_name},\n                    {\"ParameterKey\": \"CreateSubdomain\",\n                        \"ParameterValue\": create_subdomain},\n                    {\"ParameterKey\": \"CustomerEmail\",\n                        \"ParameterValue\": request.user.email},\n                    {\"ParameterKey\": \"Region\",\n                        \"ParameterValue\": request.POST['region']},\n                ],\n                Capabilities=['CAPABILITY_NAMED_IAM'],\n                Tags=[\n                    {\n                        'Key': 'Name',\n                        'Value': instance_domain\n                    },\n                    {\n                        'Key': 'env',\n                        'Value': \"prod\"\n                    }, ],\n                EnableTerminationProtection=True\n            )\n</code></pre>\n\n<p>&#x200B;</p>\n\n<p>CF:</p>\n\n<pre><code>---\nAWSTemplateFormatVersion: \"2010-09-09\"\nDescription: \"\"\n\nParameters:\n  FQDN:\n    Type: String\n    Description: Instance FQDN\n\n  BucketName:\n    Type: String\n    Description: Name of S3 bucket\n\n  CreateSubdomain:\n    Type: String\n    Default: false\n    AllowedValues: [true, false]\n    Description: Does the customer want to use our sub-domain?\n\n  CustomerEmail:\n    Type: String\n    Description: Customer email to deliver credentials\n\n  Region:\n    Type: String\n    Description: Customer region\n\nMappings:\n  RegionMap:\n    us-east-1:\n      AMI: \"ami-0affd4508a5d2481b\"\n    us-west-1:\n      AMI: \"ami-03ba3948f6c37a4b0\"\n    ca-central-1:\n      AMI: \"ami-0d0eaed20348a3389\"\n    eu-west-2:\n      AMI: \" ami-006a0174c6c25ac06\"\n\nConditions:\n  ShouldCreateSubDomain: !Equals [true, !Ref CreateSubdomain]\n\nResources:\n  Bucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Ref BucketName\n      BucketEncryption:\n        ServerSideEncryptionConfiguration:\n          - ServerSideEncryptionByDefault:\n              SSEAlgorithm: AES256\n      MetricsConfigurations:\n        - Id: EntireBucket\n      LifecycleConfiguration:\n        Rules:\n          - Id: IntelligentTieringTransition\n            Status: Enabled\n            Transitions:\n              - TransitionInDays: 30\n                StorageClass: INTELLIGENT_TIERING\n      PublicAccessBlockConfiguration:\n        BlockPublicAcls: true\n        IgnorePublicAcls: false\n        BlockPublicPolicy: true\n        RestrictPublicBuckets: true\n\n  User:\n    Type: AWS::IAM::User\n    Properties:\n      UserName:\n        Ref: FQDN\n      Groups: [\"Customers\"]\n    DependsOn: Bucket\n\n  Key:\n    Type: AWS::IAM::AccessKey\n    Properties:\n      UserName:\n        Ref: User\n    DependsOn: User\n\n  BucketPolicy:\n    Type: \"AWS::S3::BucketPolicy\"\n    Properties:\n      Bucket: !Ref BucketName\n      PolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Principal:\n              AWS: !GetAtt User.Arn\n            Action: \"s3:*\"\n            Effect: Allow\n            Resource:\n              - !GetAtt Bucket.Arn\n              - !Sub \"${Bucket.Arn}/*\"\n    DependsOn: Key\n\n  EC2Instance:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !FindInMap [RegionMap, !Ref \"AWS::Region\", AMI]\n      KeyName: aws-master\n      InstanceType: t3.micro\n      DisableApiTermination: true\n      SecurityGroups: [\"nextcloud-security\"]\n      BlockDeviceMappings:\n        - DeviceName: /dev/sda1\n          Ebs:\n            VolumeSize: 10\n            DeleteOnTermination: false\n      Tags:\n        - Key: \"Name\"\n          Value: !Ref FQDN\n        - Key: \"env\"\n          Value: \"prod\"\n\n      UserData:\n        Fn::Base64: !Sub |\n          #!/bin/bash -xe\n          exec &gt; &gt;(tee /var/log/user-data.log|logger -t user-data -s 2&gt;/dev/console) 2&gt;&amp;1\n            curl -s ####### | /bin/bash\n            git clone #######\n\n            cd nextcloud\n\n            sed -i 's/# fqdn       = nc.example.org/fqdn       = ${FQDN}/g' inventory\n            sed -i \"s/ssl_certificate_type  = 'selfsigned'/#ssl_certificate_type  = 'selfsigned'/g\" inventory\n            sed -i \"s/# ssl_certificate_type  = 'letsencrypt'/ssl_certificate_type  = 'letsencrypt'/g\" inventory\n            sed -i 's/# cert_email = nc@example.org/cert_email = ####/g' inventory\n            sed -i \"s/# nc_db_type          = 'mysql'/nc_db_type          = 'mysql'/g\" inventory\n            sed -i \"s/nc_db_type           = 'pgsql'/#nc_db_type           = 'pgsql'/g\" inventory\n            sed -i 's/nc_configure_mail    = false/nc_configure_mail    = true/g' inventory\n            sed -i 's/nc_mail_from         =/nc_mail_from         = contact/g' inventory\n            sed -i 's/nc_mail_domain       =/nc_mail_domain       = ######/g' inventory\n            sed -i 's/nc_mail_smtpname     =/nc_mail_smtpname     = #######/g' inventory\n            sed -i 's/nc_mail_smtphost     =/nc_mail_smtphost     = smtp.gmail.com/g' inventory\n            sed -i 's/nc_mail_smtppwd      =/nc_mail_smtppwd      = #####/g' inventory\n            sed -i 's/s3_key               =/s3_key               = ${Key}/g' inventory\n            sed -i 's|s3_secret            =|s3_secret            = ${Key.SecretAccessKey}|g' inventory\n            sed -i 's/s3_bucket            =/s3_bucket            = ${BucketName}/g' inventory\n            sed -i 's/s3_region            =/s3_region            = ${Region}/g' inventory\n            sed -i 's/talk_install         = false/talk_install         = true/g' inventory\n\n            ./nextcloud.yml\n\n  IPAddress:\n    Type: AWS::EC2::EIP\n    Properties:\n      Tags:\n        - Key: \"Name\"\n          Value: !Ref FQDN\n        - Key: \"env\"\n          Value: \"prod\"\n\n  IPAssoc:\n    Type: AWS::EC2::EIPAssociation\n    Properties:\n      InstanceId: !Ref \"EC2Instance\"\n      EIP: !Ref \"IPAddress\"\n\n  Route53Record:\n    Type: AWS::Route53::RecordSet\n    Properties:\n      HostedZoneName: \"########\"\n      Name: !Join [\"\", [!Ref FQDN, \".\"]]\n      Type: A\n      TTL: \"300\"\n      ResourceRecords:\n        - !Ref \"IPAddress\"\n    Condition: ShouldCreateSubDomain\n\nOutputs:\n  InstanceId:\n    Description: InstanceId of the newly created EC2 instance\n    Value: !Ref \"EC2Instance\"\n  InstanceIPAddress:\n    Description: IP address of the newly created EC2 instance\n    Value: !Ref \"IPAddress\"\n</code></pre>\n\n<p>IAM:</p>\n\n<pre><code> \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"VisualEditor0\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:DescribeImages\",\n                \"ec2:DescribeInstances\",\n                \"ec2:DescribeAddresses\",\n                \"ec2:DescribeTags\",\n                \"ec2:CreateTags\",\n                \"ec2:RunInstances\",\n                \"ec2:DescribeKeyPairs\",\n                \"ec2:AssociateAddress\",\n                \"ec2:AllocateAddress\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Sid\": \"VisualEditor1\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"iam:AddUserToGroup\",\n                \"cloudformation:CreateStack\",\n                \"route53:ChangeResourceRecordSets\",\n                \"iam:GetUser\",\n                \"iam:CreateUser\",\n                \"iam:CreateAccessKey\"\n            ],\n            \"Resource\": [\n                \"arn:aws:iam::*:user/*\",\n                \"arn:aws:iam::#######:group/Customers\",\n                \"arn:aws:cloudformation:*:*:stack/*/*\",\n                \"arn:aws:route53:::hostedzone/#####\"\n            ]\n        }\n    ]\n}\n</code></pre>\n", "OwnerUserId": "13410908", "LastActivityDate": "2021-02-05T14:53:42.383", "Title": "Only able to deploy CloudFormation template to us-east-1 using Boto3", "Tags": "|amazon-web-services|aws-lambda|aws-cloudformation|amazon-iam|zappa|", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "220154420", "PostHistoryTypeId": "2", "PostId": "61440878", "RevisionGUID": "9a7f8085-4c33-419c-9513-3081c20b0e3c", "CreationDate": "2020-04-26T12:34:35.377", "UserId": "13410908", "Text": "I'm trying to deploy my CloudFormation template to other regions for testing. My template works fine with us-east-1 via Boto3 but if it try another region I get no error output.\r\n\r\nWhilst trying different regions I got an email unexpectedly saying that the Canada region has been verified but since trying via Boto3 this has been unsuccessful. (billing console says all regions are now activated)\r\n\r\nI'm running Boto3 from Lambda (No VPC) that has been deployed using Zappa to us-east-1. It has an IAM policy that does not specify a specific region.\r\n\r\nPython:\r\n\r\n    cf_client = boto3.client(\r\n                'cloudformation', region_name=request.POST['region'])\r\n    \r\n    cf_client.create_stack(\r\n                    StackName=stack_name,\r\n                    TemplateURL='https://s3.amazonaws.com/#######/build_instance.yaml',\r\n                    Parameters=[\r\n                        {\"ParameterKey\": \"FQDN\",\r\n                            \"ParameterValue\": instance_domain},\r\n                        {\"ParameterKey\": \"BucketName\",\r\n                            \"ParameterValue\": bucket_name},\r\n                        {\"ParameterKey\": \"CreateSubdomain\",\r\n                            \"ParameterValue\": create_subdomain},\r\n                        {\"ParameterKey\": \"CustomerEmail\",\r\n                            \"ParameterValue\": request.user.email},\r\n                        {\"ParameterKey\": \"Region\",\r\n                            \"ParameterValue\": request.POST['region']},\r\n                    ],\r\n                    Capabilities=['CAPABILITY_NAMED_IAM'],\r\n                    Tags=[\r\n                        {\r\n                            'Key': 'Name',\r\n                            'Value': instance_domain\r\n                        },\r\n                        {\r\n                            'Key': 'env',\r\n                            'Value': \"prod\"\r\n                        }, ],\r\n                    EnableTerminationProtection=True\r\n                )\r\n\r\n&#x200B;\r\n\r\nCF:\r\n\r\n    ---\r\n    AWSTemplateFormatVersion: \"2010-09-09\"\r\n    Description: \"\"\r\n    \r\n    Parameters:\r\n      FQDN:\r\n        Type: String\r\n        Description: Instance FQDN\r\n    \r\n      BucketName:\r\n        Type: String\r\n        Description: Name of S3 bucket\r\n    \r\n      CreateSubdomain:\r\n        Type: String\r\n        Default: false\r\n        AllowedValues: [true, false]\r\n        Description: Does the customer want to use our sub-domain?\r\n    \r\n      CustomerEmail:\r\n        Type: String\r\n        Description: Customer email to deliver credentials\r\n    \r\n      Region:\r\n        Type: String\r\n        Description: Customer region\r\n    \r\n    Mappings:\r\n      RegionMap:\r\n        us-east-1:\r\n          AMI: \"ami-0affd4508a5d2481b\"\r\n        us-west-1:\r\n          AMI: \"ami-03ba3948f6c37a4b0\"\r\n        ca-central-1:\r\n          AMI: \"ami-0d0eaed20348a3389\"\r\n        eu-west-2:\r\n          AMI: \" ami-006a0174c6c25ac06\"\r\n    \r\n    Conditions:\r\n      ShouldCreateSubDomain: !Equals [true, !Ref CreateSubdomain]\r\n    \r\n    Resources:\r\n      Bucket:\r\n        Type: AWS::S3::Bucket\r\n        Properties:\r\n          BucketName: !Ref BucketName\r\n          BucketEncryption:\r\n            ServerSideEncryptionConfiguration:\r\n              - ServerSideEncryptionByDefault:\r\n                  SSEAlgorithm: AES256\r\n          MetricsConfigurations:\r\n            - Id: EntireBucket\r\n          LifecycleConfiguration:\r\n            Rules:\r\n              - Id: IntelligentTieringTransition\r\n                Status: Enabled\r\n                Transitions:\r\n                  - TransitionInDays: 30\r\n                    StorageClass: INTELLIGENT_TIERING\r\n          PublicAccessBlockConfiguration:\r\n            BlockPublicAcls: true\r\n            IgnorePublicAcls: false\r\n            BlockPublicPolicy: true\r\n            RestrictPublicBuckets: true\r\n    \r\n      User:\r\n        Type: AWS::IAM::User\r\n        Properties:\r\n          UserName:\r\n            Ref: FQDN\r\n          Groups: [\"Customers\"]\r\n        DependsOn: Bucket\r\n    \r\n      Key:\r\n        Type: AWS::IAM::AccessKey\r\n        Properties:\r\n          UserName:\r\n            Ref: User\r\n        DependsOn: User\r\n    \r\n      BucketPolicy:\r\n        Type: \"AWS::S3::BucketPolicy\"\r\n        Properties:\r\n          Bucket: !Ref BucketName\r\n          PolicyDocument:\r\n            Version: \"2012-10-17\"\r\n            Statement:\r\n              - Principal:\r\n                  AWS: !GetAtt User.Arn\r\n                Action: \"s3:*\"\r\n                Effect: Allow\r\n                Resource:\r\n                  - !GetAtt Bucket.Arn\r\n                  - !Sub \"${Bucket.Arn}/*\"\r\n        DependsOn: Key\r\n    \r\n      EC2Instance:\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !FindInMap [RegionMap, !Ref \"AWS::Region\", AMI]\r\n          KeyName: aws-master\r\n          InstanceType: t3.micro\r\n          DisableApiTermination: true\r\n          SecurityGroups: [\"nextcloud-security\"]\r\n          BlockDeviceMappings:\r\n            - DeviceName: /dev/sda1\r\n              Ebs:\r\n                VolumeSize: 10\r\n                DeleteOnTermination: false\r\n          Tags:\r\n            - Key: \"Name\"\r\n              Value: !Ref FQDN\r\n            - Key: \"env\"\r\n              Value: \"prod\"\r\n    \r\n          UserData:\r\n            Fn::Base64: !Sub |\r\n              #!/bin/bash -xe\r\n              exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\r\n                curl -s ####### | /bin/bash\r\n                git clone #######\r\n    \r\n                cd nextcloud\r\n    \r\n                sed -i 's/# fqdn       = nc.example.org/fqdn       = ${FQDN}/g' inventory\r\n                sed -i \"s/ssl_certificate_type  = 'selfsigned'/#ssl_certificate_type  = 'selfsigned'/g\" inventory\r\n                sed -i \"s/# ssl_certificate_type  = 'letsencrypt'/ssl_certificate_type  = 'letsencrypt'/g\" inventory\r\n                sed -i 's/# cert_email = nc@example.org/cert_email = ####/g' inventory\r\n                sed -i \"s/# nc_db_type          = 'mysql'/nc_db_type          = 'mysql'/g\" inventory\r\n                sed -i \"s/nc_db_type           = 'pgsql'/#nc_db_type           = 'pgsql'/g\" inventory\r\n                sed -i 's/nc_configure_mail    = false/nc_configure_mail    = true/g' inventory\r\n                sed -i 's/nc_mail_from         =/nc_mail_from         = contact/g' inventory\r\n                sed -i 's/nc_mail_domain       =/nc_mail_domain       = ######/g' inventory\r\n                sed -i 's/nc_mail_smtpname     =/nc_mail_smtpname     = #######/g' inventory\r\n                sed -i 's/nc_mail_smtphost     =/nc_mail_smtphost     = smtp.gmail.com/g' inventory\r\n                sed -i 's/nc_mail_smtppwd      =/nc_mail_smtppwd      = #####/g' inventory\r\n                sed -i 's/s3_key               =/s3_key               = ${Key}/g' inventory\r\n                sed -i 's|s3_secret            =|s3_secret            = ${Key.SecretAccessKey}|g' inventory\r\n                sed -i 's/s3_bucket            =/s3_bucket            = ${BucketName}/g' inventory\r\n                sed -i 's/s3_region            =/s3_region            = ${Region}/g' inventory\r\n                sed -i 's/talk_install         = false/talk_install         = true/g' inventory\r\n    \r\n                ./nextcloud.yml\r\n    \r\n      IPAddress:\r\n        Type: AWS::EC2::EIP\r\n        Properties:\r\n          Tags:\r\n            - Key: \"Name\"\r\n              Value: !Ref FQDN\r\n            - Key: \"env\"\r\n              Value: \"prod\"\r\n    \r\n      IPAssoc:\r\n        Type: AWS::EC2::EIPAssociation\r\n        Properties:\r\n          InstanceId: !Ref \"EC2Instance\"\r\n          EIP: !Ref \"IPAddress\"\r\n    \r\n      Route53Record:\r\n        Type: AWS::Route53::RecordSet\r\n        Properties:\r\n          HostedZoneName: \"########\"\r\n          Name: !Join [\"\", [!Ref FQDN, \".\"]]\r\n          Type: A\r\n          TTL: \"300\"\r\n          ResourceRecords:\r\n            - !Ref \"IPAddress\"\r\n        Condition: ShouldCreateSubDomain\r\n    \r\n    Outputs:\r\n      InstanceId:\r\n        Description: InstanceId of the newly created EC2 instance\r\n        Value: !Ref \"EC2Instance\"\r\n      InstanceIPAddress:\r\n        Description: IP address of the newly created EC2 instance\r\n        Value: !Ref \"IPAddress\"\r\n\r\nIAM:\r\n\r\n     \"Version\": \"2012-10-17\",\r\n        \"Statement\": [\r\n            {\r\n                \"Sid\": \"VisualEditor0\",\r\n                \"Effect\": \"Allow\",\r\n                \"Action\": [\r\n                    \"ec2:DescribeImages\",\r\n                    \"ec2:DescribeInstances\",\r\n                    \"ec2:DescribeAddresses\",\r\n                    \"ec2:DescribeTags\",\r\n                    \"ec2:CreateTags\",\r\n                    \"ec2:RunInstances\",\r\n                    \"ec2:DescribeKeyPairs\",\r\n                    \"ec2:AssociateAddress\",\r\n                    \"ec2:AllocateAddress\"\r\n                ],\r\n                \"Resource\": \"*\"\r\n            },\r\n            {\r\n                \"Sid\": \"VisualEditor1\",\r\n                \"Effect\": \"Allow\",\r\n                \"Action\": [\r\n                    \"iam:AddUserToGroup\",\r\n                    \"cloudformation:CreateStack\",\r\n                    \"route53:ChangeResourceRecordSets\",\r\n                    \"iam:GetUser\",\r\n                    \"iam:CreateUser\",\r\n                    \"iam:CreateAccessKey\"\r\n                ],\r\n                \"Resource\": [\r\n                    \"arn:aws:iam::*:user/*\",\r\n                    \"arn:aws:iam::#######:group/Customers\",\r\n                    \"arn:aws:cloudformation:*:*:stack/*/*\",\r\n                    \"arn:aws:route53:::hostedzone/#####\"\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I'm trying to deploy my CloudFormation template to other regions for testing. ", "keywords": ["test"]}, {"source": "Text", "text": "(billing console says all regions are now activated) ", "keywords": ["bill"]}, {"source": "Text", "text": "It has an IAM policy that does not specify a specific region. ", "keywords": ["policy"]}, {"source": "Text", "text": "Python: cf_client = boto3.client( 'cloudformation', region_name=request.POST['region']) cf_client.create_stack( StackName=stack_name, TemplateURL='https://s3.amazonaws.com/#######/build_instance.yaml', Parameters=[ {\"ParameterKey\": \"FQDN\", \"ParameterValue\": instance_domain}, {\"ParameterKey\": \"BucketName\", \"ParameterValue\": bucket_name}, {\"ParameterKey\": \"CreateSubdomain\", \"ParameterValue\": create_subdomain}, {\"ParameterKey\": \"CustomerEmail\", \"ParameterValue\": request.user.email}, {\"ParameterKey\": \"Region\", \"ParameterValue\": request.POST['region']}, ], Capabilities=['CAPABILITY_NAMED_IAM'], Tags=[ { 'Key': 'Name', 'Value': instance_domain }, { 'Key': 'env', 'Value': \"prod\" }, ], EnableTerminationProtection=True ) \u200b CF: --- AWSTemplateFormatVersion: \"2010-09-09\" Description: \"\" Parameters: FQDN: Type: String Description: Instance FQDN BucketName: Type: String Description: Name of S3 bucket CreateSubdomain: Type: String Default: false AllowedValues: [true, false] Description: Does the customer want to use our sub-domain? CustomerEmail: Type: String Description: Customer email to deliver credentials Region: Type: String Description: Customer region Mappings: RegionMap: us-east-1: AMI: \"ami-0affd4508a5d2481b\" us-west-1: AMI: \"ami-03ba3948f6c37a4b0\" ca-central-1: AMI: \"ami-0d0eaed20348a3389\" eu-west-2: AMI: \" ami-006a0174c6c25ac06\" Conditions: ShouldCreateSubDomain: !Equals [true, !Ref CreateSubdomain] Resources: Bucket: Type: AWS::S3::Bucket Properties: BucketName: !Ref BucketName BucketEncryption: ServerSideEncryptionConfiguration: - ServerSideEncryptionByDefault: SSEAlgorithm: AES256 MetricsConfigurations: - Id: EntireBucket LifecycleConfiguration: Rules: - Id: IntelligentTieringTransition Status: Enabled Transitions: - TransitionInDays: 30 StorageClass: INTELLIGENT_TIERING PublicAccessBlockConfiguration: BlockPublicAcls: true IgnorePublicAcls: false BlockPublicPolicy: true RestrictPublicBuckets: true User: Type: AWS::IAM::User Properties: UserName: Ref: FQDN Groups: [\"Customers\"] DependsOn: Bucket Key: Type: AWS::IAM::AccessKey Properties: UserName: Ref: User DependsOn: User BucketPolicy: Type: \"AWS::S3::BucketPolicy\" Properties: Bucket: !Ref BucketName PolicyDocument: Version: \"2012-10-17\" Statement: - Principal: AWS: !GetAtt User.Arn Action: \"s3:*\" Effect: Allow Resource: - !GetAtt Bucket.Arn - !Sub \"${Bucket.Arn}/*\" DependsOn: Key EC2Instance: Type: AWS::EC2::Instance Properties: ImageId: !FindInMap [RegionMap, !Ref \"AWS::Region\", AMI] KeyName: aws-master InstanceType: t3.micro DisableApiTermination: true SecurityGroups: [\"nextcloud-security\"] BlockDeviceMappings: - DeviceName: /dev/sda1 Ebs: VolumeSize: 10 DeleteOnTermination: false Tags: - Key: \"Name\" Value: !Ref FQDN - Key: \"env\" Value: \"prod\" UserData: Fn::Base64: !Sub | #!/bin/bash -xe exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1 curl -s ####### | /bin/bash git clone ####### cd nextcloud sed -i 's/# fqdn = nc.example.org/fqdn = ${FQDN}/g' inventory sed -i \"s/ssl_certificate_type = 'selfsigned'/#ssl_certificate_type = 'selfsigned'/g\" inventory sed -i \"s/# ssl_certificate_type = 'letsencrypt'/ssl_certificate_type = 'letsencrypt'/g\" inventory sed -i 's/# cert_email = nc@example.org/cert_email = ####/g' inventory sed -i \"s/# nc_db_type = 'mysql'/nc_db_type = 'mysql'/g\" inventory sed -i \"s/nc_db_type = 'pgsql'/#nc_db_type = 'pgsql'/g\" inventory sed -i 's/nc_configure_mail = false/nc_configure_mail = true/g' inventory sed -i 's/nc_mail_from =/nc_mail_from = contact/g' inventory sed -i 's/nc_mail_domain =/nc_mail_domain = ######/g' inventory sed -i 's/nc_mail_smtpname =/nc_mail_smtpname = #######/g' inventory sed -i 's/nc_mail_smtphost =/nc_mail_smtphost = smtp.gmail.com/g' inventory sed -i 's/nc_mail_smtppwd =/nc_mail_smtppwd = #####/g' inventory sed -i 's/s3_key =/s3_key = ${Key}/g' inventory sed -i 's|s3_secret =|s3_secret = ${Key.SecretAccessKey}|g' inventory sed -i 's/s3_bucket =/s3_bucket = ${BucketName}/g' inventory sed -i 's/s3_region =/s3_region = ${Region}/g' inventory sed -i 's/talk_install = false/talk_install = true/g' inventory ./nextcloud.yml IPAddress: Type: AWS::EC2::EIP Properties: Tags: - Key: \"Name\" Value: !Ref FQDN - Key: \"env\" Value: \"prod\" IPAssoc: Type: AWS::EC2::EIPAssociation Properties: InstanceId: !Ref \"EC2Instance\" EIP: !Ref \"IPAddress\" Route53Record: Type: AWS::Route53::RecordSet Properties: HostedZoneName: \"########\" Name: !Join [\"\", [!Ref FQDN, \".\"]] Type: A TTL: \"300\" ResourceRecords: - !Ref \"IPAddress\" Condition: ShouldCreateSubDomain Outputs: InstanceId: Description: InstanceId of the newly created EC2 instance Value: !Ref \"EC2Instance\" InstanceIPAddress: Description: IP address of the newly created EC2 instance Value: !Ref \"IPAddress\" IAM: \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"VisualEditor0\", \"Effect\": \"Allow\", \"Action\": [ \"ec2:DescribeImages\", \"ec2:DescribeInstances\", \"ec2:DescribeAddresses\", \"ec2:DescribeTags\", \"ec2:CreateTags\", \"ec2:RunInstances\", \"ec2:DescribeKeyPairs\", \"ec2:AssociateAddress\", \"ec2:AllocateAddress\" ], \"Resource\": \"*\" }, { \"Sid\": \"VisualEditor1\", \"Effect\": \"Allow\", \"Action\": [ \"iam:AddUserToGroup\", \"cloudformation:CreateStack\", \"route53:ChangeResourceRecordSets\", \"iam:GetUser\", \"iam:CreateUser\", \"iam:CreateAccessKey\" ], \"Resource\": [ \"arn:aws:iam::*:user/*\", \"arn:aws:iam::#######:group/Customers\", \"arn:aws:cloudformation:*:*:stack/*/*\", \"arn:aws:route53:::hostedzone/#####\" ] } ] }", "keywords": ["instance", "domain", "change"]}]}, {"Id": "220154421", "PostHistoryTypeId": "1", "PostId": "61440878", "RevisionGUID": "9a7f8085-4c33-419c-9513-3081c20b0e3c", "CreationDate": "2020-04-26T12:34:35.377", "UserId": "13410908", "Text": "Only able to deploy CloudFormation template to us-east-1 using Boto3", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "220154422", "PostHistoryTypeId": "3", "PostId": "61440878", "RevisionGUID": "9a7f8085-4c33-419c-9513-3081c20b0e3c", "CreationDate": "2020-04-26T12:34:35.377", "UserId": "13410908", "Text": "|amazon-web-services|aws-lambda|aws-cloudformation|amazon-iam|zappa|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "61449201", "PostTypeId": "2", "ParentId": "61440878", "CreationDate": "2020-04-26T22:55:43.067", "Score": "1", "Body": "<p>From <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-using-console-create-stack-template.html\" rel=\"nofollow noreferrer\">Selecting a Stack Template - AWS CloudFormation</a>:</p>\n\n<blockquote>\n  <p><strong>Amazon S3 URL:</strong> The URL must point to a template with a maximum size of 460,800 bytes that is stored in an S3 bucket that you have read permissions to and that is <strong>located in the same region as the stack</strong>.</p>\n</blockquote>\n\n<p>I suspect that your stack is failing because the template is in an Amazon S3 bucket that is in a different region to where the stack is being launched. You will need to copy the template into a bucket in the same region, then provide it in the <code>create_stack()</code> command.</p>\n\n<p>You can test this by using the AWS Console to launch the template, rather than having to go via boto3.</p>\n", "OwnerUserId": "174777", "LastActivityDate": "2020-04-26T22:55:43.067", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "108811902", "PostId": "61449201", "Score": "0", "Text": "God bless you sir", "CreationDate": "2020-04-29T22:07:26.780", "UserId": "13410908", "filtered-sentences": []}], "history": [{"Id": "220188624", "PostHistoryTypeId": "2", "PostId": "61449201", "RevisionGUID": "bd642132-1c41-41c7-b443-8f4b59977822", "CreationDate": "2020-04-26T22:55:43.067", "UserId": "174777", "Text": "From [Selecting a Stack Template - AWS CloudFormation](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-using-console-create-stack-template.html):\r\n\r\n>**Amazon S3 URL:** The URL must point to a template with a maximum size of 460,800 bytes that is stored in an S3 bucket that you have read permissions to and that is **located in the same region as the stack**.\r\n\r\nI suspect that your stack is failing because the template is in an Amazon S3 bucket that is in a different region to where the stack is being launched. You will need to copy the template into a bucket in the same region, then provide it in the `create_stack()` command.\r\n\r\nYou can test this by using the AWS Console to launch the template, rather than having to go via boto3.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The URL must point to a template with a maximum size of 460,800 bytes that is stored in an S3 bucket that you have read permissions to and that is **located in the same region as the stack**. ", "keywords": ["permissions"]}, {"source": "Text", "text": "You can test this by using the AWS Console to launch the template, rather than having to go via boto3.", "keywords": ["test"]}]}], "filtered-sentences": [{"source": "Body", "text": "The URL must point to a template with a maximum size of 460,800 bytes that is stored in an S3 bucket that you have read permissions to and that is located in the same region as the stack. ", "keywords": ["permissions"]}, {"source": "Body", "text": "You can test this by using the AWS Console to launch the template, rather than having to go via boto3.", "keywords": ["test"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I'm trying to deploy my CloudFormation template to other regions for testing. ", "keywords": ["test"]}, {"source": "Body", "text": "(billing console says all regions are now activated) ", "keywords": ["bill"]}, {"source": "Body", "text": "It has an IAM policy that does not specify a specific region. ", "keywords": ["policy"]}]}