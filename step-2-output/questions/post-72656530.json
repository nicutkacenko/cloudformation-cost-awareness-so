{"Id": "72656530", "PostTypeId": "1", "CreationDate": "2022-06-17T08:37:53.480", "Score": "0", "ViewCount": "153", "Body": "<ul>\n<li>Having no background with aws/devops and after a lot of efforts and trial/error I succeeded building the here bellow stack for my django app:</li>\n<li>The stack relies heavily on celery which consumes a lot of tasks so I migrated to sqs for cost reasons (instead of aws redis). For the same reason I decided to disable the nat gateways because it costs so much and I rely only on security groups and acl for security</li>\n<li>Initially I had two services: One with nginx, Django, celery,\npgadmin4, flower, and a second with Celery desired count 0 to scale\nup on heavy loads. When celery starts working it tend to consume 100%\nCPU and launch a lot of process taking all the available connections\nof postgres, new process fail, so I added pgbouncer for connection\npooling</li>\n<li>I decided to migrate to 3 services, one admin service with nginx,\npgbouncer and pgadmin4, a second non scalable minimal service with\ndjango and one celery worker, and a third scalable celery service\nwith desired count to 0 which will be launched and scaled down by an\nalarm on sqs queues. (I am also considering a fourth service with\ndjango and a desired count to 0 which will be launched and scaled\ndown by an alarm on elb target response time).</li>\n<li>The actual problem is the following : my django and celery containers\n(in the django app service) talk with pgbouncer without a problem,\nbut the nginx container (in the admin service) can't reach the django\ncontainer ?</li>\n<li>I tried playing with the securitygroups without success (I'm no\nexpert), any thoughts guys?</li>\n</ul>\n<p>Thank you.\nHere's the stack code:</p>\n<pre><code>  # VPC Template Parameters\n  CIDRBlockIP:\n    Description: The first two values of the IP for the VPC\n    Type: String\n    MinLength: '3'\n    MaxLength: '7'\n    Default: 10.20\n    AllowedPattern: &quot;(\\\\d{1,3})\\\\.(\\\\d{1,3})&quot;\n    ConstraintDescription: must be a valid start to an IP range of the form x.x\n  AvailabilityZone1:\n    Description: The first availability zone in the region\n    Default: us-west-2a\n    Type: AWS::EC2::AvailabilityZone::Name\n    ConstraintDescription: Must be a valid availability zone\n  AvailabilityZone2:\n    Description: The second availability zone in the region\n    Default: us-west-2b\n    Type: AWS::EC2::AvailabilityZone::Name\n    ConstraintDescription: Must be a valid availability zone\n  ELBIngressPort:\n    Description: The ELB ingress port used by security groups\n    Type: Number\n    MinValue: 0\n    MaxValue: 65535\n    ConstraintDescription: TCP ports must be between 0 - 65535\n    Default: 443\n  ELBHttpIngressPort:\n    Description: The ELB ingress port used by security groups\n    Type: Number\n    MinValue: 0\n    MaxValue: 65535\n    ConstraintDescription: TCP ports must be between 0 - 65535\n    Default: 80\n  AppIngressPort:\n    Description: The application ingress port used by security groups\n    Type: Number\n    MinValue: 0\n    MaxValue: 65535\n    ConstraintDescription: TCP ports must be between 0 - 65535\n    Default: 80\n  DbInVpc:\n    Type: String\n    Default: true\n    AllowedValues:\n      - true\n      - false\n\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n      - Label:\n          default: Region Availability Zones\n        Parameters:\n          - AvailabilityZone1\n          - AvailabilityZone2\n      - Label:\n          default: Ingress Ports\n        Parameters:\n          - ELBIngressPort\n          - AppIngressPort\n    ParameterLabels:\n      AvailabilityZone1:\n        default: Availability Zone 1\n      AvailabilityZone2:\n        default: Availability Zone 2\n      ELBIngressPort:\n        default: Load Balancer Port\n      AppIngressPort:\n        default: Application Port\n\nConditions:\n  CreateDbSecurityGroup: !Equals [ !Ref DbInVpc, true ]\n\nMappings:\n  # Django App Mappings\n  appConfigs:\n    prod:\n      loadbalancerCertArn: &quot;xxxx&quot;\n\n  # Maps CIDR blocks to VPC and various subnets\n  CIDRMap:\n    VPC:\n      CIDR: &quot;.0.0/16&quot;\n    Public1:\n      CIDR: &quot;.2.0/24&quot;\n    Public2:\n      CIDR: &quot;.3.0/24&quot;\n    Private1:\n      CIDR: &quot;.64.0/19&quot;\n    Private2:\n      CIDR: &quot;.96.0/19&quot;\n\nResources:\n\n  ###############\n  # VPC Template#\n  ###############\n\n  VPC:\n    Type: AWS::EC2::VPC\n    UpdateReplacePolicy: Delete\n    Properties:\n      CidrBlock: !Sub\n        - &quot;${beg_ip}${sec_val}&quot;\n        - beg_ip: !Ref CIDRBlockIP\n          sec_val: !FindInMap [ CIDRMap, VPC, CIDR ]\n      EnableDnsSupport: true\n      EnableDnsHostnames: true\n      Tags:\n      - Key: Name\n        Value: !Ref &quot;AWS::StackName&quot;\n\n  PublicSubnet1:\n    Type: AWS::EC2::Subnet\n    UpdateReplacePolicy: Delete\n    Properties:\n      VpcId: !Ref VPC\n      CidrBlock: !Sub\n        - &quot;${beg_ip}${sec_val}&quot;\n        - beg_ip: !Ref CIDRBlockIP\n          sec_val: !FindInMap [ CIDRMap, Public1, CIDR ]\n      AvailabilityZone: !Ref AvailabilityZone1\n      Tags:\n      - Key: Name\n        Value: !Sub &quot;${AWS::StackName}-PublicSubnet1&quot;\n\n  PublicSubnet2:\n    Type: AWS::EC2::Subnet\n    UpdateReplacePolicy: Delete\n    DependsOn:\n      - PublicSubnet1\n      - PrivateSubnet1\n    Properties:\n      VpcId: !Ref VPC\n      CidrBlock: !Sub\n        - &quot;${beg_ip}${sec_val}&quot;\n        - beg_ip: !Ref CIDRBlockIP\n          sec_val: !FindInMap [ CIDRMap, Public2, CIDR ]\n      AvailabilityZone: !Ref AvailabilityZone2\n      Tags:\n      - Key: Name\n        Value: !Sub &quot;${AWS::StackName}-PublicSubnet2&quot;\n\n  PrivateSubnet1:\n    Type: AWS::EC2::Subnet\n    UpdateReplacePolicy: Delete\n    Properties:\n      VpcId: !Ref VPC\n      CidrBlock: !Sub\n        - &quot;${beg_ip}${sec_val}&quot;\n        - beg_ip: !Ref CIDRBlockIP\n          sec_val: !FindInMap [ CIDRMap, Private1, CIDR ]\n      AvailabilityZone: !Ref AvailabilityZone1\n      Tags:\n      - Key: Name\n        Value: !Sub &quot;${AWS::StackName}-PrivateSubnet1&quot;\n\n  PrivateSubnet2:\n    Type: AWS::EC2::Subnet\n    UpdateReplacePolicy: Delete\n    DependsOn:\n      - PublicSubnet1\n      - PrivateSubnet1\n    Properties:\n      VpcId: !Ref VPC\n      CidrBlock: !Sub\n        - &quot;${beg_ip}${sec_val}&quot;\n        - beg_ip: !Ref CIDRBlockIP\n          sec_val: !FindInMap [ CIDRMap, Private2, CIDR ]\n      AvailabilityZone: !Ref AvailabilityZone2\n      Tags:\n      - Key: Name\n        Value: !Sub &quot;${AWS::StackName}-PrivateSubnet2&quot;\n\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n    UpdateReplacePolicy: Delete\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Sub &quot;${AWS::StackName}-igw&quot;\n\n  VPCGatewayAttachment:\n    Type: AWS::EC2::VPCGatewayAttachment\n    UpdateReplacePolicy: Delete\n    Properties:\n      VpcId: !Ref VPC\n      InternetGatewayId: !Ref InternetGateway\n\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    UpdateReplacePolicy: Delete\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n      - Key: Name\n        Value: !Sub &quot;${AWS::StackName}-public-rt&quot;\n\n  PublicRoute:\n    Type: AWS::EC2::Route\n    UpdateReplacePolicy: Delete\n    DependsOn: VPCGatewayAttachment\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n\n  PublicSubnetRouteTableAssociation1:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    UpdateReplacePolicy: Delete\n    Properties:\n      SubnetId: !Ref PublicSubnet1\n      RouteTableId: !Ref PublicRouteTable\n\n  PublicSubnetRouteTableAssociation2:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    UpdateReplacePolicy: Delete\n    Properties:\n      SubnetId: !Ref PublicSubnet2\n      RouteTableId: !Ref PublicRouteTable\n\n  PublicSubnetNetworkAclAssociation1:\n    Type: AWS::EC2::SubnetNetworkAclAssociation\n    UpdateReplacePolicy: Delete\n    Properties:\n      SubnetId: !Ref PublicSubnet1\n      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl\n\n  PublicSubnetNetworkAclAssociation2:\n    Type: AWS::EC2::SubnetNetworkAclAssociation\n    UpdateReplacePolicy: Delete\n    Properties:\n      SubnetId: !Ref PublicSubnet2\n      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl\n\n  ELBSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    UpdateReplacePolicy: Delete\n    Properties:\n      GroupDescription: Enable HTTP/HTTPs ingress\n      VpcId: !Ref VPC\n      SecurityGroupIngress:\n      - CidrIp: 0.0.0.0/0\n        IpProtocol: tcp\n        ToPort: !Ref ELBIngressPort\n        FromPort: !Ref ELBIngressPort\n      - CidrIp: 0.0.0.0/0\n        IpProtocol: tcp\n        ToPort: !Ref ELBHttpIngressPort  # ALB should redirect to HTTPS\n        FromPort: !Ref ELBHttpIngressPort\n      Tags:\n      - Key: Name\n        Value: !Sub &quot;${AWS::StackName}-ELBSecurityGroup&quot;\n\n  ELBSecurityGroupToAppEgress:\n    Type: AWS::EC2::SecurityGroupEgress  # prevent security group circular references\n    UpdateReplacePolicy: Delete\n    Properties:\n      GroupId: !Ref ELBSecurityGroup\n      IpProtocol: tcp\n      ToPort: !Ref AppIngressPort\n      FromPort: !Ref AppIngressPort\n      DestinationSecurityGroupId: !Ref AppSecurityGroup\n\n  AppSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    UpdateReplacePolicy: Delete\n    Properties:\n      GroupDescription: Enable access from ELB to app\n      VpcId: !Ref VPC\n      SecurityGroupIngress:\n      - SourceSecurityGroupId: !Ref ELBSecurityGroup\n        IpProtocol: tcp\n        ToPort: !Ref AppIngressPort\n        FromPort: !Ref AppIngressPort\n      - SourceSecurityGroupId: !Ref BastionSecurityGroup\n        IpProtocol: tcp\n        ToPort: 22\n        FromPort: 22\n      #!!! New, to enable intra vpc communication ??!!\n      - CidrIp: '0.0.0.0/0'\n        IpProtocol: tcp\n        ToPort: 80\n        FromPort: 80\n      Tags:\n      - Key: Name\n        Value: !Sub &quot;${AWS::StackName}-AppSecurityGroup&quot;\n\n  AppSecurityGroupFromELBIngress:\n    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references\n    UpdateReplacePolicy: Delete\n    Properties:\n      GroupId: !Ref AppSecurityGroup\n      IpProtocol: tcp\n      ToPort: !Ref AppIngressPort\n      FromPort: !Ref AppIngressPort\n      SourceSecurityGroupId: !Ref ELBSecurityGroup\n\n  AppSecurityGroupFromAppSecurityGroupIngressTcp:\n    Type: AWS::EC2::SecurityGroupIngress\n    UpdateReplacePolicy: Delete\n    Properties:\n      GroupId: !Ref AppSecurityGroup\n      IpProtocol: tcp\n      ToPort: 65535\n      FromPort: 0\n      SourceSecurityGroupId: !Ref AppSecurityGroup\n\n  AppSecurityGroupFromAppSecurityGroupIngressUdp:\n    Type: AWS::EC2::SecurityGroupIngress\n    UpdateReplacePolicy: Delete\n    Properties:\n      GroupId: !Ref AppSecurityGroup\n      IpProtocol: udp\n      ToPort: 65535\n      FromPort: 0\n      SourceSecurityGroupId: !Ref AppSecurityGroup\n\n  BastionSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    UpdateReplacePolicy: Delete\n    Properties:\n      GroupDescription: Enable access to the bastion host\n      VpcId: !Ref VPC\n      SecurityGroupEgress:\n      - CidrIp: 0.0.0.0/0\n        IpProtocol: tcp\n        ToPort: 65535\n        FromPort: 0\n      Tags:\n      - Key: Name\n        Value: !Sub &quot;${AWS::StackName}-BastionSecurityGroup&quot;\n\n  BastionSecurityGroupToAppEgress:\n    Type: AWS::EC2::SecurityGroupEgress  # prevent security group circular references\n    UpdateReplacePolicy: Delete\n    Properties:\n      GroupId: !Ref BastionSecurityGroup\n      IpProtocol: tcp\n      ToPort: 22\n      FromPort: 22\n      DestinationSecurityGroupId: !Ref AppSecurityGroup\n\n  #####################################################\n  # Database security groups, only create if required #\n  #####################################################\n  DbSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    UpdateReplacePolicy: Delete\n    Condition: CreateDbSecurityGroup\n    Properties:\n      GroupDescription: Enable access to the RDS DB\n      VpcId: !Ref VPC\n      SecurityGroupEgress:\n      - CidrIp: 0.0.0.0/0\n        IpProtocol: tcp\n        ToPort: 6379\n        FromPort: 6379\n      - CidrIp: 0.0.0.0/0\n        IpProtocol: tcp\n        ToPort: 5432\n        FromPort: 5432\n      Tags:\n      - Key: Name\n        Value: !Sub &quot;${AWS::StackName}-DbSecurityGroup&quot;\n\n  DbSecurityGroupFromBastionIngressRedis:\n    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references\n    UpdateReplacePolicy: Delete\n    Condition: CreateDbSecurityGroup\n    Properties:\n      GroupId: !Ref DbSecurityGroup\n      IpProtocol: tcp\n      ToPort: 6379  # Redis\n      FromPort: 6379\n      SourceSecurityGroupId: !Ref BastionSecurityGroup\n\n  DbSecurityGroupFromBastionIngressPostgres:\n    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references\n    UpdateReplacePolicy: Delete\n    Condition: CreateDbSecurityGroup\n    Properties:\n      GroupId: !Ref DbSecurityGroup\n      IpProtocol: tcp\n      ToPort: 5432  # Postgres\n      FromPort: 5432\n      SourceSecurityGroupId: !Ref BastionSecurityGroup\n\n  DbSecurityGroupFromAppIngressRedis:\n    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references\n    UpdateReplacePolicy: Delete\n    Condition: CreateDbSecurityGroup\n    Properties:\n      GroupId: !Ref DbSecurityGroup\n      IpProtocol: tcp\n      ToPort: 6379\n      FromPort: 6379\n      SourceSecurityGroupId: !Ref AppSecurityGroup\n\n  DbSecurityGroupFromAppIngressPostgres:\n    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references\n    UpdateReplacePolicy: Delete\n    Condition: CreateDbSecurityGroup\n    Properties:\n      GroupId: !Ref DbSecurityGroup\n      IpProtocol: tcp\n      ToPort: 5432\n      FromPort: 5432\n      SourceSecurityGroupId: !Ref AppSecurityGroup\n\n\n  #################\n  # Admin Apps Service#\n  #################\n\n  AdminAppsTaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn:\n      - AdminAppsLogGroup\n      - NginxRepository\n      - Pgadmin4Repository\n      - PgbouncerRepository\n    Properties:\n      Family: !Join ['-', [!Ref AwsIamUserId, !Ref AdminAppsServiceName, TaskDefinition]]\n      NetworkMode: awsvpc\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: 256\n      Memory: &quot;0.5GB&quot; #512 (0.5GB), 1024 (1GB), 2048 (2GB), 3072 (3GB), 4096 (4GB) \n      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn\n      TaskRoleArn: !GetAtt EcsTaskRole.Arn\n      ContainerDefinitions:\n        - Name: !Sub &quot;${AwsIamUserId}_nginx&quot;\n          Image: !Sub &quot;${NginxRepository.RepositoryUri}:latest&quot;\n          Essential: true\n          PortMappings:\n            - ContainerPort: !Ref AppContainerPort\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Sub ${AwsRegion}\n              awslogs-group: !Ref AdminAppsLogGroup\n              awslogs-stream-prefix: Nginx\n\n        - Name: !Sub &quot;${AwsIamUserId}_pgbouncer&quot;\n          Image: !Sub &quot;${PgbouncerRepository.RepositoryUri}:latest&quot;\n          PortMappings:\n            - ContainerPort: 5432\n              Protocol: tcp\n          Essential: true\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Sub ${AwsRegion}\n              awslogs-group: !Ref AdminAppsLogGroup\n              awslogs-stream-prefix: Pgbouncer \n          Secrets:\n            - Name: DJANGO_ECS_SECRETS\n              ValueFrom: !Ref DjangoSecrets\n            - Name: AWS_ACCESS_CREDENTIALS\n              ValueFrom: !Ref AwsAccessSecrets\n          Environment:\n\n\n        - Name: !Sub &quot;${AwsIamUserId}_pgadmin4&quot;\n          Image: !Sub &quot;${Pgadmin4Repository.RepositoryUri}:latest&quot;\n          Essential: false\n          PortMappings:\n            - ContainerPort: 5050\n              Protocol: tcp\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Sub ${AwsRegion}\n              awslogs-group: !Ref AdminAppsLogGroup\n              awslogs-stream-prefix: Pgadmin4 \n          Command:\n            - &quot;/generate_servers_json_and_pgpass_conf_files&quot;\n          Secrets:\n            - Name: DJANGO_ECS_SECRETS\n              ValueFrom: !Ref DjangoSecrets\n            - Name: AWS_ACCESS_CREDENTIALS\n              ValueFrom: !Ref AwsAccessSecrets\n          Environment:\n\n\n  AdminAppsService:\n    Type: AWS::ECS::Service\n    DependsOn:\n      - DjangoAppHttpsListener\n      - GeneralECSCluster\n    Properties:\n      ServiceName: !Ref AdminAppsServiceName\n      Cluster: !Ref GeneralECSCluster\n      TaskDefinition: !Ref AdminAppsTaskDefinition\n      DeploymentConfiguration:\n        MinimumHealthyPercent: 0\n        MaximumPercent: 200\n      DesiredCount: 1\n      LaunchType: FARGATE\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: ENABLED #!! Switch to DISABLED to use nat, if DISABLED uncomment the nat section above of this file\n          Subnets:\n            #- !Ref PrivateSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\n            #- !Ref PrivateSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\n            - !Ref PublicSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\n            - !Ref PublicSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\n          SecurityGroups:\n            - !Ref AppSecurityGroup\n      LoadBalancers:\n        - ContainerName: !Sub &quot;${AwsIamUserId}_nginx&quot;\n          ContainerPort: !Ref AppContainerPort\n          TargetGroupArn: !Ref DjangoAppTargetGroup\n      ServiceRegistries:\n        - RegistryArn: !GetAtt DiscoveryService.Arn\n\n  #################\n  # Django Service#\n  #################\n\n  DjangoAppTaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn:\n      - DjangoAppLogGroup\n      - DjangoCeleryRepository\n    Properties:\n      Family: !Join ['-', [!Ref AwsIamUserId, !Ref DjangoAppServiceName, TaskDefinition]]\n      NetworkMode: awsvpc\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: 256\n      Memory: &quot;0.5GB&quot; #512 (0.5GB), 1024 (1GB), 2048 (2GB), 3072 (3GB), 4096 (4GB) \n      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn\n      TaskRoleArn: !GetAtt EcsTaskRole.Arn\n      ContainerDefinitions:\n        - Name: !Sub &quot;${AwsIamUserId}_django_celery&quot;\n          Image: !Sub &quot;${DjangoCeleryRepository.RepositoryUri}:latest&quot;\n          Essential: true\n          #Cpu: 128\n          #Memory: 256\n          PortMappings:\n            - ContainerPort: 8000\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Sub ${AwsRegion}\n              awslogs-group: !Ref DjangoAppLogGroup\n              awslogs-stream-prefix: DjangoAppContainer\n          EntryPoint:\n            - &quot;/entrypoint&quot;\n          Command:\n            - &quot;/start&quot;\n          Secrets:\n            - Name: DJANGO_ECS_SECRETS\n              ValueFrom: !Ref DjangoSecrets\n            - Name: AWS_ACCESS_CREDENTIALS\n              ValueFrom: !Ref AwsAccessSecrets\n          Environment:\n\n\n        - Name: celery-default-worker\n          Image: !Sub &quot;${DjangoCeleryRepository.RepositoryUri}:latest&quot;\n          Essential: false\n          #Cpu: 128\n          #MemoryReservation: 256\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Sub ${AwsRegion}\n              awslogs-group: !Ref DjangoAppLogGroup\n              awslogs-stream-prefix: CeleryAppContainer\n          EntryPoint:\n            - &quot;/entrypoint&quot;\n          Command:\n            - &quot;/start-celery-default-worker&quot;\n          Secrets:\n            - Name: DJANGO_ECS_SECRETS\n              ValueFrom: !Ref DjangoSecrets\n            - Name: AWS_ACCESS_CREDENTIALS\n              ValueFrom: !Ref AwsAccessSecrets\n          Environment:\n\n\n  DjangoAppService:\n    Type: AWS::ECS::Service\n    DependsOn:\n      #- DjangoAppHttpsListener\n      - GeneralECSCluster\n    Properties:\n      ServiceName: !Ref DjangoAppServiceName\n      Cluster: !Ref GeneralECSCluster\n      TaskDefinition: !Ref DjangoAppTaskDefinition\n      DeploymentConfiguration:\n        MinimumHealthyPercent: 100\n        MaximumPercent: 200\n      DesiredCount: 1\n      LaunchType: FARGATE\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: ENABLED #!! Switch to DISABLED to use nat, if DISABLED uncomment the nat section above of this file\n          Subnets:\n            #- !Ref PrivateSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\n            #- !Ref PrivateSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\n            - !Ref PublicSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\n            - !Ref PublicSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\n          SecurityGroups:\n            - !Ref AppSecurityGroup\n      ServiceRegistries:\n        - RegistryArn: !GetAtt DiscoveryService.Arn\n\n  #################\n  # Celery Service#\n  #################\n\n  CeleryAppTaskDefinition:\n    Type: AWS::ECS::TaskDefinition\n    DependsOn:\n      - CeleryAppLogGroup\n      - DjangoCeleryRepository\n    Properties:\n      Family: !Join ['-', [!Ref AwsIamUserId, !Ref CeleryAppServiceName, TaskDefinition]]\n      NetworkMode: awsvpc\n      RequiresCompatibilities:\n        - FARGATE\n      Cpu: 512\n      Memory: &quot;1GB&quot; #512 (0.5GB), 1024 (1GB), 2048 (2GB), 3072 (3GB), 4096 (4GB) \n      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn\n      TaskRoleArn: !GetAtt EcsTaskRole.Arn\n      ContainerDefinitions:\n        - Name: celery-default-worker\n          Image: !Sub &quot;${DjangoCeleryRepository.RepositoryUri}:latest&quot;\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Sub ${AwsRegion}\n              awslogs-group: !Ref CeleryAppLogGroup\n              awslogs-stream-prefix: Celery\n          EntryPoint:\n            - &quot;/entrypoint&quot;\n          Command:\n            - &quot;/start-celery-default-worker&quot;\n          Secrets:\n            - Name: DJANGO_ECS_SECRETS\n              ValueFrom: !Ref DjangoSecrets\n            - Name: AWS_ACCESS_CREDENTIALS\n              ValueFrom: !Ref AwsAccessSecrets\n          Environment:\n\n\n        - Name: celery-long-running-worker\n          Image: !Sub &quot;${DjangoCeleryRepository.RepositoryUri}:latest&quot;\n          LogConfiguration:\n            LogDriver: awslogs\n            Options:\n              awslogs-region: !Sub ${AwsRegion}\n              awslogs-group: !Ref CeleryAppLogGroup\n              awslogs-stream-prefix: Celery\n          EntryPoint:\n            - &quot;/entrypoint&quot;\n          Command:\n            - &quot;/start-celery-long-running-worker&quot;\n          Secrets:\n            - Name: DJANGO_ECS_SECRETS\n              ValueFrom: !Ref DjangoSecrets\n            - Name: AWS_ACCESS_CREDENTIALS\n              ValueFrom: !Ref AwsAccessSecrets\n          Environment:\n\n\n\n  CeleryAppService:\n    Type: AWS::ECS::Service\n    Properties:\n      ServiceName: !Ref CeleryAppServiceName\n      Cluster: !Ref GeneralECSCluster\n      TaskDefinition: !Ref CeleryAppTaskDefinition\n      DeploymentConfiguration:\n        MinimumHealthyPercent: 0\n        MaximumPercent: 200\n      DesiredCount: 0 #! this scales down the service to 0 task, if you want 1 minimum task always runing change to 1\n      LaunchType: FARGATE\n      NetworkConfiguration:\n        AwsvpcConfiguration:\n          AssignPublicIp: ENABLED #!! Switch to DISABLED to use nat, if DISABLED uncomment the nat section above of this file\n          Subnets:\n            #- !Ref PrivateSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\n            #- !Ref PrivateSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\n            - !Ref PublicSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\n            - !Ref PublicSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\n          SecurityGroups:\n            - !Ref AppSecurityGroup\n      ServiceRegistries:\n        - RegistryArn: !GetAtt DiscoveryService.Arn\n\n\n  #####################################################################################\n  # Service Discovery to enable communication between Django and Celery Service       #\n  #####################################################################################\n\n  # Private Namespace for Service Discovery\n  # https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-ecs-service-discovery/\n  PrivateNamespace:\n    Type: AWS::ServiceDiscovery::PrivateDnsNamespace\n    Properties:\n        Name: !Sub &quot;${AwsIamUserId}_local&quot;\n        Vpc: !Ref VPC\n\n  DiscoveryService:\n    Type: AWS::ServiceDiscovery::Service\n    Properties: \n      Description: Discovery Service to enable communication between Django and Celery Service\n      DnsConfig:\n        RoutingPolicy: WEIGHTED #MULTIVALUE\n        DnsRecords:\n          - TTL: 60\n            Type: A\n      HealthCheckCustomConfig: \n        FailureThreshold: 1\n      Name: discovery-service\n      NamespaceId: !Ref PrivateNamespace\n\n  ###########################\n  # Load balancer resources #\n  ###########################\n\n  DjangoAppLoadBalancer:\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n    Properties:\n      LoadBalancerAttributes:\n      - Key: 'idle_timeout.timeout_seconds'\n        Value: 4000\n      - Key: 'routing.http2.enabled'\n        Value: 'true'\n      - Key: 'access_logs.s3.enabled'\n        Value: 'false'\n      Scheme: internet-facing\n      SecurityGroups: \n        - !Ref ELBSecurityGroup\n      Subnets: \n        - !Ref PublicSubnet1\n        - !Ref PublicSubnet2\n      Type: application\n\n  DjangoAppHttpsListener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      Certificates:\n      - CertificateArn: !FindInMap [ appConfigs, !Ref EnvStageName, loadbalancerCertArn ]\n      DefaultActions:\n      - TargetGroupArn: !Ref DjangoAppTargetGroup\n        Type: forward\n      LoadBalancerArn: !Ref DjangoAppLoadBalancer\n      Port: 443\n      Protocol: HTTPS\n\n  DjangoAppHttpListener:\n    Type: AWS::ElasticLoadBalancingV2::Listener\n    Properties:\n      DefaultActions:\n        - RedirectConfig:\n            Host: &quot;#{host}&quot;\n            Path: &quot;/#{path}&quot;\n            Port: 443\n            Protocol: &quot;HTTPS&quot;\n            Query: &quot;#{query}&quot;\n            StatusCode: HTTP_301\n          Type: redirect\n      LoadBalancerArn: !Ref DjangoAppLoadBalancer\n      Port: 80\n      Protocol: HTTP\n\n  DjangoAppTargetGroup:\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n    Properties:\n      Port: !Ref AppContainerPort\n      HealthCheckPath: '/health/'\n      HealthCheckProtocol: HTTP\n      HealthCheckIntervalSeconds: 90\n      HealthCheckTimeoutSeconds: 60\n      HealthyThresholdCount: 2\n      UnhealthyThresholdCount: 10\n      Matcher:\n        HttpCode: '200,301'\n      Protocol: HTTP\n      TargetType: ip\n      TargetGroupAttributes:\n      - Key: deregistration_delay.timeout_seconds\n        Value: 60\n      VpcId: !Ref VPC\n</code></pre>\n", "OwnerUserId": "17051453", "LastEditorUserId": "214143", "LastEditDate": "2022-06-17T15:09:27.527", "LastActivityDate": "2022-06-17T15:09:27.527", "Title": "Django App Cloudformation YAML Stack - Nginx isn't reaching Django - Securitygroups conf without NAT", "Tags": "|django|amazon-web-services|nginx|aws-cloudformation|aws-nat-gateway|", "AnswerCount": "0", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "128341431", "PostId": "72656530", "Score": "0", "Text": "So you are confident that everything works, and your issue is only caused by misconfigured security groups?", "CreationDate": "2022-06-17T08:42:32.183", "UserId": "248823", "filtered-sentences": []}, {"Id": "128341861", "PostId": "72656530", "Score": "0", "Text": "Everything worked fine when i had only two services : nginx, django, celery, pgbouncer in the same service and they were talking fine together. now when i split nginx and pgbouncer in one service, and django and celery in another, the communication works only in this way : django and celery talks to the service hosting pgbouncer, but nginx can't talk to django", "CreationDate": "2022-06-17T09:04:42.597", "UserId": "17051453", "filtered-sentences": []}], "history": [{"Id": "272432219", "PostHistoryTypeId": "2", "PostId": "72656530", "RevisionGUID": "2ae840fd-3903-40bb-bcbe-db72688b5ef1", "CreationDate": "2022-06-17T08:37:53.480", "UserId": "17051453", "Text": "- Having no background with aws/devops and after a lot of efforts and\r\n   trial/error i succeeded building the here bellow stack for my django\r\n   app :\r\n - The stack relies heavily on celery wich consumes a lot of tasks so i\r\n   migrated to sqs for cost reasons (instead of aws redis). For the same\r\n   reason i decided to disable the nat gateways because it costs so much\r\n   and i rely only on security groups and acl for security\r\n - Initially i had two services : One with nginx, django, celery,\r\n   pgadmin4, flower, and a second with Celery desired count 0 to scale\r\n   up on heavy loads. When celery starts working it tend to consume 100%\r\n   CPU and launch a lot of process taking all the available connections\r\n   of postgres, new process fail, so i added pgbouncer for connection\r\n   pooling\r\n - I decided to migrate to 3 services, one admin service whith nginx,\r\n   pgbouncer and pgadmin4, a second non scalable minimal service with\r\n   django and one celery worker, and a third scalable celery service\r\n   with desired count to 0 which will be launched and scaled down by an\r\n   alarm on sqs queues. (i am also considering a forth service with\r\n   django and a desired count to 0 which will be launched and scaled\r\n   down by an alarm on elb target response time).\r\n - The actual problem is the following : my django and celery containers\r\n   (in the django app service) talk with pgbouncer without a problem,\r\n   but the nginx container (in the admin service) can't reach the django\r\n   container ?\r\n - i tried playing with the securitygroups withtout success (im no\r\n   expert), any toughts guys ?\r\n\r\nThank you.\r\nHere's the stack code : \r\n\r\n```\r\n\r\n  # VPC Template Parameters\r\n  CIDRBlockIP:\r\n    Description: The first two values of the IP for the VPC\r\n    Type: String\r\n    MinLength: '3'\r\n    MaxLength: '7'\r\n    Default: 10.20\r\n    AllowedPattern: \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\"\r\n    ConstraintDescription: must be a valid start to an IP range of the form x.x\r\n  AvailabilityZone1:\r\n    Description: The first availability zone in the region\r\n    Default: us-west-2a\r\n    Type: AWS::EC2::AvailabilityZone::Name\r\n    ConstraintDescription: Must be a valid availability zone\r\n  AvailabilityZone2:\r\n    Description: The second availability zone in the region\r\n    Default: us-west-2b\r\n    Type: AWS::EC2::AvailabilityZone::Name\r\n    ConstraintDescription: Must be a valid availability zone\r\n  ELBIngressPort:\r\n    Description: The ELB ingress port used by security groups\r\n    Type: Number\r\n    MinValue: 0\r\n    MaxValue: 65535\r\n    ConstraintDescription: TCP ports must be between 0 - 65535\r\n    Default: 443\r\n  ELBHttpIngressPort:\r\n    Description: The ELB ingress port used by security groups\r\n    Type: Number\r\n    MinValue: 0\r\n    MaxValue: 65535\r\n    ConstraintDescription: TCP ports must be between 0 - 65535\r\n    Default: 80\r\n  AppIngressPort:\r\n    Description: The application ingress port used by security groups\r\n    Type: Number\r\n    MinValue: 0\r\n    MaxValue: 65535\r\n    ConstraintDescription: TCP ports must be between 0 - 65535\r\n    Default: 80\r\n  DbInVpc:\r\n    Type: String\r\n    Default: true\r\n    AllowedValues:\r\n      - true\r\n      - false\r\n\r\nMetadata:\r\n  AWS::CloudFormation::Interface:\r\n    ParameterGroups:\r\n      - Label:\r\n          default: Region Availability Zones\r\n        Parameters:\r\n          - AvailabilityZone1\r\n          - AvailabilityZone2\r\n      - Label:\r\n          default: Ingress Ports\r\n        Parameters:\r\n          - ELBIngressPort\r\n          - AppIngressPort\r\n    ParameterLabels:\r\n      AvailabilityZone1:\r\n        default: Availability Zone 1\r\n      AvailabilityZone2:\r\n        default: Availability Zone 2\r\n      ELBIngressPort:\r\n        default: Load Balancer Port\r\n      AppIngressPort:\r\n        default: Application Port\r\n\r\nConditions:\r\n  CreateDbSecurityGroup: !Equals [ !Ref DbInVpc, true ]\r\n\r\nMappings:\r\n  # Django App Mappings\r\n  appConfigs:\r\n    prod:\r\n      loadbalancerCertArn: \"xxxx\"\r\n\r\n  # Maps CIDR blocks to VPC and various subnets\r\n  CIDRMap:\r\n    VPC:\r\n      CIDR: \".0.0/16\"\r\n    Public1:\r\n      CIDR: \".2.0/24\"\r\n    Public2:\r\n      CIDR: \".3.0/24\"\r\n    Private1:\r\n      CIDR: \".64.0/19\"\r\n    Private2:\r\n      CIDR: \".96.0/19\"\r\n\r\nResources:\r\n\r\n  ###############\r\n  # VPC Template#\r\n  ###############\r\n\r\n  VPC:\r\n    Type: AWS::EC2::VPC\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      CidrBlock: !Sub\r\n        - \"${beg_ip}${sec_val}\"\r\n        - beg_ip: !Ref CIDRBlockIP\r\n          sec_val: !FindInMap [ CIDRMap, VPC, CIDR ]\r\n      EnableDnsSupport: true\r\n      EnableDnsHostnames: true\r\n      Tags:\r\n      - Key: Name\r\n        Value: !Ref \"AWS::StackName\"\r\n\r\n  PublicSubnet1:\r\n    Type: AWS::EC2::Subnet\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      VpcId: !Ref VPC\r\n      CidrBlock: !Sub\r\n        - \"${beg_ip}${sec_val}\"\r\n        - beg_ip: !Ref CIDRBlockIP\r\n          sec_val: !FindInMap [ CIDRMap, Public1, CIDR ]\r\n      AvailabilityZone: !Ref AvailabilityZone1\r\n      Tags:\r\n      - Key: Name\r\n        Value: !Sub \"${AWS::StackName}-PublicSubnet1\"\r\n\r\n  PublicSubnet2:\r\n    Type: AWS::EC2::Subnet\r\n    UpdateReplacePolicy: Delete\r\n    DependsOn:\r\n      - PublicSubnet1\r\n      - PrivateSubnet1\r\n    Properties:\r\n      VpcId: !Ref VPC\r\n      CidrBlock: !Sub\r\n        - \"${beg_ip}${sec_val}\"\r\n        - beg_ip: !Ref CIDRBlockIP\r\n          sec_val: !FindInMap [ CIDRMap, Public2, CIDR ]\r\n      AvailabilityZone: !Ref AvailabilityZone2\r\n      Tags:\r\n      - Key: Name\r\n        Value: !Sub \"${AWS::StackName}-PublicSubnet2\"\r\n\r\n  PrivateSubnet1:\r\n    Type: AWS::EC2::Subnet\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      VpcId: !Ref VPC\r\n      CidrBlock: !Sub\r\n        - \"${beg_ip}${sec_val}\"\r\n        - beg_ip: !Ref CIDRBlockIP\r\n          sec_val: !FindInMap [ CIDRMap, Private1, CIDR ]\r\n      AvailabilityZone: !Ref AvailabilityZone1\r\n      Tags:\r\n      - Key: Name\r\n        Value: !Sub \"${AWS::StackName}-PrivateSubnet1\"\r\n\r\n  PrivateSubnet2:\r\n    Type: AWS::EC2::Subnet\r\n    UpdateReplacePolicy: Delete\r\n    DependsOn:\r\n      - PublicSubnet1\r\n      - PrivateSubnet1\r\n    Properties:\r\n      VpcId: !Ref VPC\r\n      CidrBlock: !Sub\r\n        - \"${beg_ip}${sec_val}\"\r\n        - beg_ip: !Ref CIDRBlockIP\r\n          sec_val: !FindInMap [ CIDRMap, Private2, CIDR ]\r\n      AvailabilityZone: !Ref AvailabilityZone2\r\n      Tags:\r\n      - Key: Name\r\n        Value: !Sub \"${AWS::StackName}-PrivateSubnet2\"\r\n\r\n  InternetGateway:\r\n    Type: AWS::EC2::InternetGateway\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub \"${AWS::StackName}-igw\"\r\n\r\n  VPCGatewayAttachment:\r\n    Type: AWS::EC2::VPCGatewayAttachment\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      VpcId: !Ref VPC\r\n      InternetGatewayId: !Ref InternetGateway\r\n\r\n  PublicRouteTable:\r\n    Type: AWS::EC2::RouteTable\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      VpcId: !Ref VPC\r\n      Tags:\r\n      - Key: Name\r\n        Value: !Sub \"${AWS::StackName}-public-rt\"\r\n\r\n  PublicRoute:\r\n    Type: AWS::EC2::Route\r\n    UpdateReplacePolicy: Delete\r\n    DependsOn: VPCGatewayAttachment\r\n    Properties:\r\n      RouteTableId: !Ref PublicRouteTable\r\n      DestinationCidrBlock: 0.0.0.0/0\r\n      GatewayId: !Ref InternetGateway\r\n\r\n  PublicSubnetRouteTableAssociation1:\r\n    Type: AWS::EC2::SubnetRouteTableAssociation\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      SubnetId: !Ref PublicSubnet1\r\n      RouteTableId: !Ref PublicRouteTable\r\n\r\n  PublicSubnetRouteTableAssociation2:\r\n    Type: AWS::EC2::SubnetRouteTableAssociation\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      SubnetId: !Ref PublicSubnet2\r\n      RouteTableId: !Ref PublicRouteTable\r\n\r\n  PublicSubnetNetworkAclAssociation1:\r\n    Type: AWS::EC2::SubnetNetworkAclAssociation\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      SubnetId: !Ref PublicSubnet1\r\n      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl\r\n\r\n  PublicSubnetNetworkAclAssociation2:\r\n    Type: AWS::EC2::SubnetNetworkAclAssociation\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      SubnetId: !Ref PublicSubnet2\r\n      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl\r\n\r\n  ELBSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      GroupDescription: Enable HTTP/HTTPs ingress\r\n      VpcId: !Ref VPC\r\n      SecurityGroupIngress:\r\n      - CidrIp: 0.0.0.0/0\r\n        IpProtocol: tcp\r\n        ToPort: !Ref ELBIngressPort\r\n        FromPort: !Ref ELBIngressPort\r\n      - CidrIp: 0.0.0.0/0\r\n        IpProtocol: tcp\r\n        ToPort: !Ref ELBHttpIngressPort  # ALB should redirect to HTTPS\r\n        FromPort: !Ref ELBHttpIngressPort\r\n      Tags:\r\n      - Key: Name\r\n        Value: !Sub \"${AWS::StackName}-ELBSecurityGroup\"\r\n\r\n  ELBSecurityGroupToAppEgress:\r\n    Type: AWS::EC2::SecurityGroupEgress  # prevent security group circular references\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      GroupId: !Ref ELBSecurityGroup\r\n      IpProtocol: tcp\r\n      ToPort: !Ref AppIngressPort\r\n      FromPort: !Ref AppIngressPort\r\n      DestinationSecurityGroupId: !Ref AppSecurityGroup\r\n\r\n  AppSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      GroupDescription: Enable access from ELB to app\r\n      VpcId: !Ref VPC\r\n      SecurityGroupIngress:\r\n      - SourceSecurityGroupId: !Ref ELBSecurityGroup\r\n        IpProtocol: tcp\r\n        ToPort: !Ref AppIngressPort\r\n        FromPort: !Ref AppIngressPort\r\n      - SourceSecurityGroupId: !Ref BastionSecurityGroup\r\n        IpProtocol: tcp\r\n        ToPort: 22\r\n        FromPort: 22\r\n      #!!! New, to enable intra vpc communication ??!!\r\n      - CidrIp: '0.0.0.0/0'\r\n        IpProtocol: tcp\r\n        ToPort: 80\r\n        FromPort: 80\r\n      Tags:\r\n      - Key: Name\r\n        Value: !Sub \"${AWS::StackName}-AppSecurityGroup\"\r\n\r\n  AppSecurityGroupFromELBIngress:\r\n    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      GroupId: !Ref AppSecurityGroup\r\n      IpProtocol: tcp\r\n      ToPort: !Ref AppIngressPort\r\n      FromPort: !Ref AppIngressPort\r\n      SourceSecurityGroupId: !Ref ELBSecurityGroup\r\n\r\n  AppSecurityGroupFromAppSecurityGroupIngressTcp:\r\n    Type: AWS::EC2::SecurityGroupIngress\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      GroupId: !Ref AppSecurityGroup\r\n      IpProtocol: tcp\r\n      ToPort: 65535\r\n      FromPort: 0\r\n      SourceSecurityGroupId: !Ref AppSecurityGroup\r\n\r\n  AppSecurityGroupFromAppSecurityGroupIngressUdp:\r\n    Type: AWS::EC2::SecurityGroupIngress\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      GroupId: !Ref AppSecurityGroup\r\n      IpProtocol: udp\r\n      ToPort: 65535\r\n      FromPort: 0\r\n      SourceSecurityGroupId: !Ref AppSecurityGroup\r\n\r\n  BastionSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      GroupDescription: Enable access to the bastion host\r\n      VpcId: !Ref VPC\r\n      SecurityGroupEgress:\r\n      - CidrIp: 0.0.0.0/0\r\n        IpProtocol: tcp\r\n        ToPort: 65535\r\n        FromPort: 0\r\n      Tags:\r\n      - Key: Name\r\n        Value: !Sub \"${AWS::StackName}-BastionSecurityGroup\"\r\n\r\n  BastionSecurityGroupToAppEgress:\r\n    Type: AWS::EC2::SecurityGroupEgress  # prevent security group circular references\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      GroupId: !Ref BastionSecurityGroup\r\n      IpProtocol: tcp\r\n      ToPort: 22\r\n      FromPort: 22\r\n      DestinationSecurityGroupId: !Ref AppSecurityGroup\r\n\r\n  #####################################################\r\n  # Database security groups, only create if required #\r\n  #####################################################\r\n  DbSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    UpdateReplacePolicy: Delete\r\n    Condition: CreateDbSecurityGroup\r\n    Properties:\r\n      GroupDescription: Enable access to the RDS DB\r\n      VpcId: !Ref VPC\r\n      SecurityGroupEgress:\r\n      - CidrIp: 0.0.0.0/0\r\n        IpProtocol: tcp\r\n        ToPort: 6379\r\n        FromPort: 6379\r\n      - CidrIp: 0.0.0.0/0\r\n        IpProtocol: tcp\r\n        ToPort: 5432\r\n        FromPort: 5432\r\n      Tags:\r\n      - Key: Name\r\n        Value: !Sub \"${AWS::StackName}-DbSecurityGroup\"\r\n\r\n  DbSecurityGroupFromBastionIngressRedis:\r\n    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references\r\n    UpdateReplacePolicy: Delete\r\n    Condition: CreateDbSecurityGroup\r\n    Properties:\r\n      GroupId: !Ref DbSecurityGroup\r\n      IpProtocol: tcp\r\n      ToPort: 6379  # Redis\r\n      FromPort: 6379\r\n      SourceSecurityGroupId: !Ref BastionSecurityGroup\r\n\r\n  DbSecurityGroupFromBastionIngressPostgres:\r\n    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references\r\n    UpdateReplacePolicy: Delete\r\n    Condition: CreateDbSecurityGroup\r\n    Properties:\r\n      GroupId: !Ref DbSecurityGroup\r\n      IpProtocol: tcp\r\n      ToPort: 5432  # Postgres\r\n      FromPort: 5432\r\n      SourceSecurityGroupId: !Ref BastionSecurityGroup\r\n\r\n  DbSecurityGroupFromAppIngressRedis:\r\n    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references\r\n    UpdateReplacePolicy: Delete\r\n    Condition: CreateDbSecurityGroup\r\n    Properties:\r\n      GroupId: !Ref DbSecurityGroup\r\n      IpProtocol: tcp\r\n      ToPort: 6379\r\n      FromPort: 6379\r\n      SourceSecurityGroupId: !Ref AppSecurityGroup\r\n\r\n  DbSecurityGroupFromAppIngressPostgres:\r\n    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references\r\n    UpdateReplacePolicy: Delete\r\n    Condition: CreateDbSecurityGroup\r\n    Properties:\r\n      GroupId: !Ref DbSecurityGroup\r\n      IpProtocol: tcp\r\n      ToPort: 5432\r\n      FromPort: 5432\r\n      SourceSecurityGroupId: !Ref AppSecurityGroup\r\n\r\n\r\n  #################\r\n  # Admin Apps Service#\r\n  #################\r\n\r\n  AdminAppsTaskDefinition:\r\n    Type: AWS::ECS::TaskDefinition\r\n    DependsOn:\r\n      - AdminAppsLogGroup\r\n      - NginxRepository\r\n      - Pgadmin4Repository\r\n      - PgbouncerRepository\r\n    Properties:\r\n      Family: !Join ['-', [!Ref AwsIamUserId, !Ref AdminAppsServiceName, TaskDefinition]]\r\n      NetworkMode: awsvpc\r\n      RequiresCompatibilities:\r\n        - FARGATE\r\n      Cpu: 256\r\n      Memory: \"0.5GB\" #512 (0.5GB), 1024 (1GB), 2048 (2GB), 3072 (3GB), 4096 (4GB) \r\n      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn\r\n      TaskRoleArn: !GetAtt EcsTaskRole.Arn\r\n      ContainerDefinitions:\r\n        - Name: !Sub \"${AwsIamUserId}_nginx\"\r\n          Image: !Sub \"${NginxRepository.RepositoryUri}:latest\"\r\n          Essential: true\r\n          PortMappings:\r\n            - ContainerPort: !Ref AppContainerPort\r\n          LogConfiguration:\r\n            LogDriver: awslogs\r\n            Options:\r\n              awslogs-region: !Sub ${AwsRegion}\r\n              awslogs-group: !Ref AdminAppsLogGroup\r\n              awslogs-stream-prefix: Nginx\r\n\r\n        - Name: !Sub \"${AwsIamUserId}_pgbouncer\"\r\n          Image: !Sub \"${PgbouncerRepository.RepositoryUri}:latest\"\r\n          PortMappings:\r\n            - ContainerPort: 5432\r\n              Protocol: tcp\r\n          Essential: true\r\n          LogConfiguration:\r\n            LogDriver: awslogs\r\n            Options:\r\n              awslogs-region: !Sub ${AwsRegion}\r\n              awslogs-group: !Ref AdminAppsLogGroup\r\n              awslogs-stream-prefix: Pgbouncer \r\n          Secrets:\r\n            - Name: DJANGO_ECS_SECRETS\r\n              ValueFrom: !Ref DjangoSecrets\r\n            - Name: AWS_ACCESS_CREDENTIALS\r\n              ValueFrom: !Ref AwsAccessSecrets\r\n          Environment:\r\n\r\n\r\n        - Name: !Sub \"${AwsIamUserId}_pgadmin4\"\r\n          Image: !Sub \"${Pgadmin4Repository.RepositoryUri}:latest\"\r\n          Essential: false\r\n          PortMappings:\r\n            - ContainerPort: 5050\r\n              Protocol: tcp\r\n          LogConfiguration:\r\n            LogDriver: awslogs\r\n            Options:\r\n              awslogs-region: !Sub ${AwsRegion}\r\n              awslogs-group: !Ref AdminAppsLogGroup\r\n              awslogs-stream-prefix: Pgadmin4 \r\n          Command:\r\n            - \"/generate_servers_json_and_pgpass_conf_files\"\r\n          Secrets:\r\n            - Name: DJANGO_ECS_SECRETS\r\n              ValueFrom: !Ref DjangoSecrets\r\n            - Name: AWS_ACCESS_CREDENTIALS\r\n              ValueFrom: !Ref AwsAccessSecrets\r\n          Environment:\r\n\r\n\r\n  AdminAppsService:\r\n    Type: AWS::ECS::Service\r\n    DependsOn:\r\n      - DjangoAppHttpsListener\r\n      - GeneralECSCluster\r\n    Properties:\r\n      ServiceName: !Ref AdminAppsServiceName\r\n      Cluster: !Ref GeneralECSCluster\r\n      TaskDefinition: !Ref AdminAppsTaskDefinition\r\n      DeploymentConfiguration:\r\n        MinimumHealthyPercent: 0\r\n        MaximumPercent: 200\r\n      DesiredCount: 1\r\n      LaunchType: FARGATE\r\n      NetworkConfiguration:\r\n        AwsvpcConfiguration:\r\n          AssignPublicIp: ENABLED #!! Switch to DISABLED to use nat, if DISABLED uncomment the nat section above of this file\r\n          Subnets:\r\n            #- !Ref PrivateSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n            #- !Ref PrivateSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n            - !Ref PublicSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n            - !Ref PublicSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n          SecurityGroups:\r\n            - !Ref AppSecurityGroup\r\n      LoadBalancers:\r\n        - ContainerName: !Sub \"${AwsIamUserId}_nginx\"\r\n          ContainerPort: !Ref AppContainerPort\r\n          TargetGroupArn: !Ref DjangoAppTargetGroup\r\n      ServiceRegistries:\r\n        - RegistryArn: !GetAtt DiscoveryService.Arn\r\n\r\n  #################\r\n  # Django Service#\r\n  #################\r\n\r\n  DjangoAppTaskDefinition:\r\n    Type: AWS::ECS::TaskDefinition\r\n    DependsOn:\r\n      - DjangoAppLogGroup\r\n      - DjangoCeleryRepository\r\n    Properties:\r\n      Family: !Join ['-', [!Ref AwsIamUserId, !Ref DjangoAppServiceName, TaskDefinition]]\r\n      NetworkMode: awsvpc\r\n      RequiresCompatibilities:\r\n        - FARGATE\r\n      Cpu: 256\r\n      Memory: \"0.5GB\" #512 (0.5GB), 1024 (1GB), 2048 (2GB), 3072 (3GB), 4096 (4GB) \r\n      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn\r\n      TaskRoleArn: !GetAtt EcsTaskRole.Arn\r\n      ContainerDefinitions:\r\n        - Name: !Sub \"${AwsIamUserId}_django_celery\"\r\n          Image: !Sub \"${DjangoCeleryRepository.RepositoryUri}:latest\"\r\n          Essential: true\r\n          #Cpu: 128\r\n          #Memory: 256\r\n          PortMappings:\r\n            - ContainerPort: 8000\r\n          LogConfiguration:\r\n            LogDriver: awslogs\r\n            Options:\r\n              awslogs-region: !Sub ${AwsRegion}\r\n              awslogs-group: !Ref DjangoAppLogGroup\r\n              awslogs-stream-prefix: DjangoAppContainer\r\n          EntryPoint:\r\n            - \"/entrypoint\"\r\n          Command:\r\n            - \"/start\"\r\n          Secrets:\r\n            - Name: DJANGO_ECS_SECRETS\r\n              ValueFrom: !Ref DjangoSecrets\r\n            - Name: AWS_ACCESS_CREDENTIALS\r\n              ValueFrom: !Ref AwsAccessSecrets\r\n          Environment:\r\n\r\n\r\n        - Name: celery-default-worker\r\n          Image: !Sub \"${DjangoCeleryRepository.RepositoryUri}:latest\"\r\n          Essential: false\r\n          #Cpu: 128\r\n          #MemoryReservation: 256\r\n          LogConfiguration:\r\n            LogDriver: awslogs\r\n            Options:\r\n              awslogs-region: !Sub ${AwsRegion}\r\n              awslogs-group: !Ref DjangoAppLogGroup\r\n              awslogs-stream-prefix: CeleryAppContainer\r\n          EntryPoint:\r\n            - \"/entrypoint\"\r\n          Command:\r\n            - \"/start-celery-default-worker\"\r\n          Secrets:\r\n            - Name: DJANGO_ECS_SECRETS\r\n              ValueFrom: !Ref DjangoSecrets\r\n            - Name: AWS_ACCESS_CREDENTIALS\r\n              ValueFrom: !Ref AwsAccessSecrets\r\n          Environment:\r\n\r\n\r\n  DjangoAppService:\r\n    Type: AWS::ECS::Service\r\n    DependsOn:\r\n      #- DjangoAppHttpsListener\r\n      - GeneralECSCluster\r\n    Properties:\r\n      ServiceName: !Ref DjangoAppServiceName\r\n      Cluster: !Ref GeneralECSCluster\r\n      TaskDefinition: !Ref DjangoAppTaskDefinition\r\n      DeploymentConfiguration:\r\n        MinimumHealthyPercent: 100\r\n        MaximumPercent: 200\r\n      DesiredCount: 1\r\n      LaunchType: FARGATE\r\n      NetworkConfiguration:\r\n        AwsvpcConfiguration:\r\n          AssignPublicIp: ENABLED #!! Switch to DISABLED to use nat, if DISABLED uncomment the nat section above of this file\r\n          Subnets:\r\n            #- !Ref PrivateSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n            #- !Ref PrivateSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n            - !Ref PublicSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n            - !Ref PublicSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n          SecurityGroups:\r\n            - !Ref AppSecurityGroup\r\n      ServiceRegistries:\r\n        - RegistryArn: !GetAtt DiscoveryService.Arn\r\n\r\n  #################\r\n  # Celery Service#\r\n  #################\r\n\r\n  CeleryAppTaskDefinition:\r\n    Type: AWS::ECS::TaskDefinition\r\n    DependsOn:\r\n      - CeleryAppLogGroup\r\n      - DjangoCeleryRepository\r\n    Properties:\r\n      Family: !Join ['-', [!Ref AwsIamUserId, !Ref CeleryAppServiceName, TaskDefinition]]\r\n      NetworkMode: awsvpc\r\n      RequiresCompatibilities:\r\n        - FARGATE\r\n      Cpu: 512\r\n      Memory: \"1GB\" #512 (0.5GB), 1024 (1GB), 2048 (2GB), 3072 (3GB), 4096 (4GB) \r\n      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn\r\n      TaskRoleArn: !GetAtt EcsTaskRole.Arn\r\n      ContainerDefinitions:\r\n        - Name: celery-default-worker\r\n          Image: !Sub \"${DjangoCeleryRepository.RepositoryUri}:latest\"\r\n          LogConfiguration:\r\n            LogDriver: awslogs\r\n            Options:\r\n              awslogs-region: !Sub ${AwsRegion}\r\n              awslogs-group: !Ref CeleryAppLogGroup\r\n              awslogs-stream-prefix: Celery\r\n          EntryPoint:\r\n            - \"/entrypoint\"\r\n          Command:\r\n            - \"/start-celery-default-worker\"\r\n          Secrets:\r\n            - Name: DJANGO_ECS_SECRETS\r\n              ValueFrom: !Ref DjangoSecrets\r\n            - Name: AWS_ACCESS_CREDENTIALS\r\n              ValueFrom: !Ref AwsAccessSecrets\r\n          Environment:\r\n\r\n\r\n        - Name: celery-long-running-worker\r\n          Image: !Sub \"${DjangoCeleryRepository.RepositoryUri}:latest\"\r\n          LogConfiguration:\r\n            LogDriver: awslogs\r\n            Options:\r\n              awslogs-region: !Sub ${AwsRegion}\r\n              awslogs-group: !Ref CeleryAppLogGroup\r\n              awslogs-stream-prefix: Celery\r\n          EntryPoint:\r\n            - \"/entrypoint\"\r\n          Command:\r\n            - \"/start-celery-long-running-worker\"\r\n          Secrets:\r\n            - Name: DJANGO_ECS_SECRETS\r\n              ValueFrom: !Ref DjangoSecrets\r\n            - Name: AWS_ACCESS_CREDENTIALS\r\n              ValueFrom: !Ref AwsAccessSecrets\r\n          Environment:\r\n\r\n\r\n\r\n  CeleryAppService:\r\n    Type: AWS::ECS::Service\r\n    Properties:\r\n      ServiceName: !Ref CeleryAppServiceName\r\n      Cluster: !Ref GeneralECSCluster\r\n      TaskDefinition: !Ref CeleryAppTaskDefinition\r\n      DeploymentConfiguration:\r\n        MinimumHealthyPercent: 0\r\n        MaximumPercent: 200\r\n      DesiredCount: 0 #! this scales down the service to 0 task, if you want 1 minimum task always runing change to 1\r\n      LaunchType: FARGATE\r\n      NetworkConfiguration:\r\n        AwsvpcConfiguration:\r\n          AssignPublicIp: ENABLED #!! Switch to DISABLED to use nat, if DISABLED uncomment the nat section above of this file\r\n          Subnets:\r\n            #- !Ref PrivateSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n            #- !Ref PrivateSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n            - !Ref PublicSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n            - !Ref PublicSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n          SecurityGroups:\r\n            - !Ref AppSecurityGroup\r\n      ServiceRegistries:\r\n        - RegistryArn: !GetAtt DiscoveryService.Arn\r\n\r\n\r\n  #####################################################################################\r\n  # Service Discovery to enable communication between Django and Celery Service       #\r\n  #####################################################################################\r\n\r\n  # Private Namespace for Service Discovery\r\n  # https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-ecs-service-discovery/\r\n  PrivateNamespace:\r\n    Type: AWS::ServiceDiscovery::PrivateDnsNamespace\r\n    Properties:\r\n        Name: !Sub \"${AwsIamUserId}_local\"\r\n        Vpc: !Ref VPC\r\n\r\n  DiscoveryService:\r\n    Type: AWS::ServiceDiscovery::Service\r\n    Properties: \r\n      Description: Discovery Service to enable communication between Django and Celery Service\r\n      DnsConfig:\r\n        RoutingPolicy: WEIGHTED #MULTIVALUE\r\n        DnsRecords:\r\n          - TTL: 60\r\n            Type: A\r\n      HealthCheckCustomConfig: \r\n        FailureThreshold: 1\r\n      Name: discovery-service\r\n      NamespaceId: !Ref PrivateNamespace\r\n\r\n  ###########################\r\n  # Load balancer resources #\r\n  ###########################\r\n\r\n  DjangoAppLoadBalancer:\r\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\r\n    Properties:\r\n      LoadBalancerAttributes:\r\n      - Key: 'idle_timeout.timeout_seconds'\r\n        Value: 4000\r\n      - Key: 'routing.http2.enabled'\r\n        Value: 'true'\r\n      - Key: 'access_logs.s3.enabled'\r\n        Value: 'false'\r\n      Scheme: internet-facing\r\n      SecurityGroups: \r\n        - !Ref ELBSecurityGroup\r\n      Subnets: \r\n        - !Ref PublicSubnet1\r\n        - !Ref PublicSubnet2\r\n      Type: application\r\n\r\n  DjangoAppHttpsListener:\r\n    Type: AWS::ElasticLoadBalancingV2::Listener\r\n    Properties:\r\n      Certificates:\r\n      - CertificateArn: !FindInMap [ appConfigs, !Ref EnvStageName, loadbalancerCertArn ]\r\n      DefaultActions:\r\n      - TargetGroupArn: !Ref DjangoAppTargetGroup\r\n        Type: forward\r\n      LoadBalancerArn: !Ref DjangoAppLoadBalancer\r\n      Port: 443\r\n      Protocol: HTTPS\r\n\r\n  DjangoAppHttpListener:\r\n    Type: AWS::ElasticLoadBalancingV2::Listener\r\n    Properties:\r\n      DefaultActions:\r\n        - RedirectConfig:\r\n            Host: \"#{host}\"\r\n            Path: \"/#{path}\"\r\n            Port: 443\r\n            Protocol: \"HTTPS\"\r\n            Query: \"#{query}\"\r\n            StatusCode: HTTP_301\r\n          Type: redirect\r\n      LoadBalancerArn: !Ref DjangoAppLoadBalancer\r\n      Port: 80\r\n      Protocol: HTTP\r\n\r\n  DjangoAppTargetGroup:\r\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\r\n    Properties:\r\n      Port: !Ref AppContainerPort\r\n      HealthCheckPath: '/health/'\r\n      HealthCheckProtocol: HTTP\r\n      HealthCheckIntervalSeconds: 90\r\n      HealthCheckTimeoutSeconds: 60\r\n      HealthyThresholdCount: 2\r\n      UnhealthyThresholdCount: 10\r\n      Matcher:\r\n        HttpCode: '200,301'\r\n      Protocol: HTTP\r\n      TargetType: ip\r\n      TargetGroupAttributes:\r\n      - Key: deregistration_delay.timeout_seconds\r\n        Value: 60\r\n      VpcId: !Ref VPC\r\n```\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "- Having no background with aws/devops and after a lot of efforts and trial/error i succeeded building the here bellow stack for my django app : - The stack relies heavily on celery wich consumes a lot of tasks so i migrated to sqs for cost reasons (instead of aws redis). ", "keywords": ["cost"]}, {"source": "Text", "text": "For the same reason i decided to disable the nat gateways because it costs so much and i rely only on security groups and acl for security - Initially i had two services : One with nginx, django, celery, pgadmin4, flower, and a second with Celery desired count 0 to scale up on heavy loads. ", "keywords": ["nat"]}, {"source": "Text", "text": "When celery starts working it tend to consume 100% CPU and launch a lot of process taking all the available connections of postgres, new process fail, so i added pgbouncer for connection pooling - I decided to migrate to 3 services, one admin service whith nginx, pgbouncer and pgadmin4, a second non scalable minimal service with django and one celery worker, and a third scalable celery service with desired count to 0 which will be launched and scaled down by an alarm on sqs queues. ", "keywords": ["cpu"]}, {"source": "Text", "text": "Here's the stack code : ``` # VPC Template Parameters CIDRBlockIP: Description: The first two values of the IP for the VPC Type: String MinLength: '3' MaxLength: '7' Default: 10.20 AllowedPattern: \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\" ConstraintDescription: must be a valid start to an IP range of the form x.x AvailabilityZone1: Description: The first availability zone in the region Default: us-west-2a Type: AWS::EC2::AvailabilityZone::Name ConstraintDescription: Must be a valid availability zone AvailabilityZone2: Description: The second availability zone in the region Default: us-west-2b Type: AWS::EC2::AvailabilityZone::Name ConstraintDescription: Must be a valid availability zone ELBIngressPort: Description: The ELB ingress port used by security groups Type: Number MinValue: 0 MaxValue: 65535 ConstraintDescription: TCP ports must be between 0 - 65535 Default: 443 ELBHttpIngressPort: Description: The ELB ingress port used by security groups Type: Number MinValue: 0 MaxValue: 65535 ConstraintDescription: TCP ports must be between 0 - 65535 Default: 80 AppIngressPort: Description: The application ingress port used by security groups Type: Number MinValue: 0 MaxValue: 65535 ConstraintDescription: TCP ports must be between 0 - 65535 Default: 80 DbInVpc: Type: String Default: true AllowedValues: - true - false Metadata: AWS::CloudFormation::Interface: ParameterGroups: - Label: default: Region Availability Zones Parameters: - AvailabilityZone1 - AvailabilityZone2 - Label: default: Ingress Ports Parameters: - ELBIngressPort - AppIngressPort ParameterLabels: AvailabilityZone1: default: Availability Zone 1 AvailabilityZone2: default: Availability Zone 2 ELBIngressPort: default: Load Balancer Port AppIngressPort: default: Application Port Conditions: CreateDbSecurityGroup: !Equals [ !Ref DbInVpc, true ] Mappings: # Django App Mappings appConfigs: prod: loadbalancerCertArn: \"xxxx\" # Maps CIDR blocks to VPC and various subnets CIDRMap: VPC: CIDR: \".0.0/16\" Public1: CIDR: \".2.0/24\" Public2: CIDR: \".3.0/24\" Private1: CIDR: \".64.0/19\" Private2: CIDR: \".96.0/19\" Resources: ############### # VPC Template# ############### VPC: Type: AWS::EC2::VPC UpdateReplacePolicy: Delete Properties: CidrBlock: !Sub - \"${beg_ip}${sec_val}\" - beg_ip: !Ref CIDRBlockIP sec_val: !FindInMap [ CIDRMap, VPC, CIDR ] EnableDnsSupport: true EnableDnsHostnames: true Tags: - Key: Name Value: !Ref \"AWS::StackName\" PublicSubnet1: Type: AWS::EC2::Subnet UpdateReplacePolicy: Delete Properties: VpcId: !Ref VPC CidrBlock: !Sub - \"${beg_ip}${sec_val}\" - beg_ip: !Ref CIDRBlockIP sec_val: !FindInMap [ CIDRMap, Public1, CIDR ] AvailabilityZone: !Ref AvailabilityZone1 Tags: - Key: Name Value: !Sub \"${AWS::StackName}-PublicSubnet1\" PublicSubnet2: Type: AWS::EC2::Subnet UpdateReplacePolicy: Delete DependsOn: - PublicSubnet1 - PrivateSubnet1 Properties: VpcId: !Ref VPC CidrBlock: !Sub - \"${beg_ip}${sec_val}\" - beg_ip: !Ref CIDRBlockIP sec_val: !FindInMap [ CIDRMap, Public2, CIDR ] AvailabilityZone: !Ref AvailabilityZone2 Tags: - Key: Name Value: !Sub \"${AWS::StackName}-PublicSubnet2\" PrivateSubnet1: Type: AWS::EC2::Subnet UpdateReplacePolicy: Delete Properties: VpcId: !Ref VPC CidrBlock: !Sub - \"${beg_ip}${sec_val}\" - beg_ip: !Ref CIDRBlockIP sec_val: !FindInMap [ CIDRMap, Private1, CIDR ] AvailabilityZone: !Ref AvailabilityZone1 Tags: - Key: Name Value: !Sub \"${AWS::StackName}-PrivateSubnet1\" PrivateSubnet2: Type: AWS::EC2::Subnet UpdateReplacePolicy: Delete DependsOn: - PublicSubnet1 - PrivateSubnet1 Properties: VpcId: !Ref VPC CidrBlock: !Sub - \"${beg_ip}${sec_val}\" - beg_ip: !Ref CIDRBlockIP sec_val: !FindInMap [ CIDRMap, Private2, CIDR ] AvailabilityZone: !Ref AvailabilityZone2 Tags: - Key: Name Value: !Sub \"${AWS::StackName}-PrivateSubnet2\" InternetGateway: Type: AWS::EC2::InternetGateway UpdateReplacePolicy: Delete Properties: Tags: - Key: Name Value: !Sub \"${AWS::StackName}-igw\" VPCGatewayAttachment: Type: AWS::EC2::VPCGatewayAttachment UpdateReplacePolicy: Delete Properties: VpcId: !Ref VPC InternetGatewayId: !Ref InternetGateway PublicRouteTable: Type: AWS::EC2::RouteTable UpdateReplacePolicy: Delete Properties: VpcId: !Ref VPC Tags: - Key: Name Value: !Sub \"${AWS::StackName}-public-rt\" PublicRoute: Type: AWS::EC2::Route UpdateReplacePolicy: Delete DependsOn: VPCGatewayAttachment Properties: RouteTableId: !Ref PublicRouteTable DestinationCidrBlock: 0.0.0.0/0 GatewayId: !Ref InternetGateway PublicSubnetRouteTableAssociation1: Type: AWS::EC2::SubnetRouteTableAssociation UpdateReplacePolicy: Delete Properties: SubnetId: !Ref PublicSubnet1 RouteTableId: !Ref PublicRouteTable PublicSubnetRouteTableAssociation2: Type: AWS::EC2::SubnetRouteTableAssociation UpdateReplacePolicy: Delete Properties: SubnetId: !Ref PublicSubnet2 RouteTableId: !Ref PublicRouteTable PublicSubnetNetworkAclAssociation1: Type: AWS::EC2::SubnetNetworkAclAssociation UpdateReplacePolicy: Delete Properties: SubnetId: !Ref PublicSubnet1 NetworkAclId: !GetAtt VPC.DefaultNetworkAcl PublicSubnetNetworkAclAssociation2: Type: AWS::EC2::SubnetNetworkAclAssociation UpdateReplacePolicy: Delete Properties: SubnetId: !Ref PublicSubnet2 NetworkAclId: !GetAtt VPC.DefaultNetworkAcl ELBSecurityGroup: Type: AWS::EC2::SecurityGroup UpdateReplacePolicy: Delete Properties: GroupDescription: Enable HTTP/HTTPs ingress VpcId: !Ref VPC SecurityGroupIngress: - CidrIp: 0.0.0.0/0 IpProtocol: tcp ToPort: !Ref ELBIngressPort FromPort: !Ref ELBIngressPort - CidrIp: 0.0.0.0/0 IpProtocol: tcp ToPort: !Ref ELBHttpIngressPort # ALB should redirect to HTTPS FromPort: !Ref ELBHttpIngressPort Tags: - Key: Name Value: !Sub \"${AWS::StackName}-ELBSecurityGroup\" ELBSecurityGroupToAppEgress: Type: AWS::EC2::SecurityGroupEgress # prevent security group circular references UpdateReplacePolicy: Delete Properties: GroupId: !Ref ELBSecurityGroup IpProtocol: tcp ToPort: !Ref AppIngressPort FromPort: !Ref AppIngressPort DestinationSecurityGroupId: !Ref AppSecurityGroup AppSecurityGroup: Type: AWS::EC2::SecurityGroup UpdateReplacePolicy: Delete Properties: GroupDescription: Enable access from ELB to app VpcId: !Ref VPC SecurityGroupIngress: - SourceSecurityGroupId: !Ref ELBSecurityGroup IpProtocol: tcp ToPort: !Ref AppIngressPort FromPort: !Ref AppIngressPort - SourceSecurityGroupId: !Ref BastionSecurityGroup IpProtocol: tcp ToPort: 22 FromPort: 22 #!!! New, to enable intra vpc communication ??!! - CidrIp: '0.0.0.0/0' IpProtocol: tcp ToPort: 80 FromPort: 80 Tags: - Key: Name Value: !Sub \"${AWS::StackName}-AppSecurityGroup\" AppSecurityGroupFromELBIngress: Type: AWS::EC2::SecurityGroupIngress # prevent security group circular references UpdateReplacePolicy: Delete Properties: GroupId: !Ref AppSecurityGroup IpProtocol: tcp ToPort: !Ref AppIngressPort FromPort: !Ref AppIngressPort SourceSecurityGroupId: !Ref ELBSecurityGroup AppSecurityGroupFromAppSecurityGroupIngressTcp: Type: AWS::EC2::SecurityGroupIngress UpdateReplacePolicy: Delete Properties: GroupId: !Ref AppSecurityGroup IpProtocol: tcp ToPort: 65535 FromPort: 0 SourceSecurityGroupId: !Ref AppSecurityGroup AppSecurityGroupFromAppSecurityGroupIngressUdp: Type: AWS::EC2::SecurityGroupIngress UpdateReplacePolicy: Delete Properties: GroupId: !Ref AppSecurityGroup IpProtocol: udp ToPort: 65535 FromPort: 0 SourceSecurityGroupId: !Ref AppSecurityGroup BastionSecurityGroup: Type: AWS::EC2::SecurityGroup UpdateReplacePolicy: Delete Properties: GroupDescription: Enable access to the bastion host VpcId: !Ref VPC SecurityGroupEgress: - CidrIp: 0.0.0.0/0 IpProtocol: tcp ToPort: 65535 FromPort: 0 Tags: - Key: Name Value: !Sub \"${AWS::StackName}-BastionSecurityGroup\" BastionSecurityGroupToAppEgress: Type: AWS::EC2::SecurityGroupEgress # prevent security group circular references UpdateReplacePolicy: Delete Properties: GroupId: !Ref BastionSecurityGroup IpProtocol: tcp ToPort: 22 FromPort: 22 DestinationSecurityGroupId: !Ref AppSecurityGroup ##################################################### # Database security groups, only create if required # ##################################################### DbSecurityGroup: Type: AWS::EC2::SecurityGroup UpdateReplacePolicy: Delete Condition: CreateDbSecurityGroup Properties: GroupDescription: Enable access to the RDS DB VpcId: !Ref VPC SecurityGroupEgress: - CidrIp: 0.0.0.0/0 IpProtocol: tcp ToPort: 6379 FromPort: 6379 - CidrIp: 0.0.0.0/0 IpProtocol: tcp ToPort: 5432 FromPort: 5432 Tags: - Key: Name Value: !Sub \"${AWS::StackName}-DbSecurityGroup\" DbSecurityGroupFromBastionIngressRedis: Type: AWS::EC2::SecurityGroupIngress # prevent security group circular references UpdateReplacePolicy: Delete Condition: CreateDbSecurityGroup Properties: GroupId: !Ref DbSecurityGroup IpProtocol: tcp ToPort: 6379 # Redis FromPort: 6379 SourceSecurityGroupId: !Ref BastionSecurityGroup DbSecurityGroupFromBastionIngressPostgres: Type: AWS::EC2::SecurityGroupIngress # prevent security group circular references UpdateReplacePolicy: Delete Condition: CreateDbSecurityGroup Properties: GroupId: !Ref DbSecurityGroup IpProtocol: tcp ToPort: 5432 # Postgres FromPort: 5432 SourceSecurityGroupId: !Ref BastionSecurityGroup DbSecurityGroupFromAppIngressRedis: Type: AWS::EC2::SecurityGroupIngress # prevent security group circular references UpdateReplacePolicy: Delete Condition: CreateDbSecurityGroup Properties: GroupId: !Ref DbSecurityGroup IpProtocol: tcp ToPort: 6379 FromPort: 6379 SourceSecurityGroupId: !Ref AppSecurityGroup DbSecurityGroupFromAppIngressPostgres: Type: AWS::EC2::SecurityGroupIngress # prevent security group circular references UpdateReplacePolicy: Delete Condition: CreateDbSecurityGroup Properties: GroupId: !Ref DbSecurityGroup IpProtocol: tcp ToPort: 5432 FromPort: 5432 SourceSecurityGroupId: !Ref AppSecurityGroup ################# # Admin Apps Service# ################# AdminAppsTaskDefinition: Type: AWS::ECS::TaskDefinition DependsOn: - AdminAppsLogGroup - NginxRepository - Pgadmin4Repository - PgbouncerRepository Properties: Family: !Join ['-', [!Ref AwsIamUserId, !Ref AdminAppsServiceName, TaskDefinition]] NetworkMode: awsvpc RequiresCompatibilities: - FARGATE Cpu: 256 Memory: \"0.5GB\" #512 (0.5GB), 1024 (1GB), 2048 (2GB), 3072 (3GB), 4096 (4GB) ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn TaskRoleArn: !GetAtt EcsTaskRole.Arn ContainerDefinitions: - Name: !Sub \"${AwsIamUserId}_nginx\" Image: !Sub \"${NginxRepository.RepositoryUri}:latest\" Essential: true PortMappings: - ContainerPort: !Ref AppContainerPort LogConfiguration: LogDriver: awslogs Options: awslogs-region: !Sub ${AwsRegion} awslogs-group: !Ref AdminAppsLogGroup awslogs-stream-prefix: Nginx - Name: !Sub \"${AwsIamUserId}_pgbouncer\" Image: !Sub \"${PgbouncerRepository.RepositoryUri}:latest\" PortMappings: - ContainerPort: 5432 Protocol: tcp Essential: true LogConfiguration: LogDriver: awslogs Options: awslogs-region: !Sub ${AwsRegion} awslogs-group: !Ref AdminAppsLogGroup awslogs-stream-prefix: Pgbouncer Secrets: - Name: DJANGO_ECS_SECRETS ValueFrom: !Ref DjangoSecrets - Name: AWS_ACCESS_CREDENTIALS ValueFrom: !Ref AwsAccessSecrets Environment: - Name: !Sub \"${AwsIamUserId}_pgadmin4\" Image: !Sub \"${Pgadmin4Repository.RepositoryUri}:latest\" Essential: false PortMappings: - ContainerPort: 5050 Protocol: tcp LogConfiguration: LogDriver: awslogs Options: awslogs-region: !Sub ${AwsRegion} awslogs-group: !Ref AdminAppsLogGroup awslogs-stream-prefix: Pgadmin4 Command: - \"/generate_servers_json_and_pgpass_conf_files\" Secrets: - Name: DJANGO_ECS_SECRETS ValueFrom: !Ref DjangoSecrets - Name: AWS_ACCESS_CREDENTIALS ValueFrom: !Ref AwsAccessSecrets Environment: AdminAppsService: Type: AWS::ECS::Service DependsOn: - DjangoAppHttpsListener - GeneralECSCluster Properties: ServiceName: !Ref AdminAppsServiceName Cluster: !Ref GeneralECSCluster TaskDefinition: !Ref AdminAppsTaskDefinition DeploymentConfiguration: MinimumHealthyPercent: 0 MaximumPercent: 200 DesiredCount: 1 LaunchType: FARGATE NetworkConfiguration: AwsvpcConfiguration: AssignPublicIp: ENABLED #!! Switch to DISABLED to use nat, if DISABLED uncomment the nat section above of this file Subnets: #- !Ref PrivateSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file #- !Ref PrivateSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file - !Ref PublicSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file - !Ref PublicSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file SecurityGroups: - !Ref AppSecurityGroup LoadBalancers: - ContainerName: !Sub \"${AwsIamUserId}_nginx\" ContainerPort: !Ref AppContainerPort TargetGroupArn: !Ref DjangoAppTargetGroup ServiceRegistries: - RegistryArn: !GetAtt DiscoveryService.Arn ################# # Django Service# ################# DjangoAppTaskDefinition: Type: AWS::ECS::TaskDefinition DependsOn: - DjangoAppLogGroup - DjangoCeleryRepository Properties: Family: !Join ['-', [!Ref AwsIamUserId, !Ref DjangoAppServiceName, TaskDefinition]] NetworkMode: awsvpc RequiresCompatibilities: - FARGATE Cpu: 256 Memory: \"0.5GB\" #512 (0.5GB), 1024 (1GB), 2048 (2GB), 3072 (3GB), 4096 (4GB) ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn TaskRoleArn: !GetAtt EcsTaskRole.Arn ContainerDefinitions: - Name: !Sub \"${AwsIamUserId}_django_celery\" Image: !Sub \"${DjangoCeleryRepository.RepositoryUri}:latest\" Essential: true #Cpu: 128 #Memory: 256 PortMappings: - ContainerPort: 8000 LogConfiguration: LogDriver: awslogs Options: awslogs-region: !Sub ${AwsRegion} awslogs-group: !Ref DjangoAppLogGroup awslogs-stream-prefix: DjangoAppContainer EntryPoint: - \"/entrypoint\" Command: - \"/start\" Secrets: - Name: DJANGO_ECS_SECRETS ValueFrom: !Ref DjangoSecrets - Name: AWS_ACCESS_CREDENTIALS ValueFrom: !Ref AwsAccessSecrets Environment: - Name: celery-default-worker Image: !Sub \"${DjangoCeleryRepository.RepositoryUri}:latest\" Essential: false #Cpu: 128 #MemoryReservation: 256 LogConfiguration: LogDriver: awslogs Options: awslogs-region: !Sub ${AwsRegion} awslogs-group: !Ref DjangoAppLogGroup awslogs-stream-prefix: CeleryAppContainer EntryPoint: - \"/entrypoint\" Command: - \"/start-celery-default-worker\" Secrets: - Name: DJANGO_ECS_SECRETS ValueFrom: !Ref DjangoSecrets - Name: AWS_ACCESS_CREDENTIALS ValueFrom: !Ref AwsAccessSecrets Environment: DjangoAppService: Type: AWS::ECS::Service DependsOn: #- DjangoAppHttpsListener - GeneralECSCluster Properties: ServiceName: !Ref DjangoAppServiceName Cluster: !Ref GeneralECSCluster TaskDefinition: !Ref DjangoAppTaskDefinition DeploymentConfiguration: MinimumHealthyPercent: 100 MaximumPercent: 200 DesiredCount: 1 LaunchType: FARGATE NetworkConfiguration: AwsvpcConfiguration: AssignPublicIp: ENABLED #!! Switch to DISABLED to use nat, if DISABLED uncomment the nat section above of this file Subnets: #- !Ref PrivateSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file #- !Ref PrivateSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file - !Ref PublicSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file - !Ref PublicSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file SecurityGroups: - !Ref AppSecurityGroup ServiceRegistries: - RegistryArn: !GetAtt DiscoveryService.Arn ################# # Celery Service# ################# CeleryAppTaskDefinition: Type: AWS::ECS::TaskDefinition DependsOn: - CeleryAppLogGroup - DjangoCeleryRepository Properties: Family: !Join ['-', [!Ref AwsIamUserId, !Ref CeleryAppServiceName, TaskDefinition]] NetworkMode: awsvpc RequiresCompatibilities: - FARGATE Cpu: 512 Memory: \"1GB\" #512 (0.5GB), 1024 (1GB), 2048 (2GB), 3072 (3GB), 4096 (4GB) ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn TaskRoleArn: !GetAtt EcsTaskRole.Arn ContainerDefinitions: - Name: celery-default-worker Image: !Sub \"${DjangoCeleryRepository.RepositoryUri}:latest\" LogConfiguration: LogDriver: awslogs Options: awslogs-region: !Sub ${AwsRegion} awslogs-group: !Ref CeleryAppLogGroup awslogs-stream-prefix: Celery EntryPoint: - \"/entrypoint\" Command: - \"/start-celery-default-worker\" Secrets: - Name: DJANGO_ECS_SECRETS ValueFrom: !Ref DjangoSecrets - Name: AWS_ACCESS_CREDENTIALS ValueFrom: !Ref AwsAccessSecrets Environment: - Name: celery-long-running-worker Image: !Sub \"${DjangoCeleryRepository.RepositoryUri}:latest\" LogConfiguration: LogDriver: awslogs Options: awslogs-region: !Sub ${AwsRegion} awslogs-group: !Ref CeleryAppLogGroup awslogs-stream-prefix: Celery EntryPoint: - \"/entrypoint\" Command: - \"/start-celery-long-running-worker\" Secrets: - Name: DJANGO_ECS_SECRETS ValueFrom: !Ref DjangoSecrets - Name: AWS_ACCESS_CREDENTIALS ValueFrom: !Ref AwsAccessSecrets Environment: CeleryAppService: Type: AWS::ECS::Service Properties: ServiceName: !Ref CeleryAppServiceName Cluster: !Ref GeneralECSCluster TaskDefinition: !Ref CeleryAppTaskDefinition DeploymentConfiguration: MinimumHealthyPercent: 0 MaximumPercent: 200 DesiredCount: 0 #! this scales down the service to 0 task, if you want 1 minimum task always runing change to 1 LaunchType: FARGATE NetworkConfiguration: AwsvpcConfiguration: AssignPublicIp: ENABLED #!! Switch to DISABLED to use nat, if DISABLED uncomment the nat section above of this file Subnets: #- !Ref PrivateSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file #- !Ref PrivateSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file - !Ref PublicSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file - !Ref PublicSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file SecurityGroups: - !Ref AppSecurityGroup ServiceRegistries: - RegistryArn: !GetAtt DiscoveryService.Arn ##################################################################################### # Service Discovery to enable communication between Django and Celery Service # ##################################################################################### # Private Namespace for Service Discovery # https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-ecs-service-discovery/ PrivateNamespace: Type: AWS::ServiceDiscovery::PrivateDnsNamespace Properties: Name: !Sub \"${AwsIamUserId}_local\" Vpc: !Ref VPC DiscoveryService: Type: AWS::ServiceDiscovery::Service Properties: Description: Discovery Service to enable communication between Django and Celery Service DnsConfig: RoutingPolicy: WEIGHTED #MULTIVALUE DnsRecords: - TTL: 60 Type: A HealthCheckCustomConfig: FailureThreshold: 1 Name: discovery-service NamespaceId: !Ref PrivateNamespace ########################### # Load balancer resources # ########################### DjangoAppLoadBalancer: Type: AWS::ElasticLoadBalancingV2::LoadBalancer Properties: LoadBalancerAttributes: - Key: 'idle_timeout.timeout_seconds' Value: 4000 - Key: 'routing.http2.enabled' Value: 'true' - Key: 'access_logs.s3.enabled' Value: 'false' Scheme: internet-facing SecurityGroups: - !Ref ELBSecurityGroup Subnets: - !Ref PublicSubnet1 - !Ref PublicSubnet2 Type: application DjangoAppHttpsListener: Type: AWS::ElasticLoadBalancingV2::Listener Properties: Certificates: - CertificateArn: !FindInMap [ appConfigs, !Ref EnvStageName, loadbalancerCertArn ] DefaultActions: - TargetGroupArn: !Ref DjangoAppTargetGroup Type: forward LoadBalancerArn: !Ref DjangoAppLoadBalancer Port: 443 Protocol: HTTPS DjangoAppHttpListener: Type: AWS::ElasticLoadBalancingV2::Listener Properties: DefaultActions: - RedirectConfig: Host: \"#{host}\" Path: \"/#{path}\" Port: 443 Protocol: \"HTTPS\" Query: \"#{query}\" StatusCode: HTTP_301 Type: redirect LoadBalancerArn: !Ref DjangoAppLoadBalancer Port: 80 Protocol: HTTP DjangoAppTargetGroup: Type: AWS::ElasticLoadBalancingV2::TargetGroup Properties: Port: !Ref AppContainerPort HealthCheckPath: '/health/' HealthCheckProtocol: HTTP HealthCheckIntervalSeconds: 90 HealthCheckTimeoutSeconds: 60 HealthyThresholdCount: 2 UnhealthyThresholdCount: 10 Matcher: HttpCode: '200,301' Protocol: HTTP TargetType: ip TargetGroupAttributes: - Key: deregistration_delay.timeout_seconds Value: 60 VpcId: !Ref VPC ```", "keywords": ["nat", "cpu", "cluster", "change"]}]}, {"Id": "272432221", "PostHistoryTypeId": "1", "PostId": "72656530", "RevisionGUID": "2ae840fd-3903-40bb-bcbe-db72688b5ef1", "CreationDate": "2022-06-17T08:37:53.480", "UserId": "17051453", "Text": "Django App Cloudformation YAML Stack - Nginx isn't reaching Django - Securitygroups conf without NAT", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Django App Cloudformation YAML Stack - Nginx isn't reaching Django - Securitygroups conf without NAT", "keywords": ["nat"]}]}, {"Id": "272432222", "PostHistoryTypeId": "3", "PostId": "72656530", "RevisionGUID": "2ae840fd-3903-40bb-bcbe-db72688b5ef1", "CreationDate": "2022-06-17T08:37:53.480", "UserId": "17051453", "Text": "|django|nginx|aws-cloudformation|aws-security-group|aws-nat-gateway|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "|django|nginx|aws-cloudformation|aws-security-group|aws-nat-gateway|", "keywords": ["nat"]}]}, {"Id": "272432596", "PostHistoryTypeId": "6", "PostId": "72656530", "RevisionGUID": "57837625-3791-4c63-a00f-817debd60c6c", "CreationDate": "2022-06-17T08:42:57.063", "UserId": "248823", "Comment": "edited tags", "Text": "|django|amazon-web-services|nginx|aws-cloudformation|aws-nat-gateway|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "|django|amazon-web-services|nginx|aws-cloudformation|aws-nat-gateway|", "keywords": ["nat"]}]}, {"Id": "272457521", "PostHistoryTypeId": "5", "PostId": "72656530", "RevisionGUID": "02022dbf-f692-4478-9b05-94e2ee52be1c", "CreationDate": "2022-06-17T15:09:27.527", "UserId": "214143", "Comment": "spelling", "Text": "- Having no background with aws/devops and after a lot of efforts and trial/error I succeeded building the here bellow stack for my django app:\r\n - The stack relies heavily on celery which consumes a lot of tasks so I migrated to sqs for cost reasons (instead of aws redis). For the same reason I decided to disable the nat gateways because it costs so much and I rely only on security groups and acl for security\r\n - Initially I had two services: One with nginx, Django, celery,\r\n   pgadmin4, flower, and a second with Celery desired count 0 to scale\r\n   up on heavy loads. When celery starts working it tend to consume 100%\r\n   CPU and launch a lot of process taking all the available connections\r\n   of postgres, new process fail, so I added pgbouncer for connection\r\n   pooling\r\n - I decided to migrate to 3 services, one admin service with nginx,\r\n   pgbouncer and pgadmin4, a second non scalable minimal service with\r\n   django and one celery worker, and a third scalable celery service\r\n   with desired count to 0 which will be launched and scaled down by an\r\n   alarm on sqs queues. (I am also considering a fourth service with\r\n   django and a desired count to 0 which will be launched and scaled\r\n   down by an alarm on elb target response time).\r\n - The actual problem is the following : my django and celery containers\r\n   (in the django app service) talk with pgbouncer without a problem,\r\n   but the nginx container (in the admin service) can't reach the django\r\n   container ?\r\n - I tried playing with the securitygroups without success (I'm no\r\n   expert), any thoughts guys?\r\n\r\nThank you.\r\nHere's the stack code: \r\n\r\n```\r\n  # VPC Template Parameters\r\n  CIDRBlockIP:\r\n    Description: The first two values of the IP for the VPC\r\n    Type: String\r\n    MinLength: '3'\r\n    MaxLength: '7'\r\n    Default: 10.20\r\n    AllowedPattern: \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\"\r\n    ConstraintDescription: must be a valid start to an IP range of the form x.x\r\n  AvailabilityZone1:\r\n    Description: The first availability zone in the region\r\n    Default: us-west-2a\r\n    Type: AWS::EC2::AvailabilityZone::Name\r\n    ConstraintDescription: Must be a valid availability zone\r\n  AvailabilityZone2:\r\n    Description: The second availability zone in the region\r\n    Default: us-west-2b\r\n    Type: AWS::EC2::AvailabilityZone::Name\r\n    ConstraintDescription: Must be a valid availability zone\r\n  ELBIngressPort:\r\n    Description: The ELB ingress port used by security groups\r\n    Type: Number\r\n    MinValue: 0\r\n    MaxValue: 65535\r\n    ConstraintDescription: TCP ports must be between 0 - 65535\r\n    Default: 443\r\n  ELBHttpIngressPort:\r\n    Description: The ELB ingress port used by security groups\r\n    Type: Number\r\n    MinValue: 0\r\n    MaxValue: 65535\r\n    ConstraintDescription: TCP ports must be between 0 - 65535\r\n    Default: 80\r\n  AppIngressPort:\r\n    Description: The application ingress port used by security groups\r\n    Type: Number\r\n    MinValue: 0\r\n    MaxValue: 65535\r\n    ConstraintDescription: TCP ports must be between 0 - 65535\r\n    Default: 80\r\n  DbInVpc:\r\n    Type: String\r\n    Default: true\r\n    AllowedValues:\r\n      - true\r\n      - false\r\n\r\nMetadata:\r\n  AWS::CloudFormation::Interface:\r\n    ParameterGroups:\r\n      - Label:\r\n          default: Region Availability Zones\r\n        Parameters:\r\n          - AvailabilityZone1\r\n          - AvailabilityZone2\r\n      - Label:\r\n          default: Ingress Ports\r\n        Parameters:\r\n          - ELBIngressPort\r\n          - AppIngressPort\r\n    ParameterLabels:\r\n      AvailabilityZone1:\r\n        default: Availability Zone 1\r\n      AvailabilityZone2:\r\n        default: Availability Zone 2\r\n      ELBIngressPort:\r\n        default: Load Balancer Port\r\n      AppIngressPort:\r\n        default: Application Port\r\n\r\nConditions:\r\n  CreateDbSecurityGroup: !Equals [ !Ref DbInVpc, true ]\r\n\r\nMappings:\r\n  # Django App Mappings\r\n  appConfigs:\r\n    prod:\r\n      loadbalancerCertArn: \"xxxx\"\r\n\r\n  # Maps CIDR blocks to VPC and various subnets\r\n  CIDRMap:\r\n    VPC:\r\n      CIDR: \".0.0/16\"\r\n    Public1:\r\n      CIDR: \".2.0/24\"\r\n    Public2:\r\n      CIDR: \".3.0/24\"\r\n    Private1:\r\n      CIDR: \".64.0/19\"\r\n    Private2:\r\n      CIDR: \".96.0/19\"\r\n\r\nResources:\r\n\r\n  ###############\r\n  # VPC Template#\r\n  ###############\r\n\r\n  VPC:\r\n    Type: AWS::EC2::VPC\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      CidrBlock: !Sub\r\n        - \"${beg_ip}${sec_val}\"\r\n        - beg_ip: !Ref CIDRBlockIP\r\n          sec_val: !FindInMap [ CIDRMap, VPC, CIDR ]\r\n      EnableDnsSupport: true\r\n      EnableDnsHostnames: true\r\n      Tags:\r\n      - Key: Name\r\n        Value: !Ref \"AWS::StackName\"\r\n\r\n  PublicSubnet1:\r\n    Type: AWS::EC2::Subnet\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      VpcId: !Ref VPC\r\n      CidrBlock: !Sub\r\n        - \"${beg_ip}${sec_val}\"\r\n        - beg_ip: !Ref CIDRBlockIP\r\n          sec_val: !FindInMap [ CIDRMap, Public1, CIDR ]\r\n      AvailabilityZone: !Ref AvailabilityZone1\r\n      Tags:\r\n      - Key: Name\r\n        Value: !Sub \"${AWS::StackName}-PublicSubnet1\"\r\n\r\n  PublicSubnet2:\r\n    Type: AWS::EC2::Subnet\r\n    UpdateReplacePolicy: Delete\r\n    DependsOn:\r\n      - PublicSubnet1\r\n      - PrivateSubnet1\r\n    Properties:\r\n      VpcId: !Ref VPC\r\n      CidrBlock: !Sub\r\n        - \"${beg_ip}${sec_val}\"\r\n        - beg_ip: !Ref CIDRBlockIP\r\n          sec_val: !FindInMap [ CIDRMap, Public2, CIDR ]\r\n      AvailabilityZone: !Ref AvailabilityZone2\r\n      Tags:\r\n      - Key: Name\r\n        Value: !Sub \"${AWS::StackName}-PublicSubnet2\"\r\n\r\n  PrivateSubnet1:\r\n    Type: AWS::EC2::Subnet\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      VpcId: !Ref VPC\r\n      CidrBlock: !Sub\r\n        - \"${beg_ip}${sec_val}\"\r\n        - beg_ip: !Ref CIDRBlockIP\r\n          sec_val: !FindInMap [ CIDRMap, Private1, CIDR ]\r\n      AvailabilityZone: !Ref AvailabilityZone1\r\n      Tags:\r\n      - Key: Name\r\n        Value: !Sub \"${AWS::StackName}-PrivateSubnet1\"\r\n\r\n  PrivateSubnet2:\r\n    Type: AWS::EC2::Subnet\r\n    UpdateReplacePolicy: Delete\r\n    DependsOn:\r\n      - PublicSubnet1\r\n      - PrivateSubnet1\r\n    Properties:\r\n      VpcId: !Ref VPC\r\n      CidrBlock: !Sub\r\n        - \"${beg_ip}${sec_val}\"\r\n        - beg_ip: !Ref CIDRBlockIP\r\n          sec_val: !FindInMap [ CIDRMap, Private2, CIDR ]\r\n      AvailabilityZone: !Ref AvailabilityZone2\r\n      Tags:\r\n      - Key: Name\r\n        Value: !Sub \"${AWS::StackName}-PrivateSubnet2\"\r\n\r\n  InternetGateway:\r\n    Type: AWS::EC2::InternetGateway\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Sub \"${AWS::StackName}-igw\"\r\n\r\n  VPCGatewayAttachment:\r\n    Type: AWS::EC2::VPCGatewayAttachment\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      VpcId: !Ref VPC\r\n      InternetGatewayId: !Ref InternetGateway\r\n\r\n  PublicRouteTable:\r\n    Type: AWS::EC2::RouteTable\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      VpcId: !Ref VPC\r\n      Tags:\r\n      - Key: Name\r\n        Value: !Sub \"${AWS::StackName}-public-rt\"\r\n\r\n  PublicRoute:\r\n    Type: AWS::EC2::Route\r\n    UpdateReplacePolicy: Delete\r\n    DependsOn: VPCGatewayAttachment\r\n    Properties:\r\n      RouteTableId: !Ref PublicRouteTable\r\n      DestinationCidrBlock: 0.0.0.0/0\r\n      GatewayId: !Ref InternetGateway\r\n\r\n  PublicSubnetRouteTableAssociation1:\r\n    Type: AWS::EC2::SubnetRouteTableAssociation\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      SubnetId: !Ref PublicSubnet1\r\n      RouteTableId: !Ref PublicRouteTable\r\n\r\n  PublicSubnetRouteTableAssociation2:\r\n    Type: AWS::EC2::SubnetRouteTableAssociation\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      SubnetId: !Ref PublicSubnet2\r\n      RouteTableId: !Ref PublicRouteTable\r\n\r\n  PublicSubnetNetworkAclAssociation1:\r\n    Type: AWS::EC2::SubnetNetworkAclAssociation\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      SubnetId: !Ref PublicSubnet1\r\n      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl\r\n\r\n  PublicSubnetNetworkAclAssociation2:\r\n    Type: AWS::EC2::SubnetNetworkAclAssociation\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      SubnetId: !Ref PublicSubnet2\r\n      NetworkAclId: !GetAtt VPC.DefaultNetworkAcl\r\n\r\n  ELBSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      GroupDescription: Enable HTTP/HTTPs ingress\r\n      VpcId: !Ref VPC\r\n      SecurityGroupIngress:\r\n      - CidrIp: 0.0.0.0/0\r\n        IpProtocol: tcp\r\n        ToPort: !Ref ELBIngressPort\r\n        FromPort: !Ref ELBIngressPort\r\n      - CidrIp: 0.0.0.0/0\r\n        IpProtocol: tcp\r\n        ToPort: !Ref ELBHttpIngressPort  # ALB should redirect to HTTPS\r\n        FromPort: !Ref ELBHttpIngressPort\r\n      Tags:\r\n      - Key: Name\r\n        Value: !Sub \"${AWS::StackName}-ELBSecurityGroup\"\r\n\r\n  ELBSecurityGroupToAppEgress:\r\n    Type: AWS::EC2::SecurityGroupEgress  # prevent security group circular references\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      GroupId: !Ref ELBSecurityGroup\r\n      IpProtocol: tcp\r\n      ToPort: !Ref AppIngressPort\r\n      FromPort: !Ref AppIngressPort\r\n      DestinationSecurityGroupId: !Ref AppSecurityGroup\r\n\r\n  AppSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      GroupDescription: Enable access from ELB to app\r\n      VpcId: !Ref VPC\r\n      SecurityGroupIngress:\r\n      - SourceSecurityGroupId: !Ref ELBSecurityGroup\r\n        IpProtocol: tcp\r\n        ToPort: !Ref AppIngressPort\r\n        FromPort: !Ref AppIngressPort\r\n      - SourceSecurityGroupId: !Ref BastionSecurityGroup\r\n        IpProtocol: tcp\r\n        ToPort: 22\r\n        FromPort: 22\r\n      #!!! New, to enable intra vpc communication ??!!\r\n      - CidrIp: '0.0.0.0/0'\r\n        IpProtocol: tcp\r\n        ToPort: 80\r\n        FromPort: 80\r\n      Tags:\r\n      - Key: Name\r\n        Value: !Sub \"${AWS::StackName}-AppSecurityGroup\"\r\n\r\n  AppSecurityGroupFromELBIngress:\r\n    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      GroupId: !Ref AppSecurityGroup\r\n      IpProtocol: tcp\r\n      ToPort: !Ref AppIngressPort\r\n      FromPort: !Ref AppIngressPort\r\n      SourceSecurityGroupId: !Ref ELBSecurityGroup\r\n\r\n  AppSecurityGroupFromAppSecurityGroupIngressTcp:\r\n    Type: AWS::EC2::SecurityGroupIngress\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      GroupId: !Ref AppSecurityGroup\r\n      IpProtocol: tcp\r\n      ToPort: 65535\r\n      FromPort: 0\r\n      SourceSecurityGroupId: !Ref AppSecurityGroup\r\n\r\n  AppSecurityGroupFromAppSecurityGroupIngressUdp:\r\n    Type: AWS::EC2::SecurityGroupIngress\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      GroupId: !Ref AppSecurityGroup\r\n      IpProtocol: udp\r\n      ToPort: 65535\r\n      FromPort: 0\r\n      SourceSecurityGroupId: !Ref AppSecurityGroup\r\n\r\n  BastionSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      GroupDescription: Enable access to the bastion host\r\n      VpcId: !Ref VPC\r\n      SecurityGroupEgress:\r\n      - CidrIp: 0.0.0.0/0\r\n        IpProtocol: tcp\r\n        ToPort: 65535\r\n        FromPort: 0\r\n      Tags:\r\n      - Key: Name\r\n        Value: !Sub \"${AWS::StackName}-BastionSecurityGroup\"\r\n\r\n  BastionSecurityGroupToAppEgress:\r\n    Type: AWS::EC2::SecurityGroupEgress  # prevent security group circular references\r\n    UpdateReplacePolicy: Delete\r\n    Properties:\r\n      GroupId: !Ref BastionSecurityGroup\r\n      IpProtocol: tcp\r\n      ToPort: 22\r\n      FromPort: 22\r\n      DestinationSecurityGroupId: !Ref AppSecurityGroup\r\n\r\n  #####################################################\r\n  # Database security groups, only create if required #\r\n  #####################################################\r\n  DbSecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    UpdateReplacePolicy: Delete\r\n    Condition: CreateDbSecurityGroup\r\n    Properties:\r\n      GroupDescription: Enable access to the RDS DB\r\n      VpcId: !Ref VPC\r\n      SecurityGroupEgress:\r\n      - CidrIp: 0.0.0.0/0\r\n        IpProtocol: tcp\r\n        ToPort: 6379\r\n        FromPort: 6379\r\n      - CidrIp: 0.0.0.0/0\r\n        IpProtocol: tcp\r\n        ToPort: 5432\r\n        FromPort: 5432\r\n      Tags:\r\n      - Key: Name\r\n        Value: !Sub \"${AWS::StackName}-DbSecurityGroup\"\r\n\r\n  DbSecurityGroupFromBastionIngressRedis:\r\n    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references\r\n    UpdateReplacePolicy: Delete\r\n    Condition: CreateDbSecurityGroup\r\n    Properties:\r\n      GroupId: !Ref DbSecurityGroup\r\n      IpProtocol: tcp\r\n      ToPort: 6379  # Redis\r\n      FromPort: 6379\r\n      SourceSecurityGroupId: !Ref BastionSecurityGroup\r\n\r\n  DbSecurityGroupFromBastionIngressPostgres:\r\n    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references\r\n    UpdateReplacePolicy: Delete\r\n    Condition: CreateDbSecurityGroup\r\n    Properties:\r\n      GroupId: !Ref DbSecurityGroup\r\n      IpProtocol: tcp\r\n      ToPort: 5432  # Postgres\r\n      FromPort: 5432\r\n      SourceSecurityGroupId: !Ref BastionSecurityGroup\r\n\r\n  DbSecurityGroupFromAppIngressRedis:\r\n    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references\r\n    UpdateReplacePolicy: Delete\r\n    Condition: CreateDbSecurityGroup\r\n    Properties:\r\n      GroupId: !Ref DbSecurityGroup\r\n      IpProtocol: tcp\r\n      ToPort: 6379\r\n      FromPort: 6379\r\n      SourceSecurityGroupId: !Ref AppSecurityGroup\r\n\r\n  DbSecurityGroupFromAppIngressPostgres:\r\n    Type: AWS::EC2::SecurityGroupIngress  # prevent security group circular references\r\n    UpdateReplacePolicy: Delete\r\n    Condition: CreateDbSecurityGroup\r\n    Properties:\r\n      GroupId: !Ref DbSecurityGroup\r\n      IpProtocol: tcp\r\n      ToPort: 5432\r\n      FromPort: 5432\r\n      SourceSecurityGroupId: !Ref AppSecurityGroup\r\n\r\n\r\n  #################\r\n  # Admin Apps Service#\r\n  #################\r\n\r\n  AdminAppsTaskDefinition:\r\n    Type: AWS::ECS::TaskDefinition\r\n    DependsOn:\r\n      - AdminAppsLogGroup\r\n      - NginxRepository\r\n      - Pgadmin4Repository\r\n      - PgbouncerRepository\r\n    Properties:\r\n      Family: !Join ['-', [!Ref AwsIamUserId, !Ref AdminAppsServiceName, TaskDefinition]]\r\n      NetworkMode: awsvpc\r\n      RequiresCompatibilities:\r\n        - FARGATE\r\n      Cpu: 256\r\n      Memory: \"0.5GB\" #512 (0.5GB), 1024 (1GB), 2048 (2GB), 3072 (3GB), 4096 (4GB) \r\n      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn\r\n      TaskRoleArn: !GetAtt EcsTaskRole.Arn\r\n      ContainerDefinitions:\r\n        - Name: !Sub \"${AwsIamUserId}_nginx\"\r\n          Image: !Sub \"${NginxRepository.RepositoryUri}:latest\"\r\n          Essential: true\r\n          PortMappings:\r\n            - ContainerPort: !Ref AppContainerPort\r\n          LogConfiguration:\r\n            LogDriver: awslogs\r\n            Options:\r\n              awslogs-region: !Sub ${AwsRegion}\r\n              awslogs-group: !Ref AdminAppsLogGroup\r\n              awslogs-stream-prefix: Nginx\r\n\r\n        - Name: !Sub \"${AwsIamUserId}_pgbouncer\"\r\n          Image: !Sub \"${PgbouncerRepository.RepositoryUri}:latest\"\r\n          PortMappings:\r\n            - ContainerPort: 5432\r\n              Protocol: tcp\r\n          Essential: true\r\n          LogConfiguration:\r\n            LogDriver: awslogs\r\n            Options:\r\n              awslogs-region: !Sub ${AwsRegion}\r\n              awslogs-group: !Ref AdminAppsLogGroup\r\n              awslogs-stream-prefix: Pgbouncer \r\n          Secrets:\r\n            - Name: DJANGO_ECS_SECRETS\r\n              ValueFrom: !Ref DjangoSecrets\r\n            - Name: AWS_ACCESS_CREDENTIALS\r\n              ValueFrom: !Ref AwsAccessSecrets\r\n          Environment:\r\n\r\n\r\n        - Name: !Sub \"${AwsIamUserId}_pgadmin4\"\r\n          Image: !Sub \"${Pgadmin4Repository.RepositoryUri}:latest\"\r\n          Essential: false\r\n          PortMappings:\r\n            - ContainerPort: 5050\r\n              Protocol: tcp\r\n          LogConfiguration:\r\n            LogDriver: awslogs\r\n            Options:\r\n              awslogs-region: !Sub ${AwsRegion}\r\n              awslogs-group: !Ref AdminAppsLogGroup\r\n              awslogs-stream-prefix: Pgadmin4 \r\n          Command:\r\n            - \"/generate_servers_json_and_pgpass_conf_files\"\r\n          Secrets:\r\n            - Name: DJANGO_ECS_SECRETS\r\n              ValueFrom: !Ref DjangoSecrets\r\n            - Name: AWS_ACCESS_CREDENTIALS\r\n              ValueFrom: !Ref AwsAccessSecrets\r\n          Environment:\r\n\r\n\r\n  AdminAppsService:\r\n    Type: AWS::ECS::Service\r\n    DependsOn:\r\n      - DjangoAppHttpsListener\r\n      - GeneralECSCluster\r\n    Properties:\r\n      ServiceName: !Ref AdminAppsServiceName\r\n      Cluster: !Ref GeneralECSCluster\r\n      TaskDefinition: !Ref AdminAppsTaskDefinition\r\n      DeploymentConfiguration:\r\n        MinimumHealthyPercent: 0\r\n        MaximumPercent: 200\r\n      DesiredCount: 1\r\n      LaunchType: FARGATE\r\n      NetworkConfiguration:\r\n        AwsvpcConfiguration:\r\n          AssignPublicIp: ENABLED #!! Switch to DISABLED to use nat, if DISABLED uncomment the nat section above of this file\r\n          Subnets:\r\n            #- !Ref PrivateSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n            #- !Ref PrivateSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n            - !Ref PublicSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n            - !Ref PublicSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n          SecurityGroups:\r\n            - !Ref AppSecurityGroup\r\n      LoadBalancers:\r\n        - ContainerName: !Sub \"${AwsIamUserId}_nginx\"\r\n          ContainerPort: !Ref AppContainerPort\r\n          TargetGroupArn: !Ref DjangoAppTargetGroup\r\n      ServiceRegistries:\r\n        - RegistryArn: !GetAtt DiscoveryService.Arn\r\n\r\n  #################\r\n  # Django Service#\r\n  #################\r\n\r\n  DjangoAppTaskDefinition:\r\n    Type: AWS::ECS::TaskDefinition\r\n    DependsOn:\r\n      - DjangoAppLogGroup\r\n      - DjangoCeleryRepository\r\n    Properties:\r\n      Family: !Join ['-', [!Ref AwsIamUserId, !Ref DjangoAppServiceName, TaskDefinition]]\r\n      NetworkMode: awsvpc\r\n      RequiresCompatibilities:\r\n        - FARGATE\r\n      Cpu: 256\r\n      Memory: \"0.5GB\" #512 (0.5GB), 1024 (1GB), 2048 (2GB), 3072 (3GB), 4096 (4GB) \r\n      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn\r\n      TaskRoleArn: !GetAtt EcsTaskRole.Arn\r\n      ContainerDefinitions:\r\n        - Name: !Sub \"${AwsIamUserId}_django_celery\"\r\n          Image: !Sub \"${DjangoCeleryRepository.RepositoryUri}:latest\"\r\n          Essential: true\r\n          #Cpu: 128\r\n          #Memory: 256\r\n          PortMappings:\r\n            - ContainerPort: 8000\r\n          LogConfiguration:\r\n            LogDriver: awslogs\r\n            Options:\r\n              awslogs-region: !Sub ${AwsRegion}\r\n              awslogs-group: !Ref DjangoAppLogGroup\r\n              awslogs-stream-prefix: DjangoAppContainer\r\n          EntryPoint:\r\n            - \"/entrypoint\"\r\n          Command:\r\n            - \"/start\"\r\n          Secrets:\r\n            - Name: DJANGO_ECS_SECRETS\r\n              ValueFrom: !Ref DjangoSecrets\r\n            - Name: AWS_ACCESS_CREDENTIALS\r\n              ValueFrom: !Ref AwsAccessSecrets\r\n          Environment:\r\n\r\n\r\n        - Name: celery-default-worker\r\n          Image: !Sub \"${DjangoCeleryRepository.RepositoryUri}:latest\"\r\n          Essential: false\r\n          #Cpu: 128\r\n          #MemoryReservation: 256\r\n          LogConfiguration:\r\n            LogDriver: awslogs\r\n            Options:\r\n              awslogs-region: !Sub ${AwsRegion}\r\n              awslogs-group: !Ref DjangoAppLogGroup\r\n              awslogs-stream-prefix: CeleryAppContainer\r\n          EntryPoint:\r\n            - \"/entrypoint\"\r\n          Command:\r\n            - \"/start-celery-default-worker\"\r\n          Secrets:\r\n            - Name: DJANGO_ECS_SECRETS\r\n              ValueFrom: !Ref DjangoSecrets\r\n            - Name: AWS_ACCESS_CREDENTIALS\r\n              ValueFrom: !Ref AwsAccessSecrets\r\n          Environment:\r\n\r\n\r\n  DjangoAppService:\r\n    Type: AWS::ECS::Service\r\n    DependsOn:\r\n      #- DjangoAppHttpsListener\r\n      - GeneralECSCluster\r\n    Properties:\r\n      ServiceName: !Ref DjangoAppServiceName\r\n      Cluster: !Ref GeneralECSCluster\r\n      TaskDefinition: !Ref DjangoAppTaskDefinition\r\n      DeploymentConfiguration:\r\n        MinimumHealthyPercent: 100\r\n        MaximumPercent: 200\r\n      DesiredCount: 1\r\n      LaunchType: FARGATE\r\n      NetworkConfiguration:\r\n        AwsvpcConfiguration:\r\n          AssignPublicIp: ENABLED #!! Switch to DISABLED to use nat, if DISABLED uncomment the nat section above of this file\r\n          Subnets:\r\n            #- !Ref PrivateSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n            #- !Ref PrivateSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n            - !Ref PublicSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n            - !Ref PublicSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n          SecurityGroups:\r\n            - !Ref AppSecurityGroup\r\n      ServiceRegistries:\r\n        - RegistryArn: !GetAtt DiscoveryService.Arn\r\n\r\n  #################\r\n  # Celery Service#\r\n  #################\r\n\r\n  CeleryAppTaskDefinition:\r\n    Type: AWS::ECS::TaskDefinition\r\n    DependsOn:\r\n      - CeleryAppLogGroup\r\n      - DjangoCeleryRepository\r\n    Properties:\r\n      Family: !Join ['-', [!Ref AwsIamUserId, !Ref CeleryAppServiceName, TaskDefinition]]\r\n      NetworkMode: awsvpc\r\n      RequiresCompatibilities:\r\n        - FARGATE\r\n      Cpu: 512\r\n      Memory: \"1GB\" #512 (0.5GB), 1024 (1GB), 2048 (2GB), 3072 (3GB), 4096 (4GB) \r\n      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn\r\n      TaskRoleArn: !GetAtt EcsTaskRole.Arn\r\n      ContainerDefinitions:\r\n        - Name: celery-default-worker\r\n          Image: !Sub \"${DjangoCeleryRepository.RepositoryUri}:latest\"\r\n          LogConfiguration:\r\n            LogDriver: awslogs\r\n            Options:\r\n              awslogs-region: !Sub ${AwsRegion}\r\n              awslogs-group: !Ref CeleryAppLogGroup\r\n              awslogs-stream-prefix: Celery\r\n          EntryPoint:\r\n            - \"/entrypoint\"\r\n          Command:\r\n            - \"/start-celery-default-worker\"\r\n          Secrets:\r\n            - Name: DJANGO_ECS_SECRETS\r\n              ValueFrom: !Ref DjangoSecrets\r\n            - Name: AWS_ACCESS_CREDENTIALS\r\n              ValueFrom: !Ref AwsAccessSecrets\r\n          Environment:\r\n\r\n\r\n        - Name: celery-long-running-worker\r\n          Image: !Sub \"${DjangoCeleryRepository.RepositoryUri}:latest\"\r\n          LogConfiguration:\r\n            LogDriver: awslogs\r\n            Options:\r\n              awslogs-region: !Sub ${AwsRegion}\r\n              awslogs-group: !Ref CeleryAppLogGroup\r\n              awslogs-stream-prefix: Celery\r\n          EntryPoint:\r\n            - \"/entrypoint\"\r\n          Command:\r\n            - \"/start-celery-long-running-worker\"\r\n          Secrets:\r\n            - Name: DJANGO_ECS_SECRETS\r\n              ValueFrom: !Ref DjangoSecrets\r\n            - Name: AWS_ACCESS_CREDENTIALS\r\n              ValueFrom: !Ref AwsAccessSecrets\r\n          Environment:\r\n\r\n\r\n\r\n  CeleryAppService:\r\n    Type: AWS::ECS::Service\r\n    Properties:\r\n      ServiceName: !Ref CeleryAppServiceName\r\n      Cluster: !Ref GeneralECSCluster\r\n      TaskDefinition: !Ref CeleryAppTaskDefinition\r\n      DeploymentConfiguration:\r\n        MinimumHealthyPercent: 0\r\n        MaximumPercent: 200\r\n      DesiredCount: 0 #! this scales down the service to 0 task, if you want 1 minimum task always runing change to 1\r\n      LaunchType: FARGATE\r\n      NetworkConfiguration:\r\n        AwsvpcConfiguration:\r\n          AssignPublicIp: ENABLED #!! Switch to DISABLED to use nat, if DISABLED uncomment the nat section above of this file\r\n          Subnets:\r\n            #- !Ref PrivateSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n            #- !Ref PrivateSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n            - !Ref PublicSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n            - !Ref PublicSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file\r\n          SecurityGroups:\r\n            - !Ref AppSecurityGroup\r\n      ServiceRegistries:\r\n        - RegistryArn: !GetAtt DiscoveryService.Arn\r\n\r\n\r\n  #####################################################################################\r\n  # Service Discovery to enable communication between Django and Celery Service       #\r\n  #####################################################################################\r\n\r\n  # Private Namespace for Service Discovery\r\n  # https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-ecs-service-discovery/\r\n  PrivateNamespace:\r\n    Type: AWS::ServiceDiscovery::PrivateDnsNamespace\r\n    Properties:\r\n        Name: !Sub \"${AwsIamUserId}_local\"\r\n        Vpc: !Ref VPC\r\n\r\n  DiscoveryService:\r\n    Type: AWS::ServiceDiscovery::Service\r\n    Properties: \r\n      Description: Discovery Service to enable communication between Django and Celery Service\r\n      DnsConfig:\r\n        RoutingPolicy: WEIGHTED #MULTIVALUE\r\n        DnsRecords:\r\n          - TTL: 60\r\n            Type: A\r\n      HealthCheckCustomConfig: \r\n        FailureThreshold: 1\r\n      Name: discovery-service\r\n      NamespaceId: !Ref PrivateNamespace\r\n\r\n  ###########################\r\n  # Load balancer resources #\r\n  ###########################\r\n\r\n  DjangoAppLoadBalancer:\r\n    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\r\n    Properties:\r\n      LoadBalancerAttributes:\r\n      - Key: 'idle_timeout.timeout_seconds'\r\n        Value: 4000\r\n      - Key: 'routing.http2.enabled'\r\n        Value: 'true'\r\n      - Key: 'access_logs.s3.enabled'\r\n        Value: 'false'\r\n      Scheme: internet-facing\r\n      SecurityGroups: \r\n        - !Ref ELBSecurityGroup\r\n      Subnets: \r\n        - !Ref PublicSubnet1\r\n        - !Ref PublicSubnet2\r\n      Type: application\r\n\r\n  DjangoAppHttpsListener:\r\n    Type: AWS::ElasticLoadBalancingV2::Listener\r\n    Properties:\r\n      Certificates:\r\n      - CertificateArn: !FindInMap [ appConfigs, !Ref EnvStageName, loadbalancerCertArn ]\r\n      DefaultActions:\r\n      - TargetGroupArn: !Ref DjangoAppTargetGroup\r\n        Type: forward\r\n      LoadBalancerArn: !Ref DjangoAppLoadBalancer\r\n      Port: 443\r\n      Protocol: HTTPS\r\n\r\n  DjangoAppHttpListener:\r\n    Type: AWS::ElasticLoadBalancingV2::Listener\r\n    Properties:\r\n      DefaultActions:\r\n        - RedirectConfig:\r\n            Host: \"#{host}\"\r\n            Path: \"/#{path}\"\r\n            Port: 443\r\n            Protocol: \"HTTPS\"\r\n            Query: \"#{query}\"\r\n            StatusCode: HTTP_301\r\n          Type: redirect\r\n      LoadBalancerArn: !Ref DjangoAppLoadBalancer\r\n      Port: 80\r\n      Protocol: HTTP\r\n\r\n  DjangoAppTargetGroup:\r\n    Type: AWS::ElasticLoadBalancingV2::TargetGroup\r\n    Properties:\r\n      Port: !Ref AppContainerPort\r\n      HealthCheckPath: '/health/'\r\n      HealthCheckProtocol: HTTP\r\n      HealthCheckIntervalSeconds: 90\r\n      HealthCheckTimeoutSeconds: 60\r\n      HealthyThresholdCount: 2\r\n      UnhealthyThresholdCount: 10\r\n      Matcher:\r\n        HttpCode: '200,301'\r\n      Protocol: HTTP\r\n      TargetType: ip\r\n      TargetGroupAttributes:\r\n      - Key: deregistration_delay.timeout_seconds\r\n        Value: 60\r\n      VpcId: !Ref VPC\r\n```\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "- Having no background with aws/devops and after a lot of efforts and trial/error I succeeded building the here bellow stack for my django app: - The stack relies heavily on celery which consumes a lot of tasks so I migrated to sqs for cost reasons (instead of aws redis). ", "keywords": ["cost"]}, {"source": "Text", "text": "For the same reason I decided to disable the nat gateways because it costs so much and I rely only on security groups and acl for security - Initially I had two services: One with nginx, Django, celery, pgadmin4, flower, and a second with Celery desired count 0 to scale up on heavy loads. ", "keywords": ["nat"]}, {"source": "Text", "text": "When celery starts working it tend to consume 100% CPU and launch a lot of process taking all the available connections of postgres, new process fail, so I added pgbouncer for connection pooling - I decided to migrate to 3 services, one admin service with nginx, pgbouncer and pgadmin4, a second non scalable minimal service with django and one celery worker, and a third scalable celery service with desired count to 0 which will be launched and scaled down by an alarm on sqs queues. ", "keywords": ["cpu"]}, {"source": "Text", "text": "Here's the stack code: ``` # VPC Template Parameters CIDRBlockIP: Description: The first two values of the IP for the VPC Type: String MinLength: '3' MaxLength: '7' Default: 10.20 AllowedPattern: \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\" ConstraintDescription: must be a valid start to an IP range of the form x.x AvailabilityZone1: Description: The first availability zone in the region Default: us-west-2a Type: AWS::EC2::AvailabilityZone::Name ConstraintDescription: Must be a valid availability zone AvailabilityZone2: Description: The second availability zone in the region Default: us-west-2b Type: AWS::EC2::AvailabilityZone::Name ConstraintDescription: Must be a valid availability zone ELBIngressPort: Description: The ELB ingress port used by security groups Type: Number MinValue: 0 MaxValue: 65535 ConstraintDescription: TCP ports must be between 0 - 65535 Default: 443 ELBHttpIngressPort: Description: The ELB ingress port used by security groups Type: Number MinValue: 0 MaxValue: 65535 ConstraintDescription: TCP ports must be between 0 - 65535 Default: 80 AppIngressPort: Description: The application ingress port used by security groups Type: Number MinValue: 0 MaxValue: 65535 ConstraintDescription: TCP ports must be between 0 - 65535 Default: 80 DbInVpc: Type: String Default: true AllowedValues: - true - false Metadata: AWS::CloudFormation::Interface: ParameterGroups: - Label: default: Region Availability Zones Parameters: - AvailabilityZone1 - AvailabilityZone2 - Label: default: Ingress Ports Parameters: - ELBIngressPort - AppIngressPort ParameterLabels: AvailabilityZone1: default: Availability Zone 1 AvailabilityZone2: default: Availability Zone 2 ELBIngressPort: default: Load Balancer Port AppIngressPort: default: Application Port Conditions: CreateDbSecurityGroup: !Equals [ !Ref DbInVpc, true ] Mappings: # Django App Mappings appConfigs: prod: loadbalancerCertArn: \"xxxx\" # Maps CIDR blocks to VPC and various subnets CIDRMap: VPC: CIDR: \".0.0/16\" Public1: CIDR: \".2.0/24\" Public2: CIDR: \".3.0/24\" Private1: CIDR: \".64.0/19\" Private2: CIDR: \".96.0/19\" Resources: ############### # VPC Template# ############### VPC: Type: AWS::EC2::VPC UpdateReplacePolicy: Delete Properties: CidrBlock: !Sub - \"${beg_ip}${sec_val}\" - beg_ip: !Ref CIDRBlockIP sec_val: !FindInMap [ CIDRMap, VPC, CIDR ] EnableDnsSupport: true EnableDnsHostnames: true Tags: - Key: Name Value: !Ref \"AWS::StackName\" PublicSubnet1: Type: AWS::EC2::Subnet UpdateReplacePolicy: Delete Properties: VpcId: !Ref VPC CidrBlock: !Sub - \"${beg_ip}${sec_val}\" - beg_ip: !Ref CIDRBlockIP sec_val: !FindInMap [ CIDRMap, Public1, CIDR ] AvailabilityZone: !Ref AvailabilityZone1 Tags: - Key: Name Value: !Sub \"${AWS::StackName}-PublicSubnet1\" PublicSubnet2: Type: AWS::EC2::Subnet UpdateReplacePolicy: Delete DependsOn: - PublicSubnet1 - PrivateSubnet1 Properties: VpcId: !Ref VPC CidrBlock: !Sub - \"${beg_ip}${sec_val}\" - beg_ip: !Ref CIDRBlockIP sec_val: !FindInMap [ CIDRMap, Public2, CIDR ] AvailabilityZone: !Ref AvailabilityZone2 Tags: - Key: Name Value: !Sub \"${AWS::StackName}-PublicSubnet2\" PrivateSubnet1: Type: AWS::EC2::Subnet UpdateReplacePolicy: Delete Properties: VpcId: !Ref VPC CidrBlock: !Sub - \"${beg_ip}${sec_val}\" - beg_ip: !Ref CIDRBlockIP sec_val: !FindInMap [ CIDRMap, Private1, CIDR ] AvailabilityZone: !Ref AvailabilityZone1 Tags: - Key: Name Value: !Sub \"${AWS::StackName}-PrivateSubnet1\" PrivateSubnet2: Type: AWS::EC2::Subnet UpdateReplacePolicy: Delete DependsOn: - PublicSubnet1 - PrivateSubnet1 Properties: VpcId: !Ref VPC CidrBlock: !Sub - \"${beg_ip}${sec_val}\" - beg_ip: !Ref CIDRBlockIP sec_val: !FindInMap [ CIDRMap, Private2, CIDR ] AvailabilityZone: !Ref AvailabilityZone2 Tags: - Key: Name Value: !Sub \"${AWS::StackName}-PrivateSubnet2\" InternetGateway: Type: AWS::EC2::InternetGateway UpdateReplacePolicy: Delete Properties: Tags: - Key: Name Value: !Sub \"${AWS::StackName}-igw\" VPCGatewayAttachment: Type: AWS::EC2::VPCGatewayAttachment UpdateReplacePolicy: Delete Properties: VpcId: !Ref VPC InternetGatewayId: !Ref InternetGateway PublicRouteTable: Type: AWS::EC2::RouteTable UpdateReplacePolicy: Delete Properties: VpcId: !Ref VPC Tags: - Key: Name Value: !Sub \"${AWS::StackName}-public-rt\" PublicRoute: Type: AWS::EC2::Route UpdateReplacePolicy: Delete DependsOn: VPCGatewayAttachment Properties: RouteTableId: !Ref PublicRouteTable DestinationCidrBlock: 0.0.0.0/0 GatewayId: !Ref InternetGateway PublicSubnetRouteTableAssociation1: Type: AWS::EC2::SubnetRouteTableAssociation UpdateReplacePolicy: Delete Properties: SubnetId: !Ref PublicSubnet1 RouteTableId: !Ref PublicRouteTable PublicSubnetRouteTableAssociation2: Type: AWS::EC2::SubnetRouteTableAssociation UpdateReplacePolicy: Delete Properties: SubnetId: !Ref PublicSubnet2 RouteTableId: !Ref PublicRouteTable PublicSubnetNetworkAclAssociation1: Type: AWS::EC2::SubnetNetworkAclAssociation UpdateReplacePolicy: Delete Properties: SubnetId: !Ref PublicSubnet1 NetworkAclId: !GetAtt VPC.DefaultNetworkAcl PublicSubnetNetworkAclAssociation2: Type: AWS::EC2::SubnetNetworkAclAssociation UpdateReplacePolicy: Delete Properties: SubnetId: !Ref PublicSubnet2 NetworkAclId: !GetAtt VPC.DefaultNetworkAcl ELBSecurityGroup: Type: AWS::EC2::SecurityGroup UpdateReplacePolicy: Delete Properties: GroupDescription: Enable HTTP/HTTPs ingress VpcId: !Ref VPC SecurityGroupIngress: - CidrIp: 0.0.0.0/0 IpProtocol: tcp ToPort: !Ref ELBIngressPort FromPort: !Ref ELBIngressPort - CidrIp: 0.0.0.0/0 IpProtocol: tcp ToPort: !Ref ELBHttpIngressPort # ALB should redirect to HTTPS FromPort: !Ref ELBHttpIngressPort Tags: - Key: Name Value: !Sub \"${AWS::StackName}-ELBSecurityGroup\" ELBSecurityGroupToAppEgress: Type: AWS::EC2::SecurityGroupEgress # prevent security group circular references UpdateReplacePolicy: Delete Properties: GroupId: !Ref ELBSecurityGroup IpProtocol: tcp ToPort: !Ref AppIngressPort FromPort: !Ref AppIngressPort DestinationSecurityGroupId: !Ref AppSecurityGroup AppSecurityGroup: Type: AWS::EC2::SecurityGroup UpdateReplacePolicy: Delete Properties: GroupDescription: Enable access from ELB to app VpcId: !Ref VPC SecurityGroupIngress: - SourceSecurityGroupId: !Ref ELBSecurityGroup IpProtocol: tcp ToPort: !Ref AppIngressPort FromPort: !Ref AppIngressPort - SourceSecurityGroupId: !Ref BastionSecurityGroup IpProtocol: tcp ToPort: 22 FromPort: 22 #!!! New, to enable intra vpc communication ??!! - CidrIp: '0.0.0.0/0' IpProtocol: tcp ToPort: 80 FromPort: 80 Tags: - Key: Name Value: !Sub \"${AWS::StackName}-AppSecurityGroup\" AppSecurityGroupFromELBIngress: Type: AWS::EC2::SecurityGroupIngress # prevent security group circular references UpdateReplacePolicy: Delete Properties: GroupId: !Ref AppSecurityGroup IpProtocol: tcp ToPort: !Ref AppIngressPort FromPort: !Ref AppIngressPort SourceSecurityGroupId: !Ref ELBSecurityGroup AppSecurityGroupFromAppSecurityGroupIngressTcp: Type: AWS::EC2::SecurityGroupIngress UpdateReplacePolicy: Delete Properties: GroupId: !Ref AppSecurityGroup IpProtocol: tcp ToPort: 65535 FromPort: 0 SourceSecurityGroupId: !Ref AppSecurityGroup AppSecurityGroupFromAppSecurityGroupIngressUdp: Type: AWS::EC2::SecurityGroupIngress UpdateReplacePolicy: Delete Properties: GroupId: !Ref AppSecurityGroup IpProtocol: udp ToPort: 65535 FromPort: 0 SourceSecurityGroupId: !Ref AppSecurityGroup BastionSecurityGroup: Type: AWS::EC2::SecurityGroup UpdateReplacePolicy: Delete Properties: GroupDescription: Enable access to the bastion host VpcId: !Ref VPC SecurityGroupEgress: - CidrIp: 0.0.0.0/0 IpProtocol: tcp ToPort: 65535 FromPort: 0 Tags: - Key: Name Value: !Sub \"${AWS::StackName}-BastionSecurityGroup\" BastionSecurityGroupToAppEgress: Type: AWS::EC2::SecurityGroupEgress # prevent security group circular references UpdateReplacePolicy: Delete Properties: GroupId: !Ref BastionSecurityGroup IpProtocol: tcp ToPort: 22 FromPort: 22 DestinationSecurityGroupId: !Ref AppSecurityGroup ##################################################### # Database security groups, only create if required # ##################################################### DbSecurityGroup: Type: AWS::EC2::SecurityGroup UpdateReplacePolicy: Delete Condition: CreateDbSecurityGroup Properties: GroupDescription: Enable access to the RDS DB VpcId: !Ref VPC SecurityGroupEgress: - CidrIp: 0.0.0.0/0 IpProtocol: tcp ToPort: 6379 FromPort: 6379 - CidrIp: 0.0.0.0/0 IpProtocol: tcp ToPort: 5432 FromPort: 5432 Tags: - Key: Name Value: !Sub \"${AWS::StackName}-DbSecurityGroup\" DbSecurityGroupFromBastionIngressRedis: Type: AWS::EC2::SecurityGroupIngress # prevent security group circular references UpdateReplacePolicy: Delete Condition: CreateDbSecurityGroup Properties: GroupId: !Ref DbSecurityGroup IpProtocol: tcp ToPort: 6379 # Redis FromPort: 6379 SourceSecurityGroupId: !Ref BastionSecurityGroup DbSecurityGroupFromBastionIngressPostgres: Type: AWS::EC2::SecurityGroupIngress # prevent security group circular references UpdateReplacePolicy: Delete Condition: CreateDbSecurityGroup Properties: GroupId: !Ref DbSecurityGroup IpProtocol: tcp ToPort: 5432 # Postgres FromPort: 5432 SourceSecurityGroupId: !Ref BastionSecurityGroup DbSecurityGroupFromAppIngressRedis: Type: AWS::EC2::SecurityGroupIngress # prevent security group circular references UpdateReplacePolicy: Delete Condition: CreateDbSecurityGroup Properties: GroupId: !Ref DbSecurityGroup IpProtocol: tcp ToPort: 6379 FromPort: 6379 SourceSecurityGroupId: !Ref AppSecurityGroup DbSecurityGroupFromAppIngressPostgres: Type: AWS::EC2::SecurityGroupIngress # prevent security group circular references UpdateReplacePolicy: Delete Condition: CreateDbSecurityGroup Properties: GroupId: !Ref DbSecurityGroup IpProtocol: tcp ToPort: 5432 FromPort: 5432 SourceSecurityGroupId: !Ref AppSecurityGroup ################# # Admin Apps Service# ################# AdminAppsTaskDefinition: Type: AWS::ECS::TaskDefinition DependsOn: - AdminAppsLogGroup - NginxRepository - Pgadmin4Repository - PgbouncerRepository Properties: Family: !Join ['-', [!Ref AwsIamUserId, !Ref AdminAppsServiceName, TaskDefinition]] NetworkMode: awsvpc RequiresCompatibilities: - FARGATE Cpu: 256 Memory: \"0.5GB\" #512 (0.5GB), 1024 (1GB), 2048 (2GB), 3072 (3GB), 4096 (4GB) ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn TaskRoleArn: !GetAtt EcsTaskRole.Arn ContainerDefinitions: - Name: !Sub \"${AwsIamUserId}_nginx\" Image: !Sub \"${NginxRepository.RepositoryUri}:latest\" Essential: true PortMappings: - ContainerPort: !Ref AppContainerPort LogConfiguration: LogDriver: awslogs Options: awslogs-region: !Sub ${AwsRegion} awslogs-group: !Ref AdminAppsLogGroup awslogs-stream-prefix: Nginx - Name: !Sub \"${AwsIamUserId}_pgbouncer\" Image: !Sub \"${PgbouncerRepository.RepositoryUri}:latest\" PortMappings: - ContainerPort: 5432 Protocol: tcp Essential: true LogConfiguration: LogDriver: awslogs Options: awslogs-region: !Sub ${AwsRegion} awslogs-group: !Ref AdminAppsLogGroup awslogs-stream-prefix: Pgbouncer Secrets: - Name: DJANGO_ECS_SECRETS ValueFrom: !Ref DjangoSecrets - Name: AWS_ACCESS_CREDENTIALS ValueFrom: !Ref AwsAccessSecrets Environment: - Name: !Sub \"${AwsIamUserId}_pgadmin4\" Image: !Sub \"${Pgadmin4Repository.RepositoryUri}:latest\" Essential: false PortMappings: - ContainerPort: 5050 Protocol: tcp LogConfiguration: LogDriver: awslogs Options: awslogs-region: !Sub ${AwsRegion} awslogs-group: !Ref AdminAppsLogGroup awslogs-stream-prefix: Pgadmin4 Command: - \"/generate_servers_json_and_pgpass_conf_files\" Secrets: - Name: DJANGO_ECS_SECRETS ValueFrom: !Ref DjangoSecrets - Name: AWS_ACCESS_CREDENTIALS ValueFrom: !Ref AwsAccessSecrets Environment: AdminAppsService: Type: AWS::ECS::Service DependsOn: - DjangoAppHttpsListener - GeneralECSCluster Properties: ServiceName: !Ref AdminAppsServiceName Cluster: !Ref GeneralECSCluster TaskDefinition: !Ref AdminAppsTaskDefinition DeploymentConfiguration: MinimumHealthyPercent: 0 MaximumPercent: 200 DesiredCount: 1 LaunchType: FARGATE NetworkConfiguration: AwsvpcConfiguration: AssignPublicIp: ENABLED #!! Switch to DISABLED to use nat, if DISABLED uncomment the nat section above of this file Subnets: #- !Ref PrivateSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file #- !Ref PrivateSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file - !Ref PublicSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file - !Ref PublicSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file SecurityGroups: - !Ref AppSecurityGroup LoadBalancers: - ContainerName: !Sub \"${AwsIamUserId}_nginx\" ContainerPort: !Ref AppContainerPort TargetGroupArn: !Ref DjangoAppTargetGroup ServiceRegistries: - RegistryArn: !GetAtt DiscoveryService.Arn ################# # Django Service# ################# DjangoAppTaskDefinition: Type: AWS::ECS::TaskDefinition DependsOn: - DjangoAppLogGroup - DjangoCeleryRepository Properties: Family: !Join ['-', [!Ref AwsIamUserId, !Ref DjangoAppServiceName, TaskDefinition]] NetworkMode: awsvpc RequiresCompatibilities: - FARGATE Cpu: 256 Memory: \"0.5GB\" #512 (0.5GB), 1024 (1GB), 2048 (2GB), 3072 (3GB), 4096 (4GB) ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn TaskRoleArn: !GetAtt EcsTaskRole.Arn ContainerDefinitions: - Name: !Sub \"${AwsIamUserId}_django_celery\" Image: !Sub \"${DjangoCeleryRepository.RepositoryUri}:latest\" Essential: true #Cpu: 128 #Memory: 256 PortMappings: - ContainerPort: 8000 LogConfiguration: LogDriver: awslogs Options: awslogs-region: !Sub ${AwsRegion} awslogs-group: !Ref DjangoAppLogGroup awslogs-stream-prefix: DjangoAppContainer EntryPoint: - \"/entrypoint\" Command: - \"/start\" Secrets: - Name: DJANGO_ECS_SECRETS ValueFrom: !Ref DjangoSecrets - Name: AWS_ACCESS_CREDENTIALS ValueFrom: !Ref AwsAccessSecrets Environment: - Name: celery-default-worker Image: !Sub \"${DjangoCeleryRepository.RepositoryUri}:latest\" Essential: false #Cpu: 128 #MemoryReservation: 256 LogConfiguration: LogDriver: awslogs Options: awslogs-region: !Sub ${AwsRegion} awslogs-group: !Ref DjangoAppLogGroup awslogs-stream-prefix: CeleryAppContainer EntryPoint: - \"/entrypoint\" Command: - \"/start-celery-default-worker\" Secrets: - Name: DJANGO_ECS_SECRETS ValueFrom: !Ref DjangoSecrets - Name: AWS_ACCESS_CREDENTIALS ValueFrom: !Ref AwsAccessSecrets Environment: DjangoAppService: Type: AWS::ECS::Service DependsOn: #- DjangoAppHttpsListener - GeneralECSCluster Properties: ServiceName: !Ref DjangoAppServiceName Cluster: !Ref GeneralECSCluster TaskDefinition: !Ref DjangoAppTaskDefinition DeploymentConfiguration: MinimumHealthyPercent: 100 MaximumPercent: 200 DesiredCount: 1 LaunchType: FARGATE NetworkConfiguration: AwsvpcConfiguration: AssignPublicIp: ENABLED #!! Switch to DISABLED to use nat, if DISABLED uncomment the nat section above of this file Subnets: #- !Ref PrivateSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file #- !Ref PrivateSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file - !Ref PublicSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file - !Ref PublicSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file SecurityGroups: - !Ref AppSecurityGroup ServiceRegistries: - RegistryArn: !GetAtt DiscoveryService.Arn ################# # Celery Service# ################# CeleryAppTaskDefinition: Type: AWS::ECS::TaskDefinition DependsOn: - CeleryAppLogGroup - DjangoCeleryRepository Properties: Family: !Join ['-', [!Ref AwsIamUserId, !Ref CeleryAppServiceName, TaskDefinition]] NetworkMode: awsvpc RequiresCompatibilities: - FARGATE Cpu: 512 Memory: \"1GB\" #512 (0.5GB), 1024 (1GB), 2048 (2GB), 3072 (3GB), 4096 (4GB) ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn TaskRoleArn: !GetAtt EcsTaskRole.Arn ContainerDefinitions: - Name: celery-default-worker Image: !Sub \"${DjangoCeleryRepository.RepositoryUri}:latest\" LogConfiguration: LogDriver: awslogs Options: awslogs-region: !Sub ${AwsRegion} awslogs-group: !Ref CeleryAppLogGroup awslogs-stream-prefix: Celery EntryPoint: - \"/entrypoint\" Command: - \"/start-celery-default-worker\" Secrets: - Name: DJANGO_ECS_SECRETS ValueFrom: !Ref DjangoSecrets - Name: AWS_ACCESS_CREDENTIALS ValueFrom: !Ref AwsAccessSecrets Environment: - Name: celery-long-running-worker Image: !Sub \"${DjangoCeleryRepository.RepositoryUri}:latest\" LogConfiguration: LogDriver: awslogs Options: awslogs-region: !Sub ${AwsRegion} awslogs-group: !Ref CeleryAppLogGroup awslogs-stream-prefix: Celery EntryPoint: - \"/entrypoint\" Command: - \"/start-celery-long-running-worker\" Secrets: - Name: DJANGO_ECS_SECRETS ValueFrom: !Ref DjangoSecrets - Name: AWS_ACCESS_CREDENTIALS ValueFrom: !Ref AwsAccessSecrets Environment: CeleryAppService: Type: AWS::ECS::Service Properties: ServiceName: !Ref CeleryAppServiceName Cluster: !Ref GeneralECSCluster TaskDefinition: !Ref CeleryAppTaskDefinition DeploymentConfiguration: MinimumHealthyPercent: 0 MaximumPercent: 200 DesiredCount: 0 #! this scales down the service to 0 task, if you want 1 minimum task always runing change to 1 LaunchType: FARGATE NetworkConfiguration: AwsvpcConfiguration: AssignPublicIp: ENABLED #!! Switch to DISABLED to use nat, if DISABLED uncomment the nat section above of this file Subnets: #- !Ref PrivateSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file #- !Ref PrivateSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file - !Ref PublicSubnet1 #!! uncomment this to use nat, if enable uncomment the nat section above of this file - !Ref PublicSubnet2 #!! uncomment this to use nat, if enable uncomment the nat section above of this file SecurityGroups: - !Ref AppSecurityGroup ServiceRegistries: - RegistryArn: !GetAtt DiscoveryService.Arn ##################################################################################### # Service Discovery to enable communication between Django and Celery Service # ##################################################################################### # Private Namespace for Service Discovery # https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-ecs-service-discovery/ PrivateNamespace: Type: AWS::ServiceDiscovery::PrivateDnsNamespace Properties: Name: !Sub \"${AwsIamUserId}_local\" Vpc: !Ref VPC DiscoveryService: Type: AWS::ServiceDiscovery::Service Properties: Description: Discovery Service to enable communication between Django and Celery Service DnsConfig: RoutingPolicy: WEIGHTED #MULTIVALUE DnsRecords: - TTL: 60 Type: A HealthCheckCustomConfig: FailureThreshold: 1 Name: discovery-service NamespaceId: !Ref PrivateNamespace ########################### # Load balancer resources # ########################### DjangoAppLoadBalancer: Type: AWS::ElasticLoadBalancingV2::LoadBalancer Properties: LoadBalancerAttributes: - Key: 'idle_timeout.timeout_seconds' Value: 4000 - Key: 'routing.http2.enabled' Value: 'true' - Key: 'access_logs.s3.enabled' Value: 'false' Scheme: internet-facing SecurityGroups: - !Ref ELBSecurityGroup Subnets: - !Ref PublicSubnet1 - !Ref PublicSubnet2 Type: application DjangoAppHttpsListener: Type: AWS::ElasticLoadBalancingV2::Listener Properties: Certificates: - CertificateArn: !FindInMap [ appConfigs, !Ref EnvStageName, loadbalancerCertArn ] DefaultActions: - TargetGroupArn: !Ref DjangoAppTargetGroup Type: forward LoadBalancerArn: !Ref DjangoAppLoadBalancer Port: 443 Protocol: HTTPS DjangoAppHttpListener: Type: AWS::ElasticLoadBalancingV2::Listener Properties: DefaultActions: - RedirectConfig: Host: \"#{host}\" Path: \"/#{path}\" Port: 443 Protocol: \"HTTPS\" Query: \"#{query}\" StatusCode: HTTP_301 Type: redirect LoadBalancerArn: !Ref DjangoAppLoadBalancer Port: 80 Protocol: HTTP DjangoAppTargetGroup: Type: AWS::ElasticLoadBalancingV2::TargetGroup Properties: Port: !Ref AppContainerPort HealthCheckPath: '/health/' HealthCheckProtocol: HTTP HealthCheckIntervalSeconds: 90 HealthCheckTimeoutSeconds: 60 HealthyThresholdCount: 2 UnhealthyThresholdCount: 10 Matcher: HttpCode: '200,301' Protocol: HTTP TargetType: ip TargetGroupAttributes: - Key: deregistration_delay.timeout_seconds Value: 60 VpcId: !Ref VPC ```", "keywords": ["nat", "cpu", "cluster", "change"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "Django App Cloudformation YAML Stack - Nginx isn't reaching Django - Securitygroups conf without NAT", "keywords": ["nat"]}, {"source": "Body", "text": "Having no background with aws/devops and after a lot of efforts and trial/error I succeeded building the here bellow stack for my django app: The stack relies heavily on celery which consumes a lot of tasks so I migrated to sqs for cost reasons (instead of aws redis). ", "keywords": ["cost"]}, {"source": "Body", "text": "For the same reason I decided to disable the nat gateways because it costs so much and I rely only on security groups and acl for security Initially I had two services: One with nginx, Django, celery, pgadmin4, flower, and a second with Celery desired count 0 to scale up on heavy loads. ", "keywords": ["nat"]}, {"source": "Body", "text": "When celery starts working it tend to consume 100% CPU and launch a lot of process taking all the available connections of postgres, new process fail, so I added pgbouncer for connection pooling I decided to migrate to 3 services, one admin service with nginx, pgbouncer and pgadmin4, a second non scalable minimal service with django and one celery worker, and a third scalable celery service with desired count to 0 which will be launched and scaled down by an alarm on sqs queues. ", "keywords": ["cpu"]}]}