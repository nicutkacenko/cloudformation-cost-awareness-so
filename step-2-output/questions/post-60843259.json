{"Id": "60843259", "PostTypeId": "1", "AcceptedAnswerId": "60844254", "CreationDate": "2020-03-25T05:04:52.360", "Score": "8", "ViewCount": "3644", "Body": "<p>I know how to invoke lambda functions that I've named and already exist as Lambda Functions but how can I have a FunctionA invoke FunctionB that I'm defining in AWS SAM template together, and won't know the name beforehand, aka dynamically.</p>\n\n<p>Is there a way to pass the name of FunctionB as part of the SAM template before it gets created so the template would know the name of the full name of FunctionB, before creating FunctionA?</p>\n\n<p>I see a lot of questions about testing this locally only</p>\n", "OwnerUserId": "3431195", "LastActivityDate": "2020-03-26T14:51:50.943", "Title": "How can I invoke another lambda function also defined in AWS SAM template?", "Tags": "|amazon-web-services|aws-lambda|aws-cloudformation|boto3|aws-sam-cli|", "AnswerCount": "2", "CommentCount": "3", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "107647268", "PostId": "60843259", "Score": "1", "Text": "Have you tried passing its ARN or name as an environment variable?", "CreationDate": "2020-03-25T05:11:12.727", "UserId": "492773", "filtered-sentences": []}, {"Id": "107647330", "PostId": "60843259", "Score": "1", "Text": "You just reference it in the `FunctionA`? Can you paste relevant part of the template. Not sure what is the problem.", "CreationDate": "2020-03-25T05:16:35.053", "UserId": "248823", "filtered-sentences": []}, {"Id": "107648471", "PostId": "60843259", "Score": "0", "Text": "@kichik that's what I needed to do. I didn't realize the environment variable path. Thanks! If you post it as an answer, I'll mark as answer", "CreationDate": "2020-03-25T06:41:00.473", "UserId": "3431195", "filtered-sentences": []}], "history": [{"Id": "217621307", "PostHistoryTypeId": "2", "PostId": "60843259", "RevisionGUID": "bbdf4daf-e96e-4ae9-90ff-37612dcbc334", "CreationDate": "2020-03-25T05:04:52.360", "UserId": "3431195", "Text": "I know how to invoke lambda functions that I've named and already exist as Lambda Functions but how can I have a FunctionA invoke FunctionB that I'm defining in AWS SAM template together, and won't know the name beforehand, aka dynamically.\r\n\r\nIs there a way to pass the name of FunctionB as part of the SAM template before it gets created so the template would know the name of the full name of FunctionB, before creating FunctionA?\r\n\r\nI see a lot of questions about testing this locally only", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I see a lot of questions about testing this locally only", "keywords": ["test"]}]}, {"Id": "217621308", "PostHistoryTypeId": "1", "PostId": "60843259", "RevisionGUID": "bbdf4daf-e96e-4ae9-90ff-37612dcbc334", "CreationDate": "2020-03-25T05:04:52.360", "UserId": "3431195", "Text": "How can I invoke another lambda function also defined in AWS SAM template?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "217621309", "PostHistoryTypeId": "3", "PostId": "60843259", "RevisionGUID": "bbdf4daf-e96e-4ae9-90ff-37612dcbc334", "CreationDate": "2020-03-25T05:04:52.360", "UserId": "3431195", "Text": "|amazon-web-services|aws-lambda|aws-cloudformation|boto3|aws-sam-cli|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "60869992", "PostTypeId": "2", "ParentId": "60843259", "CreationDate": "2020-03-26T14:51:50.943", "Score": "14", "Body": "<p>SAM is different than CloudFormation. SAM has a shortcut. The SAM resource type <a href=\"https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#aws-serverless-function\" rel=\"noreferrer\">AWS::Serverless::Function</a> simplifies this.</p>\n\n<p>In this example SAM template, the example resource 'CallerFunction' has:</p>\n\n<ol>\n<li>A scoped policy to invoke the function 'microservice'</li>\n<li>An environment variable with the function name</li>\n</ol>\n\n<pre class=\"lang-yaml prettyprint-override\"><code>AWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: &gt;\n  A SAM template where lambda function caller invokes lambda function microservice.\n\nResources:\n  CallerFunction:\n    Type: AWS::Serverless::Function \n    Properties:\n      Description: 'A lambda that invokes the function microservice'\n      CodeUri: caller/\n      Handler: app.handler\n      Runtime: nodejs10.x\n      Policies: \n        - LambdaInvokePolicy:\n            FunctionName:\n              !Ref MicroserviceFunction\n      Environment:\n        Variables:\n          MICROSERVICE_FUNCTION: !Ref MicroserviceFunction\n  MicroserviceFunction:\n    Type: AWS::Serverless::Function \n    Properties:\n      Description: 'A microservice lambda'\n      CodeUri: microservice/\n      Handler: index.handler\n      Runtime: nodejs10.x\n      Policies: CloudWatchLogsFullAccess\n</code></pre>\n\n<p>Have fun with serverless!</p>\n", "OwnerUserId": "12939925", "LastActivityDate": "2020-03-26T14:51:50.943", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "217735788", "PostHistoryTypeId": "2", "PostId": "60869992", "RevisionGUID": "c54b29af-ca71-44e7-9e8d-5186ed139282", "CreationDate": "2020-03-26T14:51:50.943", "UserId": "12939925", "Text": "SAM is different than CloudFormation. SAM has a shortcut. The SAM resource type [AWS::Serverless::Function](https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#aws-serverless-function) simplifies this.\r\n\r\nIn this example SAM template, the example resource 'CallerFunction' has:\r\n\r\n1. A scoped policy to invoke the function 'microservice'\r\n2. An environment variable with the function name\r\n\r\n```yaml\r\nAWSTemplateFormatVersion: '2010-09-09'\r\nTransform: AWS::Serverless-2016-10-31\r\nDescription: >\r\n  A SAM template where lambda function caller invokes lambda function microservice.\r\n  \r\nResources:\r\n  CallerFunction:\r\n    Type: AWS::Serverless::Function \r\n    Properties:\r\n      Description: 'A lambda that invokes the function microservice'\r\n      CodeUri: caller/\r\n      Handler: app.handler\r\n      Runtime: nodejs10.x\r\n      Policies: \r\n        - LambdaInvokePolicy:\r\n            FunctionName:\r\n              !Ref MicroserviceFunction\r\n      Environment:\r\n        Variables:\r\n          MICROSERVICE_FUNCTION: !Ref MicroserviceFunction\r\n  MicroserviceFunction:\r\n    Type: AWS::Serverless::Function \r\n    Properties:\r\n      Description: 'A microservice lambda'\r\n      CodeUri: microservice/\r\n      Handler: index.handler\r\n      Runtime: nodejs10.x\r\n      Policies: CloudWatchLogsFullAccess\r\n```\r\n\r\nHave fun with serverless!", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "A scoped policy to invoke the function 'microservice' 2. ", "keywords": ["policy"]}]}], "filtered-sentences": [{"source": "Body", "text": "In this example SAM template, the example resource 'CallerFunction' has: A scoped policy to invoke the function 'microservice' ", "keywords": ["policy"]}]}, {"Id": "60844254", "PostTypeId": "2", "ParentId": "60843259", "CreationDate": "2020-03-25T07:05:58.993", "Score": "4", "Body": "<p>You can pass the other function's name or ARN as an environment variable. For example:</p>\n\n<pre><code>Resources:\n  FunctionA:\n    Type: AWS::Lambda::Function\n    Properties:\n      Handler: index.handler\n      Runtime: python3.6\n      Role: !Sub ${FunctionRole.Arn}\n      Environment:\n        Variables:\n          # pass FunctionB ARN as environment variable\n          FUNCTION_B_ARN: !Sub ${FunctionB.Arn}\n      Code:\n        ZipFile: |\n          import os\n          def handler(event, context):\n            # use environment variable\n            print(os.getenv(\"FUNCTION_B_ARN\"))\n  FunctionB:\n    Type: AWS::Lambda::Function\n    Properties:\n      Handler: index.handler\n      Runtime: python3.6\n      Role: !Sub ${FunctionRole.Arn}\n      Code:\n        ZipFile: |\n          def handler(event, context):\n            print(\"hello world\")\n  FunctionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n        Version: '2012-10-17'\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n</code></pre>\n", "OwnerUserId": "492773", "LastActivityDate": "2020-03-25T07:05:58.993", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "107650048", "PostId": "60844254", "Score": "1", "Text": "+1. As a side note one can also reference it in the FunctionB code block: `${FunctionB.Arn}` when you use `!Sub | ` in `ZipFile`.", "CreationDate": "2020-03-25T08:05:05.793", "UserId": "248823", "filtered-sentences": []}, {"Id": "107666269", "PostId": "60844254", "Score": "0", "Text": "I used !GetAtt instead of !Sub - not sure if one is more efficient", "CreationDate": "2020-03-25T17:04:34.983", "UserId": "3431195", "filtered-sentences": [{"source": "Text", "text": "I used !GetAtt instead of !Sub - not sure if one is more efficient", "keywords": ["efficient"]}]}], "history": [{"Id": "217625402", "PostHistoryTypeId": "2", "PostId": "60844254", "RevisionGUID": "c0aae90d-bce8-4efb-92c2-ad70fe9cc11e", "CreationDate": "2020-03-25T07:05:58.993", "UserId": "492773", "Text": "You can pass the other function's name or ARN as an environment variable. For example:\r\n\r\n    Resources:\r\n      FunctionA:\r\n        Type: AWS::Lambda::Function\r\n        Properties:\r\n          Handler: index.handler\r\n          Runtime: python3.6\r\n          Role: !Sub ${FunctionRole.Arn}\r\n          Environment:\r\n            Variables:\r\n              # pass FunctionB ARN as environment variable\r\n              FUNCTION_B_ARN: !Sub ${FunctionB.Arn}\r\n          Code:\r\n            ZipFile: |\r\n              import os\r\n              def handler(event, context):\r\n                # use environment variable\r\n                print(os.getenv(\"FUNCTION_B_ARN\"))\r\n      FunctionB:\r\n        Type: AWS::Lambda::Function\r\n        Properties:\r\n          Handler: index.handler\r\n          Runtime: python3.6\r\n          Role: !Sub ${FunctionRole.Arn}\r\n          Code:\r\n            ZipFile: |\r\n              def handler(event, context):\r\n                print(\"hello world\")\r\n      FunctionRole:\r\n        Type: AWS::IAM::Role\r\n        Properties:\r\n          AssumeRolePolicyDocument:\r\n            Statement:\r\n              - Action:\r\n                  - sts:AssumeRole\r\n                Effect: Allow\r\n                Principal:\r\n                  Service:\r\n                    - lambda.amazonaws.com\r\n            Version: '2012-10-17'\r\n          ManagedPolicyArns:\r\n            - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You can pass the other function's name or ARN as an environment variable. For example: Resources: FunctionA: Type: AWS::Lambda::Function Properties: Handler: index.handler Runtime: python3.6 Role: !Sub ${FunctionRole.Arn} Environment: Variables: # pass FunctionB ARN as environment variable FUNCTION_B_ARN: !Sub ${FunctionB.Arn} Code: ZipFile: | import os def handler(event, context): # use environment variable print(os.getenv(\"FUNCTION_B_ARN\")) FunctionB: Type: AWS::Lambda::Function Properties: Handler: index.handler Runtime: python3.6 Role: !Sub ${FunctionRole.Arn} Code: ZipFile: | def handler(event, context): print(\"hello world\") FunctionRole: Type: AWS::IAM::Role Properties: AssumeRolePolicyDocument: Statement: - Action: - sts:AssumeRole Effect: Allow Principal: Service: - lambda.amazonaws.com Version: '2012-10-17' ManagedPolicyArns: - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole", "keywords": ["policy"]}]}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I see a lot of questions about testing this locally only", "keywords": ["test"]}]}