{"Id": "63122211", "PostTypeId": "1", "CreationDate": "2020-07-27T19:27:26.793", "Score": "1", "ViewCount": "86", "Body": "<p>I'm currently running a CloudFormation stack with a number of elements to process video, including a call to Rekognition. I have most of it working but have a question about properly storing information as I go... so I can, in the end, write the Rekognition data for a video to a DynamoDB table.</p>\n<p>Below I have the relevant parts of the stack, which are mostly inside of a Step Function passing this input event along:</p>\n<p>sample_event = {\n&quot;guid&quot;: &quot;1234&quot;,\n&quot;video&quot;: &quot;video.mp4&quot;,\n&quot;bucket&quot;: &quot;my-bucket&quot;\n}</p>\n<p><strong>Current setup:</strong></p>\n<ol>\n<li>Write sample_event to a DynamoDB Table, by primary key 'guid', pass that sample_event along to the next step.</li>\n<li>Rekgonition-Trigger Lambda: Lambda function that runs start_label_detection() on 'video.mp4' in 'my-bucket', sets notification channel as an SNS topic.</li>\n<li>Rekognition-Collect Lambda: Lambda function (sits outside the Step Function) that is triggered by the SNS topic (several minutes later, for example), collects the JobID from the SNS, runs get_label_detection() at the JobID.</li>\n</ol>\n<p>The above is working fine. <strong>I want to add step 4:</strong></p>\n<ol start=\"4\">\n<li>Write rekognition response to my DyanmoDB table, for the entry at &quot;guid&quot; = &quot;1234&quot;, so my dynamo item is updated to</li>\n</ol>\n<p>{ &quot;guid&quot;: &quot;1234&quot;, &quot;video&quot;: &quot;video.mp4&quot;, &quot;bucket&quot;: &quot;my-bucket&quot;, &quot;rek_data&quot;: &quot;{&quot;Labels&quot;: [...]}&quot; }</p>\n<p>So it seems to me that I essentially can't pass any other data through Rekognition other than the SNS topic. Also seems that in the second lambda, I shouldn't be querying by a non-primary key such as the JobID.</p>\n<p>Is there a way to set up the second lambda function so that it is triggered by two (and only the correct two) SNS topics? Such as one to send the 'guid' and one to send the Rekognition data?</p>\n<p>Or would it be efficient to use two Dynamo tables, one to temporarily store the JobID and guid for later referencing? Or a better way to do all of this?</p>\n<p>Thanks!</p>\n", "OwnerUserId": "10392062", "LastEditorUserId": "10392062", "LastEditDate": "2020-07-27T19:34:46.720", "LastActivityDate": "2020-07-27T19:34:46.720", "Title": "Triggering a Lambda function with multiple required sources", "Tags": "|amazon-web-services|aws-lambda|aws-cloudformation|amazon-sns|amazon-rekognition|", "AnswerCount": "0", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "227552839", "PostHistoryTypeId": "2", "PostId": "63122211", "RevisionGUID": "78c43487-2343-437a-899b-a2447fb9fca1", "CreationDate": "2020-07-27T19:27:26.793", "UserId": "10392062", "Text": "I'm currently running a CloudFormation stack with a number of elements to process video, including a call to Rekognition. I have most of it working but have a question about properly storing information as I go... so I can, in the end, write the Rekognition data for a video to a DynamoDB table. \r\n\r\nBelow I have the relevant parts of the stack, which are mostly inside of a Step Function passing this input event along:\r\n\r\nsample_event = {\r\n\"guid\": \"1234\",\r\n\"video\": \"video.mp4\",\r\n\"bucket\": \"my-bucket\"\r\n}\r\n\r\n**Current setup:** \r\n1. Write sample_event to a DynamoDB Table, by primary key 'guid', pass that sample_event along to the next step. \r\n2. Rekgonition-Trigger Lambda: Lambda function that runs start_label_detection() on 'video.mp4' in 'my-bucket', sets notification channel as an SNS topic. \r\n3. Rekognition-Collect Lambda: Lambda function (sits outside the Step Function) that is triggered by the SNS topic (several minutes later, for example), collects the JobID from the SNS, runs get_label_detection() at the JobID. \r\n\r\nThe above is working fine. **I want to add step 4:**\r\n\r\n4. Write rekognition response to my DyanmoDB table, for the entry at \"guid\" = \"1234\", so my dynamo item is updated to \r\n\r\n{ \"guid\": \"1234\", \"video\": \"video.mp4\", \"bucket\": \"my-bucket\", \"rek_data\": \"{\"Labels\": [...]}\" }\r\n\r\nSo it seems to me that I essentially can't pass any other data through Rekognition other than the SNS topic. Also seems that in the second lambda, I shouldn't be querying by a non-primary key such as the JobID. \r\n\r\nIs there a way to set up the second lambda function so that it is triggered by two (and only the correct two) SNS topics? Such as one to send the 'guid' and one to send the Rekognition data? \r\n\r\nOr would it be efficient to use two Dynamo tables, one to temporarily store the JobID and guid for later referencing? Or a better way to do all of this? \r\n\r\nThanks!", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Or would it be efficient to use two Dynamo tables, one to temporarily store the JobID and guid for later referencing? ", "keywords": ["efficient"]}]}, {"Id": "227552840", "PostHistoryTypeId": "1", "PostId": "63122211", "RevisionGUID": "78c43487-2343-437a-899b-a2447fb9fca1", "CreationDate": "2020-07-27T19:27:26.793", "UserId": "10392062", "Text": "Triggering a Lambda function with multiple required sources", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "227552841", "PostHistoryTypeId": "3", "PostId": "63122211", "RevisionGUID": "78c43487-2343-437a-899b-a2447fb9fca1", "CreationDate": "2020-07-27T19:27:26.793", "UserId": "10392062", "Text": "|amazon-web-services|aws-lambda|amazon-sns|amazon-rekognition|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "227553211", "PostHistoryTypeId": "6", "PostId": "63122211", "RevisionGUID": "fdffede6-f795-4ec3-af0e-ccfa9f9a4b33", "CreationDate": "2020-07-27T19:34:46.720", "UserId": "10392062", "Comment": "edited tags", "Text": "|amazon-web-services|aws-lambda|aws-cloudformation|amazon-sns|amazon-rekognition|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "contains-topic": false, "filtered-sentences": [{"source": "Body", "text": "Or would it be efficient to use two Dynamo tables, one to temporarily store the JobID and guid for later referencing? ", "keywords": ["efficient"]}]}