{"Id": "51341699", "PostTypeId": "1", "AcceptedAnswerId": "51427807", "CreationDate": "2018-07-14T17:19:51.267", "Score": "4", "ViewCount": "2743", "Body": "<p>I have an AWS CodePipeline defined in a CloudFormation template.</p>\n\n<p>One of the steps of the pipeline is a CloudFormation action that builds a test environment for my application. The URL of the app's Elastic Load Balancer is one of the outputs defined in this template.</p>\n\n<p>How do I access this output, so that I can use it in the next step, which is a CodeBuild action that will run api tests against the test environment?</p>\n\n<p>I can specify an <code>OutputFileName</code> in the CloudFormation Deploy step, but the CodeBuild step would then need 2 input artifacts, the test code and the CloudFormation output file, and there is a maximum of 1 input artifact.</p>\n\n<p>I thought that I could have a step that pushes the CloudFormation output file to S3, so that the api test step can then access it (or simply push it to S3 as part of the CloudFormation::Init code), but I am hoping for something more simple that I could configure in the CodePipeline steps (similar to !ImportValue in CloudFormation).</p>\n\n<p>I also thought that I could assign a 'test url' e.g. <a href=\"http://test.myapp.com\" rel=\"nofollow noreferrer\">http://test.myapp.com</a>, in the CloudFormation step so that the api tests are always run against that specific url, which would be a great option, except that I am spinning up the test environment dynamically just before the tests (because I don't want the cost of it always running), and I'm not sure that the DNS will have propagated by the time the api tests start running.</p>\n\n<p>Thanks in advance</p>\n\n<p><em>Definition of CodePipeline CloudFormation action that spins up test environment</em></p>\n\n<pre><code>...\nName: DeployApplicationInfra\nActionTypeId:\n  Category: Deploy\n  Owner: AWS\n  Version: 1\n  Provider: CloudFormation\nConfiguration:\n  ActionMode: CREATE_UPDATE\n  Capabilities: CAPABILITY_IAM\n  OutputFileName: test-application-infra-stack.outputs.json\n  StackName: test-application-infra-stack\n  RoleArn: !Ref CloudFormationServiceRoleArn\n  TemplateConfiguration: AppInfraCfnTemplate::test-application-infra.config.json\n  TemplatePath: AppInfraCfnTemplate::application-infra.yml\nInputArtifacts:\n  - Name: AppInfraCfnTemplate\nOutputArtifacts:\n  -  Name: TestApplicationInfraStackOutputs\n</code></pre>\n\n<p><em>Definition of CodePipeline CodeBuild action to run api tests</em></p>\n\n<pre><code>...\nName: RunApiTests\nActionTypeId:\n  Category: Test\n  Owner: AWS\n  Version: 1\n  Provider: CodeBuild\nConfiguration:\n  ProjectName: !Ref ApiTestsBuildProject\nInputArtifacts:\n  - Name: AppSource\n\n...\nApiTestsBuildProject:\n  Type: AWS::CodeBuild::Project\n  Properties:\n    Name: companyinsight-api-tests-build\n    Artifacts:\n      Type: CODEPIPELINE\n    Environment:\n      ComputeType: BUILD_GENERAL1_SMALL\n      Image: aws/codebuild/nodejs:8.11.0\n      Type: LINUX_CONTAINER\n    ServiceRole: !Ref CIServerBuildRoleArn\n    Source:\n      Type: CODEPIPELINE\n      BuildSpec: !Sub |\n        version: 0.2\n        env:\n          variables:\n            BASE_URL: &lt;Want to inject test app url here!!!&gt;\n        phases:\n          install:\n            commands:\n              - npm install\n          build:\n            commands:\n              - npm run api-test\n</code></pre>\n", "OwnerUserId": "2106959", "LastEditorUserId": "2106959", "LastEditDate": "2018-07-14T17:53:19.527", "LastActivityDate": "2019-03-09T01:18:23.677", "Title": "AWS CodePipeline: How to pass output from CloudFormation action to a CodeBuild action", "Tags": "|amazon-web-services|aws-cloudformation|aws-codepipeline|", "AnswerCount": "2", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "98785371", "PostId": "51341699", "Score": "0", "Text": "Possible duplicate of [AWS CodePipeline: Get CloudFormation outputs in CodeBuild](https://stackoverflow.com/questions/51983901/aws-codepipeline-get-cloudformation-outputs-in-codebuild)", "CreationDate": "2019-05-10T08:10:21.450", "UserId": "4868108", "filtered-sentences": []}], "history": [{"Id": "177656433", "PostHistoryTypeId": "5", "PostId": "51341699", "RevisionGUID": "0b4e85fb-1e0d-411e-970a-3dacad374f64", "CreationDate": "2018-07-14T17:53:19.527", "UserId": "2106959", "Comment": "added 1872 characters in body", "Text": "I have an AWS CodePipeline defined in a CloudFormation template.\r\n\r\nOne of the steps of the pipeline is a CloudFormation action that builds a test environment for my application. The URL of the app's Elastic Load Balancer is one of the outputs defined in this template.\r\n\r\nHow do I access this output, so that I can use it in the next step, which is a CodeBuild action that will run api tests against the test environment?\r\n\r\nI can specify an `OutputFileName` in the CloudFormation Deploy step, but the CodeBuild step would then need 2 input artifacts, the test code and the CloudFormation output file, and there is a maximum of 1 input artifact.\r\n\r\nI thought that I could have a step that pushes the CloudFormation output file to S3, so that the api test step can then access it (or simply push it to S3 as part of the CloudFormation::Init code), but I am hoping for something more simple that I could configure in the CodePipeline steps (similar to !ImportValue in CloudFormation).\r\n\r\nI also thought that I could assign a 'test url' e.g. http://test.myapp.com, in the CloudFormation step so that the api tests are always run against that specific url, which would be a great option, except that I am spinning up the test environment dynamically just before the tests (because I don't want the cost of it always running), and I'm not sure that the DNS will have propagated by the time the api tests start running.\r\n\r\nThanks in advance\r\n\r\n*Definition of CodePipeline CloudFormation action that spins up test environment*\r\n\r\n    ...\r\n    Name: DeployApplicationInfra\r\n    ActionTypeId:\r\n      Category: Deploy\r\n      Owner: AWS\r\n      Version: 1\r\n      Provider: CloudFormation\r\n    Configuration:\r\n      ActionMode: CREATE_UPDATE\r\n      Capabilities: CAPABILITY_IAM\r\n      OutputFileName: test-application-infra-stack.outputs.json\r\n      StackName: test-application-infra-stack\r\n      RoleArn: !Ref CloudFormationServiceRoleArn\r\n      TemplateConfiguration: AppInfraCfnTemplate::test-application-infra.config.json\r\n      TemplatePath: AppInfraCfnTemplate::application-infra.yml\r\n    InputArtifacts:\r\n      - Name: AppInfraCfnTemplate\r\n    OutputArtifacts:\r\n      -  Name: TestApplicationInfraStackOutputs\r\n\r\n*Definition of CodePipeline CodeBuild action to run api tests*\r\n\r\n    ...\r\n    Name: RunApiTests\r\n    ActionTypeId:\r\n      Category: Test\r\n      Owner: AWS\r\n      Version: 1\r\n      Provider: CodeBuild\r\n    Configuration:\r\n      ProjectName: !Ref ApiTestsBuildProject\r\n    InputArtifacts:\r\n      - Name: AppSource\r\n    \r\n    ...\r\n    ApiTestsBuildProject:\r\n      Type: AWS::CodeBuild::Project\r\n      Properties:\r\n        Name: companyinsight-api-tests-build\r\n        Artifacts:\r\n          Type: CODEPIPELINE\r\n        Environment:\r\n          ComputeType: BUILD_GENERAL1_SMALL\r\n          Image: aws/codebuild/nodejs:8.11.0\r\n          Type: LINUX_CONTAINER\r\n        ServiceRole: !Ref CIServerBuildRoleArn\r\n        Source:\r\n          Type: CODEPIPELINE\r\n          BuildSpec: !Sub |\r\n            version: 0.2\r\n            env:\r\n              variables:\r\n                BASE_URL: <Want to inject test app url here!!!>\r\n            phases:\r\n              install:\r\n                commands:\r\n                  - npm install\r\n              build:\r\n                commands:\r\n                  - npm run api-test\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "One of the steps of the pipeline is a CloudFormation action that builds a test environment for my application. ", "keywords": ["test"]}, {"source": "Text", "text": "How do I access this output, so that I can use it in the next step, which is a CodeBuild action that will run api tests against the test environment? ", "keywords": ["test"]}, {"source": "Text", "text": "I can specify an `OutputFileName` in the CloudFormation Deploy step, but the CodeBuild step would then need 2 input artifacts, the test code and the CloudFormation output file, and there is a maximum of 1 input artifact. ", "keywords": ["test"]}, {"source": "Text", "text": "I thought that I could have a step that pushes the CloudFormation output file to S3, so that the api test step can then access it (or simply push it to S3 as part of the CloudFormation::Init code), but I am hoping for something more simple that I could configure in the CodePipeline steps (similar to !ImportValue in CloudFormation). ", "keywords": ["test"]}, {"source": "Text", "text": "I also thought that I could assign a 'test url' e.g. http://test.myapp.com, in the CloudFormation step so that the api tests are always run against that specific url, which would be a great option, except that I am spinning up the test environment dynamically just before the tests (because I don't want the cost of it always running), and I'm not sure that the DNS will have propagated by the time the api tests start running. ", "keywords": ["cost", "test"]}, {"source": "Text", "text": "Thanks in advance *Definition of CodePipeline CloudFormation action that spins up test environment* ... ", "keywords": ["test"]}, {"source": "Text", "text": "Name: DeployApplicationInfra ActionTypeId: Category: Deploy Owner: AWS Version: 1 Provider: CloudFormation Configuration: ActionMode: CREATE_UPDATE Capabilities: CAPABILITY_IAM OutputFileName: test-application-infra-stack.outputs.json StackName: test-application-infra-stack RoleArn: !Ref CloudFormationServiceRoleArn TemplateConfiguration: AppInfraCfnTemplate::test-application-infra.config.json TemplatePath: AppInfraCfnTemplate::application-infra.yml InputArtifacts: - Name: AppInfraCfnTemplate OutputArtifacts: - Name: TestApplicationInfraStackOutputs *Definition of CodePipeline CodeBuild action to run api tests* ... Name: RunApiTests ActionTypeId: Category: Test Owner: AWS Version: 1 Provider: CodeBuild Configuration: ProjectName: !Ref ApiTestsBuildProject InputArtifacts: - Name: AppSource ... ApiTestsBuildProject: Type: AWS::CodeBuild::Project Properties: Name: companyinsight-api-tests-build Artifacts: Type: CODEPIPELINE Environment: ComputeType: BUILD_GENERAL1_SMALL Image: aws/codebuild/nodejs:8.11.0 Type: LINUX_CONTAINER ServiceRole: !Ref CIServerBuildRoleArn Source: Type: CODEPIPELINE BuildSpec: !Sub | version: 0.2 env: variables: BASE_URL: phases: install: commands: - npm install build: commands: - npm run api-test", "keywords": ["provider", "test"]}]}, {"Id": "177655184", "PostHistoryTypeId": "2", "PostId": "51341699", "RevisionGUID": "dd22143e-99a0-4854-9072-97d759cf4c2a", "CreationDate": "2018-07-14T17:19:51.267", "UserId": "2106959", "Text": "I have an AWS CodePipeline defined in a CloudFormation template.\r\n\r\nOne of the steps of the pipeline is a CloudFormation action that builds a test environment for my application. The URL of the app's Elastic Load Balancer is one of the outputs defined in this template.\r\n\r\nHow do I access this output, so that I can use it in the next step, which is a CodeBuild action that will run api tests against the test environment?\r\n\r\nI can specify an `OutputFileName` in the CloudFormation Deploy step, but the CodeBuild step would then need 2 input artifacts, the test code and the CloudFormation output file, and there is a maximum of 1 input artifact.\r\n\r\nI thought that I could have a step that pushes the CloudFormation output file to S3, so that the api test step can then access it (or simply push it to S3 as part of the CloudFormation::Init code), but I am hoping for something more simple that I could configure in the CodePipeline steps (similar to !ImportValue in CloudFormation).\r\n\r\nI also thought that I could assign a 'test url' e.g. http://test.myapp.com, in the CloudFormation step so that the api tests are always run against that specific url, which would be a great option, except that I am spinning up the test environment dynamically just before the tests (because I don't want the cost of it always running), and I'm not sure that the DNS will have propagated by the time the api tests start running.\r\n\r\nThanks in advance\r\n\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "One of the steps of the pipeline is a CloudFormation action that builds a test environment for my application. ", "keywords": ["test"]}, {"source": "Text", "text": "How do I access this output, so that I can use it in the next step, which is a CodeBuild action that will run api tests against the test environment? ", "keywords": ["test"]}, {"source": "Text", "text": "I can specify an `OutputFileName` in the CloudFormation Deploy step, but the CodeBuild step would then need 2 input artifacts, the test code and the CloudFormation output file, and there is a maximum of 1 input artifact. ", "keywords": ["test"]}, {"source": "Text", "text": "I thought that I could have a step that pushes the CloudFormation output file to S3, so that the api test step can then access it (or simply push it to S3 as part of the CloudFormation::Init code), but I am hoping for something more simple that I could configure in the CodePipeline steps (similar to !ImportValue in CloudFormation). ", "keywords": ["test"]}, {"source": "Text", "text": "I also thought that I could assign a 'test url' e.g. http://test.myapp.com, in the CloudFormation step so that the api tests are always run against that specific url, which would be a great option, except that I am spinning up the test environment dynamically just before the tests (because I don't want the cost of it always running), and I'm not sure that the DNS will have propagated by the time the api tests start running. ", "keywords": ["cost", "test"]}]}, {"Id": "177655185", "PostHistoryTypeId": "1", "PostId": "51341699", "RevisionGUID": "dd22143e-99a0-4854-9072-97d759cf4c2a", "CreationDate": "2018-07-14T17:19:51.267", "UserId": "2106959", "Text": "AWS CodePipeline: How to pass output from CloudFormation action to a CodeBuild action", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "177655186", "PostHistoryTypeId": "3", "PostId": "51341699", "RevisionGUID": "dd22143e-99a0-4854-9072-97d759cf4c2a", "CreationDate": "2018-07-14T17:19:51.267", "UserId": "2106959", "Text": "|amazon-web-services|aws-cloudformation|aws-codepipeline|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "55073066", "PostTypeId": "2", "ParentId": "51341699", "CreationDate": "2019-03-09T01:18:23.677", "Score": "5", "Body": "<p>Check this update from AWS <a href=\"https://aws.amazon.com/about-aws/whats-new/2018/08/aws-codebuild-adds-ability-to-create-build-projects-with-multiple-input-sources-and-output-artifacts/\" rel=\"noreferrer\">https://aws.amazon.com/about-aws/whats-new/2018/08/aws-codebuild-adds-ability-to-create-build-projects-with-multiple-input-sources-and-output-artifacts/</a>\nSeems like you can do t now.</p>\n", "OwnerUserId": "3011363", "LastActivityDate": "2019-03-09T01:18:23.677", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "193234905", "PostHistoryTypeId": "2", "PostId": "55073066", "RevisionGUID": "9e975369-b30e-4947-a5ef-71d9e7250a28", "CreationDate": "2019-03-09T01:18:23.677", "UserId": "3011363", "Text": "Check this update from AWS https://aws.amazon.com/about-aws/whats-new/2018/08/aws-codebuild-adds-ability-to-create-build-projects-with-multiple-input-sources-and-output-artifacts/\r\nSeems like you can do t now.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "51427807", "PostTypeId": "2", "ParentId": "51341699", "CreationDate": "2018-07-19T16:34:00.617", "Score": "1", "Body": "<p>Unfortunately there's no workaround to allow 2 input artifacts for CodeBuild from CodePipeline currently.</p>\n\n<p>The alternative I'd recommend for now is to call <a href=\"https://docs.aws.amazon.com/cli/latest/reference/cloudformation/describe-stacks.html\" rel=\"nofollow noreferrer\">aws cloudformation describe-stacks</a> from the CLI in your build process and pull the ELB hostname from your stack outputs.</p>\n", "OwnerUserId": "7433105", "LastActivityDate": "2018-07-19T16:34:00.617", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "178007848", "PostHistoryTypeId": "2", "PostId": "51427807", "RevisionGUID": "023e5403-a705-45cc-b483-1506c134c96f", "CreationDate": "2018-07-19T16:34:00.617", "UserId": "7433105", "Text": "Unfortunately there's no workaround to allow 2 input artifacts for CodeBuild from CodePipeline currently.\r\n\r\nThe alternative I'd recommend for now is to call [aws cloudformation describe-stacks][1] from the CLI in your build process and pull the ELB hostname from your stack outputs.\r\n\r\n\r\n  [1]: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/describe-stacks.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "One of the steps of the pipeline is a CloudFormation action that builds a test environment for my application. ", "keywords": ["test"]}, {"source": "Body", "text": "How do I access this output, so that I can use it in the next step, which is a CodeBuild action that will run api tests against the test environment? ", "keywords": ["test"]}, {"source": "Body", "text": "I can specify an OutputFileName in the CloudFormation Deploy step, but the CodeBuild step would then need 2 input artifacts, the test code and the CloudFormation output file, and there is a maximum of 1 input artifact. ", "keywords": ["test"]}, {"source": "Body", "text": "I thought that I could have a step that pushes the CloudFormation output file to S3, so that the api test step can then access it (or simply push it to S3 as part of the CloudFormation::Init code), but I am hoping for something more simple that I could configure in the CodePipeline steps (similar to !ImportValue in CloudFormation). ", "keywords": ["test"]}, {"source": "Body", "text": "I also thought that I could assign a 'test url' e.g. http://test.myapp.com, in the CloudFormation step so that the api tests are always run against that specific url, which would be a great option, except that I am spinning up the test environment dynamically just before the tests (because I don't want the cost of it always running), and I'm not sure that the DNS will have propagated by the time the api tests start running. ", "keywords": ["cost", "test"]}, {"source": "Body", "text": "Thanks in advance Definition of CodePipeline CloudFormation action that spins up test environment Definition of CodePipeline CodeBuild action to run api tests", "keywords": ["test"]}]}