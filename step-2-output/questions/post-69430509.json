{"Id": "69430509", "PostTypeId": "1", "CreationDate": "2021-10-04T03:05:11.507", "Score": "1", "ViewCount": "1220", "Body": "<p>When creating an AWS Batch Compute Environment, you are given the option to specify the EC2 instances types that can be launched. The <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-computeenvironment-computeresources.html#cfn-batch-computeenvironment-computeresources-instancetypes\" rel=\"nofollow noreferrer\">CloudFormation docs for <code>InstanceTypes</code></a> say:</p>\n<blockquote>\n<p>You can specify instance families to launch any instance type within those families (for example, c5 or p3), or you can specify specific sizes within a family (such as c5.8xlarge). You can also choose optimal to select instance types (from the C4, M4, and R4 instance families) that match the demand of your job queues.</p>\n</blockquote>\n<blockquote>\n<p>Currently, optimal uses instance types from the C4, M4, and R4 instance families. In Regions that don't have instance types from those instance families, instance types from the C5, M5. and R5 instance families are used.</p>\n</blockquote>\n<p>So it seems that <code>optimal</code> is a special option that by default is equivalent to <code>[C4, M4, R4]</code>. My question is, why is this considered so optimal that there is a special option for it? The quote above says that using optimal will choose instances that &quot;match the demand of your job queues&quot;, but this is true of any instance types. Batch will always select the best fitting instance type according to the <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-computeenvironment-computeresources.html#cfn-batch-computeenvironment-computeresources-allocationstrategy\" rel=\"nofollow noreferrer\"><code>AllocationStrategy</code></a>.</p>\n<p>So, is there any particular reason to use <code>optimal</code> instead of just choosing the instances types you want, or even selecting all instance classes supported by AWS?</p>\n<p>Also, does it make sense to mix <code>optimal</code> with another instance class? For example, I want <code>R5</code> to be included in my compute environment, does it make sense to use:</p>\n<pre class=\"lang-yaml prettyprint-override\"><code>InstanceTypes:\n  - optimal\n  - R5\n</code></pre>\n", "OwnerUserId": "2148718", "LastActivityDate": "2021-10-05T21:23:38.843", "Title": "What is so \"optimal\" about `InstanceTypes: optimal` in AWS Batch?", "Tags": "|amazon-web-services|aws-cloudformation|aws-batch|", "AnswerCount": "1", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "129720368", "PostId": "69430509", "Score": "0", "Text": "I suspect it is out of date. and it was optimal a couple of years ago.  In particular 4 family seems to have over 20% spot interruption vs < 5%", "CreationDate": "2022-08-23T09:37:05.030", "UserId": "1651150", "filtered-sentences": []}], "history": [{"Id": "255055833", "PostHistoryTypeId": "2", "PostId": "69430509", "RevisionGUID": "00ffb5d6-d890-4b69-8be8-2527071b03d5", "CreationDate": "2021-10-04T03:05:11.507", "UserId": "2148718", "Text": "When creating an AWS Batch Compute Environment, you are given the option to specify the EC2 instances types that can be launched. The [CloudFormation docs for `InstanceTypes`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-computeenvironment-computeresources.html#cfn-batch-computeenvironment-computeresources-instancetypes) say:\r\n\r\n> You can specify instance families to launch any instance type within those families (for example, c5 or p3), or you can specify specific sizes within a family (such as c5.8xlarge). You can also choose optimal to select instance types (from the C4, M4, and R4 instance families) that match the demand of your job queues.\r\n\r\n> Currently, optimal uses instance types from the C4, M4, and R4 instance families. In Regions that don't have instance types from those instance families, instance types from the C5, M5. and R5 instance families are used.\r\n\r\nSo it seems that `optimal` is a special option that by default is equivalent to `[C4, M4, R4]`. My question is, why is this considered so optimal that there is a special option for it? The quote above says that using optimal will choose instances that \"match the demand of your job queues\", but this is true of any instance types. Batch will always select the best fitting instance type according to the [`AllocationStrategy`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-computeenvironment-computeresources.html#cfn-batch-computeenvironment-computeresources-allocationstrategy).\r\n\r\nSo, is there any particular reason to use `optimal` instead of just choosing the instances types you want, or even selecting all instance classes supported by AWS?\r\n\r\nAlso, does it make sense to mix `optimal` with another instance class? For example, I want `R5` to be included in my compute environment, does it make sense to use:\r\n```yaml\r\nInstanceTypes:\r\n  - optimal\r\n  - R5\r\n```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The [CloudFormation docs for `InstanceTypes`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-computeenvironment-computeresources.html#cfn-batch-computeenvironment-computeresources-instancetypes) say: > You can specify instance families to launch any instance type within those families (for example, c5 or p3), or you can specify specific sizes within a family (such as c5.8xlarge). ", "keywords": ["instance"]}, {"source": "Text", "text": "You can also choose optimal to select instance types (from the C4, M4, and R4 instance families) that match the demand of your job queues. ", "keywords": ["instance"]}, {"source": "Text", "text": "> Currently, optimal uses instance types from the C4, M4, and R4 instance families. ", "keywords": ["instance"]}, {"source": "Text", "text": "In Regions that don't have instance types from those instance families, instance types from the C5, M5. and R5 instance families are used. ", "keywords": ["instance"]}, {"source": "Text", "text": "The quote above says that using optimal will choose instances that \"match the demand of your job queues\", but this is true of any instance types. ", "keywords": ["instance"]}, {"source": "Text", "text": "Batch will always select the best fitting instance type according to the [`AllocationStrategy`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-batch-computeenvironment-computeresources.html#cfn-batch-computeenvironment-computeresources-allocationstrategy). ", "keywords": ["instance"]}, {"source": "Text", "text": "So, is there any particular reason to use `optimal` instead of just choosing the instances types you want, or even selecting all instance classes supported by AWS? ", "keywords": ["instance"]}, {"source": "Text", "text": "Also, does it make sense to mix `optimal` with another instance class? ", "keywords": ["instance"]}]}, {"Id": "255055835", "PostHistoryTypeId": "1", "PostId": "69430509", "RevisionGUID": "00ffb5d6-d890-4b69-8be8-2527071b03d5", "CreationDate": "2021-10-04T03:05:11.507", "UserId": "2148718", "Text": "What is so \"optimal\" about `InstanceTypes: optimal` in AWS Batch?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "255055836", "PostHistoryTypeId": "3", "PostId": "69430509", "RevisionGUID": "00ffb5d6-d890-4b69-8be8-2527071b03d5", "CreationDate": "2021-10-04T03:05:11.507", "UserId": "2148718", "Text": "|amazon-web-services|aws-cloudformation|aws-batch|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "69457414", "PostTypeId": "2", "ParentId": "69430509", "CreationDate": "2021-10-05T21:23:38.843", "Score": "2", "Body": "<p>I can think of two reasons why <code>C4, M4, R4</code> would be considered as &quot;optimal&quot;:</p>\n<ol>\n<li>When you are using AWS Batch, it is usually expected that you will be doing some batch type operations, such as image processing, data crunching. Such operations usually require good CPUs (C-instances) and/or good memory (R-instance). M-instance are somewhere in between.</li>\n<li>AWS has lots of <code>C4, M4, R4</code> instances in their data centers witch are under utilized. All of them are past generation. So by recommending their use, you get lower price and can be confident that AWS will be able to always match your Batch workload, as there is plenty of <code>C4, M4, R4</code> available to be used.</li>\n</ol>\n", "OwnerUserId": "248823", "LastActivityDate": "2021-10-05T21:23:38.843", "CommentCount": "3", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "122769972", "PostId": "69457414", "Score": "2", "Text": "Interesting answer. But do you have any source for the fact that these instance classes are cheaper or more cost effective?", "CreationDate": "2021-10-06T01:53:40.853", "UserId": "2148718", "filtered-sentences": [{"source": "Text", "text": "But do you have any source for the fact that these instance classes are cheaper or more cost effective?", "keywords": ["cheap", "cost", "instance"]}]}, {"Id": "126173017", "PostId": "69457414", "Score": "1", "Text": "+1 to Migwell's comment, 4th gen aren't cheaper than 5th or 6th gen EC2 instance types. Doesn't seem optimal to me", "CreationDate": "2022-03-07T14:49:49.350", "UserId": "3720481", "filtered-sentences": [{"source": "Text", "text": "+1 to Migwell's comment, 4th gen aren't cheaper than 5th or 6th gen EC2 instance types. ", "keywords": ["cheap", "instance"]}]}, {"Id": "131203979", "PostId": "69457414", "Score": "0", "Text": "Optimal is relative, it seems :)", "CreationDate": "2022-11-04T13:56:52.563", "UserId": "1668421", "filtered-sentences": []}], "history": [{"Id": "255197075", "PostHistoryTypeId": "2", "PostId": "69457414", "RevisionGUID": "63fdc496-08aa-4b4c-beda-0bb153966e5c", "CreationDate": "2021-10-05T21:23:38.843", "UserId": "248823", "Text": "I can think of two reasons why `C4, M4, R4` would be considered as \"optimal\":\r\n\r\n  1. When you are using AWS Batch, it is usually expected that you will be doing some batch type operations, such as image processing, data crunching. Such operations usually require good CPUs (C-instances) and/or good memory (R-instance). M-instance are somewhere in between.\r\n 2. AWS has lots of `C4, M4, R4` instances in their data centers witch are under utilized. All of them are past generation. So by recommending their use, you get lower price and can be confident that AWS will be able to always match your Batch workload, as there is plenty of `C4, M4, R4` available to be used.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Such operations usually require good CPUs (C-instances) and/or good memory (R-instance). ", "keywords": ["instance"]}, {"source": "Text", "text": "M-instance are somewhere in between. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "Such operations usually require good CPUs (C-instances) and/or good memory (R-instance). ", "keywords": ["instance"]}, {"source": "Body", "text": "M-instance are somewhere in between. ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "The CloudFormation docs for InstanceTypes say: You can specify instance families to launch any instance type within those families (for example, c5 or p3), or you can specify specific sizes within a family (such as c5.8xlarge). ", "keywords": ["instance"]}, {"source": "Body", "text": "You can also choose optimal to select instance types (from the C4, M4, and R4 instance families) that match the demand of your job queues. ", "keywords": ["instance"]}, {"source": "Body", "text": "Currently, optimal uses instance types from the C4, M4, and R4 instance families. ", "keywords": ["instance"]}, {"source": "Body", "text": "In Regions that don't have instance types from those instance families, instance types from the C5, M5. and R5 instance families are used. ", "keywords": ["instance"]}, {"source": "Body", "text": "The quote above says that using optimal will choose instances that \"match the demand of your job queues\", but this is true of any instance types. ", "keywords": ["instance"]}, {"source": "Body", "text": "Batch will always select the best fitting instance type according to the AllocationStrategy. ", "keywords": ["instance"]}, {"source": "Body", "text": "So, is there any particular reason to use optimal instead of just choosing the instances types you want, or even selecting all instance classes supported by AWS? ", "keywords": ["instance"]}, {"source": "Body", "text": "Also, does it make sense to mix optimal with another instance class? ", "keywords": ["instance"]}]}