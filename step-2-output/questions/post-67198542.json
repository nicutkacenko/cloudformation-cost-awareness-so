{"Id": "67198542", "PostTypeId": "1", "CreationDate": "2021-04-21T15:08:25.343", "Score": "0", "ViewCount": "212", "Body": "<p>I'm repeatedly getting an <code>InvalidRouteTableID.NotFound</code> in cloud formation stack when running</p>\n<pre><code>aws cloudformation create-stack --stack-name sample --template-body file://aws-network.yml\n</code></pre>\n<p>and I have no idea why.</p>\n<p>This is my cloudformation template <code>aws-network.yml</code>. It's pretty standard, it creates VPC, subnets, internet gateway, elastic ip address, nat gateway, route tables and associations.</p>\n<pre><code>AWSTemplateFormatVersion: 2010-09-09\n# This CloudFormation template deploys a basic VPC / Network. \nResources:\n  vpc:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: 10.0.0.0/16\n      EnableDnsHostnames: true\n      EnableDnsSupport: false \n      InstanceTenancy: default\n      Tags:\n        - Key: Name\n          Value: !Join ['', [!Ref &quot;AWS::StackName&quot;, &quot;-vpc&quot;]]\n  internetGateway:\n    Type: AWS::EC2::InternetGateway\n    DependsOn: vpc\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Join ['', [!Ref &quot;AWS::StackName&quot;, &quot;-igw&quot;]]\n  attachGateway:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      VpcId: !Ref vpc\n      InternetGatewayId: !Ref internetGateway\n  publicSubnetA:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref vpc\n      CidrBlock: 10.0.10.0/24\n      AvailabilityZone: !Select [ 0, !GetAZs ]\n      Tags:\n        - Key: Name\n          Value: !Join ['', [!Ref &quot;AWS::StackName&quot;, &quot;-public-a&quot;]]\n  publicSubnetB:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref vpc\n      CidrBlock: 10.0.20.0/24\n      AvailabilityZone: !Select [ 1, !GetAZs ]\n      Tags:\n        - Key: Name\n          Value: !Join ['', [!Ref &quot;AWS::StackName&quot;, &quot;-public-b&quot;]]\n  privateSubnetA:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref vpc\n      CidrBlock: 10.0.30.0/24\n      AvailabilityZone: !Select [ 0, !GetAZs ]\n      Tags:\n        - Key: Name\n          Value: !Join ['', [!Ref &quot;AWS::StackName&quot;, &quot;-private-a&quot;]]\n  privateSubnetB:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref vpc\n      CidrBlock: 10.0.40.0/24\n      AvailabilityZone: !Select [ 1, !GetAZs ]\n      Tags:\n        - Key: Name\n          Value: !Join ['', [!Ref &quot;AWS::StackName&quot;, &quot;-private-b&quot;]]\n  publicRouteTable:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref vpc\n      Tags:\n        - Key: Name\n          Value: !Join ['', [!Ref &quot;AWS::StackName&quot;, &quot;-public&quot;]]\n  publicRoute1:\n    Type: AWS::EC2::Route\n    DependsOn: attachGateway\n    Properties:\n      RouteTableId: !Ref publicRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref internetGateway\n  natGateway: # it has a cost https://aws.amazon.com/vpc/pricing/\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId: !GetAtt elasticIpAddress.AllocationId # gets the allocation Id from the elasticIpAddress resource\n      SubnetId: !Ref publicSubnetA # only associated to a public subnet to simplify and reduce costs\n      Tags:\n        - Key: Name\n          Value: !Join ['', [!Ref &quot;AWS::StackName&quot;, &quot;-nat&quot;]]\n  elasticIpAddress:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  privateRouteTable:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref vpc\n      Tags:\n        - Key: Name\n          Value: !Join ['', [!Ref &quot;AWS::StackName&quot;, &quot;-private&quot;]]\n  privateRoute1:\n    Type: AWS::EC2::Route\n    Properties:\n      RouteTableId: !Ref privateRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      NateGatewayId: !Ref natGateway\n  publicSubnetARouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref publicSubnetA\n      RouteTableId: publicRouteTable\n  publicSubnetBRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref publicSubnetB\n      RouteTableId: publicRouteTable\n  privateSubnetARouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref privateSubnetA\n      RouteTableId: privateRouteTable\n  privateSubnetBRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref privateSubnetB\n      RouteTableId: privateRouteTable\n</code></pre>\n<p>According to the events, that shouldn't happen, as I can see in order the following:</p>\n<pre><code>2021-04-21 17:04:05 UTC+0200    privateRouteTable   \nCREATE_COMPLETE -\n\n2021-04-21 17:04:05 UTC+0200    publicRouteTable    \nCREATE_COMPLETE -\n\n2021-04-21 17:04:22 UTC+0200    privateSubnetBRouteTableAssociation \nCREATE_FAILED   The routeTable ID 'privateRouteTable' does not exist (Service: AmazonEC2; Status Code: 400; Error Code: InvalidRouteTableID.NotFound; Request ID: b51b2b9c-af12-4376-b6e4-1698624f7522; Proxy: null)\n\n2021-04-21 17:04:22 UTC+0200    publicSubnetBRouteTableAssociation  \nCREATE_FAILED   The routeTable ID 'publicRouteTable' does not exist (Service: AmazonEC2; Status Code: 400; Error Code: InvalidRouteTableID.NotFound; Request ID: 5cb26e14-13ca-4915-9973-109dd44c5b2e; Proxy: null)\n\n2021-04-21 17:04:22 UTC+0200    attachGateway   \nCREATE_FAILED   Resource creation cancelled\n\n2021-04-21 17:04:23 UTC+0200    privateSubnetARouteTableAssociation \nCREATE_FAILED   Resource creation cancelled\n\n2021-04-21 17:04:23 UTC+0200    publicSubnetARouteTableAssociation  \nCREATE_FAILED   Resource creation cancelled\n\n2021-04-21 17:04:23 UTC+0200    natGateway  \nCREATE_FAILED   Resource creation cancelled\n\n2021-04-21 17:04:24 UTC+0200    rubiko  \nROLLBACK_IN_PROGRESS    The following resource(s) failed to create: [publicSubnetBRouteTableAssociation, attachGateway, privateSubnetBRouteTableAssociation, natGateway, publicSubnetARouteTableAssociation, privateSubnetARouteTableAssociation]. Rollback requested by user.\n</code></pre>\n<p>Any idea on why some created resources are not being found?</p>\n<p>Thanks</p>\n", "OwnerUserId": "2948212", "LastEditorUserId": "2948212", "LastEditDate": "2021-04-21T15:16:20.897", "LastActivityDate": "2021-04-21T15:30:25.707", "Title": "Getting a InvalidRouteTableID.NotFound in cloud formation for resources that exist", "Tags": "|amazon-web-services|aws-cloudformation|", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "245116533", "PostHistoryTypeId": "2", "PostId": "67198542", "RevisionGUID": "6ebb0e79-c11b-4995-859e-099dd8c0ae81", "CreationDate": "2021-04-21T15:08:25.343", "UserId": "2948212", "Text": "I'm repeatedly getting a `InvalidRouteTableID.NotFound` in cloud formation stack when running\r\n```\r\naws cloudformation create-stack --stack-name sample --template-body file://aws-network.yml\r\n```\r\n\r\nand I have no idea why.\r\n\r\nThis is my cloudformation template `aws-network.yml`. It's pretty standard, it creates VPC, subnets, internet gateway, elastic ip address, nat gateway, route tables and associations.\r\n\r\n```\r\nAWSTemplateFormatVersion: 2010-09-09\r\n# This CloudFormation template deploys a basic VPC / Network. \r\nResources:\r\n  vpc:\r\n    Type: AWS::EC2::VPC\r\n    Properties:\r\n      CidrBlock: 10.0.0.0/16\r\n      EnableDnsHostnames: true\r\n      EnableDnsSupport: false \r\n      InstanceTenancy: default\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-vpc\"]]\r\n  internetGateway:\r\n    Type: AWS::EC2::InternetGateway\r\n    DependsOn: vpc\r\n    Properties:\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-igw\"]]\r\n  attachGateway:\r\n    Type: AWS::EC2::VPCGatewayAttachment\r\n    Properties:\r\n      VpcId: !Ref vpc\r\n      InternetGatewayId: !Ref internetGateway\r\n  publicSubnetA:\r\n    Type: AWS::EC2::Subnet\r\n    Properties:\r\n      VpcId: !Ref vpc\r\n      CidrBlock: 10.0.10.0/24\r\n      AvailabilityZone: !Select [ 0, !GetAZs ]\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-public-a\"]]\r\n  publicSubnetB:\r\n    Type: AWS::EC2::Subnet\r\n    Properties:\r\n      VpcId: !Ref vpc\r\n      CidrBlock: 10.0.20.0/24\r\n      AvailabilityZone: !Select [ 1, !GetAZs ]\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-public-b\"]]\r\n  privateSubnetA:\r\n    Type: AWS::EC2::Subnet\r\n    Properties:\r\n      VpcId: !Ref vpc\r\n      CidrBlock: 10.0.30.0/24\r\n      AvailabilityZone: !Select [ 0, !GetAZs ]\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-private-a\"]]\r\n  privateSubnetB:\r\n    Type: AWS::EC2::Subnet\r\n    Properties:\r\n      VpcId: !Ref vpc\r\n      CidrBlock: 10.0.40.0/24\r\n      AvailabilityZone: !Select [ 1, !GetAZs ]\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-private-b\"]]\r\n  publicRouteTable:\r\n    Type: AWS::EC2::RouteTable\r\n    Properties:\r\n      VpcId: !Ref vpc\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-public\"]]\r\n  publicRoute1:\r\n    Type: AWS::EC2::Route\r\n    DependsOn: attachGateway\r\n    Properties:\r\n      RouteTableId: !Ref publicRouteTable\r\n      DestinationCidrBlock: 0.0.0.0/0\r\n      GatewayId: !Ref internetGateway\r\n  natGateway: # it has a cost https://aws.amazon.com/vpc/pricing/\r\n    Type: AWS::EC2::NatGateway\r\n    Properties:\r\n      AllocationId: !GetAtt elasticIpAddress.AllocationId # gets the allocation Id from the elasticIpAddress resource\r\n      SubnetId: !Ref publicSubnetA # only associated to a public subnet to simplify and reduce costs\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-nat\"]]\r\n  elasticIpAddress:\r\n    Type: AWS::EC2::EIP\r\n    Properties:\r\n      Domain: vpc\r\n  privateRouteTable:\r\n    Type: AWS::EC2::RouteTable\r\n    Properties:\r\n      VpcId: !Ref vpc\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-private\"]]\r\n  privateRoute1:\r\n    Type: AWS::EC2::Route\r\n    Properties:\r\n      RouteTableId: !Ref privateRouteTable\r\n      DestinationCidrBlock: 0.0.0.0/0\r\n      NateGatewayId: !Ref natGateway\r\n  publicSubnetARouteTableAssociation:\r\n    Type: AWS::EC2::SubnetRouteTableAssociation\r\n    Properties:\r\n      SubnetId: !Ref publicSubnetA\r\n      RouteTableId: publicRouteTable\r\n  publicSubnetBRouteTableAssociation:\r\n    Type: AWS::EC2::SubnetRouteTableAssociation\r\n    Properties:\r\n      SubnetId: !Ref publicSubnetB\r\n      RouteTableId: publicRouteTable\r\n  privateSubnetARouteTableAssociation:\r\n    Type: AWS::EC2::SubnetRouteTableAssociation\r\n    Properties:\r\n      SubnetId: !Ref privateSubnetA\r\n      RouteTableId: privateRouteTable\r\n  privateSubnetBRouteTableAssociation:\r\n    Type: AWS::EC2::SubnetRouteTableAssociation\r\n    Properties:\r\n      SubnetId: !Ref privateSubnetB\r\n      RouteTableId: privateRouteTable\r\n```\r\n\r\nAccording to the events, that shouldn't happen, as I can see in order the following:\r\n\r\n```\r\n2021-04-21 17:04:05 UTC+0200 privateRouteTable \r\nCREATE_COMPLETE -\r\n\r\n2021-04-21 17:04:05 UTC+0200 publicRouteTable \r\nCREATE_COMPLETE -\r\n\r\n2021-04-21 17:04:22 UTC+0200 privateSubnetBRouteTableAssociation \r\nCREATE_FAILED The routeTable ID 'privateRouteTable' does not exist (Service: AmazonEC2; Status Code: 400; Error Code: InvalidRouteTableID.NotFound; Request ID: b51b2b9c-af12-4376-b6e4-1698624f7522; Proxy: null)\r\n```\r\n\r\nAny idea on why some created resources are not being found?\r\n\r\nThanks", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "It's pretty standard, it creates VPC, subnets, internet gateway, elastic ip address, nat gateway, route tables and associations. ", "keywords": ["nat"]}, {"source": "Text", "text": "Resources: vpc: Type: AWS::EC2::VPC Properties: CidrBlock: 10.0.0.0/16 EnableDnsHostnames: true EnableDnsSupport: false InstanceTenancy: default Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-vpc\"]] internetGateway: Type: AWS::EC2::InternetGateway DependsOn: vpc Properties: Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-igw\"]] attachGateway: Type: AWS::EC2::VPCGatewayAttachment Properties: VpcId: !Ref vpc InternetGatewayId: !Ref internetGateway publicSubnetA: Type: AWS::EC2::Subnet Properties: VpcId: !Ref vpc CidrBlock: 10.0.10.0/24 AvailabilityZone: !Select [ 0, !GetAZs ] Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-public-a\"]] publicSubnetB: Type: AWS::EC2::Subnet Properties: VpcId: !Ref vpc CidrBlock: 10.0.20.0/24 AvailabilityZone: !Select [ 1, !GetAZs ] Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-public-b\"]] privateSubnetA: Type: AWS::EC2::Subnet Properties: VpcId: !Ref vpc CidrBlock: 10.0.30.0/24 AvailabilityZone: !Select [ 0, !GetAZs ] Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-private-a\"]] privateSubnetB: Type: AWS::EC2::Subnet Properties: VpcId: !Ref vpc CidrBlock: 10.0.40.0/24 AvailabilityZone: !Select [ 1, !GetAZs ] Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-private-b\"]] publicRouteTable: Type: AWS::EC2::RouteTable Properties: VpcId: !Ref vpc Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-public\"]] publicRoute1: Type: AWS::EC2::Route DependsOn: attachGateway Properties: RouteTableId: !Ref publicRouteTable DestinationCidrBlock: 0.0.0.0/0 GatewayId: !Ref internetGateway natGateway: # it has a cost https://aws.amazon.com/vpc/pricing/ Type: AWS::EC2::NatGateway Properties: AllocationId: !GetAtt elasticIpAddress.AllocationId # gets the allocation Id from the elasticIpAddress resource SubnetId: !Ref publicSubnetA # only associated to a public subnet to simplify and reduce costs Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-nat\"]] elasticIpAddress: Type: AWS::EC2::EIP Properties: Domain: vpc privateRouteTable: Type: AWS::EC2::RouteTable Properties: VpcId: !Ref vpc Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-private\"]] privateRoute1: Type: AWS::EC2::Route Properties: RouteTableId: !Ref privateRouteTable DestinationCidrBlock: 0.0.0.0/0 NateGatewayId: !Ref natGateway publicSubnetARouteTableAssociation: Type: AWS::EC2::SubnetRouteTableAssociation Properties: SubnetId: !Ref publicSubnetA RouteTableId: publicRouteTable publicSubnetBRouteTableAssociation: Type: AWS::EC2::SubnetRouteTableAssociation Properties: SubnetId: !Ref publicSubnetB RouteTableId: publicRouteTable privateSubnetARouteTableAssociation: Type: AWS::EC2::SubnetRouteTableAssociation Properties: SubnetId: !Ref privateSubnetA RouteTableId: privateRouteTable privateSubnetBRouteTableAssociation: Type: AWS::EC2::SubnetRouteTableAssociation Properties: SubnetId: !Ref privateSubnetB RouteTableId: privateRouteTable ``` According to the events, that shouldn't happen, as I can see in order the following: ``` 2021-04-21 17:04:05 UTC+0200 privateRouteTable CREATE_COMPLETE - 2021-04-21 17:04:05 UTC+0200 publicRouteTable CREATE_COMPLETE - 2021-04-21 17:04:22 UTC+0200 privateSubnetBRouteTableAssociation CREATE_FAILED The routeTable ID 'privateRouteTable' does not exist (Service: AmazonEC2; Status Code: 400; Error Code: InvalidRouteTableID.NotFound; Request ID: b51b2b9c-af12-4376-b6e4-1698624f7522; Proxy: null) ``` ", "keywords": ["cost", "nat", "domain"]}]}, {"Id": "245116534", "PostHistoryTypeId": "1", "PostId": "67198542", "RevisionGUID": "6ebb0e79-c11b-4995-859e-099dd8c0ae81", "CreationDate": "2021-04-21T15:08:25.343", "UserId": "2948212", "Text": "Getting a InvalidRouteTableID.NotFound in cloud formation for resources that exist", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "245116535", "PostHistoryTypeId": "3", "PostId": "67198542", "RevisionGUID": "6ebb0e79-c11b-4995-859e-099dd8c0ae81", "CreationDate": "2021-04-21T15:08:25.343", "UserId": "2948212", "Text": "|amazon-web-services|aws-cloudformation|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "245117127", "PostHistoryTypeId": "5", "PostId": "67198542", "RevisionGUID": "0c6d7792-34ee-4124-a9fa-5a9aaaea5f8a", "CreationDate": "2021-04-21T15:16:20.897", "UserId": "2948212", "Comment": "typo", "Text": "I'm repeatedly getting an `InvalidRouteTableID.NotFound` in cloud formation stack when running\r\n```\r\naws cloudformation create-stack --stack-name sample --template-body file://aws-network.yml\r\n```\r\n\r\nand I have no idea why.\r\n\r\nThis is my cloudformation template `aws-network.yml`. It's pretty standard, it creates VPC, subnets, internet gateway, elastic ip address, nat gateway, route tables and associations.\r\n\r\n```\r\nAWSTemplateFormatVersion: 2010-09-09\r\n# This CloudFormation template deploys a basic VPC / Network. \r\nResources:\r\n  vpc:\r\n    Type: AWS::EC2::VPC\r\n    Properties:\r\n      CidrBlock: 10.0.0.0/16\r\n      EnableDnsHostnames: true\r\n      EnableDnsSupport: false \r\n      InstanceTenancy: default\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-vpc\"]]\r\n  internetGateway:\r\n    Type: AWS::EC2::InternetGateway\r\n    DependsOn: vpc\r\n    Properties:\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-igw\"]]\r\n  attachGateway:\r\n    Type: AWS::EC2::VPCGatewayAttachment\r\n    Properties:\r\n      VpcId: !Ref vpc\r\n      InternetGatewayId: !Ref internetGateway\r\n  publicSubnetA:\r\n    Type: AWS::EC2::Subnet\r\n    Properties:\r\n      VpcId: !Ref vpc\r\n      CidrBlock: 10.0.10.0/24\r\n      AvailabilityZone: !Select [ 0, !GetAZs ]\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-public-a\"]]\r\n  publicSubnetB:\r\n    Type: AWS::EC2::Subnet\r\n    Properties:\r\n      VpcId: !Ref vpc\r\n      CidrBlock: 10.0.20.0/24\r\n      AvailabilityZone: !Select [ 1, !GetAZs ]\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-public-b\"]]\r\n  privateSubnetA:\r\n    Type: AWS::EC2::Subnet\r\n    Properties:\r\n      VpcId: !Ref vpc\r\n      CidrBlock: 10.0.30.0/24\r\n      AvailabilityZone: !Select [ 0, !GetAZs ]\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-private-a\"]]\r\n  privateSubnetB:\r\n    Type: AWS::EC2::Subnet\r\n    Properties:\r\n      VpcId: !Ref vpc\r\n      CidrBlock: 10.0.40.0/24\r\n      AvailabilityZone: !Select [ 1, !GetAZs ]\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-private-b\"]]\r\n  publicRouteTable:\r\n    Type: AWS::EC2::RouteTable\r\n    Properties:\r\n      VpcId: !Ref vpc\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-public\"]]\r\n  publicRoute1:\r\n    Type: AWS::EC2::Route\r\n    DependsOn: attachGateway\r\n    Properties:\r\n      RouteTableId: !Ref publicRouteTable\r\n      DestinationCidrBlock: 0.0.0.0/0\r\n      GatewayId: !Ref internetGateway\r\n  natGateway: # it has a cost https://aws.amazon.com/vpc/pricing/\r\n    Type: AWS::EC2::NatGateway\r\n    Properties:\r\n      AllocationId: !GetAtt elasticIpAddress.AllocationId # gets the allocation Id from the elasticIpAddress resource\r\n      SubnetId: !Ref publicSubnetA # only associated to a public subnet to simplify and reduce costs\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-nat\"]]\r\n  elasticIpAddress:\r\n    Type: AWS::EC2::EIP\r\n    Properties:\r\n      Domain: vpc\r\n  privateRouteTable:\r\n    Type: AWS::EC2::RouteTable\r\n    Properties:\r\n      VpcId: !Ref vpc\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-private\"]]\r\n  privateRoute1:\r\n    Type: AWS::EC2::Route\r\n    Properties:\r\n      RouteTableId: !Ref privateRouteTable\r\n      DestinationCidrBlock: 0.0.0.0/0\r\n      NateGatewayId: !Ref natGateway\r\n  publicSubnetARouteTableAssociation:\r\n    Type: AWS::EC2::SubnetRouteTableAssociation\r\n    Properties:\r\n      SubnetId: !Ref publicSubnetA\r\n      RouteTableId: publicRouteTable\r\n  publicSubnetBRouteTableAssociation:\r\n    Type: AWS::EC2::SubnetRouteTableAssociation\r\n    Properties:\r\n      SubnetId: !Ref publicSubnetB\r\n      RouteTableId: publicRouteTable\r\n  privateSubnetARouteTableAssociation:\r\n    Type: AWS::EC2::SubnetRouteTableAssociation\r\n    Properties:\r\n      SubnetId: !Ref privateSubnetA\r\n      RouteTableId: privateRouteTable\r\n  privateSubnetBRouteTableAssociation:\r\n    Type: AWS::EC2::SubnetRouteTableAssociation\r\n    Properties:\r\n      SubnetId: !Ref privateSubnetB\r\n      RouteTableId: privateRouteTable\r\n```\r\n\r\nAccording to the events, that shouldn't happen, as I can see in order the following:\r\n\r\n```\r\n2021-04-21 17:04:05 UTC+0200 privateRouteTable \r\nCREATE_COMPLETE -\r\n\r\n2021-04-21 17:04:05 UTC+0200 publicRouteTable \r\nCREATE_COMPLETE -\r\n\r\n2021-04-21 17:04:22 UTC+0200 privateSubnetBRouteTableAssociation \r\nCREATE_FAILED The routeTable ID 'privateRouteTable' does not exist (Service: AmazonEC2; Status Code: 400; Error Code: InvalidRouteTableID.NotFound; Request ID: b51b2b9c-af12-4376-b6e4-1698624f7522; Proxy: null)\r\n\r\n2021-04-21 17:04:22 UTC+0200 publicSubnetBRouteTableAssociation \r\nCREATE_FAILED The routeTable ID 'publicRouteTable' does not exist (Service: AmazonEC2; Status Code: 400; Error Code: InvalidRouteTableID.NotFound; Request ID: 5cb26e14-13ca-4915-9973-109dd44c5b2e; Proxy: null)\r\n\r\n2021-04-21 17:04:22 UTC+0200 attachGateway \r\nCREATE_FAILED Resource creation cancelled\r\n\r\n2021-04-21 17:04:23 UTC+0200 privateSubnetARouteTableAssociation \r\nCREATE_FAILED Resource creation cancelled\r\n\r\n2021-04-21 17:04:23 UTC+0200 publicSubnetARouteTableAssociation \r\nCREATE_FAILED Resource creation cancelled\r\n\r\n2021-04-21 17:04:23 UTC+0200 natGateway \r\nCREATE_FAILED Resource creation cancelled\r\n\r\n2021-04-21 17:04:24 UTC+0200 rubiko \r\nROLLBACK_IN_PROGRESS The following resource(s) failed to create: [publicSubnetBRouteTableAssociation, attachGateway, privateSubnetBRouteTableAssociation, natGateway, publicSubnetARouteTableAssociation, privateSubnetARouteTableAssociation]. Rollback requested by user.\r\n```\r\n\r\nAny idea on why some created resources are not being found?\r\n\r\nThanks", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "It's pretty standard, it creates VPC, subnets, internet gateway, elastic ip address, nat gateway, route tables and associations. ", "keywords": ["nat"]}, {"source": "Text", "text": "Resources: vpc: Type: AWS::EC2::VPC Properties: CidrBlock: 10.0.0.0/16 EnableDnsHostnames: true EnableDnsSupport: false InstanceTenancy: default Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-vpc\"]] internetGateway: Type: AWS::EC2::InternetGateway DependsOn: vpc Properties: Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-igw\"]] attachGateway: Type: AWS::EC2::VPCGatewayAttachment Properties: VpcId: !Ref vpc InternetGatewayId: !Ref internetGateway publicSubnetA: Type: AWS::EC2::Subnet Properties: VpcId: !Ref vpc CidrBlock: 10.0.10.0/24 AvailabilityZone: !Select [ 0, !GetAZs ] Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-public-a\"]] publicSubnetB: Type: AWS::EC2::Subnet Properties: VpcId: !Ref vpc CidrBlock: 10.0.20.0/24 AvailabilityZone: !Select [ 1, !GetAZs ] Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-public-b\"]] privateSubnetA: Type: AWS::EC2::Subnet Properties: VpcId: !Ref vpc CidrBlock: 10.0.30.0/24 AvailabilityZone: !Select [ 0, !GetAZs ] Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-private-a\"]] privateSubnetB: Type: AWS::EC2::Subnet Properties: VpcId: !Ref vpc CidrBlock: 10.0.40.0/24 AvailabilityZone: !Select [ 1, !GetAZs ] Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-private-b\"]] publicRouteTable: Type: AWS::EC2::RouteTable Properties: VpcId: !Ref vpc Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-public\"]] publicRoute1: Type: AWS::EC2::Route DependsOn: attachGateway Properties: RouteTableId: !Ref publicRouteTable DestinationCidrBlock: 0.0.0.0/0 GatewayId: !Ref internetGateway natGateway: # it has a cost https://aws.amazon.com/vpc/pricing/ Type: AWS::EC2::NatGateway Properties: AllocationId: !GetAtt elasticIpAddress.AllocationId # gets the allocation Id from the elasticIpAddress resource SubnetId: !Ref publicSubnetA # only associated to a public subnet to simplify and reduce costs Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-nat\"]] elasticIpAddress: Type: AWS::EC2::EIP Properties: Domain: vpc privateRouteTable: Type: AWS::EC2::RouteTable Properties: VpcId: !Ref vpc Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-private\"]] privateRoute1: Type: AWS::EC2::Route Properties: RouteTableId: !Ref privateRouteTable DestinationCidrBlock: 0.0.0.0/0 NateGatewayId: !Ref natGateway publicSubnetARouteTableAssociation: Type: AWS::EC2::SubnetRouteTableAssociation Properties: SubnetId: !Ref publicSubnetA RouteTableId: publicRouteTable publicSubnetBRouteTableAssociation: Type: AWS::EC2::SubnetRouteTableAssociation Properties: SubnetId: !Ref publicSubnetB RouteTableId: publicRouteTable privateSubnetARouteTableAssociation: Type: AWS::EC2::SubnetRouteTableAssociation Properties: SubnetId: !Ref privateSubnetA RouteTableId: privateRouteTable privateSubnetBRouteTableAssociation: Type: AWS::EC2::SubnetRouteTableAssociation Properties: SubnetId: !Ref privateSubnetB RouteTableId: privateRouteTable ``` According to the events, that shouldn't happen, as I can see in order the following: ``` 2021-04-21 17:04:05 UTC+0200 privateRouteTable CREATE_COMPLETE - 2021-04-21 17:04:05 UTC+0200 publicRouteTable CREATE_COMPLETE - 2021-04-21 17:04:22 UTC+0200 privateSubnetBRouteTableAssociation CREATE_FAILED The routeTable ID 'privateRouteTable' does not exist (Service: AmazonEC2; Status Code: 400; Error Code: InvalidRouteTableID.NotFound; Request ID: b51b2b9c-af12-4376-b6e4-1698624f7522; Proxy: null) 2021-04-21 17:04:22 UTC+0200 publicSubnetBRouteTableAssociation CREATE_FAILED The routeTable ID 'publicRouteTable' does not exist (Service: AmazonEC2; Status Code: 400; Error Code: InvalidRouteTableID.NotFound; Request ID: 5cb26e14-13ca-4915-9973-109dd44c5b2e; Proxy: null) 2021-04-21 17:04:22 UTC+0200 attachGateway CREATE_FAILED Resource creation cancelled 2021-04-21 17:04:23 UTC+0200 privateSubnetARouteTableAssociation CREATE_FAILED Resource creation cancelled 2021-04-21 17:04:23 UTC+0200 publicSubnetARouteTableAssociation CREATE_FAILED Resource creation cancelled 2021-04-21 17:04:23 UTC+0200 natGateway CREATE_FAILED Resource creation cancelled 2021-04-21 17:04:24 UTC+0200 rubiko ROLLBACK_IN_PROGRESS The following resource(s) failed to create: [publicSubnetBRouteTableAssociation, attachGateway, privateSubnetBRouteTableAssociation, natGateway, publicSubnetARouteTableAssociation, privateSubnetARouteTableAssociation]. ", "keywords": ["cost", "nat", "domain"]}]}], "answers": [{"Id": "67198888", "PostTypeId": "2", "ParentId": "67198542", "CreationDate": "2021-04-21T15:30:25.707", "Score": "0", "Body": "<p>Solved, I forgot <code>!Ref</code> (I'll call it a day..)</p>\n<p>This is the correct template</p>\n<pre><code>AWSTemplateFormatVersion: 2010-09-09\n# This CloudFormation template deploys a basic VPC / Network. \nResources:\n  vpc:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: 10.0.0.0/16\n      EnableDnsHostnames: true\n      EnableDnsSupport: false \n      InstanceTenancy: default\n      Tags:\n        - Key: Name\n          Value: !Join ['', [!Ref &quot;AWS::StackName&quot;, &quot;-vpc&quot;]]\n  internetGateway:\n    Type: AWS::EC2::InternetGateway\n    DependsOn: vpc\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Join ['', [!Ref &quot;AWS::StackName&quot;, &quot;-igw&quot;]]\n  attachGateway:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      VpcId: !Ref vpc\n      InternetGatewayId: !Ref internetGateway\n  publicSubnetA:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref vpc\n      CidrBlock: 10.0.10.0/24\n      AvailabilityZone: !Select [ 0, !GetAZs ]\n      Tags:\n        - Key: Name\n          Value: !Join ['', [!Ref &quot;AWS::StackName&quot;, &quot;-public-a&quot;]]\n  publicSubnetB:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref vpc\n      CidrBlock: 10.0.20.0/24\n      AvailabilityZone: !Select [ 1, !GetAZs ]\n      Tags:\n        - Key: Name\n          Value: !Join ['', [!Ref &quot;AWS::StackName&quot;, &quot;-public-b&quot;]]\n  privateSubnetA:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref vpc\n      CidrBlock: 10.0.30.0/24\n      AvailabilityZone: !Select [ 0, !GetAZs ]\n      Tags:\n        - Key: Name\n          Value: !Join ['', [!Ref &quot;AWS::StackName&quot;, &quot;-private-a&quot;]]\n  privateSubnetB:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref vpc\n      CidrBlock: 10.0.40.0/24\n      AvailabilityZone: !Select [ 1, !GetAZs ]\n      Tags:\n        - Key: Name\n          Value: !Join ['', [!Ref &quot;AWS::StackName&quot;, &quot;-private-b&quot;]]\n  publicRouteTable:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref vpc\n      Tags:\n        - Key: Name\n          Value: !Join ['', [!Ref &quot;AWS::StackName&quot;, &quot;-public&quot;]]\n  publicRoute1:\n    Type: AWS::EC2::Route\n    DependsOn: attachGateway\n    Properties:\n      RouteTableId: !Ref publicRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref internetGateway\n  natGateway: # it has a cost https://aws.amazon.com/vpc/pricing/\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId: !GetAtt elasticIpAddress.AllocationId # gets the allocation Id from the elasticIpAddress resource\n      SubnetId: !Ref publicSubnetA # only associated to a public subnet to simplify and reduce costs\n      Tags:\n        - Key: Name\n          Value: !Join ['', [!Ref &quot;AWS::StackName&quot;, &quot;-nat&quot;]]\n  elasticIpAddress:\n    Type: AWS::EC2::EIP\n    Properties:\n      Domain: vpc\n  privateRouteTable:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref vpc\n      Tags:\n        - Key: Name\n          Value: !Join ['', [!Ref &quot;AWS::StackName&quot;, &quot;-private&quot;]]\n  privateRoute1:\n    Type: AWS::EC2::Route\n    Properties:\n      RouteTableId: !Ref privateRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref natGateway\n  publicSubnetARouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref publicSubnetA\n      RouteTableId: !Ref publicRouteTable\n  publicSubnetBRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref publicSubnetB\n      RouteTableId: !Ref publicRouteTable\n  privateSubnetARouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref privateSubnetA\n      RouteTableId: !Ref privateRouteTable\n  privateSubnetBRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref privateSubnetB\n      RouteTableId: !Ref privateRouteTable\n</code></pre>\n<p>All credit to Mike Atkinson!</p>\n", "OwnerUserId": "2948212", "LastActivityDate": "2021-04-21T15:30:25.707", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "245118060", "PostHistoryTypeId": "2", "PostId": "67198888", "RevisionGUID": "4d639c3f-14ab-44df-991b-6de9f52f838e", "CreationDate": "2021-04-21T15:30:25.707", "UserId": "2948212", "Text": "Solved, I forgot `!Ref` (I'll call it a day..)\r\n\r\nThis is the correct template\r\n```\r\nAWSTemplateFormatVersion: 2010-09-09\r\n# This CloudFormation template deploys a basic VPC / Network. \r\nResources:\r\n  vpc:\r\n    Type: AWS::EC2::VPC\r\n    Properties:\r\n      CidrBlock: 10.0.0.0/16\r\n      EnableDnsHostnames: true\r\n      EnableDnsSupport: false \r\n      InstanceTenancy: default\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-vpc\"]]\r\n  internetGateway:\r\n    Type: AWS::EC2::InternetGateway\r\n    DependsOn: vpc\r\n    Properties:\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-igw\"]]\r\n  attachGateway:\r\n    Type: AWS::EC2::VPCGatewayAttachment\r\n    Properties:\r\n      VpcId: !Ref vpc\r\n      InternetGatewayId: !Ref internetGateway\r\n  publicSubnetA:\r\n    Type: AWS::EC2::Subnet\r\n    Properties:\r\n      VpcId: !Ref vpc\r\n      CidrBlock: 10.0.10.0/24\r\n      AvailabilityZone: !Select [ 0, !GetAZs ]\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-public-a\"]]\r\n  publicSubnetB:\r\n    Type: AWS::EC2::Subnet\r\n    Properties:\r\n      VpcId: !Ref vpc\r\n      CidrBlock: 10.0.20.0/24\r\n      AvailabilityZone: !Select [ 1, !GetAZs ]\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-public-b\"]]\r\n  privateSubnetA:\r\n    Type: AWS::EC2::Subnet\r\n    Properties:\r\n      VpcId: !Ref vpc\r\n      CidrBlock: 10.0.30.0/24\r\n      AvailabilityZone: !Select [ 0, !GetAZs ]\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-private-a\"]]\r\n  privateSubnetB:\r\n    Type: AWS::EC2::Subnet\r\n    Properties:\r\n      VpcId: !Ref vpc\r\n      CidrBlock: 10.0.40.0/24\r\n      AvailabilityZone: !Select [ 1, !GetAZs ]\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-private-b\"]]\r\n  publicRouteTable:\r\n    Type: AWS::EC2::RouteTable\r\n    Properties:\r\n      VpcId: !Ref vpc\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-public\"]]\r\n  publicRoute1:\r\n    Type: AWS::EC2::Route\r\n    DependsOn: attachGateway\r\n    Properties:\r\n      RouteTableId: !Ref publicRouteTable\r\n      DestinationCidrBlock: 0.0.0.0/0\r\n      GatewayId: !Ref internetGateway\r\n  natGateway: # it has a cost https://aws.amazon.com/vpc/pricing/\r\n    Type: AWS::EC2::NatGateway\r\n    Properties:\r\n      AllocationId: !GetAtt elasticIpAddress.AllocationId # gets the allocation Id from the elasticIpAddress resource\r\n      SubnetId: !Ref publicSubnetA # only associated to a public subnet to simplify and reduce costs\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-nat\"]]\r\n  elasticIpAddress:\r\n    Type: AWS::EC2::EIP\r\n    Properties:\r\n      Domain: vpc\r\n  privateRouteTable:\r\n    Type: AWS::EC2::RouteTable\r\n    Properties:\r\n      VpcId: !Ref vpc\r\n      Tags:\r\n        - Key: Name\r\n          Value: !Join ['', [!Ref \"AWS::StackName\", \"-private\"]]\r\n  privateRoute1:\r\n    Type: AWS::EC2::Route\r\n    Properties:\r\n      RouteTableId: !Ref privateRouteTable\r\n      DestinationCidrBlock: 0.0.0.0/0\r\n      NatGatewayId: !Ref natGateway\r\n  publicSubnetARouteTableAssociation:\r\n    Type: AWS::EC2::SubnetRouteTableAssociation\r\n    Properties:\r\n      SubnetId: !Ref publicSubnetA\r\n      RouteTableId: !Ref publicRouteTable\r\n  publicSubnetBRouteTableAssociation:\r\n    Type: AWS::EC2::SubnetRouteTableAssociation\r\n    Properties:\r\n      SubnetId: !Ref publicSubnetB\r\n      RouteTableId: !Ref publicRouteTable\r\n  privateSubnetARouteTableAssociation:\r\n    Type: AWS::EC2::SubnetRouteTableAssociation\r\n    Properties:\r\n      SubnetId: !Ref privateSubnetA\r\n      RouteTableId: !Ref privateRouteTable\r\n  privateSubnetBRouteTableAssociation:\r\n    Type: AWS::EC2::SubnetRouteTableAssociation\r\n    Properties:\r\n      SubnetId: !Ref privateSubnetB\r\n      RouteTableId: !Ref privateRouteTable\r\n```\r\n\r\nAll credit to Mike Atkinson!", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Resources: vpc: Type: AWS::EC2::VPC Properties: CidrBlock: 10.0.0.0/16 EnableDnsHostnames: true EnableDnsSupport: false InstanceTenancy: default Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-vpc\"]] internetGateway: Type: AWS::EC2::InternetGateway DependsOn: vpc Properties: Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-igw\"]] attachGateway: Type: AWS::EC2::VPCGatewayAttachment Properties: VpcId: !Ref vpc InternetGatewayId: !Ref internetGateway publicSubnetA: Type: AWS::EC2::Subnet Properties: VpcId: !Ref vpc CidrBlock: 10.0.10.0/24 AvailabilityZone: !Select [ 0, !GetAZs ] Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-public-a\"]] publicSubnetB: Type: AWS::EC2::Subnet Properties: VpcId: !Ref vpc CidrBlock: 10.0.20.0/24 AvailabilityZone: !Select [ 1, !GetAZs ] Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-public-b\"]] privateSubnetA: Type: AWS::EC2::Subnet Properties: VpcId: !Ref vpc CidrBlock: 10.0.30.0/24 AvailabilityZone: !Select [ 0, !GetAZs ] Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-private-a\"]] privateSubnetB: Type: AWS::EC2::Subnet Properties: VpcId: !Ref vpc CidrBlock: 10.0.40.0/24 AvailabilityZone: !Select [ 1, !GetAZs ] Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-private-b\"]] publicRouteTable: Type: AWS::EC2::RouteTable Properties: VpcId: !Ref vpc Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-public\"]] publicRoute1: Type: AWS::EC2::Route DependsOn: attachGateway Properties: RouteTableId: !Ref publicRouteTable DestinationCidrBlock: 0.0.0.0/0 GatewayId: !Ref internetGateway natGateway: # it has a cost https://aws.amazon.com/vpc/pricing/ Type: AWS::EC2::NatGateway Properties: AllocationId: !GetAtt elasticIpAddress.AllocationId # gets the allocation Id from the elasticIpAddress resource SubnetId: !Ref publicSubnetA # only associated to a public subnet to simplify and reduce costs Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-nat\"]] elasticIpAddress: Type: AWS::EC2::EIP Properties: Domain: vpc privateRouteTable: Type: AWS::EC2::RouteTable Properties: VpcId: !Ref vpc Tags: - Key: Name Value: !Join ['', [!Ref \"AWS::StackName\", \"-private\"]] privateRoute1: Type: AWS::EC2::Route Properties: RouteTableId: !Ref privateRouteTable DestinationCidrBlock: 0.0.0.0/0 NatGatewayId: !Ref natGateway publicSubnetARouteTableAssociation: Type: AWS::EC2::SubnetRouteTableAssociation Properties: SubnetId: !Ref publicSubnetA RouteTableId: !Ref publicRouteTable publicSubnetBRouteTableAssociation: Type: AWS::EC2::SubnetRouteTableAssociation Properties: SubnetId: !Ref publicSubnetB RouteTableId: !Ref publicRouteTable privateSubnetARouteTableAssociation: Type: AWS::EC2::SubnetRouteTableAssociation Properties: SubnetId: !Ref privateSubnetA RouteTableId: !Ref privateRouteTable privateSubnetBRouteTableAssociation: Type: AWS::EC2::SubnetRouteTableAssociation Properties: SubnetId: !Ref privateSubnetB RouteTableId: !Ref privateRouteTable ``` All credit to Mike Atkinson!", "keywords": ["cost", "nat", "domain"]}]}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "It's pretty standard, it creates VPC, subnets, internet gateway, elastic ip address, nat gateway, route tables and associations. ", "keywords": ["nat"]}]}