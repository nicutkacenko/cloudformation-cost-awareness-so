{"Id": "68304189", "PostTypeId": "1", "AcceptedAnswerId": "68503543", "CreationDate": "2021-07-08T15:05:07.093", "Score": "1", "ViewCount": "561", "Body": "<p>I'm trying to use CloudFormation AddOn template in the following scenario:</p>\n<ul>\n<li>Service 1\ncreates an SNS Topic and a Managed Policy that has all the necessary permissions to publish to it. The SNS Topic will collect &quot;Activity&quot; records and then fan them out to multiple subscribers.</li>\n<li>A common code library abstracts away the usage of SNS - any applications that need to post activity messages do so without any knowledge that SNS is being used underneath the covers.</li>\n<li>Service N needs to publish activity messages using the common code library and needs whatever permissions are necessary.</li>\n</ul>\n<p>So service 1 writes the Managed Policy ARN out as an exported output to the AddOn stack like so:</p>\n<pre><code>Outputs:\n  activityPublishPolicy:\n    Description: &quot;Activity Publish Policy ARN&quot;\n    Value: !Ref activitySnsTopicPublishPolicy\n    Export:\n      Name: !Sub ${App}-${Env}-activity-publish-policy\n</code></pre>\n<p>Then in service N, I was hoping to import the ARN of the publishing policy and get it attached to the task role:</p>\n<pre><code>Outputs:\n  activityPublishAccessPolicy:\n    Description: &quot;The IAM::ManagedPolicy to attach to the task role.&quot;\n    Value: !ImportValue\n      'Fn::Sub': '${App}-${Env}-activity-publish-policy'\n</code></pre>\n<p>The ARN is imported just fine and written out to the Cloud Formation stack of Service N; however, the Task Role does not get the Managed Policy attached to it.</p>\n<p>I did a quick test to see if adding the policy directly to the AddOn stack would attach and that does indeed work.</p>\n<pre><code>Outputs:\n  activityPublishAccessPolicy:\n    Description: &quot;The IAM::ManagedPolicy to attach to the task role.&quot;\n    Value: !Ref activityPolicy\n</code></pre>\n<p>This leads me to believe that Copilot only attaches ManagedPolicies to the Task Role that are created in its own AddOn Stack, but that's just a guess.</p>\n<p>I'd prefer not to write a new policy in every service to do this, and I'd prefer not to open up the topic policy our whole VPC if possible.</p>\n<p>Is there a better way of doing this?\nThanks!</p>\n", "OwnerUserId": "320738", "LastEditorUserId": "15168", "LastEditDate": "2021-07-21T16:58:01.993", "LastActivityDate": "2021-07-23T18:16:04.987", "Title": "AWS Copilot - Attach Imported Policy to Task Role", "Tags": "|amazon-web-services|aws-cloudformation|amazon-iam|", "AnswerCount": "1", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "125630520", "PostId": "68304189", "Score": "0", "Text": "Small complimentary note: the Copilot documentation has [a brief example of how AddOns can be achieved](https://aws.github.io/copilot-cli/docs/developing/additional-aws-resources/). Pay close attention to the `Outputs` section of the yaml file. Also worth mentioning, `copilot deploy` will catch some of the possible validation issues with your AddOn and rollback the deployment.", "CreationDate": "2022-02-10T15:48:52.873", "UserId": "248206", "filtered-sentences": [{"source": "Text", "text": "Pay close attention to the `Outputs` section of the yaml file. ", "keywords": ["pay"]}]}], "history": [{"Id": "249893548", "PostHistoryTypeId": "2", "PostId": "68304189", "RevisionGUID": "1d4f978f-9e8c-45af-bf85-eb5c12fe81c5", "CreationDate": "2021-07-08T15:05:07.093", "UserId": "320738", "Text": "I'm trying to use CloudFormation AddOn template in the following scenario:\r\n\r\n - Service 1 \r\ncreates an SNS Topic and a Managed Policy that has all the necessary permissions to publish to it. The SNS Topic will collect \"Activity\" records and then fan them out to multiple subscribers.\r\n - A common code library abstracts away the usage of SNS - any applications that need to post activity messages do so without any knowledge that SNS is being used underneath the covers.\r\n - Service N needs to publish activity messages using the common code library and needs whatever permissions are necessary.\r\n\r\nSo service 1 writes the Managed Policy ARN out as an exported output to the AddOn stack like so:\r\n\r\n```\r\nOutputs:\r\n  activityPublishPolicy:\r\n    Description: \"Activity Publish Policy ARN\"\r\n    Value: !Ref activitySnsTopicPublishPolicy\r\n    Export:\r\n      Name: !Sub ${App}-${Env}-activity-publish-policy\r\n```\r\n\r\nThen in service N, I was hoping to import the ARN of the publishing policy and get it attached to the task role:\r\n\r\n```\r\nOutputs:\r\n  activityPublishAccessPolicy:\r\n    Description: \"The IAM::ManagedPolicy to attach to the task role.\"\r\n    Value: !ImportValue\r\n      'Fn::Sub': '${App}-${Env}-activity-publish-policy'\r\n```\r\n\r\nThe ARN is imported just fine and written out to the Cloud Formation stack of Service N; however, the Task Role does not get the Managed Policy attached to it.\r\n\r\nI did a quick test to see if adding the policy directly to the AddOn stack would attach and that does indeed work.\r\n\r\n```\r\nOutputs:\r\n  activityPublishAccessPolicy:\r\n    Description: \"The IAM::ManagedPolicy to attach to the task role.\"\r\n    Value: !Ref activityPolicy\r\n```\r\n\r\nThis leads me to believe that Copilot only attaches ManagedPolicies to the Task Role that are created in its own AddOn Stack, but that's just a guess.\r\n\r\nI'd prefer not to write a new policy in every service to do this, and I'd prefer not to open up the topic policy our whole VPC if possible.\r\n\r\nIs there a better way of doing this?\r\nThanks!", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I'm trying to use CloudFormation AddOn template in the following scenario: - Service 1 creates an SNS Topic and a Managed Policy that has all the necessary permissions to publish to it. ", "keywords": ["policy", "permissions"]}, {"source": "Text", "text": "- Service N needs to publish activity messages using the common code library and needs whatever permissions are necessary. ", "keywords": ["permissions"]}, {"source": "Text", "text": "So service 1 writes the Managed Policy ARN out as an exported output to the AddOn stack like so: ``` Outputs: activityPublishPolicy: Description: \"Activity Publish Policy ARN\" Value: !Ref activitySnsTopicPublishPolicy Export: Name: !Sub ${App}-${Env}-activity-publish-policy ``` Then in service N, I was hoping to import the ARN of the publishing policy and get it attached to the task role: ``` Outputs: activityPublishAccessPolicy: Description: \"The IAM::ManagedPolicy to attach to the task role.\" Value: !ImportValue 'Fn::Sub': '${App}-${Env}-activity-publish-policy' ``` ", "keywords": ["policy"]}, {"source": "Text", "text": "The ARN is imported just fine and written out to the Cloud Formation stack of Service N; however, the Task Role does not get the Managed Policy attached to it. ", "keywords": ["policy"]}, {"source": "Text", "text": "I did a quick test to see if adding the policy directly to the AddOn stack would attach and that does indeed work. ", "keywords": ["policy", "test"]}, {"source": "Text", "text": "I'd prefer not to write a new policy in every service to do this, and I'd prefer not to open up the topic policy our whole VPC if possible. ", "keywords": ["policy"]}]}, {"Id": "249893549", "PostHistoryTypeId": "1", "PostId": "68304189", "RevisionGUID": "1d4f978f-9e8c-45af-bf85-eb5c12fe81c5", "CreationDate": "2021-07-08T15:05:07.093", "UserId": "320738", "Text": "AWS Copilot - Attach Imported Policy to Task Role", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "AWS Copilot - Attach Imported Policy to Task Role", "keywords": ["policy"]}]}, {"Id": "249893550", "PostHistoryTypeId": "3", "PostId": "68304189", "RevisionGUID": "1d4f978f-9e8c-45af-bf85-eb5c12fe81c5", "CreationDate": "2021-07-08T15:05:07.093", "UserId": "320738", "Text": "|amazon-web-services|aws-cloudformation|amazon|amazon-iam|copilot|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "250029442", "PostHistoryTypeId": "6", "PostId": "68304189", "RevisionGUID": "66ecf16c-616e-4882-97cc-7faba2fa0d03", "CreationDate": "2021-07-11T00:01:46.893", "UserId": "174777", "Comment": "edited tags", "Text": "|amazon-web-services|aws-cloudformation|amazon-iam|copilot|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "250645194", "PostHistoryTypeId": "6", "PostId": "68304189", "RevisionGUID": "bb35d3d3-2fad-4f2a-b313-69b12906d5c4", "CreationDate": "2021-07-21T16:58:01.993", "UserId": "15168", "Comment": "edited tags", "Text": "|amazon-web-services|aws-cloudformation|amazon-iam|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "68503543", "PostTypeId": "2", "ParentId": "68304189", "CreationDate": "2021-07-23T18:16:04.987", "Score": "2", "Body": "<p>This is because Copilot scans the Addons template to determine the type of the resource you're outputting. There are several &quot;magic&quot; outputs for addons. They are:</p>\n<ul>\n<li>Security Groups</li>\n<li>Managed Policies</li>\n<li>Secrets</li>\n</ul>\n<p>To detect these outputs, we scan the template looking for the logical ID of the referenced resource. This means that we don't currently have a way of deriving the resource type of the results of <code>Fn::ImportValue</code> calls, since they don't refer to a logical ID defined in that addons template!</p>\n<p>I'm sorry this is causing you problems--it seems like you may need to add the managed policy to the addons stack of each service you want to grant this access to. This is something we might be able to do something about, though, and would love if if you could cut us a Github issue so we can prioritize and gather feedback on a proposal.</p>\n", "OwnerUserId": "5890422", "LastActivityDate": "2021-07-23T18:16:04.987", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "250769956", "PostHistoryTypeId": "2", "PostId": "68503543", "RevisionGUID": "9ad6286d-1fee-45dd-aa62-b3c4c2a415f7", "CreationDate": "2021-07-23T18:16:04.987", "UserId": "5890422", "Text": "This is because Copilot scans the Addons template to determine the type of the resource you're outputting. There are several \"magic\" outputs for addons. They are:\r\n* Security Groups\r\n* Managed Policies\r\n* Secrets\r\n\r\nTo detect these outputs, we scan the template looking for the logical ID of the referenced resource. This means that we don't currently have a way of deriving the resource type of the results of `Fn::ImportValue` calls, since they don't refer to a logical ID defined in that addons template! \r\n\r\nI'm sorry this is causing you problems--it seems like you may need to add the managed policy to the addons stack of each service you want to grant this access to. This is something we might be able to do something about, though, and would love if if you could cut us a Github issue so we can prioritize and gather feedback on a proposal. ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I'm sorry this is causing you problems--it seems like you may need to add the managed policy to the addons stack of each service you want to grant this access to. ", "keywords": ["policy"]}]}], "filtered-sentences": [{"source": "Body", "text": "I'm sorry this is causing you problems--it seems like you may need to add the managed policy to the addons stack of each service you want to grant this access to. ", "keywords": ["policy"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "AWS Copilot - Attach Imported Policy to Task Role", "keywords": ["policy"]}, {"source": "Body", "text": "I'm trying to use CloudFormation AddOn template in the following scenario: Service 1 creates an SNS Topic and a Managed Policy that has all the necessary permissions to publish to it. ", "keywords": ["policy", "permissions"]}, {"source": "Body", "text": "Service N needs to publish activity messages using the common code library and needs whatever permissions are necessary. ", "keywords": ["permissions"]}, {"source": "Body", "text": "So service 1 writes the Managed Policy ARN out as an exported output to the AddOn stack like so: Then in service N, I was hoping to import the ARN of the publishing policy and get it attached to the task role: The ARN is imported just fine and written out to the Cloud Formation stack of Service N; however, the Task Role does not get the Managed Policy attached to it. ", "keywords": ["policy"]}, {"source": "Body", "text": "I did a quick test to see if adding the policy directly to the AddOn stack would attach and that does indeed work. ", "keywords": ["policy", "test"]}, {"source": "Body", "text": "I'd prefer not to write a new policy in every service to do this, and I'd prefer not to open up the topic policy our whole VPC if possible. ", "keywords": ["policy"]}]}