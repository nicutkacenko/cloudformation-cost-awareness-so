{"Id": "52113621", "PostTypeId": "1", "CreationDate": "2018-08-31T10:36:41.573", "Score": "2", "ViewCount": "2812", "Body": "<p>I have a CF template that creates a EC2 Instance and I'm doing some bootstrapping there within Metadata to install httpd and create a simple index.html in /var/www/html/index.html and starting the httpd.</p>\n\n<p>I have also configured cfn-hup helper to run and execute the UserData again when stack is updated. After creating the stack, I updated the stack by changing content in index.html file, I waited for more than 15 minutes to see the changes. But seems like cfn-hup didn't executed the changes. Here is my template, not sure what did I miss.</p>\n\n<pre><code>{\n    \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n\n    \"Description\" : \"AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.\",\n\n    \"Parameters\" : {\n      \"KeyName\": {\n        \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instance\",\n        \"Type\": \"AWS::EC2::KeyPair::KeyName\",\n        \"ConstraintDescription\" : \"Must be the name of an existing EC2 KeyPair.\"\n      },\n\n      \"InstanceType\" : {\n        \"Description\" : \"WebServer EC2 instance type\",\n        \"Type\" : \"String\",\n        \"Default\" : \"t2.micro\",\n        \"AllowedValues\" : [ \"t1.micro\", \"t2.nano\", \"t2.micro\", \"t2.small\", \"t2.medium\", \"t2.large\", \"m1.small\", \"m1.medium\",\n                            \"m1.large\", \"m1.xlarge\", \"m2.xlarge\", \"m2.2xlarge\", \"m2.4xlarge\", \"m3.medium\", \"m3.large\", \"m3.xlarge\", \n                            \"m3.2xlarge\", \"m4.large\", \"m4.xlarge\", \"m4.2xlarge\", \"m4.4xlarge\", \"m4.10xlarge\", \"c1.medium\", \"c1.xlarge\", \n                            \"c3.large\", \"c3.xlarge\", \"c3.2xlarge\", \"c3.4xlarge\", \"c3.8xlarge\", \"c4.large\", \"c4.xlarge\", \"c4.2xlarge\", \"c4.4xlarge\",\n                            \"c4.8xlarge\", \"g2.2xlarge\", \"g2.8xlarge\", \"r3.large\", \"r3.xlarge\", \"r3.2xlarge\", \"r3.4xlarge\", \"r3.8xlarge\", \"i2.xlarge\",\n                            \"i2.2xlarge\", \"i2.4xlarge\", \"i2.8xlarge\", \"d2.xlarge\", \"d2.2xlarge\", \"d2.4xlarge\", \"d2.8xlarge\"]\n  ,\n        \"ConstraintDescription\" : \"Must be a valid EC2 instance type.\"\n      },\n\n      \"SSHLocation\" : {\n        \"Description\" : \"The IP address range that can be used to SSH to the EC2 instances\",\n        \"Type\": \"String\",\n        \"MinLength\": \"9\",\n        \"MaxLength\": \"18\",\n        \"Default\": \"0.0.0.0/0\",\n        \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\",\n        \"ConstraintDescription\": \"Must be a valid IP CIDR range of the form x.x.x.x/x.\"\n     }\n    },\n\n    \"Mappings\" : {\n      \"AWSInstanceType2Arch\" : {\n        \"t1.micro\"    : { \"Arch\" : \"PV64\"   }, \"t2.nano\"     : { \"Arch\" : \"HVM64\"  }, \"t2.micro\"    : { \"Arch\" : \"HVM64\"  },\n        \"t2.small\"    : { \"Arch\" : \"HVM64\"  }, \"t2.medium\"   : { \"Arch\" : \"HVM64\"  }, \"t2.large\"    : { \"Arch\" : \"HVM64\"  },\n        \"m1.small\"    : { \"Arch\" : \"PV64\"   }, \"m1.medium\"   : { \"Arch\" : \"PV64\"   }, \"m1.large\"    : { \"Arch\" : \"PV64\"   },\n        \"m1.xlarge\"   : { \"Arch\" : \"PV64\"   }, \"m2.xlarge\"   : { \"Arch\" : \"PV64\"   }, \"m2.2xlarge\"  : { \"Arch\" : \"PV64\"   },\n        \"m2.4xlarge\"  : { \"Arch\" : \"PV64\"   }, \"m3.medium\"   : { \"Arch\" : \"HVM64\"  }, \"m3.large\"    : { \"Arch\" : \"HVM64\"  },\n        \"m3.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"m3.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"m4.large\"    : { \"Arch\" : \"HVM64\"  },\n        \"m4.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"m4.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"m4.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\n        \"m4.10xlarge\" : { \"Arch\" : \"HVM64\"  }, \"c1.medium\"   : { \"Arch\" : \"PV64\"   }, \"c1.xlarge\"   : { \"Arch\" : \"PV64\"   },\n        \"c3.large\"    : { \"Arch\" : \"HVM64\"  }, \"c3.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"c3.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\n        \"c3.4xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"c3.8xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"c4.large\"    : { \"Arch\" : \"HVM64\"  },\n        \"c4.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"c4.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"c4.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\n        \"c4.8xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"g2.2xlarge\"  : { \"Arch\" : \"HVMG2\"  }, \"g2.8xlarge\"  : { \"Arch\" : \"HVMG2\"  },\n        \"r3.large\"    : { \"Arch\" : \"HVM64\"  }, \"r3.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"r3.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\n        \"r3.4xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"r3.8xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"i2.xlarge\"   : { \"Arch\" : \"HVM64\"  },\n        \"i2.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"i2.4xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"i2.8xlarge\"  : { \"Arch\" : \"HVM64\"  },\n        \"d2.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"d2.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"d2.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\n        \"d2.8xlarge\"  : { \"Arch\" : \"HVM64\"  }\n      }\n  ,\n      \"AWSRegionArch2AMI\" : {\n        \"us-east-1\"        : {\"PV64\" : \"ami-2a69aa47\", \"HVM64\" : \"ami-97785bed\", \"HVMG2\" : \"ami-0a6e3770\"},\n        \"us-west-2\"        : {\"PV64\" : \"ami-7f77b31f\", \"HVM64\" : \"ami-f2d3638a\", \"HVMG2\" : \"ami-ee15a196\"},\n        \"us-west-1\"        : {\"PV64\" : \"ami-a2490dc2\", \"HVM64\" : \"ami-824c4ee2\", \"HVMG2\" : \"ami-0da4a46d\"},\n        \"eu-west-1\"        : {\"PV64\" : \"ami-4cdd453f\", \"HVM64\" : \"ami-d834aba1\", \"HVMG2\" : \"ami-af8013d6\"},\n        \"eu-west-2\"        : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-403e2524\", \"HVMG2\" : \"NOT_SUPPORTED\"},\n        \"eu-west-3\"        : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-8ee056f3\", \"HVMG2\" : \"NOT_SUPPORTED\"},\n        \"eu-central-1\"     : {\"PV64\" : \"ami-6527cf0a\", \"HVM64\" : \"ami-5652ce39\", \"HVMG2\" : \"ami-1d58ca72\"},\n        \"ap-northeast-1\"   : {\"PV64\" : \"ami-3e42b65f\", \"HVM64\" : \"ami-ceafcba8\", \"HVMG2\" : \"ami-edfd658b\"},\n        \"ap-northeast-2\"   : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-863090e8\", \"HVMG2\" : \"NOT_SUPPORTED\"},\n        \"ap-northeast-3\"   : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-83444afe\", \"HVMG2\" : \"NOT_SUPPORTED\"},\n        \"ap-southeast-1\"   : {\"PV64\" : \"ami-df9e4cbc\", \"HVM64\" : \"ami-68097514\", \"HVMG2\" : \"ami-c06013bc\"},\n        \"ap-southeast-2\"   : {\"PV64\" : \"ami-63351d00\", \"HVM64\" : \"ami-942dd1f6\", \"HVMG2\" : \"ami-85ef12e7\"},\n        \"ap-south-1\"       : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-531a4c3c\", \"HVMG2\" : \"ami-411e492e\"},\n        \"us-east-2\"        : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-f63b1193\", \"HVMG2\" : \"NOT_SUPPORTED\"},\n        \"ca-central-1\"     : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-a954d1cd\", \"HVMG2\" : \"NOT_SUPPORTED\"},\n        \"sa-east-1\"        : {\"PV64\" : \"ami-1ad34676\", \"HVM64\" : \"ami-84175ae8\", \"HVMG2\" : \"NOT_SUPPORTED\"},\n        \"cn-north-1\"       : {\"PV64\" : \"ami-77559f1a\", \"HVM64\" : \"ami-cb19c4a6\", \"HVMG2\" : \"NOT_SUPPORTED\"},\n        \"cn-northwest-1\"   : {\"PV64\" : \"ami-80707be2\", \"HVM64\" : \"ami-3e60745c\", \"HVMG2\" : \"NOT_SUPPORTED\"}\n      }\n\n    },\n\n    \"Resources\" : {\n      \"EC2Instance\" : {\n        \"Type\" : \"AWS::EC2::Instance\",\n        \"Metadata\" : {\n          \"AWS::CloudFormation::Init\" : {\n              \"configSets\" : {\n                  \"InstallAndRun\" : [ \"config1\", \"config2\" ]\n              },\n              \"config1\" : {\n                  \"packages\" : {\n                      \"yum\" : {\n                          \"httpd\" : []\n                      }\n                  },\n                  \"files\" : {\n                      \"/var/www/html/index.html\" : {\n                          \"content\" : { \"Fn::Join\" : [\"\", [\n                             \"&lt;h1 align='center'&gt;Heyyo cfn-up, oh sorry cfn-hup! :)&lt;/h1&gt;\"\n                            ]]},\n                          \"mode\" : \"000644\", \n                          \"owner\" : \"apache\", \n                          \"group\" : \"apache\"\n                      },\n\n                      \"/etc/cfn/cfn-hup.conf\" : {\n                        \"content\" : { \"Fn::Join\" : [\"\", [\n                          \"[main]\\n\",\n                          \"stack=\", { \"Ref\" : \"AWS::StackId\" }, \"\\n\",\n                          \"region=\", { \"Ref\" : \"AWS::Region\" }, \"\\n\"\n                        ]]},\n                        \"mode\"    : \"000400\",\n                        \"owner\"   : \"root\",\n                        \"group\"   : \"root\"\n                      },\n\n                      \"/etc/cfn/hooks.d/cfn-auto-reloader.conf\" : {\n                        \"content\": { \"Fn::Join\" : [\"\", [\n                          \"[cfn-auto-reloader-hook]\\n\",\n                          \"triggers=post.update\\n\",\n                          \"path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\\n\",\n                          \"action=/opt/aws/bin/cfn-init --stack \", \n                          { \"Ref\" : \"AWS::StackName\" }, \n                          \" --resource EC2Instance \",\n                          \" --configsets InstallAndRun \",\n                          \" --region     \", { \"Ref\" : \"AWS::Region\" }, \"\\n\",\n                          \"runas=root\\n\"\n                        ]]}\n                      }\n                  }\n              },\n              \"config2\" : {\n                  \"services\" : {\n                      \"sysvinit\" : {\n                          \"httpd\" : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\", \"packages\" : { \"yum\" : [\"httpd\"] },\n                          \"cfn-hup\" : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\",\n                            \"files\" : [\"/etc/cfn/cfn-hup.conf\", \"/etc/cfn/hooks.d/cfn-auto-reloader.conf\"]}\n                          }\n                      }\n                  }\n              }\n          }\n      },\n        \"Properties\" : {\n          \"InstanceType\" : { \"Ref\" : \"InstanceType\" },\n          \"SecurityGroups\" : [ { \"Ref\" : \"InstanceSecurityGroup\" } ],\n          \"KeyName\" : { \"Ref\" : \"KeyName\" },\n          \"ImageId\" : { \"Fn::FindInMap\" : [ \"AWSRegionArch2AMI\", { \"Ref\" : \"AWS::Region\" },\n                            { \"Fn::FindInMap\" : [ \"AWSInstanceType2Arch\", { \"Ref\" : \"InstanceType\" }, \"Arch\" ] } ] },\n          \"UserData\" : { \"Fn::Base64\" :\n                              { \"Fn::Join\" : [\"\", [\n                                 \"#!/bin/bash -xe\\n\",\n                                 \"yum update -y aws-cfn-bootstrap\\n\",\n                                 \"# Install the files and packages from the metadata\\n\",\n                                 \"/opt/aws/bin/cfn-init -v \",\n                                 \"         --stack \", { \"Ref\" : \"AWS::StackName\" },\n                                 \"         --resource EC2Instance \",\n                                 \"         --configsets InstallAndRun \",\n                                 \"         --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\",\n                                 \"# Start up the cfn-hup daemon to listen for changes to the EC2 metadata\\n\",\n                                 \"/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\\n\",  \n                                 \"# Signal the status from cfn-init\\n\",\n                                 \"/opt/aws/bin/cfn-signal -e $? \",\n                                 \"         --stack \", { \"Ref\" : \"AWS::StackName\" },\n                                 \"         --resource EC2Instance \",\n                                 \"         --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\"\n                              ]]}\n                      }                  \n        },\n        \"CreationPolicy\": {\n          \"ResourceSignal\": {\n            \"Count\": \"1\",\n            \"Timeout\": \"PT5M\"\n          }\n        }\n      },\n\n      \"InstanceSecurityGroup\" : {\n        \"Type\" : \"AWS::EC2::SecurityGroup\",\n        \"Properties\" : {\n          \"GroupDescription\" : \"Enable SSH access via port 22\",\n          \"SecurityGroupIngress\" : [ \n            { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"22\", \"ToPort\" : \"22\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"} },\n            { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"80\", \"ToPort\" : \"80\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"} }\n           ]\n        }\n      }\n    },\n\n    \"Outputs\" : {\n      \"InstanceId\" : {\n        \"Description\" : \"InstanceId of the newly created EC2 instance\",\n        \"Value\" : { \"Ref\" : \"EC2Instance\" }\n      },\n      \"AZ\" : {\n        \"Description\" : \"Availability Zone of the newly created EC2 instance\",\n        \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"AvailabilityZone\" ] }\n      },\n      \"PublicDNS\" : {\n        \"Description\" : \"Public DNSName of the newly created EC2 instance\",\n        \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicDnsName\" ] }\n      },\n      \"PublicIP\" : {\n        \"Description\" : \"Public IP address of the newly created EC2 instance\",\n        \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicIp\" ] }\n      }\n    }\n  }\n</code></pre>\n\n<p>Checking the whether cfn-hup daemon is running</p>\n\n<pre><code>sudo service --status-all | grep cfn\ncfn-hup (pid  2997) is running...\n</code></pre>\n\n<p>Here are /var/log/cfn-init.log</p>\n\n<pre><code>2018-08-31 09:39:46,949 [DEBUG] CloudFormation client initialized with endpoint https://cloudformation.us-east-1.amazonaws.com\n2018-08-31 09:39:46,955 [DEBUG] Describing resource EC2Instance in stack EC2-CFN-Init-With-cfn-hup\n2018-08-31 09:39:47,069 [INFO] -----------------------Starting build-----------------------\n2018-08-31 09:39:47,070 [DEBUG] Not setting a reboot trigger as scheduling support is not available\n2018-08-31 09:39:47,070 [INFO] Running configSets: InstallAndRun\n2018-08-31 09:39:47,071 [INFO] Running configSet InstallAndRun\n2018-08-31 09:39:47,072 [INFO] Running config config1\n2018-08-31 09:39:53,478 [DEBUG] Installing/updating [u'httpd'] via yum\n2018-08-31 09:39:55,430 [INFO] Yum installed [u'httpd']\n2018-08-31 09:39:55,430 [DEBUG] No groups specified\n2018-08-31 09:39:55,430 [DEBUG] No users specified\n2018-08-31 09:39:55,430 [DEBUG] No sources specified\n2018-08-31 09:39:55,430 [DEBUG] Parent directory /etc/cfn does not exist, creating\n2018-08-31 09:39:55,431 [DEBUG] Writing content to /etc/cfn/cfn-hup.conf\n2018-08-31 09:39:55,431 [DEBUG] Setting mode for /etc/cfn/cfn-hup.conf to 000400\n2018-08-31 09:39:55,431 [DEBUG] Setting owner 0 and group 0 for /etc/cfn/cfn-hup.conf\n2018-08-31 09:39:55,431 [DEBUG] Parent directory /etc/cfn/hooks.d does not exist, creating\n2018-08-31 09:39:55,431 [DEBUG] Writing content to /etc/cfn/hooks.d/cfn-auto-reloader.conf\n2018-08-31 09:39:55,432 [DEBUG] No mode specified for /etc/cfn/hooks.d/cfn-auto-reloader.conf. The file will be created with the mode: 0644\n2018-08-31 09:39:55,432 [DEBUG] Writing content to /var/www/html/index.html\n2018-08-31 09:39:55,432 [DEBUG] Setting mode for /var/www/html/index.html to 000644\n2018-08-31 09:39:55,432 [DEBUG] Setting owner 48 and group 48 for /var/www/html/index.html\n2018-08-31 09:39:55,432 [DEBUG] No commands specified\n2018-08-31 09:39:55,432 [DEBUG] No services specified\n2018-08-31 09:39:55,437 [INFO] Running config config2\n2018-08-31 09:39:55,437 [DEBUG] No packages specified\n2018-08-31 09:39:55,438 [DEBUG] No groups specified\n2018-08-31 09:39:55,438 [DEBUG] No users specified\n2018-08-31 09:39:55,438 [DEBUG] No sources specified\n2018-08-31 09:39:55,438 [DEBUG] No files specified\n2018-08-31 09:39:55,438 [DEBUG] No commands specified\n2018-08-31 09:39:55,438 [DEBUG] Using service modifier: /sbin/chkconfig\n2018-08-31 09:39:55,438 [DEBUG] Setting service httpd to enabled\n2018-08-31 09:39:55,469 [INFO] enabled service httpd\n2018-08-31 09:39:55,470 [DEBUG] Using service runner: /sbin/service\n2018-08-31 09:39:55,518 [DEBUG] Starting service httpd as it is not running\n2018-08-31 09:39:55,610 [INFO] Started httpd successfully\n2018-08-31 09:39:55,611 [INFO] ConfigSets completed\n2018-08-31 09:39:55,611 [DEBUG] Not clearing reboot trigger as scheduling support is not available\n2018-08-31 09:39:55,611 [INFO] -----------------------Build complete-----------------------\n2018-08-31 09:39:56,711 [DEBUG] CloudFormation client initialized with endpoint https://cloudformation.us-east-1.amazonaws.com\n2018-08-31 09:39:56,717 [DEBUG] Signaling resource EC2Instance in stack EC2-CFN-Init-With-cfn-hup with unique ID i-0ba14cfb8f8fdb9ad and status SUCCESS\n</code></pre>\n\n<p>Seeing the last lines of /var/log/cfn-hup.log, looks like cfn-hup is looking for changes every 15 minutes.</p>\n\n<pre><code>2018-08-31 09:39:56,163 [DEBUG] CloudFormation client initialized with endpoint https://cloudformation.us-east-1.amazonaws.com\n2018-08-31 09:39:56,163 [DEBUG] Creating /var/lib/cfn-hup/data\n2018-08-31 09:39:56,171 [INFO] No umask value specified in config file. Using the default one: 022\n2018-08-31 09:54:56,353 [INFO] cfn-hup processing is alive.\n2018-08-31 10:09:56,469 [INFO] cfn-hup processing is alive.\n2018-08-31 10:24:56,584 [INFO] cfn-hup processing is alive.\n</code></pre>\n\n<p>I'm expecting that If I change the content html, after 15 minutes I would see the change. Am I missing something.</p>\n\n<pre><code>\"/var/www/html/index.html\" : {\n                          \"content\" : { \"Fn::Join\" : [\"\", [\n                             \"&lt;h1 align='center'&gt;Heyyo cfn-up, oh sorry cfn-hup! :)&lt;/h1&gt;\"\n                            ]]},\n                          \"mode\" : \"000644\", \n                          \"owner\" : \"apache\", \n                          \"group\" : \"apache\"\n                      }\n</code></pre>\n\n<p>Also seeing the /var/lib/cfn-hup/data, I see stack update changes have been pulled down in metadata_db.json file. </p>\n", "OwnerUserId": "2947158", "LastEditorUserId": "2947158", "LastEditDate": "2018-08-31T12:10:30.227", "LastActivityDate": "2018-09-01T12:58:35.277", "Title": "Cfn-hup does not run on updating the Stack", "Tags": "|amazon-web-services|aws-cloudformation|", "AnswerCount": "2", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "180857714", "PostHistoryTypeId": "2", "PostId": "52113621", "RevisionGUID": "fe0ae618-8447-481d-ab53-def05315e5ab", "CreationDate": "2018-08-31T10:36:41.573", "UserId": "2947158", "Text": "I have a CF template that creates a EC2 Instance and I'm doing some bootstrapping there within Metadata to install httpd and create a simple index.html in /var/www/html/index.html and starting the httpd.\r\n\r\nI have also configured cfn-hup helper to run and execute the UserData again when stack is updated. After creating the stack, I updated the stack by changing content in index.html file, I waited for more than 15 minutes to see the changes. But seems like cfn-hup didn't executed the changes. Here is my template, not sure what did I miss.\r\n\r\n    {\r\n        \"AWSTemplateFormatVersion\" : \"2010-09-09\",\r\n      \r\n        \"Description\" : \"AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.\",\r\n      \r\n        \"Parameters\" : {\r\n          \"KeyName\": {\r\n            \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instance\",\r\n            \"Type\": \"AWS::EC2::KeyPair::KeyName\",\r\n            \"ConstraintDescription\" : \"Must be the name of an existing EC2 KeyPair.\"\r\n          },\r\n      \r\n          \"InstanceType\" : {\r\n            \"Description\" : \"WebServer EC2 instance type\",\r\n            \"Type\" : \"String\",\r\n            \"Default\" : \"t2.micro\",\r\n            \"AllowedValues\" : [ \"t1.micro\", \"t2.nano\", \"t2.micro\", \"t2.small\", \"t2.medium\", \"t2.large\", \"m1.small\", \"m1.medium\",\r\n                                \"m1.large\", \"m1.xlarge\", \"m2.xlarge\", \"m2.2xlarge\", \"m2.4xlarge\", \"m3.medium\", \"m3.large\", \"m3.xlarge\", \r\n                                \"m3.2xlarge\", \"m4.large\", \"m4.xlarge\", \"m4.2xlarge\", \"m4.4xlarge\", \"m4.10xlarge\", \"c1.medium\", \"c1.xlarge\", \r\n                                \"c3.large\", \"c3.xlarge\", \"c3.2xlarge\", \"c3.4xlarge\", \"c3.8xlarge\", \"c4.large\", \"c4.xlarge\", \"c4.2xlarge\", \"c4.4xlarge\",\r\n                                \"c4.8xlarge\", \"g2.2xlarge\", \"g2.8xlarge\", \"r3.large\", \"r3.xlarge\", \"r3.2xlarge\", \"r3.4xlarge\", \"r3.8xlarge\", \"i2.xlarge\",\r\n                                \"i2.2xlarge\", \"i2.4xlarge\", \"i2.8xlarge\", \"d2.xlarge\", \"d2.2xlarge\", \"d2.4xlarge\", \"d2.8xlarge\"]\r\n      ,\r\n            \"ConstraintDescription\" : \"Must be a valid EC2 instance type.\"\r\n          },\r\n      \r\n          \"SSHLocation\" : {\r\n            \"Description\" : \"The IP address range that can be used to SSH to the EC2 instances\",\r\n            \"Type\": \"String\",\r\n            \"MinLength\": \"9\",\r\n            \"MaxLength\": \"18\",\r\n            \"Default\": \"0.0.0.0/0\",\r\n            \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\",\r\n            \"ConstraintDescription\": \"Must be a valid IP CIDR range of the form x.x.x.x/x.\"\r\n         }\r\n        },\r\n      \r\n        \"Mappings\" : {\r\n          \"AWSInstanceType2Arch\" : {\r\n            \"t1.micro\"    : { \"Arch\" : \"PV64\"   }, \"t2.nano\"     : { \"Arch\" : \"HVM64\"  }, \"t2.micro\"    : { \"Arch\" : \"HVM64\"  },\r\n            \"t2.small\"    : { \"Arch\" : \"HVM64\"  }, \"t2.medium\"   : { \"Arch\" : \"HVM64\"  }, \"t2.large\"    : { \"Arch\" : \"HVM64\"  },\r\n            \"m1.small\"    : { \"Arch\" : \"PV64\"   }, \"m1.medium\"   : { \"Arch\" : \"PV64\"   }, \"m1.large\"    : { \"Arch\" : \"PV64\"   },\r\n            \"m1.xlarge\"   : { \"Arch\" : \"PV64\"   }, \"m2.xlarge\"   : { \"Arch\" : \"PV64\"   }, \"m2.2xlarge\"  : { \"Arch\" : \"PV64\"   },\r\n            \"m2.4xlarge\"  : { \"Arch\" : \"PV64\"   }, \"m3.medium\"   : { \"Arch\" : \"HVM64\"  }, \"m3.large\"    : { \"Arch\" : \"HVM64\"  },\r\n            \"m3.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"m3.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"m4.large\"    : { \"Arch\" : \"HVM64\"  },\r\n            \"m4.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"m4.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"m4.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n            \"m4.10xlarge\" : { \"Arch\" : \"HVM64\"  }, \"c1.medium\"   : { \"Arch\" : \"PV64\"   }, \"c1.xlarge\"   : { \"Arch\" : \"PV64\"   },\r\n            \"c3.large\"    : { \"Arch\" : \"HVM64\"  }, \"c3.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"c3.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n            \"c3.4xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"c3.8xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"c4.large\"    : { \"Arch\" : \"HVM64\"  },\r\n            \"c4.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"c4.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"c4.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n            \"c4.8xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"g2.2xlarge\"  : { \"Arch\" : \"HVMG2\"  }, \"g2.8xlarge\"  : { \"Arch\" : \"HVMG2\"  },\r\n            \"r3.large\"    : { \"Arch\" : \"HVM64\"  }, \"r3.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"r3.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n            \"r3.4xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"r3.8xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"i2.xlarge\"   : { \"Arch\" : \"HVM64\"  },\r\n            \"i2.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"i2.4xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"i2.8xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n            \"d2.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"d2.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"d2.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n            \"d2.8xlarge\"  : { \"Arch\" : \"HVM64\"  }\r\n          }\r\n      ,\r\n          \"AWSRegionArch2AMI\" : {\r\n            \"us-east-1\"        : {\"PV64\" : \"ami-2a69aa47\", \"HVM64\" : \"ami-97785bed\", \"HVMG2\" : \"ami-0a6e3770\"},\r\n            \"us-west-2\"        : {\"PV64\" : \"ami-7f77b31f\", \"HVM64\" : \"ami-f2d3638a\", \"HVMG2\" : \"ami-ee15a196\"},\r\n            \"us-west-1\"        : {\"PV64\" : \"ami-a2490dc2\", \"HVM64\" : \"ami-824c4ee2\", \"HVMG2\" : \"ami-0da4a46d\"},\r\n            \"eu-west-1\"        : {\"PV64\" : \"ami-4cdd453f\", \"HVM64\" : \"ami-d834aba1\", \"HVMG2\" : \"ami-af8013d6\"},\r\n            \"eu-west-2\"        : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-403e2524\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"eu-west-3\"        : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-8ee056f3\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"eu-central-1\"     : {\"PV64\" : \"ami-6527cf0a\", \"HVM64\" : \"ami-5652ce39\", \"HVMG2\" : \"ami-1d58ca72\"},\r\n            \"ap-northeast-1\"   : {\"PV64\" : \"ami-3e42b65f\", \"HVM64\" : \"ami-ceafcba8\", \"HVMG2\" : \"ami-edfd658b\"},\r\n            \"ap-northeast-2\"   : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-863090e8\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"ap-northeast-3\"   : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-83444afe\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"ap-southeast-1\"   : {\"PV64\" : \"ami-df9e4cbc\", \"HVM64\" : \"ami-68097514\", \"HVMG2\" : \"ami-c06013bc\"},\r\n            \"ap-southeast-2\"   : {\"PV64\" : \"ami-63351d00\", \"HVM64\" : \"ami-942dd1f6\", \"HVMG2\" : \"ami-85ef12e7\"},\r\n            \"ap-south-1\"       : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-531a4c3c\", \"HVMG2\" : \"ami-411e492e\"},\r\n            \"us-east-2\"        : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-f63b1193\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"ca-central-1\"     : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-a954d1cd\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"sa-east-1\"        : {\"PV64\" : \"ami-1ad34676\", \"HVM64\" : \"ami-84175ae8\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"cn-north-1\"       : {\"PV64\" : \"ami-77559f1a\", \"HVM64\" : \"ami-cb19c4a6\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"cn-northwest-1\"   : {\"PV64\" : \"ami-80707be2\", \"HVM64\" : \"ami-3e60745c\", \"HVMG2\" : \"NOT_SUPPORTED\"}\r\n          }\r\n      \r\n        },\r\n      \r\n        \"Resources\" : {\r\n          \"EC2Instance\" : {\r\n            \"Type\" : \"AWS::EC2::Instance\",\r\n            \"Metadata\" : {\r\n              \"AWS::CloudFormation::Init\" : {\r\n                  \"configSets\" : {\r\n                      \"InstallAndRun\" : [ \"config1\", \"config2\" ]\r\n                  },\r\n                  \"config1\" : {\r\n                      \"packages\" : {\r\n                          \"yum\" : {\r\n                              \"httpd\" : []\r\n                          }\r\n                      },\r\n                      \"files\" : {\r\n                          \"/var/www/html/index.html\" : {\r\n                              \"content\" : { \"Fn::Join\" : [\"\", [\r\n                                 \"<h1 align='center'>Heyyo cfn-up, oh sorry cfn-hup! :)</h1>\"\r\n                                ]]},\r\n                              \"mode\" : \"000644\", \r\n                              \"owner\" : \"apache\", \r\n                              \"group\" : \"apache\"\r\n                          },\r\n    \r\n                          \"/etc/cfn/cfn-hup.conf\" : {\r\n                            \"content\" : { \"Fn::Join\" : [\"\", [\r\n                              \"[main]\\n\",\r\n                              \"stack=\", { \"Ref\" : \"AWS::StackId\" }, \"\\n\",\r\n                              \"region=\", { \"Ref\" : \"AWS::Region\" }, \"\\n\"\r\n                            ]]},\r\n                            \"mode\"    : \"000400\",\r\n                            \"owner\"   : \"root\",\r\n                            \"group\"   : \"root\"\r\n                          },\r\n            \r\n                          \"/etc/cfn/hooks.d/cfn-auto-reloader.conf\" : {\r\n                            \"content\": { \"Fn::Join\" : [\"\", [\r\n                              \"[cfn-auto-reloader-hook]\\n\",\r\n                              \"triggers=post.update\\n\",\r\n                              \"path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\\n\",\r\n                              \"action=/opt/aws/bin/cfn-init -s \", { \"Ref\" : \"AWS::StackId\" }, \" -r WebServerInstance \",\r\n                                                               \" --region     \", { \"Ref\" : \"AWS::Region\" }, \"\\n\",\r\n                              \"runas=root\\n\"\r\n                            ]]}\r\n                          }\r\n                      }\r\n                  },\r\n                  \"config2\" : {\r\n                      \"services\" : {\r\n                          \"sysvinit\" : {\r\n                              \"httpd\" : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\", \"packages\" : { \"yum\" : [\"httpd\"] },\r\n                              \"cfn-hup\" : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\",\r\n                                \"files\" : [\"/etc/cfn/cfn-hup.conf\", \"/etc/cfn/hooks.d/cfn-auto-reloader.conf\"]}\r\n                              }\r\n                          }\r\n                      }\r\n                  }\r\n              }\r\n          },\r\n            \"Properties\" : {\r\n              \"InstanceType\" : { \"Ref\" : \"InstanceType\" },\r\n              \"SecurityGroups\" : [ { \"Ref\" : \"InstanceSecurityGroup\" } ],\r\n              \"KeyName\" : { \"Ref\" : \"KeyName\" },\r\n              \"ImageId\" : { \"Fn::FindInMap\" : [ \"AWSRegionArch2AMI\", { \"Ref\" : \"AWS::Region\" },\r\n                                { \"Fn::FindInMap\" : [ \"AWSInstanceType2Arch\", { \"Ref\" : \"InstanceType\" }, \"Arch\" ] } ] },\r\n              \"UserData\" : { \"Fn::Base64\" :\r\n                                  { \"Fn::Join\" : [\"\", [\r\n                                     \"#!/bin/bash -xe\\n\",\r\n                                     \"yum update -y aws-cfn-bootstrap\\n\",\r\n                                     \"# Install the files and packages from the metadata\\n\",\r\n                                     \"/opt/aws/bin/cfn-init -v \",\r\n                                     \"         --stack \", { \"Ref\" : \"AWS::StackName\" },\r\n                                     \"         --resource EC2Instance \",\r\n                                     \"         --configsets InstallAndRun \",\r\n                                     \"         --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\",\r\n                                     \"# Start up the cfn-hup daemon to listen for changes to the EC2 metadata\\n\",\r\n                                     \"/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\\n\",  \r\n                                     \"# Signal the status from cfn-init\\n\",\r\n                                     \"/opt/aws/bin/cfn-signal -e $? \",\r\n                                     \"         --stack \", { \"Ref\" : \"AWS::StackName\" },\r\n                                     \"         --resource EC2Instance \",\r\n                                     \"         --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\"\r\n                                  ]]}\r\n                          }                  \r\n            },\r\n            \"CreationPolicy\": {\r\n              \"ResourceSignal\": {\r\n                \"Count\": \"1\",\r\n                \"Timeout\": \"PT5M\"\r\n              }\r\n            }\r\n          },\r\n      \r\n          \"InstanceSecurityGroup\" : {\r\n            \"Type\" : \"AWS::EC2::SecurityGroup\",\r\n            \"Properties\" : {\r\n              \"GroupDescription\" : \"Enable SSH access via port 22\",\r\n              \"SecurityGroupIngress\" : [ \r\n                { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"22\", \"ToPort\" : \"22\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"} },\r\n                { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"80\", \"ToPort\" : \"80\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"} }\r\n               ]\r\n            }\r\n          }\r\n        },\r\n      \r\n        \"Outputs\" : {\r\n          \"InstanceId\" : {\r\n            \"Description\" : \"InstanceId of the newly created EC2 instance\",\r\n            \"Value\" : { \"Ref\" : \"EC2Instance\" }\r\n          },\r\n          \"AZ\" : {\r\n            \"Description\" : \"Availability Zone of the newly created EC2 instance\",\r\n            \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"AvailabilityZone\" ] }\r\n          },\r\n          \"PublicDNS\" : {\r\n            \"Description\" : \"Public DNSName of the newly created EC2 instance\",\r\n            \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicDnsName\" ] }\r\n          },\r\n          \"PublicIP\" : {\r\n            \"Description\" : \"Public IP address of the newly created EC2 instance\",\r\n            \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicIp\" ] }\r\n          }\r\n        }\r\n      } \r\n\r\nChecking the whether cfn-hup daemon is running\r\n\r\n    sudo service --status-all | grep cfn\r\n    cfn-hup (pid  2997) is running...\r\n\r\n\r\nHere are /var/log/cfn-init.log\r\n\r\n    2018-08-31 09:39:46,949 [DEBUG] CloudFormation client initialized with endpoint https://cloudformation.us-east-1.amazonaws.com\r\n    2018-08-31 09:39:46,955 [DEBUG] Describing resource EC2Instance in stack EC2-CFN-Init-With-cfn-hup\r\n    2018-08-31 09:39:47,069 [INFO] -----------------------Starting build-----------------------\r\n    2018-08-31 09:39:47,070 [DEBUG] Not setting a reboot trigger as scheduling support is not available\r\n    2018-08-31 09:39:47,070 [INFO] Running configSets: InstallAndRun\r\n    2018-08-31 09:39:47,071 [INFO] Running configSet InstallAndRun\r\n    2018-08-31 09:39:47,072 [INFO] Running config config1\r\n    2018-08-31 09:39:53,478 [DEBUG] Installing/updating [u'httpd'] via yum\r\n    2018-08-31 09:39:55,430 [INFO] Yum installed [u'httpd']\r\n    2018-08-31 09:39:55,430 [DEBUG] No groups specified\r\n    2018-08-31 09:39:55,430 [DEBUG] No users specified\r\n    2018-08-31 09:39:55,430 [DEBUG] No sources specified\r\n    2018-08-31 09:39:55,430 [DEBUG] Parent directory /etc/cfn does not exist, creating\r\n    2018-08-31 09:39:55,431 [DEBUG] Writing content to /etc/cfn/cfn-hup.conf\r\n    2018-08-31 09:39:55,431 [DEBUG] Setting mode for /etc/cfn/cfn-hup.conf to 000400\r\n    2018-08-31 09:39:55,431 [DEBUG] Setting owner 0 and group 0 for /etc/cfn/cfn-hup.conf\r\n    2018-08-31 09:39:55,431 [DEBUG] Parent directory /etc/cfn/hooks.d does not exist, creating\r\n    2018-08-31 09:39:55,431 [DEBUG] Writing content to /etc/cfn/hooks.d/cfn-auto-reloader.conf\r\n    2018-08-31 09:39:55,432 [DEBUG] No mode specified for /etc/cfn/hooks.d/cfn-auto-reloader.conf. The file will be created with the mode: 0644\r\n    2018-08-31 09:39:55,432 [DEBUG] Writing content to /var/www/html/index.html\r\n    2018-08-31 09:39:55,432 [DEBUG] Setting mode for /var/www/html/index.html to 000644\r\n    2018-08-31 09:39:55,432 [DEBUG] Setting owner 48 and group 48 for /var/www/html/index.html\r\n    2018-08-31 09:39:55,432 [DEBUG] No commands specified\r\n    2018-08-31 09:39:55,432 [DEBUG] No services specified\r\n    2018-08-31 09:39:55,437 [INFO] Running config config2\r\n    2018-08-31 09:39:55,437 [DEBUG] No packages specified\r\n    2018-08-31 09:39:55,438 [DEBUG] No groups specified\r\n    2018-08-31 09:39:55,438 [DEBUG] No users specified\r\n    2018-08-31 09:39:55,438 [DEBUG] No sources specified\r\n    2018-08-31 09:39:55,438 [DEBUG] No files specified\r\n    2018-08-31 09:39:55,438 [DEBUG] No commands specified\r\n    2018-08-31 09:39:55,438 [DEBUG] Using service modifier: /sbin/chkconfig\r\n    2018-08-31 09:39:55,438 [DEBUG] Setting service httpd to enabled\r\n    2018-08-31 09:39:55,469 [INFO] enabled service httpd\r\n    2018-08-31 09:39:55,470 [DEBUG] Using service runner: /sbin/service\r\n    2018-08-31 09:39:55,518 [DEBUG] Starting service httpd as it is not running\r\n    2018-08-31 09:39:55,610 [INFO] Started httpd successfully\r\n    2018-08-31 09:39:55,611 [INFO] ConfigSets completed\r\n    2018-08-31 09:39:55,611 [DEBUG] Not clearing reboot trigger as scheduling support is not available\r\n    2018-08-31 09:39:55,611 [INFO] -----------------------Build complete-----------------------\r\n    2018-08-31 09:39:56,711 [DEBUG] CloudFormation client initialized with endpoint https://cloudformation.us-east-1.amazonaws.com\r\n    2018-08-31 09:39:56,717 [DEBUG] Signaling resource EC2Instance in stack EC2-CFN-Init-With-cfn-hup with unique ID i-0ba14cfb8f8fdb9ad and status SUCCESS\r\n\r\nSeeing the last lines of /var/log/cfn-hup.log, looks like cfn-hup is looking for changes every 15 minutes.\r\n\r\n    2018-08-31 09:39:56,163 [DEBUG] CloudFormation client initialized with endpoint https://cloudformation.us-east-1.amazonaws.com\r\n    2018-08-31 09:39:56,163 [DEBUG] Creating /var/lib/cfn-hup/data\r\n    2018-08-31 09:39:56,171 [INFO] No umask value specified in config file. Using the default one: 022\r\n    2018-08-31 09:54:56,353 [INFO] cfn-hup processing is alive.\r\n    2018-08-31 10:09:56,469 [INFO] cfn-hup processing is alive.\r\n    2018-08-31 10:24:56,584 [INFO] cfn-hup processing is alive.\r\n\r\nI'm expecting that If I change the content html, after 15 minutes I would see the change. Am I missing something.\r\n\r\n    \"/var/www/html/index.html\" : {\r\n                              \"content\" : { \"Fn::Join\" : [\"\", [\r\n                                 \"<h1 align='center'>Heyyo cfn-up, oh sorry cfn-hup! :)</h1>\"\r\n                                ]]},\r\n                              \"mode\" : \"000644\", \r\n                              \"owner\" : \"apache\", \r\n                              \"group\" : \"apache\"\r\n                          }\r\n\r\nAlso seeing the /var/lib/cfn-hup/data, I see stack update changes have been pulled down in metadata_db.json file. ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have a CF template that creates a EC2 Instance and I'm doing some bootstrapping there within Metadata to install httpd and create a simple index.html in /var/www/html/index.html and starting the httpd. ", "keywords": ["instance"]}, {"source": "Text", "text": "After creating the stack, I updated the stack by changing content in index.html file, I waited for more than 15 minutes to see the changes. ", "keywords": ["change"]}, {"source": "Text", "text": "But seems like cfn-hup didn't executed the changes. ", "keywords": ["change"]}, {"source": "Text", "text": "{ \"AWSTemplateFormatVersion\" : \"2010-09-09\", \"Description\" : \"AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. ", "keywords": ["instance"]}, {"source": "Text", "text": "This example creates an EC2 security group for the instance to give you SSH access. ", "keywords": ["instance"]}, {"source": "Text", "text": "This template creates an Amazon EC2 instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "You will be billed for the AWS resources used if you create a stack from this template.\", \"Parameters\" : { \"KeyName\": { \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instance\", \"Type\": \"AWS::EC2::KeyPair::KeyName\", \"ConstraintDescription\" : \"Must be the name of an existing EC2 KeyPair.\" }, \"InstanceType\" : { \"Description\" : \"WebServer EC2 instance type\", \"Type\" : \"String\", \"Default\" : \"t2.micro\", \"AllowedValues\" : [ \"t1.micro\", \"t2.nano\", \"t2.micro\", \"t2.small\", \"t2.medium\", \"t2.large\", \"m1.small\", \"m1.medium\", \"m1.large\", \"m1.xlarge\", \"m2.xlarge\", \"m2.2xlarge\", \"m2.4xlarge\", \"m3.medium\", \"m3.large\", \"m3.xlarge\", \"m3.2xlarge\", \"m4.large\", \"m4.xlarge\", \"m4.2xlarge\", \"m4.4xlarge\", \"m4.10xlarge\", \"c1.medium\", \"c1.xlarge\", \"c3.large\", \"c3.xlarge\", \"c3.2xlarge\", \"c3.4xlarge\", \"c3.8xlarge\", \"c4.large\", \"c4.xlarge\", \"c4.2xlarge\", \"c4.4xlarge\", \"c4.8xlarge\", \"g2.2xlarge\", \"g2.8xlarge\", \"r3.large\", \"r3.xlarge\", \"r3.2xlarge\", \"r3.4xlarge\", \"r3.8xlarge\", \"i2.xlarge\", \"i2.2xlarge\", \"i2.4xlarge\", \"i2.8xlarge\", \"d2.xlarge\", \"d2.2xlarge\", \"d2.4xlarge\", \"d2.8xlarge\"] , \"ConstraintDescription\" : \"Must be a valid EC2 instance type.\" }, \"SSHLocation\" : { \"Description\" : \"The IP address range that can be used to SSH to the EC2 instances\", \"Type\": \"String\", \"MinLength\": \"9\", \"MaxLength\": \"18\", \"Default\": \"0.0.0.0/0\", \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\", \"ConstraintDescription\": \"Must be a valid IP CIDR range of the form x.x.x.x/x.\" } }, \"Mappings\" : { \"AWSInstanceType2Arch\" : { \"t1.micro\" : { \"Arch\" : \"PV64\" ", "keywords": ["bill", "instance"]}, {"source": "Text", "text": "} } , \"AWSRegionArch2AMI\" : { \"us-east-1\" : {\"PV64\" : \"ami-2a69aa47\", \"HVM64\" : \"ami-97785bed\", \"HVMG2\" : \"ami-0a6e3770\"}, \"us-west-2\" : {\"PV64\" : \"ami-7f77b31f\", \"HVM64\" : \"ami-f2d3638a\", \"HVMG2\" : \"ami-ee15a196\"}, \"us-west-1\" : {\"PV64\" : \"ami-a2490dc2\", \"HVM64\" : \"ami-824c4ee2\", \"HVMG2\" : \"ami-0da4a46d\"}, \"eu-west-1\" : {\"PV64\" : \"ami-4cdd453f\", \"HVM64\" : \"ami-d834aba1\", \"HVMG2\" : \"ami-af8013d6\"}, \"eu-west-2\" : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-403e2524\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"eu-west-3\" : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-8ee056f3\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"eu-central-1\" : {\"PV64\" : \"ami-6527cf0a\", \"HVM64\" : \"ami-5652ce39\", \"HVMG2\" : \"ami-1d58ca72\"}, \"ap-northeast-1\" : {\"PV64\" : \"ami-3e42b65f\", \"HVM64\" : \"ami-ceafcba8\", \"HVMG2\" : \"ami-edfd658b\"}, \"ap-northeast-2\" : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-863090e8\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"ap-northeast-3\" : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-83444afe\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"ap-southeast-1\" : {\"PV64\" : \"ami-df9e4cbc\", \"HVM64\" : \"ami-68097514\", \"HVMG2\" : \"ami-c06013bc\"}, \"ap-southeast-2\" : {\"PV64\" : \"ami-63351d00\", \"HVM64\" : \"ami-942dd1f6\", \"HVMG2\" : \"ami-85ef12e7\"}, \"ap-south-1\" : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-531a4c3c\", \"HVMG2\" : \"ami-411e492e\"}, \"us-east-2\" : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-f63b1193\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"ca-central-1\" : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-a954d1cd\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"sa-east-1\" : {\"PV64\" : \"ami-1ad34676\", \"HVM64\" : \"ami-84175ae8\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"cn-north-1\" : {\"PV64\" : \"ami-77559f1a\", \"HVM64\" : \"ami-cb19c4a6\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"cn-northwest-1\" : {\"PV64\" : \"ami-80707be2\", \"HVM64\" : \"ami-3e60745c\", \"HVMG2\" : \"NOT_SUPPORTED\"} } }, \"Resources\" : { \"EC2Instance\" : { \"Type\" : \"AWS::EC2::Instance\", \"Metadata\" : { \"AWS::CloudFormation::Init\" : { \"configSets\" : { \"InstallAndRun\" : [ \"config1\", \"config2\" ] }, \"config1\" : { \"packages\" : { \"yum\" : { \"httpd\" : [] } }, \"files\" : { \"/var/www/html/index.html\" : { \"content\" : { \"Fn::Join\" : [\"\", [ \"Heyyo cfn-up, oh sorry cfn-hup! :)\" ]]}, \"mode\" : \"000644\", \"owner\" : \"apache\", \"group\" : \"apache\" }, \"/etc/cfn/cfn-hup.conf\" : { \"content\" : { \"Fn::Join\" : [\"\", [ \"[main]\\n\", \"stack=\", { \"Ref\" : \"AWS::StackId\" }, \"\\n\", \"region=\", { \"Ref\" : \"AWS::Region\" ", "keywords": ["instance", "billing mode"]}, {"source": "Text", "text": "}, \"\\n\" ]]}, \"mode\" : \"000400\", \"owner\" : \"root\", \"group\" : \"root\" }, \"/etc/cfn/hooks.d/cfn-auto-reloader.conf\" : { \"content\": { \"Fn::Join\" : [\"\", [ \"[cfn-auto-reloader-hook]\\n\", \"triggers=post.update\\n\", \"path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\\n\", \"action=/opt/aws/bin/cfn-init -s \", { \"Ref\" : \"AWS::StackId\" }, \" -r WebServerInstance \", \" --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\", \"runas=root\\n\" ]]} } } }, \"config2\" : { \"services\" : { \"sysvinit\" : { \"httpd\" : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\", \"packages\" : { \"yum\" : [\"httpd\"] }, \"cfn-hup\" : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\", \"files\" : [\"/etc/cfn/cfn-hup.conf\", \"/etc/cfn/hooks.d/cfn-auto-reloader.conf\"]} } } } } } }, \"Properties\" : { \"InstanceType\" : { \"Ref\" : \"InstanceType\" }, \"SecurityGroups\" : [ { \"Ref\" : \"InstanceSecurityGroup\" } ], \"KeyName\" : { \"Ref\" : \"KeyName\" ", "keywords": ["billing mode"]}, {"source": "Text", "text": "}, { \"Fn::FindInMap\" : [ \"AWSInstanceType2Arch\", { \"Ref\" : \"InstanceType\" }, \"Arch\" ] } ] }, \"UserData\" : { \"Fn::Base64\" : { \"Fn::Join\" : [\"\", [ \"#!/bin/bash -xe\\n\", \"yum update -y aws-cfn-bootstrap\\n\", \"# Install the files and packages from the metadata\\n\", \"/opt/aws/bin/cfn-init -v \", \" --stack \", { \"Ref\" : \"AWS::StackName\" }, \" --resource EC2Instance \", \" --configsets InstallAndRun \", \" --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\", \"# Start up the cfn-hup daemon to listen for changes to the EC2 metadata\\n\", \"/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\\n\", \"# Signal the status from cfn-init\\n\", \"/opt/aws/bin/cfn-signal -e $? \", \" --stack \", { \"Ref\" : \"AWS::StackName\" }, \" --resource EC2Instance \", \" --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\" ]]} } }, \"CreationPolicy\": { \"ResourceSignal\": { \"Count\": \"1\", \"Timeout\": \"PT5M\" } } }, \"InstanceSecurityGroup\" : { \"Type\" : \"AWS::EC2::SecurityGroup\", \"Properties\" : { \"GroupDescription\" : \"Enable SSH access via port 22\", \"SecurityGroupIngress\" : [ { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"22\", \"ToPort\" : \"22\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"} }, { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"80\", \"ToPort\" : \"80\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"} } ] } } }, \"Outputs\" : { \"InstanceId\" : { \"Description\" : \"InstanceId of the newly created EC2 instance\", \"Value\" : { \"Ref\" : \"EC2Instance\" } }, \"AZ\" : { \"Description\" : \"Availability Zone of the newly created EC2 instance\", \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"AvailabilityZone\" ] } }, \"PublicDNS\" : { \"Description\" : \"Public DNSName of the newly created EC2 instance\", \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicDnsName\" ] } }, \"PublicIP\" : { \"Description\" : \"Public IP address of the newly created EC2 instance\", \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicIp\" ] } } } } Checking the whether cfn-hup daemon is running sudo service --status-all | grep cfn cfn-hup (pid 2997) is running... ", "keywords": ["instance", "change"]}, {"source": "Text", "text": "Here are /var/log/cfn-init.log 2018-08-31 09:39:46,949 [DEBUG] CloudFormation client initialized with endpoint https://cloudformation.us-east-1.amazonaws.com 2018-08-31 09:39:46,955 [DEBUG] Describing resource EC2Instance in stack EC2-CFN-Init-With-cfn-hup 2018-08-31 09:39:47,069 [INFO] -----------------------Starting build----------------------- 2018-08-31 09:39:47,070 [DEBUG] Not setting a reboot trigger as scheduling support is not available 2018-08-31 09:39:47,070 [INFO] Running configSets: InstallAndRun 2018-08-31 09:39:47,071 [INFO] Running configSet InstallAndRun 2018-08-31 09:39:47,072 [INFO] Running config config1 2018-08-31 09:39:53,478 [DEBUG] Installing/updating [u'httpd'] via yum 2018-08-31 09:39:55,430 [INFO] Yum installed [u'httpd'] 2018-08-31 09:39:55,430 [DEBUG] No groups specified 2018-08-31 09:39:55,430 [DEBUG] No users specified 2018-08-31 09:39:55,430 [DEBUG] No sources specified 2018-08-31 09:39:55,430 [DEBUG] Parent directory /etc/cfn does not exist, creating 2018-08-31 09:39:55,431 [DEBUG] Writing content to /etc/cfn/cfn-hup.conf 2018-08-31 09:39:55,431 [DEBUG] Setting mode for /etc/cfn/cfn-hup.conf to 000400 2018-08-31 09:39:55,431 [DEBUG] Setting owner 0 and group 0 for /etc/cfn/cfn-hup.conf 2018-08-31 09:39:55,431 [DEBUG] Parent directory /etc/cfn/hooks.d does not exist, creating 2018-08-31 09:39:55,431 [DEBUG] Writing content to /etc/cfn/hooks.d/cfn-auto-reloader.conf 2018-08-31 09:39:55,432 [DEBUG] No mode specified for /etc/cfn/hooks.d/cfn-auto-reloader.conf. The file will be created with the mode: 0644 2018-08-31 09:39:55,432 [DEBUG] Writing content to /var/www/html/index.html 2018-08-31 09:39:55,432 [DEBUG] Setting mode for /var/www/html/index.html to 000644 2018-08-31 09:39:55,432 [DEBUG] Setting owner 48 and group 48 for /var/www/html/index.html 2018-08-31 09:39:55,432 [DEBUG] No commands specified 2018-08-31 09:39:55,432 [DEBUG] No services specified 2018-08-31 09:39:55,437 [INFO] Running config config2 2018-08-31 09:39:55,437 [DEBUG] No packages specified 2018-08-31 09:39:55,438 [DEBUG] No groups specified 2018-08-31 09:39:55,438 [DEBUG] No users specified 2018-08-31 09:39:55,438 [DEBUG] No sources specified 2018-08-31 09:39:55,438 [DEBUG] No files specified 2018-08-31 09:39:55,438 [DEBUG] No commands specified 2018-08-31 09:39:55,438 [DEBUG] Using service modifier: /sbin/chkconfig 2018-08-31 09:39:55,438 [DEBUG] Setting service httpd to enabled 2018-08-31 09:39:55,469 [INFO] enabled service httpd 2018-08-31 09:39:55,470 [DEBUG] Using service runner: /sbin/service 2018-08-31 09:39:55,518 [DEBUG] Starting service httpd as it is not running 2018-08-31 09:39:55,610 [INFO] Started httpd successfully 2018-08-31 09:39:55,611 [INFO] ConfigSets completed 2018-08-31 09:39:55,611 [DEBUG] Not clearing reboot trigger as scheduling support is not available 2018-08-31 09:39:55,611 [INFO] -----------------------Build complete----------------------- 2018-08-31 09:39:56,711 [DEBUG] CloudFormation client initialized with endpoint https://cloudformation.us-east-1.amazonaws.com 2018-08-31 09:39:56,717 [DEBUG] Signaling resource EC2Instance in stack EC2-CFN-Init-With-cfn-hup with unique ID i-0ba14cfb8f8fdb9ad and status SUCCESS Seeing the last lines of /var/log/cfn-hup.log, looks like cfn-hup is looking for changes every 15 minutes. ", "keywords": ["billing mode", "change"]}, {"source": "Text", "text": "I'm expecting that If I change the content html, after 15 minutes I would see the change. ", "keywords": ["change"]}, {"source": "Text", "text": "\"/var/www/html/index.html\" : { \"content\" : { \"Fn::Join\" : [\"\", [ \"Heyyo cfn-up, oh sorry cfn-hup! :)\" ]]}, \"mode\" : \"000644\", \"owner\" : \"apache\", \"group\" : \"apache\" ", "keywords": ["billing mode"]}, {"source": "Text", "text": "} Also seeing the /var/lib/cfn-hup/data, I see stack update changes have been pulled down in metadata_db.json file.", "keywords": ["change"]}]}, {"Id": "180857715", "PostHistoryTypeId": "1", "PostId": "52113621", "RevisionGUID": "fe0ae618-8447-481d-ab53-def05315e5ab", "CreationDate": "2018-08-31T10:36:41.573", "UserId": "2947158", "Text": "Cfn-hup does not run on updating the Stack", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "180857716", "PostHistoryTypeId": "3", "PostId": "52113621", "RevisionGUID": "fe0ae618-8447-481d-ab53-def05315e5ab", "CreationDate": "2018-08-31T10:36:41.573", "UserId": "2947158", "Text": "|amazon-web-services|aws-cloudformation|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "180864115", "PostHistoryTypeId": "5", "PostId": "52113621", "RevisionGUID": "c954c359-7458-45ed-89db-1f39c20f4daf", "CreationDate": "2018-08-31T12:10:30.227", "UserId": "2947158", "Comment": "added 102 characters in body", "Text": "I have a CF template that creates a EC2 Instance and I'm doing some bootstrapping there within Metadata to install httpd and create a simple index.html in /var/www/html/index.html and starting the httpd.\r\n\r\nI have also configured cfn-hup helper to run and execute the UserData again when stack is updated. After creating the stack, I updated the stack by changing content in index.html file, I waited for more than 15 minutes to see the changes. But seems like cfn-hup didn't executed the changes. Here is my template, not sure what did I miss.\r\n\r\n    {\r\n        \"AWSTemplateFormatVersion\" : \"2010-09-09\",\r\n      \r\n        \"Description\" : \"AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.\",\r\n      \r\n        \"Parameters\" : {\r\n          \"KeyName\": {\r\n            \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instance\",\r\n            \"Type\": \"AWS::EC2::KeyPair::KeyName\",\r\n            \"ConstraintDescription\" : \"Must be the name of an existing EC2 KeyPair.\"\r\n          },\r\n      \r\n          \"InstanceType\" : {\r\n            \"Description\" : \"WebServer EC2 instance type\",\r\n            \"Type\" : \"String\",\r\n            \"Default\" : \"t2.micro\",\r\n            \"AllowedValues\" : [ \"t1.micro\", \"t2.nano\", \"t2.micro\", \"t2.small\", \"t2.medium\", \"t2.large\", \"m1.small\", \"m1.medium\",\r\n                                \"m1.large\", \"m1.xlarge\", \"m2.xlarge\", \"m2.2xlarge\", \"m2.4xlarge\", \"m3.medium\", \"m3.large\", \"m3.xlarge\", \r\n                                \"m3.2xlarge\", \"m4.large\", \"m4.xlarge\", \"m4.2xlarge\", \"m4.4xlarge\", \"m4.10xlarge\", \"c1.medium\", \"c1.xlarge\", \r\n                                \"c3.large\", \"c3.xlarge\", \"c3.2xlarge\", \"c3.4xlarge\", \"c3.8xlarge\", \"c4.large\", \"c4.xlarge\", \"c4.2xlarge\", \"c4.4xlarge\",\r\n                                \"c4.8xlarge\", \"g2.2xlarge\", \"g2.8xlarge\", \"r3.large\", \"r3.xlarge\", \"r3.2xlarge\", \"r3.4xlarge\", \"r3.8xlarge\", \"i2.xlarge\",\r\n                                \"i2.2xlarge\", \"i2.4xlarge\", \"i2.8xlarge\", \"d2.xlarge\", \"d2.2xlarge\", \"d2.4xlarge\", \"d2.8xlarge\"]\r\n      ,\r\n            \"ConstraintDescription\" : \"Must be a valid EC2 instance type.\"\r\n          },\r\n      \r\n          \"SSHLocation\" : {\r\n            \"Description\" : \"The IP address range that can be used to SSH to the EC2 instances\",\r\n            \"Type\": \"String\",\r\n            \"MinLength\": \"9\",\r\n            \"MaxLength\": \"18\",\r\n            \"Default\": \"0.0.0.0/0\",\r\n            \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\",\r\n            \"ConstraintDescription\": \"Must be a valid IP CIDR range of the form x.x.x.x/x.\"\r\n         }\r\n        },\r\n      \r\n        \"Mappings\" : {\r\n          \"AWSInstanceType2Arch\" : {\r\n            \"t1.micro\"    : { \"Arch\" : \"PV64\"   }, \"t2.nano\"     : { \"Arch\" : \"HVM64\"  }, \"t2.micro\"    : { \"Arch\" : \"HVM64\"  },\r\n            \"t2.small\"    : { \"Arch\" : \"HVM64\"  }, \"t2.medium\"   : { \"Arch\" : \"HVM64\"  }, \"t2.large\"    : { \"Arch\" : \"HVM64\"  },\r\n            \"m1.small\"    : { \"Arch\" : \"PV64\"   }, \"m1.medium\"   : { \"Arch\" : \"PV64\"   }, \"m1.large\"    : { \"Arch\" : \"PV64\"   },\r\n            \"m1.xlarge\"   : { \"Arch\" : \"PV64\"   }, \"m2.xlarge\"   : { \"Arch\" : \"PV64\"   }, \"m2.2xlarge\"  : { \"Arch\" : \"PV64\"   },\r\n            \"m2.4xlarge\"  : { \"Arch\" : \"PV64\"   }, \"m3.medium\"   : { \"Arch\" : \"HVM64\"  }, \"m3.large\"    : { \"Arch\" : \"HVM64\"  },\r\n            \"m3.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"m3.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"m4.large\"    : { \"Arch\" : \"HVM64\"  },\r\n            \"m4.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"m4.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"m4.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n            \"m4.10xlarge\" : { \"Arch\" : \"HVM64\"  }, \"c1.medium\"   : { \"Arch\" : \"PV64\"   }, \"c1.xlarge\"   : { \"Arch\" : \"PV64\"   },\r\n            \"c3.large\"    : { \"Arch\" : \"HVM64\"  }, \"c3.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"c3.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n            \"c3.4xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"c3.8xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"c4.large\"    : { \"Arch\" : \"HVM64\"  },\r\n            \"c4.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"c4.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"c4.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n            \"c4.8xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"g2.2xlarge\"  : { \"Arch\" : \"HVMG2\"  }, \"g2.8xlarge\"  : { \"Arch\" : \"HVMG2\"  },\r\n            \"r3.large\"    : { \"Arch\" : \"HVM64\"  }, \"r3.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"r3.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n            \"r3.4xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"r3.8xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"i2.xlarge\"   : { \"Arch\" : \"HVM64\"  },\r\n            \"i2.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"i2.4xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"i2.8xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n            \"d2.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"d2.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"d2.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n            \"d2.8xlarge\"  : { \"Arch\" : \"HVM64\"  }\r\n          }\r\n      ,\r\n          \"AWSRegionArch2AMI\" : {\r\n            \"us-east-1\"        : {\"PV64\" : \"ami-2a69aa47\", \"HVM64\" : \"ami-97785bed\", \"HVMG2\" : \"ami-0a6e3770\"},\r\n            \"us-west-2\"        : {\"PV64\" : \"ami-7f77b31f\", \"HVM64\" : \"ami-f2d3638a\", \"HVMG2\" : \"ami-ee15a196\"},\r\n            \"us-west-1\"        : {\"PV64\" : \"ami-a2490dc2\", \"HVM64\" : \"ami-824c4ee2\", \"HVMG2\" : \"ami-0da4a46d\"},\r\n            \"eu-west-1\"        : {\"PV64\" : \"ami-4cdd453f\", \"HVM64\" : \"ami-d834aba1\", \"HVMG2\" : \"ami-af8013d6\"},\r\n            \"eu-west-2\"        : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-403e2524\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"eu-west-3\"        : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-8ee056f3\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"eu-central-1\"     : {\"PV64\" : \"ami-6527cf0a\", \"HVM64\" : \"ami-5652ce39\", \"HVMG2\" : \"ami-1d58ca72\"},\r\n            \"ap-northeast-1\"   : {\"PV64\" : \"ami-3e42b65f\", \"HVM64\" : \"ami-ceafcba8\", \"HVMG2\" : \"ami-edfd658b\"},\r\n            \"ap-northeast-2\"   : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-863090e8\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"ap-northeast-3\"   : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-83444afe\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"ap-southeast-1\"   : {\"PV64\" : \"ami-df9e4cbc\", \"HVM64\" : \"ami-68097514\", \"HVMG2\" : \"ami-c06013bc\"},\r\n            \"ap-southeast-2\"   : {\"PV64\" : \"ami-63351d00\", \"HVM64\" : \"ami-942dd1f6\", \"HVMG2\" : \"ami-85ef12e7\"},\r\n            \"ap-south-1\"       : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-531a4c3c\", \"HVMG2\" : \"ami-411e492e\"},\r\n            \"us-east-2\"        : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-f63b1193\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"ca-central-1\"     : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-a954d1cd\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"sa-east-1\"        : {\"PV64\" : \"ami-1ad34676\", \"HVM64\" : \"ami-84175ae8\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"cn-north-1\"       : {\"PV64\" : \"ami-77559f1a\", \"HVM64\" : \"ami-cb19c4a6\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"cn-northwest-1\"   : {\"PV64\" : \"ami-80707be2\", \"HVM64\" : \"ami-3e60745c\", \"HVMG2\" : \"NOT_SUPPORTED\"}\r\n          }\r\n      \r\n        },\r\n      \r\n        \"Resources\" : {\r\n          \"EC2Instance\" : {\r\n            \"Type\" : \"AWS::EC2::Instance\",\r\n            \"Metadata\" : {\r\n              \"AWS::CloudFormation::Init\" : {\r\n                  \"configSets\" : {\r\n                      \"InstallAndRun\" : [ \"config1\", \"config2\" ]\r\n                  },\r\n                  \"config1\" : {\r\n                      \"packages\" : {\r\n                          \"yum\" : {\r\n                              \"httpd\" : []\r\n                          }\r\n                      },\r\n                      \"files\" : {\r\n                          \"/var/www/html/index.html\" : {\r\n                              \"content\" : { \"Fn::Join\" : [\"\", [\r\n                                 \"<h1 align='center'>Heyyo cfn-up, oh sorry cfn-hup! :)</h1>\"\r\n                                ]]},\r\n                              \"mode\" : \"000644\", \r\n                              \"owner\" : \"apache\", \r\n                              \"group\" : \"apache\"\r\n                          },\r\n    \r\n                          \"/etc/cfn/cfn-hup.conf\" : {\r\n                            \"content\" : { \"Fn::Join\" : [\"\", [\r\n                              \"[main]\\n\",\r\n                              \"stack=\", { \"Ref\" : \"AWS::StackId\" }, \"\\n\",\r\n                              \"region=\", { \"Ref\" : \"AWS::Region\" }, \"\\n\"\r\n                            ]]},\r\n                            \"mode\"    : \"000400\",\r\n                            \"owner\"   : \"root\",\r\n                            \"group\"   : \"root\"\r\n                          },\r\n            \r\n                          \"/etc/cfn/hooks.d/cfn-auto-reloader.conf\" : {\r\n                            \"content\": { \"Fn::Join\" : [\"\", [\r\n                              \"[cfn-auto-reloader-hook]\\n\",\r\n                              \"triggers=post.update\\n\",\r\n                              \"path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\\n\",\r\n                              \"action=/opt/aws/bin/cfn-init --stack \", \r\n                              { \"Ref\" : \"AWS::StackName\" }, \r\n                              \" --resource EC2Instance \",\r\n                              \" --configsets InstallAndRun \",\r\n                              \" --region     \", { \"Ref\" : \"AWS::Region\" }, \"\\n\",\r\n                              \"runas=root\\n\"\r\n                            ]]}\r\n                          }\r\n                      }\r\n                  },\r\n                  \"config2\" : {\r\n                      \"services\" : {\r\n                          \"sysvinit\" : {\r\n                              \"httpd\" : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\", \"packages\" : { \"yum\" : [\"httpd\"] },\r\n                              \"cfn-hup\" : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\",\r\n                                \"files\" : [\"/etc/cfn/cfn-hup.conf\", \"/etc/cfn/hooks.d/cfn-auto-reloader.conf\"]}\r\n                              }\r\n                          }\r\n                      }\r\n                  }\r\n              }\r\n          },\r\n            \"Properties\" : {\r\n              \"InstanceType\" : { \"Ref\" : \"InstanceType\" },\r\n              \"SecurityGroups\" : [ { \"Ref\" : \"InstanceSecurityGroup\" } ],\r\n              \"KeyName\" : { \"Ref\" : \"KeyName\" },\r\n              \"ImageId\" : { \"Fn::FindInMap\" : [ \"AWSRegionArch2AMI\", { \"Ref\" : \"AWS::Region\" },\r\n                                { \"Fn::FindInMap\" : [ \"AWSInstanceType2Arch\", { \"Ref\" : \"InstanceType\" }, \"Arch\" ] } ] },\r\n              \"UserData\" : { \"Fn::Base64\" :\r\n                                  { \"Fn::Join\" : [\"\", [\r\n                                     \"#!/bin/bash -xe\\n\",\r\n                                     \"yum update -y aws-cfn-bootstrap\\n\",\r\n                                     \"# Install the files and packages from the metadata\\n\",\r\n                                     \"/opt/aws/bin/cfn-init -v \",\r\n                                     \"         --stack \", { \"Ref\" : \"AWS::StackName\" },\r\n                                     \"         --resource EC2Instance \",\r\n                                     \"         --configsets InstallAndRun \",\r\n                                     \"         --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\",\r\n                                     \"# Start up the cfn-hup daemon to listen for changes to the EC2 metadata\\n\",\r\n                                     \"/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\\n\",  \r\n                                     \"# Signal the status from cfn-init\\n\",\r\n                                     \"/opt/aws/bin/cfn-signal -e $? \",\r\n                                     \"         --stack \", { \"Ref\" : \"AWS::StackName\" },\r\n                                     \"         --resource EC2Instance \",\r\n                                     \"         --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\"\r\n                                  ]]}\r\n                          }                  \r\n            },\r\n            \"CreationPolicy\": {\r\n              \"ResourceSignal\": {\r\n                \"Count\": \"1\",\r\n                \"Timeout\": \"PT5M\"\r\n              }\r\n            }\r\n          },\r\n      \r\n          \"InstanceSecurityGroup\" : {\r\n            \"Type\" : \"AWS::EC2::SecurityGroup\",\r\n            \"Properties\" : {\r\n              \"GroupDescription\" : \"Enable SSH access via port 22\",\r\n              \"SecurityGroupIngress\" : [ \r\n                { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"22\", \"ToPort\" : \"22\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"} },\r\n                { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"80\", \"ToPort\" : \"80\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"} }\r\n               ]\r\n            }\r\n          }\r\n        },\r\n      \r\n        \"Outputs\" : {\r\n          \"InstanceId\" : {\r\n            \"Description\" : \"InstanceId of the newly created EC2 instance\",\r\n            \"Value\" : { \"Ref\" : \"EC2Instance\" }\r\n          },\r\n          \"AZ\" : {\r\n            \"Description\" : \"Availability Zone of the newly created EC2 instance\",\r\n            \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"AvailabilityZone\" ] }\r\n          },\r\n          \"PublicDNS\" : {\r\n            \"Description\" : \"Public DNSName of the newly created EC2 instance\",\r\n            \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicDnsName\" ] }\r\n          },\r\n          \"PublicIP\" : {\r\n            \"Description\" : \"Public IP address of the newly created EC2 instance\",\r\n            \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicIp\" ] }\r\n          }\r\n        }\r\n      }\r\n\r\nChecking the whether cfn-hup daemon is running\r\n\r\n    sudo service --status-all | grep cfn\r\n    cfn-hup (pid  2997) is running...\r\n\r\n\r\nHere are /var/log/cfn-init.log\r\n\r\n    2018-08-31 09:39:46,949 [DEBUG] CloudFormation client initialized with endpoint https://cloudformation.us-east-1.amazonaws.com\r\n    2018-08-31 09:39:46,955 [DEBUG] Describing resource EC2Instance in stack EC2-CFN-Init-With-cfn-hup\r\n    2018-08-31 09:39:47,069 [INFO] -----------------------Starting build-----------------------\r\n    2018-08-31 09:39:47,070 [DEBUG] Not setting a reboot trigger as scheduling support is not available\r\n    2018-08-31 09:39:47,070 [INFO] Running configSets: InstallAndRun\r\n    2018-08-31 09:39:47,071 [INFO] Running configSet InstallAndRun\r\n    2018-08-31 09:39:47,072 [INFO] Running config config1\r\n    2018-08-31 09:39:53,478 [DEBUG] Installing/updating [u'httpd'] via yum\r\n    2018-08-31 09:39:55,430 [INFO] Yum installed [u'httpd']\r\n    2018-08-31 09:39:55,430 [DEBUG] No groups specified\r\n    2018-08-31 09:39:55,430 [DEBUG] No users specified\r\n    2018-08-31 09:39:55,430 [DEBUG] No sources specified\r\n    2018-08-31 09:39:55,430 [DEBUG] Parent directory /etc/cfn does not exist, creating\r\n    2018-08-31 09:39:55,431 [DEBUG] Writing content to /etc/cfn/cfn-hup.conf\r\n    2018-08-31 09:39:55,431 [DEBUG] Setting mode for /etc/cfn/cfn-hup.conf to 000400\r\n    2018-08-31 09:39:55,431 [DEBUG] Setting owner 0 and group 0 for /etc/cfn/cfn-hup.conf\r\n    2018-08-31 09:39:55,431 [DEBUG] Parent directory /etc/cfn/hooks.d does not exist, creating\r\n    2018-08-31 09:39:55,431 [DEBUG] Writing content to /etc/cfn/hooks.d/cfn-auto-reloader.conf\r\n    2018-08-31 09:39:55,432 [DEBUG] No mode specified for /etc/cfn/hooks.d/cfn-auto-reloader.conf. The file will be created with the mode: 0644\r\n    2018-08-31 09:39:55,432 [DEBUG] Writing content to /var/www/html/index.html\r\n    2018-08-31 09:39:55,432 [DEBUG] Setting mode for /var/www/html/index.html to 000644\r\n    2018-08-31 09:39:55,432 [DEBUG] Setting owner 48 and group 48 for /var/www/html/index.html\r\n    2018-08-31 09:39:55,432 [DEBUG] No commands specified\r\n    2018-08-31 09:39:55,432 [DEBUG] No services specified\r\n    2018-08-31 09:39:55,437 [INFO] Running config config2\r\n    2018-08-31 09:39:55,437 [DEBUG] No packages specified\r\n    2018-08-31 09:39:55,438 [DEBUG] No groups specified\r\n    2018-08-31 09:39:55,438 [DEBUG] No users specified\r\n    2018-08-31 09:39:55,438 [DEBUG] No sources specified\r\n    2018-08-31 09:39:55,438 [DEBUG] No files specified\r\n    2018-08-31 09:39:55,438 [DEBUG] No commands specified\r\n    2018-08-31 09:39:55,438 [DEBUG] Using service modifier: /sbin/chkconfig\r\n    2018-08-31 09:39:55,438 [DEBUG] Setting service httpd to enabled\r\n    2018-08-31 09:39:55,469 [INFO] enabled service httpd\r\n    2018-08-31 09:39:55,470 [DEBUG] Using service runner: /sbin/service\r\n    2018-08-31 09:39:55,518 [DEBUG] Starting service httpd as it is not running\r\n    2018-08-31 09:39:55,610 [INFO] Started httpd successfully\r\n    2018-08-31 09:39:55,611 [INFO] ConfigSets completed\r\n    2018-08-31 09:39:55,611 [DEBUG] Not clearing reboot trigger as scheduling support is not available\r\n    2018-08-31 09:39:55,611 [INFO] -----------------------Build complete-----------------------\r\n    2018-08-31 09:39:56,711 [DEBUG] CloudFormation client initialized with endpoint https://cloudformation.us-east-1.amazonaws.com\r\n    2018-08-31 09:39:56,717 [DEBUG] Signaling resource EC2Instance in stack EC2-CFN-Init-With-cfn-hup with unique ID i-0ba14cfb8f8fdb9ad and status SUCCESS\r\n\r\nSeeing the last lines of /var/log/cfn-hup.log, looks like cfn-hup is looking for changes every 15 minutes.\r\n\r\n    2018-08-31 09:39:56,163 [DEBUG] CloudFormation client initialized with endpoint https://cloudformation.us-east-1.amazonaws.com\r\n    2018-08-31 09:39:56,163 [DEBUG] Creating /var/lib/cfn-hup/data\r\n    2018-08-31 09:39:56,171 [INFO] No umask value specified in config file. Using the default one: 022\r\n    2018-08-31 09:54:56,353 [INFO] cfn-hup processing is alive.\r\n    2018-08-31 10:09:56,469 [INFO] cfn-hup processing is alive.\r\n    2018-08-31 10:24:56,584 [INFO] cfn-hup processing is alive.\r\n\r\nI'm expecting that If I change the content html, after 15 minutes I would see the change. Am I missing something.\r\n\r\n    \"/var/www/html/index.html\" : {\r\n                              \"content\" : { \"Fn::Join\" : [\"\", [\r\n                                 \"<h1 align='center'>Heyyo cfn-up, oh sorry cfn-hup! :)</h1>\"\r\n                                ]]},\r\n                              \"mode\" : \"000644\", \r\n                              \"owner\" : \"apache\", \r\n                              \"group\" : \"apache\"\r\n                          }\r\n\r\nAlso seeing the /var/lib/cfn-hup/data, I see stack update changes have been pulled down in metadata_db.json file. ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have a CF template that creates a EC2 Instance and I'm doing some bootstrapping there within Metadata to install httpd and create a simple index.html in /var/www/html/index.html and starting the httpd. ", "keywords": ["instance"]}, {"source": "Text", "text": "After creating the stack, I updated the stack by changing content in index.html file, I waited for more than 15 minutes to see the changes. ", "keywords": ["change"]}, {"source": "Text", "text": "But seems like cfn-hup didn't executed the changes. ", "keywords": ["change"]}, {"source": "Text", "text": "{ \"AWSTemplateFormatVersion\" : \"2010-09-09\", \"Description\" : \"AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. ", "keywords": ["instance"]}, {"source": "Text", "text": "This example creates an EC2 security group for the instance to give you SSH access. ", "keywords": ["instance"]}, {"source": "Text", "text": "This template creates an Amazon EC2 instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "You will be billed for the AWS resources used if you create a stack from this template.\", \"Parameters\" : { \"KeyName\": { \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instance\", \"Type\": \"AWS::EC2::KeyPair::KeyName\", \"ConstraintDescription\" : \"Must be the name of an existing EC2 KeyPair.\" }, \"InstanceType\" : { \"Description\" : \"WebServer EC2 instance type\", \"Type\" : \"String\", \"Default\" : \"t2.micro\", \"AllowedValues\" : [ \"t1.micro\", \"t2.nano\", \"t2.micro\", \"t2.small\", \"t2.medium\", \"t2.large\", \"m1.small\", \"m1.medium\", \"m1.large\", \"m1.xlarge\", \"m2.xlarge\", \"m2.2xlarge\", \"m2.4xlarge\", \"m3.medium\", \"m3.large\", \"m3.xlarge\", \"m3.2xlarge\", \"m4.large\", \"m4.xlarge\", \"m4.2xlarge\", \"m4.4xlarge\", \"m4.10xlarge\", \"c1.medium\", \"c1.xlarge\", \"c3.large\", \"c3.xlarge\", \"c3.2xlarge\", \"c3.4xlarge\", \"c3.8xlarge\", \"c4.large\", \"c4.xlarge\", \"c4.2xlarge\", \"c4.4xlarge\", \"c4.8xlarge\", \"g2.2xlarge\", \"g2.8xlarge\", \"r3.large\", \"r3.xlarge\", \"r3.2xlarge\", \"r3.4xlarge\", \"r3.8xlarge\", \"i2.xlarge\", \"i2.2xlarge\", \"i2.4xlarge\", \"i2.8xlarge\", \"d2.xlarge\", \"d2.2xlarge\", \"d2.4xlarge\", \"d2.8xlarge\"] , \"ConstraintDescription\" : \"Must be a valid EC2 instance type.\" }, \"SSHLocation\" : { \"Description\" : \"The IP address range that can be used to SSH to the EC2 instances\", \"Type\": \"String\", \"MinLength\": \"9\", \"MaxLength\": \"18\", \"Default\": \"0.0.0.0/0\", \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\", \"ConstraintDescription\": \"Must be a valid IP CIDR range of the form x.x.x.x/x.\" } }, \"Mappings\" : { \"AWSInstanceType2Arch\" : { \"t1.micro\" : { \"Arch\" : \"PV64\" ", "keywords": ["bill", "instance"]}, {"source": "Text", "text": "} } , \"AWSRegionArch2AMI\" : { \"us-east-1\" : {\"PV64\" : \"ami-2a69aa47\", \"HVM64\" : \"ami-97785bed\", \"HVMG2\" : \"ami-0a6e3770\"}, \"us-west-2\" : {\"PV64\" : \"ami-7f77b31f\", \"HVM64\" : \"ami-f2d3638a\", \"HVMG2\" : \"ami-ee15a196\"}, \"us-west-1\" : {\"PV64\" : \"ami-a2490dc2\", \"HVM64\" : \"ami-824c4ee2\", \"HVMG2\" : \"ami-0da4a46d\"}, \"eu-west-1\" : {\"PV64\" : \"ami-4cdd453f\", \"HVM64\" : \"ami-d834aba1\", \"HVMG2\" : \"ami-af8013d6\"}, \"eu-west-2\" : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-403e2524\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"eu-west-3\" : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-8ee056f3\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"eu-central-1\" : {\"PV64\" : \"ami-6527cf0a\", \"HVM64\" : \"ami-5652ce39\", \"HVMG2\" : \"ami-1d58ca72\"}, \"ap-northeast-1\" : {\"PV64\" : \"ami-3e42b65f\", \"HVM64\" : \"ami-ceafcba8\", \"HVMG2\" : \"ami-edfd658b\"}, \"ap-northeast-2\" : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-863090e8\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"ap-northeast-3\" : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-83444afe\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"ap-southeast-1\" : {\"PV64\" : \"ami-df9e4cbc\", \"HVM64\" : \"ami-68097514\", \"HVMG2\" : \"ami-c06013bc\"}, \"ap-southeast-2\" : {\"PV64\" : \"ami-63351d00\", \"HVM64\" : \"ami-942dd1f6\", \"HVMG2\" : \"ami-85ef12e7\"}, \"ap-south-1\" : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-531a4c3c\", \"HVMG2\" : \"ami-411e492e\"}, \"us-east-2\" : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-f63b1193\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"ca-central-1\" : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-a954d1cd\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"sa-east-1\" : {\"PV64\" : \"ami-1ad34676\", \"HVM64\" : \"ami-84175ae8\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"cn-north-1\" : {\"PV64\" : \"ami-77559f1a\", \"HVM64\" : \"ami-cb19c4a6\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"cn-northwest-1\" : {\"PV64\" : \"ami-80707be2\", \"HVM64\" : \"ami-3e60745c\", \"HVMG2\" : \"NOT_SUPPORTED\"} } }, \"Resources\" : { \"EC2Instance\" : { \"Type\" : \"AWS::EC2::Instance\", \"Metadata\" : { \"AWS::CloudFormation::Init\" : { \"configSets\" : { \"InstallAndRun\" : [ \"config1\", \"config2\" ] }, \"config1\" : { \"packages\" : { \"yum\" : { \"httpd\" : [] } }, \"files\" : { \"/var/www/html/index.html\" : { \"content\" : { \"Fn::Join\" : [\"\", [ \"Heyyo cfn-up, oh sorry cfn-hup! :)\" ]]}, \"mode\" : \"000644\", \"owner\" : \"apache\", \"group\" : \"apache\" }, \"/etc/cfn/cfn-hup.conf\" : { \"content\" : { \"Fn::Join\" : [\"\", [ \"[main]\\n\", \"stack=\", { \"Ref\" : \"AWS::StackId\" }, \"\\n\", \"region=\", { \"Ref\" : \"AWS::Region\" ", "keywords": ["instance", "billing mode"]}, {"source": "Text", "text": "}, \"\\n\" ]]}, \"mode\" : \"000400\", \"owner\" : \"root\", \"group\" : \"root\" }, \"/etc/cfn/hooks.d/cfn-auto-reloader.conf\" : { \"content\": { \"Fn::Join\" : [\"\", [ \"[cfn-auto-reloader-hook]\\n\", \"triggers=post.update\\n\", \"path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\\n\", \"action=/opt/aws/bin/cfn-init --stack \", { \"Ref\" : \"AWS::StackName\" }, \" --resource EC2Instance \", \" --configsets InstallAndRun \", \" --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\", \"runas=root\\n\" ]]} } } }, \"config2\" : { \"services\" : { \"sysvinit\" : { \"httpd\" : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\", \"packages\" : { \"yum\" : [\"httpd\"] }, \"cfn-hup\" : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\", \"files\" : [\"/etc/cfn/cfn-hup.conf\", \"/etc/cfn/hooks.d/cfn-auto-reloader.conf\"]} } } } } } }, \"Properties\" : { \"InstanceType\" : { \"Ref\" : \"InstanceType\" ", "keywords": ["billing mode"]}, {"source": "Text", "text": "}, { \"Fn::FindInMap\" : [ \"AWSInstanceType2Arch\", { \"Ref\" : \"InstanceType\" }, \"Arch\" ] } ] }, \"UserData\" : { \"Fn::Base64\" : { \"Fn::Join\" : [\"\", [ \"#!/bin/bash -xe\\n\", \"yum update -y aws-cfn-bootstrap\\n\", \"# Install the files and packages from the metadata\\n\", \"/opt/aws/bin/cfn-init -v \", \" --stack \", { \"Ref\" : \"AWS::StackName\" }, \" --resource EC2Instance \", \" --configsets InstallAndRun \", \" --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\", \"# Start up the cfn-hup daemon to listen for changes to the EC2 metadata\\n\", \"/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\\n\", \"# Signal the status from cfn-init\\n\", \"/opt/aws/bin/cfn-signal -e $? \", \" --stack \", { \"Ref\" : \"AWS::StackName\" }, \" --resource EC2Instance \", \" --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\" ]]} } }, \"CreationPolicy\": { \"ResourceSignal\": { \"Count\": \"1\", \"Timeout\": \"PT5M\" ", "keywords": ["change"]}, {"source": "Text", "text": "} } }, \"InstanceSecurityGroup\" : { \"Type\" : \"AWS::EC2::SecurityGroup\", \"Properties\" : { \"GroupDescription\" : \"Enable SSH access via port 22\", \"SecurityGroupIngress\" : [ { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"22\", \"ToPort\" : \"22\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"} }, { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"80\", \"ToPort\" : \"80\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"} } ] } } }, \"Outputs\" : { \"InstanceId\" : { \"Description\" : \"InstanceId of the newly created EC2 instance\", \"Value\" : { \"Ref\" : \"EC2Instance\" } }, \"AZ\" : { \"Description\" : \"Availability Zone of the newly created EC2 instance\", \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"AvailabilityZone\" ] } }, \"PublicDNS\" : { \"Description\" : \"Public DNSName of the newly created EC2 instance\", \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicDnsName\" ] } }, \"PublicIP\" : { \"Description\" : \"Public IP address of the newly created EC2 instance\", \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicIp\" ] } } } } Checking the whether cfn-hup daemon is running sudo service --status-all | grep cfn cfn-hup (pid 2997) is running... ", "keywords": ["instance"]}, {"source": "Text", "text": "Here are /var/log/cfn-init.log 2018-08-31 09:39:46,949 [DEBUG] CloudFormation client initialized with endpoint https://cloudformation.us-east-1.amazonaws.com 2018-08-31 09:39:46,955 [DEBUG] Describing resource EC2Instance in stack EC2-CFN-Init-With-cfn-hup 2018-08-31 09:39:47,069 [INFO] -----------------------Starting build----------------------- 2018-08-31 09:39:47,070 [DEBUG] Not setting a reboot trigger as scheduling support is not available 2018-08-31 09:39:47,070 [INFO] Running configSets: InstallAndRun 2018-08-31 09:39:47,071 [INFO] Running configSet InstallAndRun 2018-08-31 09:39:47,072 [INFO] Running config config1 2018-08-31 09:39:53,478 [DEBUG] Installing/updating [u'httpd'] via yum 2018-08-31 09:39:55,430 [INFO] Yum installed [u'httpd'] 2018-08-31 09:39:55,430 [DEBUG] No groups specified 2018-08-31 09:39:55,430 [DEBUG] No users specified 2018-08-31 09:39:55,430 [DEBUG] No sources specified 2018-08-31 09:39:55,430 [DEBUG] Parent directory /etc/cfn does not exist, creating 2018-08-31 09:39:55,431 [DEBUG] Writing content to /etc/cfn/cfn-hup.conf 2018-08-31 09:39:55,431 [DEBUG] Setting mode for /etc/cfn/cfn-hup.conf to 000400 2018-08-31 09:39:55,431 [DEBUG] Setting owner 0 and group 0 for /etc/cfn/cfn-hup.conf 2018-08-31 09:39:55,431 [DEBUG] Parent directory /etc/cfn/hooks.d does not exist, creating 2018-08-31 09:39:55,431 [DEBUG] Writing content to /etc/cfn/hooks.d/cfn-auto-reloader.conf 2018-08-31 09:39:55,432 [DEBUG] No mode specified for /etc/cfn/hooks.d/cfn-auto-reloader.conf. The file will be created with the mode: 0644 2018-08-31 09:39:55,432 [DEBUG] Writing content to /var/www/html/index.html 2018-08-31 09:39:55,432 [DEBUG] Setting mode for /var/www/html/index.html to 000644 2018-08-31 09:39:55,432 [DEBUG] Setting owner 48 and group 48 for /var/www/html/index.html 2018-08-31 09:39:55,432 [DEBUG] No commands specified 2018-08-31 09:39:55,432 [DEBUG] No services specified 2018-08-31 09:39:55,437 [INFO] Running config config2 2018-08-31 09:39:55,437 [DEBUG] No packages specified 2018-08-31 09:39:55,438 [DEBUG] No groups specified 2018-08-31 09:39:55,438 [DEBUG] No users specified 2018-08-31 09:39:55,438 [DEBUG] No sources specified 2018-08-31 09:39:55,438 [DEBUG] No files specified 2018-08-31 09:39:55,438 [DEBUG] No commands specified 2018-08-31 09:39:55,438 [DEBUG] Using service modifier: /sbin/chkconfig 2018-08-31 09:39:55,438 [DEBUG] Setting service httpd to enabled 2018-08-31 09:39:55,469 [INFO] enabled service httpd 2018-08-31 09:39:55,470 [DEBUG] Using service runner: /sbin/service 2018-08-31 09:39:55,518 [DEBUG] Starting service httpd as it is not running 2018-08-31 09:39:55,610 [INFO] Started httpd successfully 2018-08-31 09:39:55,611 [INFO] ConfigSets completed 2018-08-31 09:39:55,611 [DEBUG] Not clearing reboot trigger as scheduling support is not available 2018-08-31 09:39:55,611 [INFO] -----------------------Build complete----------------------- 2018-08-31 09:39:56,711 [DEBUG] CloudFormation client initialized with endpoint https://cloudformation.us-east-1.amazonaws.com 2018-08-31 09:39:56,717 [DEBUG] Signaling resource EC2Instance in stack EC2-CFN-Init-With-cfn-hup with unique ID i-0ba14cfb8f8fdb9ad and status SUCCESS Seeing the last lines of /var/log/cfn-hup.log, looks like cfn-hup is looking for changes every 15 minutes. ", "keywords": ["billing mode", "change"]}, {"source": "Text", "text": "I'm expecting that If I change the content html, after 15 minutes I would see the change. ", "keywords": ["change"]}, {"source": "Text", "text": "\"/var/www/html/index.html\" : { \"content\" : { \"Fn::Join\" : [\"\", [ \"Heyyo cfn-up, oh sorry cfn-hup! :)\" ]]}, \"mode\" : \"000644\", \"owner\" : \"apache\", \"group\" : \"apache\" ", "keywords": ["billing mode"]}, {"source": "Text", "text": "} Also seeing the /var/lib/cfn-hup/data, I see stack update changes have been pulled down in metadata_db.json file.", "keywords": ["change"]}]}], "answers": [{"Id": "52113883", "PostTypeId": "2", "ParentId": "52113621", "CreationDate": "2018-08-31T10:51:48.127", "Score": "0", "Body": "<p>shouldnt ...</p>\n\n<p>\"action=/opt/aws/bin/cfn-init -s \", { \"Ref\" : \"AWS::StackId\" }, \" -r WebServerInstance \",</p>\n\n<p>be</p>\n\n<p>\"action=/opt/aws/bin/cfn-init -s \", { \"Ref\" : \"AWS::StackId\" }, \" -r EC2Instance \",</p>\n", "OwnerUserId": "9883681", "LastActivityDate": "2018-08-31T10:51:48.127", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "91180704", "PostId": "52113883", "Score": "0", "Text": "those shorthand switches are bit misleading, I thought it was just a string where -r is for reason but its -resource. Corrected that but looks like I'm still missing something.", "CreationDate": "2018-08-31T12:08:08.220", "UserId": "2947158", "filtered-sentences": []}], "history": [{"Id": "180858736", "PostHistoryTypeId": "2", "PostId": "52113883", "RevisionGUID": "d8adceb2-0a0f-4fcf-a3f8-4e9dd0ae9447", "CreationDate": "2018-08-31T10:51:48.127", "UserId": "9883681", "Text": "shouldnt ...\r\n\r\n\"action=/opt/aws/bin/cfn-init -s \", { \"Ref\" : \"AWS::StackId\" }, \" -r WebServerInstance \",\r\n\r\nbe\r\n\r\n\"action=/opt/aws/bin/cfn-init -s \", { \"Ref\" : \"AWS::StackId\" }, \" -r EC2Instance \",", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "52128326", "PostTypeId": "2", "ParentId": "52113621", "CreationDate": "2018-09-01T12:58:35.277", "Score": "0", "Body": "<p>So there were two mistakes one was <code>specifying the wrong resource in /etc/cfn/hooks.d/cfn-auto-reloader.conf's action</code> and also <code>missing the mode,owner and group properties for /etc/cfn/hooks.d/cfn-auto-reloader.conf</code></p>\n\n<p>Here is the working cf template</p>\n\n<pre><code>{\n    \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n\n    \"Description\" : \"AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.\",\n\n    \"Parameters\" : {\n      \"KeyName\": {\n        \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instance\",\n        \"Type\": \"AWS::EC2::KeyPair::KeyName\",\n        \"ConstraintDescription\" : \"Must be the name of an existing EC2 KeyPair.\"\n      },\n\n      \"InstanceType\" : {\n        \"Description\" : \"WebServer EC2 instance type\",\n        \"Type\" : \"String\",\n        \"Default\" : \"t2.micro\",\n        \"AllowedValues\" : [ \"t1.micro\", \"t2.nano\", \"t2.micro\", \"t2.small\", \"t2.medium\", \"t2.large\", \"m1.small\", \"m1.medium\",\n                            \"m1.large\", \"m1.xlarge\", \"m2.xlarge\", \"m2.2xlarge\", \"m2.4xlarge\", \"m3.medium\", \"m3.large\", \"m3.xlarge\", \n                            \"m3.2xlarge\", \"m4.large\", \"m4.xlarge\", \"m4.2xlarge\", \"m4.4xlarge\", \"m4.10xlarge\", \"c1.medium\", \"c1.xlarge\", \n                            \"c3.large\", \"c3.xlarge\", \"c3.2xlarge\", \"c3.4xlarge\", \"c3.8xlarge\", \"c4.large\", \"c4.xlarge\", \"c4.2xlarge\", \"c4.4xlarge\",\n                            \"c4.8xlarge\", \"g2.2xlarge\", \"g2.8xlarge\", \"r3.large\", \"r3.xlarge\", \"r3.2xlarge\", \"r3.4xlarge\", \"r3.8xlarge\", \"i2.xlarge\",\n                            \"i2.2xlarge\", \"i2.4xlarge\", \"i2.8xlarge\", \"d2.xlarge\", \"d2.2xlarge\", \"d2.4xlarge\", \"d2.8xlarge\"]\n  ,\n        \"ConstraintDescription\" : \"Must be a valid EC2 instance type.\"\n      },\n\n      \"SSHLocation\" : {\n        \"Description\" : \"The IP address range that can be used to SSH to the EC2 instances\",\n        \"Type\": \"String\",\n        \"MinLength\": \"9\",\n        \"MaxLength\": \"18\",\n        \"Default\": \"0.0.0.0/0\",\n        \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\",\n        \"ConstraintDescription\": \"Must be a valid IP CIDR range of the form x.x.x.x/x.\"\n     }\n    },\n\n    \"Mappings\" : {\n      \"AWSInstanceType2Arch\" : {\n        \"t1.micro\"    : { \"Arch\" : \"PV64\"   }, \"t2.nano\"     : { \"Arch\" : \"HVM64\"  }, \"t2.micro\"    : { \"Arch\" : \"HVM64\"  },\n        \"t2.small\"    : { \"Arch\" : \"HVM64\"  }, \"t2.medium\"   : { \"Arch\" : \"HVM64\"  }, \"t2.large\"    : { \"Arch\" : \"HVM64\"  },\n        \"m1.small\"    : { \"Arch\" : \"PV64\"   }, \"m1.medium\"   : { \"Arch\" : \"PV64\"   }, \"m1.large\"    : { \"Arch\" : \"PV64\"   },\n        \"m1.xlarge\"   : { \"Arch\" : \"PV64\"   }, \"m2.xlarge\"   : { \"Arch\" : \"PV64\"   }, \"m2.2xlarge\"  : { \"Arch\" : \"PV64\"   },\n        \"m2.4xlarge\"  : { \"Arch\" : \"PV64\"   }, \"m3.medium\"   : { \"Arch\" : \"HVM64\"  }, \"m3.large\"    : { \"Arch\" : \"HVM64\"  },\n        \"m3.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"m3.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"m4.large\"    : { \"Arch\" : \"HVM64\"  },\n        \"m4.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"m4.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"m4.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\n        \"m4.10xlarge\" : { \"Arch\" : \"HVM64\"  }, \"c1.medium\"   : { \"Arch\" : \"PV64\"   }, \"c1.xlarge\"   : { \"Arch\" : \"PV64\"   },\n        \"c3.large\"    : { \"Arch\" : \"HVM64\"  }, \"c3.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"c3.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\n        \"c3.4xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"c3.8xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"c4.large\"    : { \"Arch\" : \"HVM64\"  },\n        \"c4.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"c4.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"c4.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\n        \"c4.8xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"g2.2xlarge\"  : { \"Arch\" : \"HVMG2\"  }, \"g2.8xlarge\"  : { \"Arch\" : \"HVMG2\"  },\n        \"r3.large\"    : { \"Arch\" : \"HVM64\"  }, \"r3.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"r3.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\n        \"r3.4xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"r3.8xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"i2.xlarge\"   : { \"Arch\" : \"HVM64\"  },\n        \"i2.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"i2.4xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"i2.8xlarge\"  : { \"Arch\" : \"HVM64\"  },\n        \"d2.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"d2.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"d2.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\n        \"d2.8xlarge\"  : { \"Arch\" : \"HVM64\"  }\n      }\n  ,\n      \"AWSRegionArch2AMI\" : {\n        \"us-east-1\"        : {\"PV64\" : \"ami-2a69aa47\", \"HVM64\" : \"ami-97785bed\", \"HVMG2\" : \"ami-0a6e3770\"},\n        \"us-west-2\"        : {\"PV64\" : \"ami-7f77b31f\", \"HVM64\" : \"ami-f2d3638a\", \"HVMG2\" : \"ami-ee15a196\"},\n        \"us-west-1\"        : {\"PV64\" : \"ami-a2490dc2\", \"HVM64\" : \"ami-824c4ee2\", \"HVMG2\" : \"ami-0da4a46d\"},\n        \"eu-west-1\"        : {\"PV64\" : \"ami-4cdd453f\", \"HVM64\" : \"ami-d834aba1\", \"HVMG2\" : \"ami-af8013d6\"},\n        \"eu-west-2\"        : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-403e2524\", \"HVMG2\" : \"NOT_SUPPORTED\"},\n        \"eu-west-3\"        : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-8ee056f3\", \"HVMG2\" : \"NOT_SUPPORTED\"},\n        \"eu-central-1\"     : {\"PV64\" : \"ami-6527cf0a\", \"HVM64\" : \"ami-5652ce39\", \"HVMG2\" : \"ami-1d58ca72\"},\n        \"ap-northeast-1\"   : {\"PV64\" : \"ami-3e42b65f\", \"HVM64\" : \"ami-ceafcba8\", \"HVMG2\" : \"ami-edfd658b\"},\n        \"ap-northeast-2\"   : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-863090e8\", \"HVMG2\" : \"NOT_SUPPORTED\"},\n        \"ap-northeast-3\"   : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-83444afe\", \"HVMG2\" : \"NOT_SUPPORTED\"},\n        \"ap-southeast-1\"   : {\"PV64\" : \"ami-df9e4cbc\", \"HVM64\" : \"ami-68097514\", \"HVMG2\" : \"ami-c06013bc\"},\n        \"ap-southeast-2\"   : {\"PV64\" : \"ami-63351d00\", \"HVM64\" : \"ami-942dd1f6\", \"HVMG2\" : \"ami-85ef12e7\"},\n        \"ap-south-1\"       : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-531a4c3c\", \"HVMG2\" : \"ami-411e492e\"},\n        \"us-east-2\"        : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-f63b1193\", \"HVMG2\" : \"NOT_SUPPORTED\"},\n        \"ca-central-1\"     : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-a954d1cd\", \"HVMG2\" : \"NOT_SUPPORTED\"},\n        \"sa-east-1\"        : {\"PV64\" : \"ami-1ad34676\", \"HVM64\" : \"ami-84175ae8\", \"HVMG2\" : \"NOT_SUPPORTED\"},\n        \"cn-north-1\"       : {\"PV64\" : \"ami-77559f1a\", \"HVM64\" : \"ami-cb19c4a6\", \"HVMG2\" : \"NOT_SUPPORTED\"},\n        \"cn-northwest-1\"   : {\"PV64\" : \"ami-80707be2\", \"HVM64\" : \"ami-3e60745c\", \"HVMG2\" : \"NOT_SUPPORTED\"}\n      }\n\n    },\n\n    \"Resources\" : {\n      \"EC2Instance\" : {\n        \"Type\" : \"AWS::EC2::Instance\",\n        \"Metadata\" : {\n          \"AWS::CloudFormation::Init\" : {\n              \"configSets\" : {\n                  \"InstallAndRun\" : [ \"config1\", \"config2\" ]\n              },\n              \"config1\" : {\n                  \"packages\" : {\n                      \"yum\" : {\n                          \"httpd\" : []\n                      }\n                  },\n                  \"files\" : {\n                      \"/var/www/html/index.html\" : {\n                          \"content\" : { \"Fn::Join\" : [\"\", [\n                             \"&lt;h1 align='center'&gt;Heyyo cfn-up, oh sorry cfn-hup! :)&lt;/h1&gt;\"\n                            ]]},\n                          \"mode\" : \"000644\", \n                          \"owner\" : \"apache\", \n                          \"group\" : \"apache\"\n                      },\n\n                      \"/etc/cfn/cfn-hup.conf\" : {\n                        \"content\" : { \"Fn::Join\" : [\"\", [\n                          \"[main]\\n\",\n                          \"stack=\", { \"Ref\" : \"AWS::StackId\" }, \"\\n\",\n                          \"region=\", { \"Ref\" : \"AWS::Region\" }, \"\\n\",\n                          \"interval=1\"\n                        ]]},\n                        \"mode\"    : \"000400\",\n                        \"owner\"   : \"root\",\n                        \"group\"   : \"root\"\n                      },\n\n                      \"/etc/cfn/hooks.d/cfn-auto-reloader.conf\" : {\n                        \"content\": { \"Fn::Join\" : [\"\", [\n                          \"[cfn-auto-reloader-hook]\\n\",\n                          \"triggers=post.update\\n\",\n                          \"path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\\n\",\n                          \"action=/opt/aws/bin/cfn-init --stack \", \n                          { \"Ref\" : \"AWS::StackName\" }, \n                          \" --resource EC2Instance \",\n                          \" --configsets InstallAndRun \",\n                          \" --region     \", { \"Ref\" : \"AWS::Region\" }, \"\\n\",\n                          \"runas=root\\n\"\n                        ]]},\n                        \"mode\"  : \"000400\",\n                        \"owner\" : \"root\",\n                        \"group\" : \"root\"\n                      }\n                  }\n              },\n              \"config2\" : {\n                  \"services\" : {\n                      \"sysvinit\" : {\n                          \"httpd\" : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\", \"packages\" : { \"yum\" : [\"httpd\"] },\n                          \"cfn-hup\" : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\",\n                            \"files\" : [\"/etc/cfn/cfn-hup.conf\", \"/etc/cfn/hooks.d/cfn-auto-reloader.conf\"]}\n                          }\n                      }\n                  }\n              }\n          }\n      },\n        \"Properties\" : {\n          \"InstanceType\" : { \"Ref\" : \"InstanceType\" },\n          \"SecurityGroups\" : [ { \"Ref\" : \"InstanceSecurityGroup\" } ],\n          \"KeyName\" : { \"Ref\" : \"KeyName\" },\n          \"ImageId\" : { \"Fn::FindInMap\" : [ \"AWSRegionArch2AMI\", { \"Ref\" : \"AWS::Region\" },\n                            { \"Fn::FindInMap\" : [ \"AWSInstanceType2Arch\", { \"Ref\" : \"InstanceType\" }, \"Arch\" ] } ] },\n          \"UserData\" : { \"Fn::Base64\" :\n                              { \"Fn::Join\" : [\"\", [\n                                 \"#!/bin/bash -xe\\n\",\n                                 \"yum update -y aws-cfn-bootstrap\\n\",\n                                 \"# Install the files and packages from the metadata\\n\",\n                                 \"/opt/aws/bin/cfn-init -v \",\n                                 \"         --stack \", { \"Ref\" : \"AWS::StackName\" },\n                                 \"         --resource EC2Instance \",\n                                 \"         --configsets InstallAndRun \",\n                                 \"         --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\",\n                                 \"# Start up the cfn-hup daemon to listen for changes to the EC2 metadata\\n\",\n                                 \"/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\\n\",  \n                                 \"# Signal the status from cfn-init\\n\",\n                                 \"/opt/aws/bin/cfn-signal -e $? \",\n                                 \"         --stack \", { \"Ref\" : \"AWS::StackName\" },\n                                 \"         --resource EC2Instance \",\n                                 \"         --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\"\n                              ]]}\n                      }                  \n        },\n        \"CreationPolicy\": {\n          \"ResourceSignal\": {\n            \"Count\": \"1\",\n            \"Timeout\": \"PT5M\"\n          }\n        }\n      },\n\n      \"InstanceSecurityGroup\" : {\n        \"Type\" : \"AWS::EC2::SecurityGroup\",\n        \"Properties\" : {\n          \"GroupDescription\" : \"Enable SSH access via port 22\",\n          \"SecurityGroupIngress\" : [ \n            { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"22\", \"ToPort\" : \"22\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"} },\n            { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"80\", \"ToPort\" : \"80\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"} }\n           ]\n        }\n      }\n    },\n\n    \"Outputs\" : {\n      \"InstanceId\" : {\n        \"Description\" : \"InstanceId of the newly created EC2 instance\",\n        \"Value\" : { \"Ref\" : \"EC2Instance\" }\n      },\n      \"AZ\" : {\n        \"Description\" : \"Availability Zone of the newly created EC2 instance\",\n        \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"AvailabilityZone\" ] }\n      },\n      \"PublicDNS\" : {\n        \"Description\" : \"Public DNSName of the newly created EC2 instance\",\n        \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicDnsName\" ] }\n      },\n      \"PublicIP\" : {\n        \"Description\" : \"Public IP address of the newly created EC2 instance\",\n        \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicIp\" ] }\n      }\n    }\n  }\n</code></pre>\n", "OwnerUserId": "2947158", "LastActivityDate": "2018-09-01T12:58:35.277", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "180927957", "PostHistoryTypeId": "2", "PostId": "52128326", "RevisionGUID": "74ca9df1-4bc7-4c77-a5b1-abd04341bf60", "CreationDate": "2018-09-01T12:58:35.277", "UserId": "2947158", "Text": "So there were two mistakes one was `specifying the wrong resource in /etc/cfn/hooks.d/cfn-auto-reloader.conf's action` and also `missing the mode,owner and group properties for /etc/cfn/hooks.d/cfn-auto-reloader.conf`\r\n\r\nHere is the working cf template\r\n\r\n    {\r\n        \"AWSTemplateFormatVersion\" : \"2010-09-09\",\r\n      \r\n        \"Description\" : \"AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based on the region in which the stack is run. This example creates an EC2 security group for the instance to give you SSH access. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.\",\r\n      \r\n        \"Parameters\" : {\r\n          \"KeyName\": {\r\n            \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instance\",\r\n            \"Type\": \"AWS::EC2::KeyPair::KeyName\",\r\n            \"ConstraintDescription\" : \"Must be the name of an existing EC2 KeyPair.\"\r\n          },\r\n      \r\n          \"InstanceType\" : {\r\n            \"Description\" : \"WebServer EC2 instance type\",\r\n            \"Type\" : \"String\",\r\n            \"Default\" : \"t2.micro\",\r\n            \"AllowedValues\" : [ \"t1.micro\", \"t2.nano\", \"t2.micro\", \"t2.small\", \"t2.medium\", \"t2.large\", \"m1.small\", \"m1.medium\",\r\n                                \"m1.large\", \"m1.xlarge\", \"m2.xlarge\", \"m2.2xlarge\", \"m2.4xlarge\", \"m3.medium\", \"m3.large\", \"m3.xlarge\", \r\n                                \"m3.2xlarge\", \"m4.large\", \"m4.xlarge\", \"m4.2xlarge\", \"m4.4xlarge\", \"m4.10xlarge\", \"c1.medium\", \"c1.xlarge\", \r\n                                \"c3.large\", \"c3.xlarge\", \"c3.2xlarge\", \"c3.4xlarge\", \"c3.8xlarge\", \"c4.large\", \"c4.xlarge\", \"c4.2xlarge\", \"c4.4xlarge\",\r\n                                \"c4.8xlarge\", \"g2.2xlarge\", \"g2.8xlarge\", \"r3.large\", \"r3.xlarge\", \"r3.2xlarge\", \"r3.4xlarge\", \"r3.8xlarge\", \"i2.xlarge\",\r\n                                \"i2.2xlarge\", \"i2.4xlarge\", \"i2.8xlarge\", \"d2.xlarge\", \"d2.2xlarge\", \"d2.4xlarge\", \"d2.8xlarge\"]\r\n      ,\r\n            \"ConstraintDescription\" : \"Must be a valid EC2 instance type.\"\r\n          },\r\n      \r\n          \"SSHLocation\" : {\r\n            \"Description\" : \"The IP address range that can be used to SSH to the EC2 instances\",\r\n            \"Type\": \"String\",\r\n            \"MinLength\": \"9\",\r\n            \"MaxLength\": \"18\",\r\n            \"Default\": \"0.0.0.0/0\",\r\n            \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\",\r\n            \"ConstraintDescription\": \"Must be a valid IP CIDR range of the form x.x.x.x/x.\"\r\n         }\r\n        },\r\n      \r\n        \"Mappings\" : {\r\n          \"AWSInstanceType2Arch\" : {\r\n            \"t1.micro\"    : { \"Arch\" : \"PV64\"   }, \"t2.nano\"     : { \"Arch\" : \"HVM64\"  }, \"t2.micro\"    : { \"Arch\" : \"HVM64\"  },\r\n            \"t2.small\"    : { \"Arch\" : \"HVM64\"  }, \"t2.medium\"   : { \"Arch\" : \"HVM64\"  }, \"t2.large\"    : { \"Arch\" : \"HVM64\"  },\r\n            \"m1.small\"    : { \"Arch\" : \"PV64\"   }, \"m1.medium\"   : { \"Arch\" : \"PV64\"   }, \"m1.large\"    : { \"Arch\" : \"PV64\"   },\r\n            \"m1.xlarge\"   : { \"Arch\" : \"PV64\"   }, \"m2.xlarge\"   : { \"Arch\" : \"PV64\"   }, \"m2.2xlarge\"  : { \"Arch\" : \"PV64\"   },\r\n            \"m2.4xlarge\"  : { \"Arch\" : \"PV64\"   }, \"m3.medium\"   : { \"Arch\" : \"HVM64\"  }, \"m3.large\"    : { \"Arch\" : \"HVM64\"  },\r\n            \"m3.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"m3.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"m4.large\"    : { \"Arch\" : \"HVM64\"  },\r\n            \"m4.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"m4.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"m4.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n            \"m4.10xlarge\" : { \"Arch\" : \"HVM64\"  }, \"c1.medium\"   : { \"Arch\" : \"PV64\"   }, \"c1.xlarge\"   : { \"Arch\" : \"PV64\"   },\r\n            \"c3.large\"    : { \"Arch\" : \"HVM64\"  }, \"c3.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"c3.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n            \"c3.4xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"c3.8xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"c4.large\"    : { \"Arch\" : \"HVM64\"  },\r\n            \"c4.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"c4.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"c4.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n            \"c4.8xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"g2.2xlarge\"  : { \"Arch\" : \"HVMG2\"  }, \"g2.8xlarge\"  : { \"Arch\" : \"HVMG2\"  },\r\n            \"r3.large\"    : { \"Arch\" : \"HVM64\"  }, \"r3.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"r3.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n            \"r3.4xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"r3.8xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"i2.xlarge\"   : { \"Arch\" : \"HVM64\"  },\r\n            \"i2.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"i2.4xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"i2.8xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n            \"d2.xlarge\"   : { \"Arch\" : \"HVM64\"  }, \"d2.2xlarge\"  : { \"Arch\" : \"HVM64\"  }, \"d2.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n            \"d2.8xlarge\"  : { \"Arch\" : \"HVM64\"  }\r\n          }\r\n      ,\r\n          \"AWSRegionArch2AMI\" : {\r\n            \"us-east-1\"        : {\"PV64\" : \"ami-2a69aa47\", \"HVM64\" : \"ami-97785bed\", \"HVMG2\" : \"ami-0a6e3770\"},\r\n            \"us-west-2\"        : {\"PV64\" : \"ami-7f77b31f\", \"HVM64\" : \"ami-f2d3638a\", \"HVMG2\" : \"ami-ee15a196\"},\r\n            \"us-west-1\"        : {\"PV64\" : \"ami-a2490dc2\", \"HVM64\" : \"ami-824c4ee2\", \"HVMG2\" : \"ami-0da4a46d\"},\r\n            \"eu-west-1\"        : {\"PV64\" : \"ami-4cdd453f\", \"HVM64\" : \"ami-d834aba1\", \"HVMG2\" : \"ami-af8013d6\"},\r\n            \"eu-west-2\"        : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-403e2524\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"eu-west-3\"        : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-8ee056f3\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"eu-central-1\"     : {\"PV64\" : \"ami-6527cf0a\", \"HVM64\" : \"ami-5652ce39\", \"HVMG2\" : \"ami-1d58ca72\"},\r\n            \"ap-northeast-1\"   : {\"PV64\" : \"ami-3e42b65f\", \"HVM64\" : \"ami-ceafcba8\", \"HVMG2\" : \"ami-edfd658b\"},\r\n            \"ap-northeast-2\"   : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-863090e8\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"ap-northeast-3\"   : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-83444afe\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"ap-southeast-1\"   : {\"PV64\" : \"ami-df9e4cbc\", \"HVM64\" : \"ami-68097514\", \"HVMG2\" : \"ami-c06013bc\"},\r\n            \"ap-southeast-2\"   : {\"PV64\" : \"ami-63351d00\", \"HVM64\" : \"ami-942dd1f6\", \"HVMG2\" : \"ami-85ef12e7\"},\r\n            \"ap-south-1\"       : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-531a4c3c\", \"HVMG2\" : \"ami-411e492e\"},\r\n            \"us-east-2\"        : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-f63b1193\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"ca-central-1\"     : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-a954d1cd\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"sa-east-1\"        : {\"PV64\" : \"ami-1ad34676\", \"HVM64\" : \"ami-84175ae8\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"cn-north-1\"       : {\"PV64\" : \"ami-77559f1a\", \"HVM64\" : \"ami-cb19c4a6\", \"HVMG2\" : \"NOT_SUPPORTED\"},\r\n            \"cn-northwest-1\"   : {\"PV64\" : \"ami-80707be2\", \"HVM64\" : \"ami-3e60745c\", \"HVMG2\" : \"NOT_SUPPORTED\"}\r\n          }\r\n      \r\n        },\r\n      \r\n        \"Resources\" : {\r\n          \"EC2Instance\" : {\r\n            \"Type\" : \"AWS::EC2::Instance\",\r\n            \"Metadata\" : {\r\n              \"AWS::CloudFormation::Init\" : {\r\n                  \"configSets\" : {\r\n                      \"InstallAndRun\" : [ \"config1\", \"config2\" ]\r\n                  },\r\n                  \"config1\" : {\r\n                      \"packages\" : {\r\n                          \"yum\" : {\r\n                              \"httpd\" : []\r\n                          }\r\n                      },\r\n                      \"files\" : {\r\n                          \"/var/www/html/index.html\" : {\r\n                              \"content\" : { \"Fn::Join\" : [\"\", [\r\n                                 \"<h1 align='center'>Heyyo cfn-up, oh sorry cfn-hup! :)</h1>\"\r\n                                ]]},\r\n                              \"mode\" : \"000644\", \r\n                              \"owner\" : \"apache\", \r\n                              \"group\" : \"apache\"\r\n                          },\r\n    \r\n                          \"/etc/cfn/cfn-hup.conf\" : {\r\n                            \"content\" : { \"Fn::Join\" : [\"\", [\r\n                              \"[main]\\n\",\r\n                              \"stack=\", { \"Ref\" : \"AWS::StackId\" }, \"\\n\",\r\n                              \"region=\", { \"Ref\" : \"AWS::Region\" }, \"\\n\",\r\n                              \"interval=1\"\r\n                            ]]},\r\n                            \"mode\"    : \"000400\",\r\n                            \"owner\"   : \"root\",\r\n                            \"group\"   : \"root\"\r\n                          },\r\n            \r\n                          \"/etc/cfn/hooks.d/cfn-auto-reloader.conf\" : {\r\n                            \"content\": { \"Fn::Join\" : [\"\", [\r\n                              \"[cfn-auto-reloader-hook]\\n\",\r\n                              \"triggers=post.update\\n\",\r\n                              \"path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\\n\",\r\n                              \"action=/opt/aws/bin/cfn-init --stack \", \r\n                              { \"Ref\" : \"AWS::StackName\" }, \r\n                              \" --resource EC2Instance \",\r\n                              \" --configsets InstallAndRun \",\r\n                              \" --region     \", { \"Ref\" : \"AWS::Region\" }, \"\\n\",\r\n                              \"runas=root\\n\"\r\n                            ]]},\r\n                            \"mode\"  : \"000400\",\r\n                            \"owner\" : \"root\",\r\n                            \"group\" : \"root\"\r\n                          }\r\n                      }\r\n                  },\r\n                  \"config2\" : {\r\n                      \"services\" : {\r\n                          \"sysvinit\" : {\r\n                              \"httpd\" : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\", \"packages\" : { \"yum\" : [\"httpd\"] },\r\n                              \"cfn-hup\" : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\",\r\n                                \"files\" : [\"/etc/cfn/cfn-hup.conf\", \"/etc/cfn/hooks.d/cfn-auto-reloader.conf\"]}\r\n                              }\r\n                          }\r\n                      }\r\n                  }\r\n              }\r\n          },\r\n            \"Properties\" : {\r\n              \"InstanceType\" : { \"Ref\" : \"InstanceType\" },\r\n              \"SecurityGroups\" : [ { \"Ref\" : \"InstanceSecurityGroup\" } ],\r\n              \"KeyName\" : { \"Ref\" : \"KeyName\" },\r\n              \"ImageId\" : { \"Fn::FindInMap\" : [ \"AWSRegionArch2AMI\", { \"Ref\" : \"AWS::Region\" },\r\n                                { \"Fn::FindInMap\" : [ \"AWSInstanceType2Arch\", { \"Ref\" : \"InstanceType\" }, \"Arch\" ] } ] },\r\n              \"UserData\" : { \"Fn::Base64\" :\r\n                                  { \"Fn::Join\" : [\"\", [\r\n                                     \"#!/bin/bash -xe\\n\",\r\n                                     \"yum update -y aws-cfn-bootstrap\\n\",\r\n                                     \"# Install the files and packages from the metadata\\n\",\r\n                                     \"/opt/aws/bin/cfn-init -v \",\r\n                                     \"         --stack \", { \"Ref\" : \"AWS::StackName\" },\r\n                                     \"         --resource EC2Instance \",\r\n                                     \"         --configsets InstallAndRun \",\r\n                                     \"         --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\",\r\n                                     \"# Start up the cfn-hup daemon to listen for changes to the EC2 metadata\\n\",\r\n                                     \"/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\\n\",  \r\n                                     \"# Signal the status from cfn-init\\n\",\r\n                                     \"/opt/aws/bin/cfn-signal -e $? \",\r\n                                     \"         --stack \", { \"Ref\" : \"AWS::StackName\" },\r\n                                     \"         --resource EC2Instance \",\r\n                                     \"         --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\"\r\n                                  ]]}\r\n                          }                  \r\n            },\r\n            \"CreationPolicy\": {\r\n              \"ResourceSignal\": {\r\n                \"Count\": \"1\",\r\n                \"Timeout\": \"PT5M\"\r\n              }\r\n            }\r\n          },\r\n      \r\n          \"InstanceSecurityGroup\" : {\r\n            \"Type\" : \"AWS::EC2::SecurityGroup\",\r\n            \"Properties\" : {\r\n              \"GroupDescription\" : \"Enable SSH access via port 22\",\r\n              \"SecurityGroupIngress\" : [ \r\n                { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"22\", \"ToPort\" : \"22\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"} },\r\n                { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"80\", \"ToPort\" : \"80\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"} }\r\n               ]\r\n            }\r\n          }\r\n        },\r\n      \r\n        \"Outputs\" : {\r\n          \"InstanceId\" : {\r\n            \"Description\" : \"InstanceId of the newly created EC2 instance\",\r\n            \"Value\" : { \"Ref\" : \"EC2Instance\" }\r\n          },\r\n          \"AZ\" : {\r\n            \"Description\" : \"Availability Zone of the newly created EC2 instance\",\r\n            \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"AvailabilityZone\" ] }\r\n          },\r\n          \"PublicDNS\" : {\r\n            \"Description\" : \"Public DNSName of the newly created EC2 instance\",\r\n            \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicDnsName\" ] }\r\n          },\r\n          \"PublicIP\" : {\r\n            \"Description\" : \"Public IP address of the newly created EC2 instance\",\r\n            \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicIp\" ] }\r\n          }\r\n        }\r\n      }", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "So there were two mistakes one was `specifying the wrong resource in /etc/cfn/hooks.d/cfn-auto-reloader.conf's action` and also `missing the mode,owner and group properties for /etc/cfn/hooks.d/cfn-auto-reloader.conf` ", "keywords": ["billing mode"]}, {"source": "Text", "text": "Here is the working cf template { \"AWSTemplateFormatVersion\" : \"2010-09-09\", \"Description\" : \"AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample: Create an Amazon EC2 instance running the Amazon Linux AMI. ", "keywords": ["instance"]}, {"source": "Text", "text": "This example creates an EC2 security group for the instance to give you SSH access. ", "keywords": ["instance"]}, {"source": "Text", "text": "This template creates an Amazon EC2 instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "You will be billed for the AWS resources used if you create a stack from this template.\", \"Parameters\" : { \"KeyName\": { \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instance\", \"Type\": \"AWS::EC2::KeyPair::KeyName\", \"ConstraintDescription\" : \"Must be the name of an existing EC2 KeyPair.\" }, \"InstanceType\" : { \"Description\" : \"WebServer EC2 instance type\", \"Type\" : \"String\", \"Default\" : \"t2.micro\", \"AllowedValues\" : [ \"t1.micro\", \"t2.nano\", \"t2.micro\", \"t2.small\", \"t2.medium\", \"t2.large\", \"m1.small\", \"m1.medium\", \"m1.large\", \"m1.xlarge\", \"m2.xlarge\", \"m2.2xlarge\", \"m2.4xlarge\", \"m3.medium\", \"m3.large\", \"m3.xlarge\", \"m3.2xlarge\", \"m4.large\", \"m4.xlarge\", \"m4.2xlarge\", \"m4.4xlarge\", \"m4.10xlarge\", \"c1.medium\", \"c1.xlarge\", \"c3.large\", \"c3.xlarge\", \"c3.2xlarge\", \"c3.4xlarge\", \"c3.8xlarge\", \"c4.large\", \"c4.xlarge\", \"c4.2xlarge\", \"c4.4xlarge\", \"c4.8xlarge\", \"g2.2xlarge\", \"g2.8xlarge\", \"r3.large\", \"r3.xlarge\", \"r3.2xlarge\", \"r3.4xlarge\", \"r3.8xlarge\", \"i2.xlarge\", \"i2.2xlarge\", \"i2.4xlarge\", \"i2.8xlarge\", \"d2.xlarge\", \"d2.2xlarge\", \"d2.4xlarge\", \"d2.8xlarge\"] , \"ConstraintDescription\" : \"Must be a valid EC2 instance type.\" }, \"SSHLocation\" : { \"Description\" : \"The IP address range that can be used to SSH to the EC2 instances\", \"Type\": \"String\", \"MinLength\": \"9\", \"MaxLength\": \"18\", \"Default\": \"0.0.0.0/0\", \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\", \"ConstraintDescription\": \"Must be a valid IP CIDR range of the form x.x.x.x/x.\" ", "keywords": ["bill", "instance"]}, {"source": "Text", "text": "} } , \"AWSRegionArch2AMI\" : { \"us-east-1\" : {\"PV64\" : \"ami-2a69aa47\", \"HVM64\" : \"ami-97785bed\", \"HVMG2\" : \"ami-0a6e3770\"}, \"us-west-2\" : {\"PV64\" : \"ami-7f77b31f\", \"HVM64\" : \"ami-f2d3638a\", \"HVMG2\" : \"ami-ee15a196\"}, \"us-west-1\" : {\"PV64\" : \"ami-a2490dc2\", \"HVM64\" : \"ami-824c4ee2\", \"HVMG2\" : \"ami-0da4a46d\"}, \"eu-west-1\" : {\"PV64\" : \"ami-4cdd453f\", \"HVM64\" : \"ami-d834aba1\", \"HVMG2\" : \"ami-af8013d6\"}, \"eu-west-2\" : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-403e2524\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"eu-west-3\" : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-8ee056f3\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"eu-central-1\" : {\"PV64\" : \"ami-6527cf0a\", \"HVM64\" : \"ami-5652ce39\", \"HVMG2\" : \"ami-1d58ca72\"}, \"ap-northeast-1\" : {\"PV64\" : \"ami-3e42b65f\", \"HVM64\" : \"ami-ceafcba8\", \"HVMG2\" : \"ami-edfd658b\"}, \"ap-northeast-2\" : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-863090e8\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"ap-northeast-3\" : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-83444afe\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"ap-southeast-1\" : {\"PV64\" : \"ami-df9e4cbc\", \"HVM64\" : \"ami-68097514\", \"HVMG2\" : \"ami-c06013bc\"}, \"ap-southeast-2\" : {\"PV64\" : \"ami-63351d00\", \"HVM64\" : \"ami-942dd1f6\", \"HVMG2\" : \"ami-85ef12e7\"}, \"ap-south-1\" : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-531a4c3c\", \"HVMG2\" : \"ami-411e492e\"}, \"us-east-2\" : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-f63b1193\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"ca-central-1\" : {\"PV64\" : \"NOT_SUPPORTED\", \"HVM64\" : \"ami-a954d1cd\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"sa-east-1\" : {\"PV64\" : \"ami-1ad34676\", \"HVM64\" : \"ami-84175ae8\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"cn-north-1\" : {\"PV64\" : \"ami-77559f1a\", \"HVM64\" : \"ami-cb19c4a6\", \"HVMG2\" : \"NOT_SUPPORTED\"}, \"cn-northwest-1\" : {\"PV64\" : \"ami-80707be2\", \"HVM64\" : \"ami-3e60745c\", \"HVMG2\" : \"NOT_SUPPORTED\"} } }, \"Resources\" : { \"EC2Instance\" : { \"Type\" : \"AWS::EC2::Instance\", \"Metadata\" : { \"AWS::CloudFormation::Init\" : { \"configSets\" : { \"InstallAndRun\" : [ \"config1\", \"config2\" ] }, \"config1\" : { \"packages\" : { \"yum\" : { \"httpd\" : [] } }, \"files\" : { \"/var/www/html/index.html\" : { \"content\" : { \"Fn::Join\" : [\"\", [ \"Heyyo cfn-up, oh sorry cfn-hup! :)\" ]]}, \"mode\" : \"000644\", \"owner\" : \"apache\", \"group\" : \"apache\" }, \"/etc/cfn/cfn-hup.conf\" : { \"content\" : { \"Fn::Join\" : [\"\", [ \"[main]\\n\", \"stack=\", { \"Ref\" : \"AWS::StackId\" ", "keywords": ["instance", "billing mode"]}, {"source": "Text", "text": "}, \"\\n\", \"interval=1\" ]]}, \"mode\" : \"000400\", \"owner\" : \"root\", \"group\" : \"root\" }, \"/etc/cfn/hooks.d/cfn-auto-reloader.conf\" : { \"content\": { \"Fn::Join\" : [\"\", [ \"[cfn-auto-reloader-hook]\\n\", \"triggers=post.update\\n\", \"path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\\n\", \"action=/opt/aws/bin/cfn-init --stack \", { \"Ref\" : \"AWS::StackName\" }, \" --resource EC2Instance \", \" --configsets InstallAndRun \", \" --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\", \"runas=root\\n\" ]]}, \"mode\" : \"000400\", \"owner\" : \"root\", \"group\" : \"root\" } } }, \"config2\" : { \"services\" : { \"sysvinit\" : { \"httpd\" : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\", \"packages\" : { \"yum\" : [\"httpd\"] }, \"cfn-hup\" : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\", \"files\" : [\"/etc/cfn/cfn-hup.conf\", \"/etc/cfn/hooks.d/cfn-auto-reloader.conf\"]} } } } } } }, \"Properties\" : { \"InstanceType\" : { \"Ref\" : \"InstanceType\" ", "keywords": ["billing mode"]}, {"source": "Text", "text": "}, { \"Fn::FindInMap\" : [ \"AWSInstanceType2Arch\", { \"Ref\" : \"InstanceType\" }, \"Arch\" ] } ] }, \"UserData\" : { \"Fn::Base64\" : { \"Fn::Join\" : [\"\", [ \"#!/bin/bash -xe\\n\", \"yum update -y aws-cfn-bootstrap\\n\", \"# Install the files and packages from the metadata\\n\", \"/opt/aws/bin/cfn-init -v \", \" --stack \", { \"Ref\" : \"AWS::StackName\" }, \" --resource EC2Instance \", \" --configsets InstallAndRun \", \" --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\", \"# Start up the cfn-hup daemon to listen for changes to the EC2 metadata\\n\", \"/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\\n\", \"# Signal the status from cfn-init\\n\", \"/opt/aws/bin/cfn-signal -e $? \", \" --stack \", { \"Ref\" : \"AWS::StackName\" ", "keywords": ["change"]}, {"source": "Text", "text": "}, \" --resource EC2Instance \", \" --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\" ]]} } }, \"CreationPolicy\": { \"ResourceSignal\": { \"Count\": \"1\", \"Timeout\": \"PT5M\" } } }, \"InstanceSecurityGroup\" : { \"Type\" : \"AWS::EC2::SecurityGroup\", \"Properties\" : { \"GroupDescription\" : \"Enable SSH access via port 22\", \"SecurityGroupIngress\" : [ { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"22\", \"ToPort\" : \"22\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"} }, { \"IpProtocol\" : \"tcp\", \"FromPort\" : \"80\", \"ToPort\" : \"80\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"} } ] } } }, \"Outputs\" : { \"InstanceId\" : { \"Description\" : \"InstanceId of the newly created EC2 instance\", \"Value\" : { \"Ref\" : \"EC2Instance\" } }, \"AZ\" : { \"Description\" : \"Availability Zone of the newly created EC2 instance\", \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"AvailabilityZone\" ] } }, \"PublicDNS\" : { \"Description\" : \"Public DNSName of the newly created EC2 instance\", \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicDnsName\" ] } ", "keywords": ["instance"]}, {"source": "Text", "text": "}, \"PublicIP\" : { \"Description\" : \"Public IP address of the newly created EC2 instance\", \"Value\" : { \"Fn::GetAtt\" : [ \"EC2Instance\", \"PublicIp\" ] } ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "So there were two mistakes one was specifying the wrong resource in /etc/cfn/hooks.d/cfn-auto-reloader.conf's action and also missing the mode,owner and group properties for /etc/cfn/hooks.d/cfn-auto-reloader.conf ", "keywords": ["billing mode"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I have a CF template that creates a EC2 Instance and I'm doing some bootstrapping there within Metadata to install httpd and create a simple index.html in /var/www/html/index.html and starting the httpd. ", "keywords": ["instance"]}, {"source": "Body", "text": "After creating the stack, I updated the stack by changing content in index.html file, I waited for more than 15 minutes to see the changes. ", "keywords": ["change"]}, {"source": "Body", "text": "But seems like cfn-hup didn't executed the changes. ", "keywords": ["change"]}, {"source": "Body", "text": "Checking the whether cfn-hup daemon is running Here are /var/log/cfn-init.log Seeing the last lines of /var/log/cfn-hup.log, looks like cfn-hup is looking for changes every 15 minutes. ", "keywords": ["change"]}, {"source": "Body", "text": "I'm expecting that If I change the content html, after 15 minutes I would see the change. ", "keywords": ["change"]}, {"source": "Body", "text": "Also seeing the /var/lib/cfn-hup/data, I see stack update changes have been pulled down in metadata_db.json file.", "keywords": ["change"]}]}