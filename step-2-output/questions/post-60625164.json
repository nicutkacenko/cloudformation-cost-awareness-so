{"Id": "60625164", "PostTypeId": "1", "AcceptedAnswerId": "60666921", "CreationDate": "2020-03-10T20:07:21.533", "Score": "5", "ViewCount": "4228", "Body": "<p>I set up a very basic metric filter for a log-stream to count the number of lines matching a certain condition. My usecase is very similiar to the one described at <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Counting404Responses.html\" rel=\"noreferrer\">the tutorial for counting apache HTTP status codes</a>.</p>\n\n<p>E.g. the log-events look like </p>\n\n<pre><code>127.0.0.1 - frank [10/Oct/2000:13:55:36 -0700] \"GET /apache_pb.gif HTTP/1.0\" 404 2326\n</code></pre>\n\n<p>and the filter is very similiar to </p>\n\n<pre><code>[IP, UserInfo, User, Timestamp, RequestInfo, StatusCode=404, Bytes]\n</code></pre>\n\n<p>I set up the metric-filter via the Cloudwatch console. The filter works perfectly except that it accumulates the values for all instanceids. However the metric is only valuable to me if it it takes the instanceid into account. </p>\n\n<p><strong>Is there a way to get the metric per instanceid, e.g. to write the instanceid as <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Dimension\" rel=\"noreferrer\">dimension</a> to the metric?</strong></p>\n\n<p>I searched for a while but could not find anything appropriate. It is very important to me, that i don't have to hardcode the instanceid since instances might get terminated at any point and new instances will be created. Further on I want to avoid <a href=\"https://aws.amazon.com/de/premiumsupport/knowledge-center/cloudwatch-custom-metrics/\" rel=\"noreferrer\">evaluating the metric on the EC2-machine</a>.</p>\n\n<p>Is there any way to achieve my goal? I would really appreciate any suggestions!</p>\n", "OwnerUserId": "1402667", "LastEditorUserId": "1402667", "LastEditDate": "2020-03-11T19:02:38.300", "LastActivityDate": "2020-03-13T08:09:49.290", "Title": "Add instanceid dimension to cloudwatch metric-filter", "Tags": "|aws-cloudformation|amazon-cloudwatch-metrics|", "AnswerCount": "1", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "107453699", "PostId": "60625164", "Score": "0", "Text": "You can setup a Custom Log yourself. AWS encourage people to do this, you can even setup logging from your on-prem equipment", "CreationDate": "2020-03-18T03:52:03.263", "UserId": "495455", "filtered-sentences": [{"source": "Text", "text": "AWS encourage people to do this, you can even setup logging from your on-prem equipment", "keywords": ["logging"]}]}], "history": [{"Id": "216680170", "PostHistoryTypeId": "5", "PostId": "60625164", "RevisionGUID": "c6909d8c-d7c0-4e03-8708-882b48e90477", "CreationDate": "2020-03-10T20:18:53.330", "UserId": "1402667", "Comment": "added 8 characters in body; edited tags", "Text": "I set up a very basic metric filter for a log-stream to count the number of lines matching a certain condition. My usecase is very similiar to the one described at https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Counting404Responses.html.\r\n\r\nE.g. the log-events look like \r\n\r\n    127.0.0.1 - frank [10/Oct/2000:13:55:36 -0700] \"GET /apache_pb.gif HTTP/1.0\" 404 2326\r\n\r\nand the filter is very similiar to \r\n\r\n    [IP, UserInfo, User, Timestamp, RequestInfo, StatusCode=404, Bytes]\r\n\r\n\r\n I set up the metric-filter via the Cloudwatch console. The filter works perfectly except that it accumulates the values for all instanceids. However the metric is useless to me, if it does not distinguish between the instanceid. \r\n\r\n**Is there a way to split those values by instanceid and write the instanceids as dimension to the metric?**\r\n\r\nI searched for a while but could not find anything appropriate. It is very important to me, that i don't have to hardcode the instanceid since instances might get terminated at any point and new instances will be created. \r\n\r\nI have access to the Cloudwatch console and the the cloudformation-scripts. Is there any way to achieve my goal?\r\n\r\nI would really appreciate any suggestions!", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "216680171", "PostHistoryTypeId": "6", "PostId": "60625164", "RevisionGUID": "c6909d8c-d7c0-4e03-8708-882b48e90477", "CreationDate": "2020-03-10T20:18:53.330", "UserId": "1402667", "Comment": "added 8 characters in body; edited tags", "Text": "|aws-cloudformation|amazon-cloudwatch-metrics|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "216679541", "PostHistoryTypeId": "2", "PostId": "60625164", "RevisionGUID": "7fec0551-6c41-46e0-82eb-90b59036af85", "CreationDate": "2020-03-10T20:07:21.533", "UserId": "1402667", "Text": "I set up a very basic metric filter for a log-stream to count the number of lines matching a certain condition. My usecase is very similiar to the one described at https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Counting404Responses.html.\r\n\r\nE.g. the log-events look like \r\n\r\n    127.0.0.1 - frank [10/Oct/2000:13:55:36 -0700] \"GET /apache_pb.gif HTTP/1.0\" 404 2326\r\n\r\nand the filter is very similiar to \r\n\r\n    [IP, UserInfo, User, Timestamp, RequestInfo, StatusCode=404, Bytes]\r\n\r\n\r\n I set up the metric-filter via the Cloudwatch console. The filter works perfectly except that it accumulates the values for all instanceids. However the metric is useless to me, if it does not distinguish between the instanceid. \r\n\r\n**Is there a way to split those values by instanceid and write the instanceids as dimension to the metric?**\r\n\r\nI searched for a while but could not find anything appropriate. It is very important to me, that i don't have to hardcode the instanceid since instances might get terminated at any point and new instances will be created. I have access to the Cloudwatch console and the the cloudformation-scripts. Is there any way to achieve my goal?\r\n\r\nI would really appreciate any suggestions!", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "216679542", "PostHistoryTypeId": "1", "PostId": "60625164", "RevisionGUID": "7fec0551-6c41-46e0-82eb-90b59036af85", "CreationDate": "2020-03-10T20:07:21.533", "UserId": "1402667", "Text": "Add instanceid dimension to cloudwatch metric-filter", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "216679543", "PostHistoryTypeId": "3", "PostId": "60625164", "RevisionGUID": "7fec0551-6c41-46e0-82eb-90b59036af85", "CreationDate": "2020-03-10T20:07:21.533", "UserId": "1402667", "Text": "|amazon-web-services|dimensions|amazon-cloudwatch-metrics|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "216749320", "PostHistoryTypeId": "5", "PostId": "60625164", "RevisionGUID": "755af43d-1945-45af-a26b-774dcfb4f918", "CreationDate": "2020-03-11T18:41:58.100", "UserId": "1402667", "Comment": "added 44 characters in body", "Text": "I set up a very basic metric filter for a log-stream to count the number of lines matching a certain condition. My usecase is very similiar to the one described at [the tutorial for counting apache HTTP status codes][1].\r\n\r\nE.g. the log-events look like \r\n\r\n    127.0.0.1 - frank [10/Oct/2000:13:55:36 -0700] \"GET /apache_pb.gif HTTP/1.0\" 404 2326\r\n\r\nand the filter is very similiar to \r\n\r\n    [IP, UserInfo, User, Timestamp, RequestInfo, StatusCode=404, Bytes]\r\n\r\n\r\n I set up the metric-filter via the Cloudwatch console. The filter works perfectly except that it accumulates the values for all instanceids. However the metric is useless to me, if it does not distinguish between the instanceid. \r\n\r\n**Is there a way to get the metric per instanceid, e.g. to write the instanceid as [dimension][2] to the metric?**\r\n\r\nI searched for a while but could not find anything appropriate. It is very important to me, that i don't have to hardcode the instanceid since instances might get terminated at any point and new instances will be created. Further on I want to avoid evaluating the metric on the EC2-machine.\r\n\r\nIs there any way to achieve my goal? I would really appreciate any suggestions!\r\n\r\n\r\n  [1]: https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Counting404Responses.html\r\n  [2]: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Dimension", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "216749776", "PostHistoryTypeId": "5", "PostId": "60625164", "RevisionGUID": "0c0bfa0d-6124-439d-9dd6-e3062b041e5c", "CreationDate": "2020-03-11T18:49:42.653", "UserId": "1402667", "Comment": "deleted 2 characters in body", "Text": "I set up a very basic metric filter for a log-stream to count the number of lines matching a certain condition. My usecase is very similiar to the one described at [the tutorial for counting apache HTTP status codes][1].\r\n\r\nE.g. the log-events look like \r\n\r\n    127.0.0.1 - frank [10/Oct/2000:13:55:36 -0700] \"GET /apache_pb.gif HTTP/1.0\" 404 2326\r\n\r\nand the filter is very similiar to \r\n\r\n    [IP, UserInfo, User, Timestamp, RequestInfo, StatusCode=404, Bytes]\r\n\r\n\r\n I set up the metric-filter via the Cloudwatch console. The filter works perfectly except that it accumulates the values for all instanceids. However the metric is only valuable to me if it it takes the instanceid into account. \r\n\r\n**Is there a way to get the metric per instanceid, e.g. to write the instanceid as [dimension][2] to the metric?**\r\n\r\nI searched for a while but could not find anything appropriate. It is very important to me, that i don't have to hardcode the instanceid since instances might get terminated at any point and new instances will be created. Further on I want to avoid evaluating the metric on the EC2-machine.\r\n\r\nIs there any way to achieve my goal? I would really appreciate any suggestions!\r\n\r\n\r\n  [1]: https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Counting404Responses.html\r\n  [2]: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Dimension", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "216750518", "PostHistoryTypeId": "5", "PostId": "60625164", "RevisionGUID": "54693196-d1d8-4936-becd-97a067987902", "CreationDate": "2020-03-11T19:02:38.300", "UserId": "1402667", "Comment": "added 98 characters in body", "Text": "I set up a very basic metric filter for a log-stream to count the number of lines matching a certain condition. My usecase is very similiar to the one described at [the tutorial for counting apache HTTP status codes][1].\r\n\r\nE.g. the log-events look like \r\n\r\n    127.0.0.1 - frank [10/Oct/2000:13:55:36 -0700] \"GET /apache_pb.gif HTTP/1.0\" 404 2326\r\n\r\nand the filter is very similiar to \r\n\r\n    [IP, UserInfo, User, Timestamp, RequestInfo, StatusCode=404, Bytes]\r\n\r\n\r\n I set up the metric-filter via the Cloudwatch console. The filter works perfectly except that it accumulates the values for all instanceids. However the metric is only valuable to me if it it takes the instanceid into account. \r\n\r\n**Is there a way to get the metric per instanceid, e.g. to write the instanceid as [dimension][2] to the metric?**\r\n\r\nI searched for a while but could not find anything appropriate. It is very important to me, that i don't have to hardcode the instanceid since instances might get terminated at any point and new instances will be created. Further on I want to avoid [evaluating the metric on the EC2-machine][3].\r\n\r\nIs there any way to achieve my goal? I would really appreciate any suggestions!\r\n\r\n\r\n  [1]: https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Counting404Responses.html\r\n  [2]: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Dimension\r\n  [3]: https://aws.amazon.com/de/premiumsupport/knowledge-center/cloudwatch-custom-metrics/", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "216828844", "PostHistoryTypeId": "33", "PostId": "60625164", "RevisionGUID": "41a198bf-5158-44da-9cd3-56a29188688e", "CreationDate": "2020-03-12T20:45:37.270", "UserId": "1402667", "Comment": "200154", "filtered-sentences": []}, {"Id": "217199742", "PostHistoryTypeId": "34", "PostId": "60625164", "RevisionGUID": "9610036d-e3b4-41d1-a2f0-ab0f76a1ed75", "CreationDate": "2020-03-18T19:59:08.590", "UserId": "1402667", "Comment": "200154", "filtered-sentences": []}], "answers": [{"Id": "60666921", "PostTypeId": "2", "ParentId": "60625164", "CreationDate": "2020-03-13T08:09:49.290", "Score": "5", "Body": "<p>I don't see how metric filters can help you here. First, they don't support dimensions, you can only set a metric name and namespace. Second, you don't have instance id on the logline and metric filters work per logline.</p>\n\n<p>You could use metric filters if you had exactly 1 instance at a time. Then you could configure <a href=\"https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html\" rel=\"noreferrer\">autoscaling hook</a> to create new metric filters when new instance launches and put the instance id into the metric name, and have another autoscaling hook to delete the metric filter when the instance terminates. If you have more than 1 instance, this approach would double count the values.</p>\n\n<p>You also say you want to avoid publishing custom metrics from the application itself (this would be my prefered approach).</p>\n\n<p>This leaves us with <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/SubscriptionFilters.html#LambdaFunctionExample\" rel=\"noreferrer\">subscription filters</a>. </p>\n\n<p>You can have your log events delivered to a lambda function. These events will have the information about the log group and log stream where the log event originated. You should have instance id as part of the log stream name. </p>\n\n<p>You would then need to write a lambda function that takes the instance id from the log steam, parses the log event and sends this info back into CloudWatch logs using <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Embedded_Metric_Format.html\" rel=\"noreferrer\">EMF</a>. But you could just do this directly from the application using CloudWatch Agent and EMF, that's why I would prefer that approach.</p>\n", "OwnerUserId": "1803990", "LastActivityDate": "2020-03-13T08:09:49.290", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "119895870", "PostId": "60666921", "Score": "5", "Text": "Now the filters support dimensions! https://aws.amazon.com/about-aws/whats-new/2021/05/amazon-cloudwatch-logs-announces-dimension-support-for-metric-filters/", "CreationDate": "2021-06-04T05:42:40.477", "UserId": "2848436", "filtered-sentences": []}, {"Id": "136324610", "PostId": "60666921", "Score": "0", "Text": "Yes, but adding a high cardinality field (such as UUIDs) to metric dimension is not recommended. Unique pair of metric and dimension value basically creates a variation of metric which will incur more cost.", "CreationDate": "2023-10-20T03:43:18.937", "UserId": "5489683", "filtered-sentences": [{"source": "Text", "text": "Unique pair of metric and dimension value basically creates a variation of metric which will incur more cost.", "keywords": ["cost"]}]}], "history": [{"Id": "216851150", "PostHistoryTypeId": "2", "PostId": "60666921", "RevisionGUID": "fbf82107-a2fa-4e1e-b09a-cda620c13727", "CreationDate": "2020-03-13T08:09:49.290", "UserId": "1803990", "Text": "I don't see how metric filters can help you here. First, they don't support dimensions, you can only set a metric name and namespace. Second, you don't have instance id on the logline and metric filters work per logline.\r\n\r\nYou could use metric filters if you had exactly 1 instance at a time. Then you could configure [autoscaling hook][1] to create new metric filters when new instance launches and put the instance id into the metric name, and have another autoscaling hook to delete the metric filter when the instance terminates. If you have more than 1 instance, this approach would double count the values.\r\n\r\nYou also say you want to avoid publishing custom metrics from the application itself (this would be my prefered approach).\r\n\r\nThis leaves us with [subscription filters][2]. \r\n\r\nYou can have your log events delivered to a lambda function. These events will have the information about the log group and log stream where the log event originated. You should have instance id as part of the log stream name. \r\n\r\nYou would then need to write a lambda function that takes the instance id from the log steam, parses the log event and sends this info back into CloudWatch logs using [EMF][3]. But you could just do this directly from the application using CloudWatch Agent and EMF, that's why I would prefer that approach.\r\n\r\n\r\n  [1]: https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html\r\n  [2]: https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/SubscriptionFilters.html#LambdaFunctionExample\r\n  [3]: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Embedded_Metric_Format.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Second, you don't have instance id on the logline and metric filters work per logline. ", "keywords": ["instance"]}, {"source": "Text", "text": "You could use metric filters if you had exactly 1 instance at a time. ", "keywords": ["instance"]}, {"source": "Text", "text": "Then you could configure [autoscaling hook][1] to create new metric filters when new instance launches and put the instance id into the metric name, and have another autoscaling hook to delete the metric filter when the instance terminates. ", "keywords": ["instance"]}, {"source": "Text", "text": "If you have more than 1 instance, this approach would double count the values. ", "keywords": ["instance"]}, {"source": "Text", "text": "You should have instance id as part of the log stream name. ", "keywords": ["instance"]}, {"source": "Text", "text": "You would then need to write a lambda function that takes the instance id from the log steam, parses the log event and sends this info back into CloudWatch logs using [EMF][3]. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "Second, you don't have instance id on the logline and metric filters work per logline. ", "keywords": ["instance"]}, {"source": "Body", "text": "You could use metric filters if you had exactly 1 instance at a time. ", "keywords": ["instance"]}, {"source": "Body", "text": "Then you could configure autoscaling hook to create new metric filters when new instance launches and put the instance id into the metric name, and have another autoscaling hook to delete the metric filter when the instance terminates. ", "keywords": ["instance"]}, {"source": "Body", "text": "If you have more than 1 instance, this approach would double count the values. ", "keywords": ["instance"]}, {"source": "Body", "text": "You should have instance id as part of the log stream name. ", "keywords": ["instance"]}, {"source": "Body", "text": "You would then need to write a lambda function that takes the instance id from the log steam, parses the log event and sends this info back into CloudWatch logs using EMF. ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": []}