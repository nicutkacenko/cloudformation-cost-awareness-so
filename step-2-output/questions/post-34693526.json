{"Id": "34693526", "PostTypeId": "1", "CreationDate": "2016-01-09T12:35:20.530", "Score": "14", "ViewCount": "12146", "Body": "<p>Is it possible to perform some sort of mathematical operation in a CloudFormation template?</p>\n<p>There are two areas that I've encountered where this would be useful:</p>\n<ol>\n<li>Setting IOPS which needs to be a ratio of the disk size.</li>\n<li>Setting CloudWatch Alarms for RDS Free Storage Space. It would be useful to set this as a % of the disk size.</li>\n</ol>\n", "OwnerUserId": "5241806", "LastEditorUserId": "1063716", "LastEditDate": "2022-04-11T12:38:44.113", "LastActivityDate": "2022-04-11T12:38:44.113", "Title": "How to perform mathematical operations in CloudFormation?", "Tags": "|amazon-web-services|math|aws-cloudformation|", "AnswerCount": "4", "CommentCount": "0", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "108060730", "PostHistoryTypeId": "2", "PostId": "34693526", "RevisionGUID": "430d5e77-44a3-4948-ac06-2d8d01f6062e", "CreationDate": "2016-01-09T12:35:20.530", "UserId": "5241806", "Text": "Is it possible to perform some sort of mathematical operation in Cloudformation json template?\r\n\r\nThere are two areas that I've encountered where this would be useful:\r\n1. Setting IOPS which needs to be a ratio of the disk size.\r\n2. Setting Cloud Watch Alarms for RDS Free Storage Space. It would be useful to set this as a % of the disk size.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "2. Setting Cloud Watch Alarms for RDS Free Storage Space. ", "keywords": ["storage"]}]}, {"Id": "108060731", "PostHistoryTypeId": "1", "PostId": "34693526", "RevisionGUID": "430d5e77-44a3-4948-ac06-2d8d01f6062e", "CreationDate": "2016-01-09T12:35:20.530", "UserId": "5241806", "Text": "Mathematical operations in Cloudwatch", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "108060732", "PostHistoryTypeId": "3", "PostId": "34693526", "RevisionGUID": "430d5e77-44a3-4948-ac06-2d8d01f6062e", "CreationDate": "2016-01-09T12:35:20.530", "UserId": "5241806", "Text": "|math|aws-cloudformation|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "108092003", "PostHistoryTypeId": "4", "PostId": "34693526", "RevisionGUID": "be969efa-f841-434c-a4f4-7b5581aa48be", "CreationDate": "2016-01-10T02:20:56.377", "UserId": "649408", "Comment": "corrected the title ", "Text": "Mathematical operations in CloudFormation", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "267931629", "PostHistoryTypeId": "4", "PostId": "34693526", "RevisionGUID": "7096b022-3138-480b-95a0-69bfeb6480c4", "CreationDate": "2022-04-11T12:38:44.113", "UserId": "1063716", "Comment": "Minor tidy-ups", "Text": "How to perform mathematical operations in CloudFormation?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "267931630", "PostHistoryTypeId": "6", "PostId": "34693526", "RevisionGUID": "7096b022-3138-480b-95a0-69bfeb6480c4", "CreationDate": "2022-04-11T12:38:44.113", "UserId": "1063716", "Comment": "Minor tidy-ups", "Text": "|amazon-web-services|math|aws-cloudformation|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "267931670", "PostHistoryTypeId": "5", "PostId": "34693526", "RevisionGUID": "7096b022-3138-480b-95a0-69bfeb6480c4", "CreationDate": "2022-04-11T12:38:44.113", "UserId": "1063716", "Comment": "Minor tidy-ups", "Text": "Is it possible to perform some sort of mathematical operation in a CloudFormation template?\r\n\r\nThere are two areas that I've encountered where this would be useful:\r\n1. Setting IOPS which needs to be a ratio of the disk size.\r\n2. Setting CloudWatch Alarms for RDS Free Storage Space. It would be useful to set this as a % of the disk size.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "2. Setting CloudWatch Alarms for RDS Free Storage Space. ", "keywords": ["storage"]}]}], "answers": [{"Id": "71762380", "PostTypeId": "2", "ParentId": "34693526", "CreationDate": "2022-04-06T07:03:19.830", "Score": "1", "Body": "<p>Is it still a hack if you limit the range of the StartingValue?</p>\n<pre><code>Parameters:\n  StartingValue:\n    MinValue: 0\n    MaxValue: 7\n    Type: Number\nOutputs:\n  MinusOne:\n    Value: !Select [ !Ref StartingValue, [&quot;-1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;] ]\n  PlusOne:\n    Value: !Select [ !Ref StartingValue, [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;] ]\n  TimesTwo:\n    Value: !Select [ !Ref StartingValue, [&quot;0&quot;,&quot;2&quot;,&quot;4&quot;,&quot;6&quot;,&quot;8&quot;,&quot;10&quot;,&quot;12&quot;,&quot;14&quot;] ] \n</code></pre>\n<p><a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-select.html\" rel=\"nofollow noreferrer\">https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-select.html</a></p>\n", "OwnerUserId": "414655", "LastActivityDate": "2022-04-06T07:03:19.830", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "267576062", "PostHistoryTypeId": "2", "PostId": "71762380", "RevisionGUID": "a25c0b75-fb2a-4ab8-879f-69b1518152c0", "CreationDate": "2022-04-06T07:03:19.830", "UserId": "414655", "Text": "Is it still a hack if you limit the range of the StartingValue?\r\n\r\n    Parameters:\r\n      StartingValue:\r\n        MinValue: 0\r\n        MaxValue: 7\r\n        Type: Number\r\n    Outputs:\r\n      MinusOne:\r\n        Value: !Select [ !Ref StartingValue, [\"-1\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"] ]\r\n      PlusOne:\r\n        Value: !Select [ !Ref StartingValue, [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"] ]\r\n      TimesTwo:\r\n        Value: !Select [ !Ref StartingValue, [\"0\",\"2\",\"4\",\"6\",\"8\",\"10\",\"12\",\"14\"] ] \r\n\r\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-select.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "71827955", "PostTypeId": "2", "ParentId": "34693526", "CreationDate": "2022-04-11T12:36:15.387", "Score": "5", "Body": "<p>Much later in 2022...</p>\n<p>This is one reason for using <a href=\"https://aws.amazon.com/cdk/\" rel=\"noreferrer\">CDK</a>, which provides a code wrapper (e.g. Javascript, Typescript etc.) over CloudFormation and makes calculations, conditionals sharing etc. much simpler than is possible when only using CloudFormation templates.</p>\n", "OwnerUserId": "1063716", "LastActivityDate": "2022-04-11T12:36:15.387", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "267931444", "PostHistoryTypeId": "2", "PostId": "71827955", "RevisionGUID": "724bb46a-4382-4409-a4ea-9562f500176b", "CreationDate": "2022-04-11T12:36:15.387", "UserId": "1063716", "Text": "Much later in 2022...\r\n\r\nThis is one reason for using [CDK](https://aws.amazon.com/cdk/), which provides a code wrapper (e.g. Javascript, Typescript etc.) over CloudFormation and makes calculations, conditionals sharing etc. much simpler than is possible when only using CloudFormation templates.\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "34730178", "PostTypeId": "2", "ParentId": "34693526", "CreationDate": "2016-01-11T20:09:57.990", "Score": "0", "Body": "<p>I've had great success with using a pre-processing system.  In general I'm looking at the template and the variable data and making decisions based on these pieces of data.</p>\n\n<p>Here's a blog post on the problem:</p>\n\n<p><a href=\"http://krogebry.blogspot.com/2014/12/cloudformation-discovery-and.html\" rel=\"nofollow\">http://krogebry.blogspot.com/2014/12/cloudformation-discovery-and.html</a></p>\n\n<p>At the time of writing we had an issue with many VPC's and a very complicated system of account management.  What you're saying seem like it might be of a similar vein of thinking in that you have some complicated ( and neat! ) requirements that might require a similar approach.  Also, compiling a stack like this has the added benefit of being able to enforce certain rules ( like no 0.0.0.0:22 or no IOPS>x threshold in dev ) all based on your use case. </p>\n", "OwnerUserId": "4233091", "LastActivityDate": "2016-01-11T20:09:57.990", "CommentCount": "1", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "124746059", "PostId": "34730178", "Score": "0", "Text": "Unfortunately, this link doesn't work anymore.", "CreationDate": "2022-01-03T16:22:22.550", "UserId": "245915", "filtered-sentences": []}], "history": [{"Id": "108205703", "PostHistoryTypeId": "2", "PostId": "34730178", "RevisionGUID": "696b7d3b-889f-4059-b311-c225feded3d9", "CreationDate": "2016-01-11T20:09:57.990", "UserId": "4233091", "Text": "I've had great success with using a pre-processing system.  In general I'm looking at the template and the variable data and making decisions based on these pieces of data.\r\n\r\nHere's a blog post on the problem:\r\n\r\nhttp://krogebry.blogspot.com/2014/12/cloudformation-discovery-and.html\r\n\r\nAt the time of writing we had an issue with many VPC's and a very complicated system of account management.  What you're saying seem like it might be of a similar vein of thinking in that you have some complicated ( and neat! ) requirements that might require a similar approach.  Also, compiling a stack like this has the added benefit of being able to enforce certain rules ( like no 0.0.0.0:22 or no IOPS>x threshold in dev ) all based on your use case. ", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "41422057", "PostTypeId": "2", "ParentId": "34693526", "CreationDate": "2017-01-02T06:06:43.617", "Score": "16", "Body": "<p>There are two general solutions to performing custom logic in CloudFormation templates not supported by <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html\" rel=\"noreferrer\">Intrinsic Functions</a>, such as mathematical operations:</p>\n\n<h3>1. Custom Resource</h3>\n\n<p>Write a <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html\" rel=\"noreferrer\">Custom Resource</a> to execute your mathematical operation, passing inputs as Properties and outputs as Values. Here's a self-contained working example that returns <code>Result: 13</code> as a Stack Output:</p>\n\n<p><a href=\"https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=so-41422057-add&amp;templateURL=https://s3.amazonaws.com/wjordan-cf-templates/41422057-add.yml\" rel=\"noreferrer\"><img src=\"https://cdn.rawgit.com/buildkite/cloudformation-launch-stack-button-svg/master/launch-stack.svg\" alt=\"Launch Stack\"></a></p>\n\n<pre><code>Resources:\n  LambdaExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n        - Effect: Allow\n          Principal: {Service: [lambda.amazonaws.com]}\n          Action: ['sts:AssumeRole']\n      Path: \"/\"\n      ManagedPolicyArns:\n      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n  AddFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      Handler: index.handler\n      Role: !GetAtt LambdaExecutionRole.Arn\n      Code:\n        ZipFile: !Sub |\n          var response = require('cfn-response');\n          exports.handler = function(event, context) {\n            var result = parseInt(event.ResourceProperties.Op1) + parseInt(event.ResourceProperties.Op2);\n            response.send(event, context, response.SUCCESS, {Value: result});\n          };\n      Runtime: nodejs\n  AddTest:\n    Type: Custom::Add\n    Properties:\n      ServiceToken: !GetAtt AddFunction.Arn\n      Op1: 8\n      Op2: 5\nOutputs:\n  Result:\n    Description: Result\n    Value: !GetAtt AddTest.Value\n</code></pre>\n\n<h3>2. Template Preprocessor</h3>\n\n<p>Use a full-featured templating language/platform of your choice to write a 'source' template that produces a valid CloudFormation-template as output. You can use a full-featured CloudFormation-specific library like <a href=\"https://github.com/cloudtools/troposphere\" rel=\"noreferrer\">troposphere</a>, but it's also easy enough to write a simple preprocessor layer to suit your use-case and programming-language/library preferences.</p>\n\n<p>My current choice is embedded Ruby (<a href=\"http://ruby-doc.org/stdlib/libdoc/erb/rdoc/ERB.html\" rel=\"noreferrer\">ERB</a>), mostly because I'm already familiar with it. Here's an example <code>template.yml.erb</code> file using embedded Ruby syntax to perform a mathematical operation that returns <code>Result: 13</code> as a Stack Output:</p>\n\n<pre><code>Resources:\n  # CloudFormation stacks require at least one resource\n  Dummy:\n    Type: AWS::SNS::Topic\nOutputs:\n  Result:\n    Description: Result\n    Value: &lt;%= 8 + 5 %&gt;\n</code></pre>\n\n<p>To process the template, run <code>cat template.yml.erb | ruby -rerb -e \"puts ERB.new(ARGF.read, nil, '-').result\" &gt; template.yml</code>, which will write the following CloudFormation-ready template to <code>template.yml</code>:</p>\n\n<pre><code>Resources:\n  # CloudFormation stacks require at least one resource\n  Dummy:\n    Type: AWS::SNS::Topic\nOutputs:\n  Result:\n    Description: Result\n    Value: 13\n</code></pre>\n", "OwnerUserId": "2518355", "LastEditorUserId": "2518355", "LastEditDate": "2017-01-04T16:44:00.363", "LastActivityDate": "2017-01-04T16:44:00.363", "CommentCount": "4", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "117258461", "PostId": "41422057", "Score": "4", "Text": "In the first example, does that spin up an entire lambda function just to do 5+8?", "CreationDate": "2021-02-23T01:16:59.940", "UserId": "6745604", "filtered-sentences": []}, {"Id": "117302242", "PostId": "41422057", "Score": "0", "Text": "@PaulaT you got it", "CreationDate": "2021-02-24T12:17:36.743", "UserId": "5979634", "filtered-sentences": []}, {"Id": "117442349", "PostId": "41422057", "Score": "0", "Text": "Seems a bit excessive, and expensive if the service experiences frequent deployments.", "CreationDate": "2021-03-01T23:29:27.950", "UserId": "6745604", "filtered-sentences": [{"source": "Text", "text": "Seems a bit excessive, and expensive if the service experiences frequent deployments.", "keywords": ["expense"]}]}, {"Id": "117462042", "PostId": "41422057", "Score": "1", "Text": "Lambda cost is about 22 cents per million invocations for a simple function, so prefer option 2 if that cost is excessive for your use case.", "CreationDate": "2021-03-02T15:53:22.410", "UserId": "2518355", "filtered-sentences": [{"source": "Text", "text": "Lambda cost is about 22 cents per million invocations for a simple function, so prefer option 2 if that cost is excessive for your use case.", "keywords": ["cost"]}]}], "history": [{"Id": "135029907", "PostHistoryTypeId": "2", "PostId": "41422057", "RevisionGUID": "b4a6c7bc-0c96-4c3a-af82-be1c0319192b", "CreationDate": "2017-01-02T06:06:43.617", "UserId": "2518355", "Text": "There are two general solutions to performing custom logic in CloudFormation templates not supported by [Intrinsic Functions](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html), such as mathematical operations:\r\n\r\n### 1. Custom Resource\r\n\r\nWrite a [Custom Resource](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html) to execute your mathematical operation, passing inputs as Properties and outputs as Values. Here's a self-contained working example that returns `Result: 13` as a Stack Output:\r\n\r\n    Resources:\r\n      LambdaExecutionRole:\r\n        Type: AWS::IAM::Role\r\n        Properties:\r\n          AssumeRolePolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n            - Effect: Allow\r\n              Principal: {Service: [lambda.amazonaws.com]}\r\n              Action: ['sts:AssumeRole']\r\n          Path: \"/\"\r\n          ManagedPolicyArns:\r\n          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\r\n      AddFunction:\r\n        Type: AWS::Lambda::Function\r\n        Properties:\r\n          Handler: index.handler\r\n          Role: !GetAtt LambdaExecutionRole.Arn\r\n          Code:\r\n            ZipFile: !Sub |\r\n              var response = require('cfn-response');\r\n              exports.handler = function(event, context) {\r\n                var result = parseInt(event.ResourceProperties.Op1) + parseInt(event.ResourceProperties.Op2);\r\n                response.send(event, context, response.SUCCESS, {Value: result});\r\n              };\r\n          Runtime: nodejs\r\n      AddTest:\r\n        Type: Custom::Add\r\n        Properties:\r\n          ServiceToken: !GetAtt AddFunction.Arn\r\n          Op1: 8\r\n          Op2: 5\r\n    Outputs:\r\n      Result:\r\n        Description: Result\r\n        Value: !GetAtt AddTest.Value\r\n\r\n### 2. Template Preprocessor\r\n\r\nUse a full-featured templating language/platform of your choice to write a 'source' template that produces a valid CloudFormation-template as output. You can use a full-featured CloudFormation-specific library like [troposphere](https://github.com/cloudtools/troposphere), but it's also easy enough to write a simple preprocessor layer to suit your use-case and programming-language/library preferences.\r\n\r\nMy current choice is embedded Ruby ([ERB](http://ruby-doc.org/stdlib/libdoc/erb/rdoc/ERB.html)), mostly because I'm already familiar with it. Here's an example `template.yml.erb` file using embedded Ruby syntax to perform a mathematical operation that returns `Result: 13` as a Stack Output:\r\n\r\n    Resources:\r\n      # CloudFormation stacks require at least one resource\r\n      Dummy:\r\n        Type: AWS::SNS::Topic\r\n    Outputs:\r\n      Result:\r\n        Description: Result\r\n        Value: <%= 8 + 5 %>\r\n\r\nTo process the template, run `cat template.yml.erb | ruby -rerb -e \"puts ERB.new(ARGF.read, nil, '-').result\" > template.yml`, which will write the following CloudFormation-ready template to `template.yml`:\r\n\r\n    Resources:\r\n      # CloudFormation stacks require at least one resource\r\n      Dummy:\r\n        Type: AWS::SNS::Topic\r\n    Outputs:\r\n      Result:\r\n        Description: Result\r\n        Value: 13\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Here's a self-contained working example that returns `Result: 13` as a Stack Output: Resources: LambdaExecutionRole: Type: AWS::IAM::Role Properties: AssumeRolePolicyDocument: Version: '2012-10-17' Statement: - Effect: Allow Principal: {Service: [lambda.amazonaws.com]} Action: ['sts:AssumeRole'] Path: \"/\" ManagedPolicyArns: - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole AddFunction: Type: AWS::Lambda::Function Properties: Handler: index.handler Role: !GetAtt LambdaExecutionRole.Arn Code: ZipFile: !Sub | var response = require('cfn-response'); exports.handler = function(event, context) { var result = parseInt(event.ResourceProperties.Op1) + parseInt(event.ResourceProperties.Op2); response.send(event, context, response.SUCCESS, {Value: result}); }; Runtime: nodejs AddTest: Type: Custom::Add Properties: ServiceToken: !GetAtt AddFunction.Arn Op1: 8 Op2: 5 Outputs: Result: Description: Result Value: !GetAtt AddTest.Value ### 2. ", "keywords": ["policy"]}]}, {"Id": "135223551", "PostHistoryTypeId": "5", "PostId": "41422057", "RevisionGUID": "112af137-1007-4490-9faa-dbf01da53f6c", "CreationDate": "2017-01-04T16:44:00.363", "UserId": "2518355", "Comment": "add Launch Stack button", "Text": "There are two general solutions to performing custom logic in CloudFormation templates not supported by [Intrinsic Functions](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html), such as mathematical operations:\r\n\r\n### 1. Custom Resource\r\n\r\nWrite a [Custom Resource](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html) to execute your mathematical operation, passing inputs as Properties and outputs as Values. Here's a self-contained working example that returns `Result: 13` as a Stack Output:\r\n\r\n[![Launch Stack](https://cdn.rawgit.com/buildkite/cloudformation-launch-stack-button-svg/master/launch-stack.svg)](https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=so-41422057-add&templateURL=https://s3.amazonaws.com/wjordan-cf-templates/41422057-add.yml)\r\n\r\n    Resources:\r\n      LambdaExecutionRole:\r\n        Type: AWS::IAM::Role\r\n        Properties:\r\n          AssumeRolePolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n            - Effect: Allow\r\n              Principal: {Service: [lambda.amazonaws.com]}\r\n              Action: ['sts:AssumeRole']\r\n          Path: \"/\"\r\n          ManagedPolicyArns:\r\n          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\r\n      AddFunction:\r\n        Type: AWS::Lambda::Function\r\n        Properties:\r\n          Handler: index.handler\r\n          Role: !GetAtt LambdaExecutionRole.Arn\r\n          Code:\r\n            ZipFile: !Sub |\r\n              var response = require('cfn-response');\r\n              exports.handler = function(event, context) {\r\n                var result = parseInt(event.ResourceProperties.Op1) + parseInt(event.ResourceProperties.Op2);\r\n                response.send(event, context, response.SUCCESS, {Value: result});\r\n              };\r\n          Runtime: nodejs\r\n      AddTest:\r\n        Type: Custom::Add\r\n        Properties:\r\n          ServiceToken: !GetAtt AddFunction.Arn\r\n          Op1: 8\r\n          Op2: 5\r\n    Outputs:\r\n      Result:\r\n        Description: Result\r\n        Value: !GetAtt AddTest.Value\r\n\r\n### 2. Template Preprocessor\r\n\r\nUse a full-featured templating language/platform of your choice to write a 'source' template that produces a valid CloudFormation-template as output. You can use a full-featured CloudFormation-specific library like [troposphere](https://github.com/cloudtools/troposphere), but it's also easy enough to write a simple preprocessor layer to suit your use-case and programming-language/library preferences.\r\n\r\nMy current choice is embedded Ruby ([ERB](http://ruby-doc.org/stdlib/libdoc/erb/rdoc/ERB.html)), mostly because I'm already familiar with it. Here's an example `template.yml.erb` file using embedded Ruby syntax to perform a mathematical operation that returns `Result: 13` as a Stack Output:\r\n\r\n    Resources:\r\n      # CloudFormation stacks require at least one resource\r\n      Dummy:\r\n        Type: AWS::SNS::Topic\r\n    Outputs:\r\n      Result:\r\n        Description: Result\r\n        Value: <%= 8 + 5 %>\r\n\r\nTo process the template, run `cat template.yml.erb | ruby -rerb -e \"puts ERB.new(ARGF.read, nil, '-').result\" > template.yml`, which will write the following CloudFormation-ready template to `template.yml`:\r\n\r\n    Resources:\r\n      # CloudFormation stacks require at least one resource\r\n      Dummy:\r\n        Type: AWS::SNS::Topic\r\n    Outputs:\r\n      Result:\r\n        Description: Result\r\n        Value: 13\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Here's a self-contained working example that returns `Result: 13` as a Stack Output: [![Launch Stack](https://cdn.rawgit.com/buildkite/cloudformation-launch-stack-button-svg/master/launch-stack.svg)](https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=so-41422057-add&templateURL=https://s3.amazonaws.com/wjordan-cf-templates/41422057-add.yml) Resources: LambdaExecutionRole: Type: AWS::IAM::Role Properties: AssumeRolePolicyDocument: Version: '2012-10-17' Statement: - Effect: Allow Principal: {Service: [lambda.amazonaws.com]} Action: ['sts:AssumeRole'] Path: \"/\" ManagedPolicyArns: - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole AddFunction: Type: AWS::Lambda::Function Properties: Handler: index.handler Role: !GetAtt LambdaExecutionRole.Arn Code: ZipFile: !Sub | var response = require('cfn-response'); exports.handler = function(event, context) { var result = parseInt(event.ResourceProperties.Op1) + parseInt(event.ResourceProperties.Op2); response.send(event, context, response.SUCCESS, {Value: result}); }; Runtime: nodejs AddTest: Type: Custom::Add Properties: ServiceToken: !GetAtt AddFunction.Arn Op1: 8 Op2: 5 Outputs: Result: Description: Result Value: !GetAtt AddTest.Value ### 2. Template Preprocessor Use a full-featured templating language/platform of your choice to write a 'source' template that produces a valid CloudFormation-template as output. ", "keywords": ["policy"]}]}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "Setting CloudWatch Alarms for RDS Free Storage Space. ", "keywords": ["storage"]}]}