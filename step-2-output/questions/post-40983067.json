{"Id": "40983067", "PostTypeId": "1", "AcceptedAnswerId": "41557444", "CreationDate": "2016-12-05T20:49:06.007", "Score": "2", "ViewCount": "2275", "Body": "<p>We're evaluating whether to use <a href=\"https://serverless.com\" rel=\"nofollow noreferrer\">Serverless</a> for some of our new AWS application infrastructure. We heavily use Cloudformation (deployed by Ansible), so we would need to be able to cleanly reference the outputs of existing Cloudformation stacks -- one immediate example would be for getting the subnet IDs of our existing AWS network infrastructure for use by a lambda function.</p>\n\n<p>After a lot of browsing, I haven't seen an out-of-the-box way to do this. Our existing Cloudformation stacks are named such that if I could just key in the name of the stack and the desired output variable, I could reliably get the desired outputs across various environments. One possible solution I see is to pull the variables using aws cli and pass them as environment variables to serverless, but I would like a cleaner way if possible.</p>\n", "OwnerUserId": "4621508", "LastEditorUserId": "4621508", "LastEditDate": "2017-01-10T05:52:38.813", "LastActivityDate": "2017-01-10T05:52:38.813", "Title": "Reference Existing Cloudformation Stack Outputs in Serverless Framework", "Tags": "|amazon-web-services|aws-cloudformation|serverless-framework|", "AnswerCount": "2", "CommentCount": "1", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "70320378", "PostId": "40983067", "Score": "0", "Text": "Please clarify whether your question is regarding the AWS [Serverless Application Model](https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md) (SAM), or the [Serverless Framework](https://serverless.com/).", "CreationDate": "2017-01-09T21:45:03.417", "UserId": "2518355", "filtered-sentences": []}], "history": [{"Id": "133164779", "PostHistoryTypeId": "2", "PostId": "40983067", "RevisionGUID": "a4bed6a9-db21-42ed-b207-cbbe224dd5d0", "CreationDate": "2016-12-05T20:49:06.007", "UserId": "4621508", "Text": "We're evaluating whether to use Serverless for some of our new AWS application infrastructure. We heavily use Cloudformation (deployed by Ansible), so we would need to be able to cleanly reference the outputs of existing Cloudformation stacks -- one immediate example would be for getting the subnet IDs of our existing AWS network infrastructure for use by a lambda function.\r\n\r\nAfter a lot of browsing, I haven't seen an out-of-the-box way to do this. Our existing Cloudformation stacks are named such that if I could just key in the name of the stack and the desired output variable, I could reliably get the desired outputs across various environments. One possible solution I see is to pull the variables using aws cli and pass them as environment variables to serverless, but I would like a cleaner way if possible.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "133164780", "PostHistoryTypeId": "1", "PostId": "40983067", "RevisionGUID": "a4bed6a9-db21-42ed-b207-cbbe224dd5d0", "CreationDate": "2016-12-05T20:49:06.007", "UserId": "4621508", "Text": "Reference Existing Cloudformation Stack Outputs in Serverless", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "133164781", "PostHistoryTypeId": "3", "PostId": "40983067", "RevisionGUID": "a4bed6a9-db21-42ed-b207-cbbe224dd5d0", "CreationDate": "2016-12-05T20:49:06.007", "UserId": "4621508", "Text": "|amazon-web-services|aws-cloudformation|serverless-framework|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "135615448", "PostHistoryTypeId": "6", "PostId": "40983067", "RevisionGUID": "6bdeb25b-26c9-4c85-8b4f-874df2e20667", "CreationDate": "2017-01-10T05:49:00.670", "UserId": "2518355", "Comment": "add amazon-cloudformation tag", "Text": "|amazon-web-services|aws-cloudformation|serverless-framework|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "135615449", "PostHistoryTypeId": "24", "PostId": "40983067", "RevisionGUID": "6bdeb25b-26c9-4c85-8b4f-874df2e20667", "CreationDate": "2017-01-10T05:49:00.670", "Comment": "Proposed by 2518355 approved by 89663, 302164, 4206079 edit id of 2914437", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "135615674", "PostHistoryTypeId": "4", "PostId": "40983067", "RevisionGUID": "b6f89629-857f-49a4-9cef-c1745561c3ee", "CreationDate": "2017-01-10T05:52:38.813", "UserId": "4621508", "Comment": "clarify", "Text": "Reference Existing Cloudformation Stack Outputs in Serverless Framework", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "135615776", "PostHistoryTypeId": "5", "PostId": "40983067", "RevisionGUID": "b6f89629-857f-49a4-9cef-c1745561c3ee", "CreationDate": "2017-01-10T05:52:38.813", "UserId": "4621508", "Comment": "clarify", "Text": "We're evaluating whether to use [Serverless](https://serverless.com) for some of our new AWS application infrastructure. We heavily use Cloudformation (deployed by Ansible), so we would need to be able to cleanly reference the outputs of existing Cloudformation stacks -- one immediate example would be for getting the subnet IDs of our existing AWS network infrastructure for use by a lambda function.\r\n\r\nAfter a lot of browsing, I haven't seen an out-of-the-box way to do this. Our existing Cloudformation stacks are named such that if I could just key in the name of the stack and the desired output variable, I could reliably get the desired outputs across various environments. One possible solution I see is to pull the variables using aws cli and pass them as environment variables to serverless, but I would like a cleaner way if possible.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "40984033", "PostTypeId": "2", "ParentId": "40983067", "CreationDate": "2016-12-05T21:53:11.717", "Score": "0", "Body": "<p>The easiest way I can think to handle your example case is to have the lambda use <code>boto3</code> to call <code>boto3.client('cloudformation', region_name=*specified region*).describe_stacks(StackName=*specified stack*)['Stacks']</code>. This list contains all stacks that match the <code>StackName</code> specified, if all of your network infrastructure shares a subset of their names, you can list all of them by specifying the <code>StackName</code> to that substring. Each Stack object contains an <code>'Outputs'</code> block. See <a href=\"http://boto3.readthedocs.io/en/latest/reference/services/cloudformation.html#CloudFormation.Client.describe_stacks\" rel=\"nofollow noreferrer\">here</a>.</p>\n\n<p>If you'd like to expose this for easy use from anywhere, you can attach an API Gateway GET method to the lambda and expose it to an HTML form.</p>\n", "OwnerUserId": "2766650", "LastActivityDate": "2016-12-05T21:53:11.717", "CommentCount": "10", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "69177835", "PostId": "40984033", "Score": "0", "Text": "Thanks for the reply. The issue I see with this approach is that ideally I'd have the values of the variables *before* I even deploy the Lambda function. Since the functions I'm deploying need to connect to a RDS instance, they need subnet IDs in order to create an elastic network interface and get access to our network.", "CreationDate": "2016-12-05T21:59:48.410", "UserId": "4621508", "filtered-sentences": [{"source": "Text", "text": "Since the functions I'm deploying need to connect to a RDS instance, they need subnet IDs in order to create an elastic network interface and get access to our network.", "keywords": ["instance"]}]}, {"Id": "69178420", "PostId": "40984033", "Score": "0", "Text": "@rumdrums Is there any reason you cant search for the values before connection to RDS?", "CreationDate": "2016-12-05T22:22:28.680", "UserId": "2766650", "filtered-sentences": []}, {"Id": "69178712", "PostId": "40984033", "Score": "0", "Text": "My understanding is that when I create the lambda function, I need to give it the subnet IDs that it will be connecting to, as in the VpcConfig parameter described [here](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-vpcconfig.html). I didn't think it was possible to have the lambda function get the Subnet IDs after it has already been deployed.", "CreationDate": "2016-12-05T22:33:11.113", "UserId": "4621508", "filtered-sentences": []}, {"Id": "69178788", "PostId": "40984033", "Score": "0", "Text": "@rumdrums A lambda function is deployed when it is triggered by an external action (API Gateway, DynamoDB, SNS Topic). You can definitely have part of its functionality be looking up the subnet IDs it requires if you aren't storing them in your DB. The purpose of lambda is to not have to pay for a standalone instance to listen/run code based off actions and only pay for the code when it's in use/running.", "CreationDate": "2016-12-05T22:36:14.170", "UserId": "2766650", "filtered-sentences": [{"source": "Text", "text": "The purpose of lambda is to not have to pay for a standalone instance to listen/run code based off actions and only pay for the code when it's in use/running.", "keywords": ["pay", "instance"]}]}, {"Id": "69178828", "PostId": "40984033", "Score": "0", "Text": "@rumdrums The distinction I personally use between lambdas and other parts of my AWS infrastructure is lambdas are reserved specifically for code triggered by actions. If I need something to run based on a schedule, I use ECS and put the code in a docker container. Also, if a task needs to wait on some execution to complete that may or may not be longer than 5 minutes, it goes in a container (there is a hard 300s limit on lambda function runtime).", "CreationDate": "2016-12-05T22:37:41.827", "UserId": "2766650", "filtered-sentences": []}, {"Id": "69178998", "PostId": "40984033", "Score": "0", "Text": "I definitely understand the use cases for Lambda functions. However, for our purposes we do need the Lambda function to be able to create an elastic network interface on our subnets and be able to initiate a connection to an RDS instance. This is a well-documented use case for Lambda -- I'm simply trying to understand whether Serverless provides a way to read parameters from Cloudformation stacks that already exist -- which, in this case, includes the subnet IDs that I need.", "CreationDate": "2016-12-05T22:44:20.937", "UserId": "4621508", "filtered-sentences": [{"source": "Text", "text": "However, for our purposes we do need the Lambda function to be able to create an elastic network interface on our subnets and be able to initiate a connection to an RDS instance. ", "keywords": ["instance"]}]}, {"Id": "69179069", "PostId": "40984033", "Score": "0", "Text": "@rumdrums Yes, the call I detailed above searches for/returns all the information for specified stacks, including the outputs for those stacks.", "CreationDate": "2016-12-05T22:46:59.473", "UserId": "2766650", "filtered-sentences": []}, {"Id": "69179271", "PostId": "40984033", "Score": "0", "Text": "Okay, I understand what you're saying. If possible, I'd rather avoid having to have the Lambda function update itself every time it's invoked just to get the subnet IDs, which almost never change and, using my current Ansible deployment system, can easily be provided at function deployment time.", "CreationDate": "2016-12-05T22:54:24.927", "UserId": "4621508", "filtered-sentences": [{"source": "Text", "text": "If possible, I'd rather avoid having to have the Lambda function update itself every time it's invoked just to get the subnet IDs, which almost never change and, using my current Ansible deployment system, can easily be provided at function deployment time.", "keywords": ["change"]}]}, {"Id": "69179388", "PostId": "40984033", "Score": "0", "Text": "I'm still a little confused as to what you're really asking here, but I'll try my best to provide another solution. If what you're looking for here is to have a lambda listen to a stack coming up, get the outputs from it, then go off and do tasks then what you need is to specify `NotificationARNs=[*snstopic*]` then have that snstopic trigger a lambda. This sends a message to your lambda every time any resource changes Then you can parse on `AWS::CloudFormation::Stack` - `CREATE_COMPLETE` which contains all the outputs for that stack.", "CreationDate": "2016-12-05T22:58:08.927", "UserId": "2766650", "filtered-sentences": [{"source": "Text", "text": "This sends a message to your lambda every time any resource changes ", "keywords": ["change"]}]}, {"Id": "69179427", "PostId": "40984033", "Score": "0", "Text": "@rumdrums Specifically, `notification_arns` for ansible. See [this link](http://docs.ansible.com/ansible/cloudformation_module.html)", "CreationDate": "2016-12-05T23:00:23.553", "UserId": "2766650", "filtered-sentences": []}], "history": [{"Id": "133168721", "PostHistoryTypeId": "2", "PostId": "40984033", "RevisionGUID": "74418d8d-493f-476d-adf5-bfb6b265ee16", "CreationDate": "2016-12-05T21:53:11.717", "UserId": "2766650", "Text": "The easiest way I can think to handle your example case is to have the lambda use `boto3` to call `boto3.client('cloudformation', region_name=*specified region*).describe_stacks(StackName=*specified stack*)['Stacks']`. This list contains all stacks that match the `StackName` specified, if all of your network infrastructure shares a subset of their names, you can list all of them by specifying the `StackName` to that substring. Each Stack object contains an `'Outputs'` block. See [here](http://boto3.readthedocs.io/en/latest/reference/services/cloudformation.html#CloudFormation.Client.describe_stacks).\r\n\r\nIf you'd like to expose this for easy use from anywhere, you can attach an API Gateway GET method to the lambda and expose it to an HTML form.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "41557444", "PostTypeId": "2", "ParentId": "40983067", "CreationDate": "2017-01-09T21:40:00.447", "Score": "5", "Body": "<p>If the <a href=\"https://serverless.com/\" rel=\"noreferrer\">Serverless Framework</a> allows you to use <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html\" rel=\"noreferrer\">Intrinsic Functions</a> within your CloudFormation templates, you can <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-crossstackref.html\" rel=\"noreferrer\">create cross-stack references</a> within a CloudFormation template by <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-exports.html\" rel=\"noreferrer\">exporting stack output values</a> from one stack (using the <code>Exports</code> property in the <code>Outputs</code> section), and using the <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html\" rel=\"noreferrer\"><code>Fn::ImportValue</code></a> intrinsic function in another stack to reference the exported value.</p>\n", "OwnerUserId": "2518355", "LastActivityDate": "2017-01-09T21:40:00.447", "CommentCount": "1", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "70328442", "PostId": "41557444", "Score": "0", "Text": "This is definitely the best answer. We've avoided cross-stack references 1) b/c they only existed until fairly recently, and 2) I like the looser coupling that comes from explicitly passing the outputs of one stack as parameters to another stack. I think we've decided 'sls' is a bit limited for our needs, but this would definitely be the way to go if we were to use it.", "CreationDate": "2017-01-10T05:49:49.790", "UserId": "4621508", "filtered-sentences": []}], "history": [{"Id": "135596802", "PostHistoryTypeId": "2", "PostId": "41557444", "RevisionGUID": "4f1b1edb-d5c1-4ed7-b6ad-6fb37df6a21e", "CreationDate": "2017-01-09T21:40:00.447", "UserId": "2518355", "Text": "If the [Serverless Framework](https://serverless.com/) allows you to use [Intrinsic Functions](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html) within your CloudFormation templates, you can [create cross-stack references](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-crossstackref.html) within a CloudFormation template by [exporting stack output values](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-exports.html) from one stack (using the `Exports` property in the `Outputs` section), and using the [`Fn::ImportValue`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-importvalue.html) intrinsic function in another stack to reference the exported value.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}