{"Id": "69949453", "PostTypeId": "1", "CreationDate": "2021-11-12T21:52:51.140", "Score": "0", "ViewCount": "482", "Body": "<p>In our AWS environment, we have an Elasticsearch cluster that was initially created a couple of years ago, via a (rather simplistic) CloudFormation template.</p>\n<p>Since then, a number of changes have been made to that cluster, such as:</p>\n<ul>\n<li>Changing the class of the dedicated master nodes</li>\n<li>Increasing the number of data nodes</li>\n<li>Increasing the EBS volume size for each data node</li>\n<li>Updating the Elasticsearch version from 6.7 to 6.8</li>\n<li>Attaching a couple of Ultrawarm nodes</li>\n</ul>\n<p>Unfortunately, <em>all</em> of these changes were made directly via the AWS Elasticsearch console, and ignored the CF template and stack, which were left unchanged. I'd now like to get the CF template back in sync with the current state of the cluster, if possible.</p>\n<p>By my reading of the CF documentation, and in particular the AWS Blog post <a href=\"https://aws.amazon.com/blogs/mt/remediate-drift-via-resource-import-with-aws-cloudformation/\" rel=\"nofollow noreferrer\">Remediate drift via resource import with AWS CloudFormation</a>, the preferred way to do this in general would be to:</p>\n<ol>\n<li>Update the CF template to give the resource a <code>DeletionPolicy</code> of <code>Retain</code></li>\n<li>Delete the CF stack (which should leave the resource in place, because of the <code>Retain</code> policy)</li>\n<li>Create a new template, but now &quot;import&quot; the resource into the new stack.</li>\n</ol>\n<p>Which sounds great, except for the fact that Elasticsearch/OpenSearch resources <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resource-import-supported-resources.html\" rel=\"nofollow noreferrer\">don't support import</a>.</p>\n<p>So, what's my alternative?</p>\n<p>I do see <a href=\"https://stackoverflow.com/questions/69828574/importing-non-importable-resources-into-a-cloudformation-stack\">another recent question</a>, self-answered by the OP, that suggests that the only other truly workable alternative is to delete and re-create the resource -- but that seems <em>awfully</em> extreme when the resource is a live Elasticsearch cluster in production.</p>\n<p>Being rather new to CloudFormation, I'll also remark that even updating the template &amp; stack to <em>only</em> add the new deletion policy looks pretty risky, since most everything about the current ES cluster is different from what the original template expresses. For example, the live cluster is running ES 6.8, whereas the original template says it should be running ES 6.7.</p>\n<p>What guarantees that re-running the updated stack (with the new deletion policy added) won't revert the cluster to running ES 6.7, or revert any of the other manually-applied changes listed above?</p>\n<p>(Some might argue that this last question should be a separate question, but I believe the context is important.)</p>\n<p><strong>Small Update</strong>: After a bit more searching, I found a comment to a <a href=\"https://serverfault.com/a/699638\">SeverFault answer</a> about manual changes to CF stack resources, which says in part:</p>\n<blockquote>\n<p>... CloudFormation will not recreate a resource if there were no changes to the properties of that resource. It does a diff of the template, not the actual resources to determine if it should trigger for those resources.</p>\n</blockquote>\n<p>Since <code>DeletionPolicy</code> is an &quot;attribute&quot; and not a &quot;property&quot; of the resource, and assuming that the above claim is true, then addition of <code>DeletionPolicy</code> alone <em>might</em> be a safe thing to do. That said, the claim is unattested by any reference to CF documentation, so I'm still a bit skeptical...</p>\n", "OwnerUserId": "1337498", "LastEditorUserId": "1337498", "LastEditDate": "2021-11-12T22:49:47.283", "LastActivityDate": "2021-11-12T22:49:47.283", "Title": "CloudFormation: Drift remediation for non-importable resources?", "Tags": "|elasticsearch|aws-cloudformation|", "AnswerCount": "0", "CommentCount": "11", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "123651641", "PostId": "69949453", "Score": "0", "Text": "As your link states \"The simplest option tends to be updating the template itself to match the current live state. \". Have you tried that? Also make sure to make backup of your ES before you try to modify it.", "CreationDate": "2021-11-12T23:58:46.333", "UserId": "248823", "filtered-sentences": []}, {"Id": "123653853", "PostId": "69949453", "Score": "1", "Text": "@Marcin And the very next sentence says: \"However, this may require potentially undesirable changes to your resource.\" So, no, I have not tried it: it sounds inherently risky. And it's precisely what I want to avoid.", "CreationDate": "2021-11-13T04:59:13.050", "UserId": "1337498", "filtered-sentences": [{"source": "Text", "text": "And the very next sentence says: \"However, this may require potentially undesirable changes to your resource.\" ", "keywords": ["change"]}]}, {"Id": "123656814", "PostId": "69949453", "Score": "0", "Text": "@Hephaestus Keep modifying the original template until the *changeset* shows no difference - that means your template now matches what is live *without you touching anything in live*. Why is that not a possibility? **As long as you don't execute the changeset, you are at 0% risk as AWS will not touch the resource.**", "CreationDate": "2021-11-13T10:16:22.187", "UserId": "4800344", "filtered-sentences": [{"source": "Text", "text": "@Hephaestus Keep modifying the original template until the *changeset* shows no difference - that means your template now matches what is live *without you touching anything in live*. ", "keywords": ["change"]}, {"source": "Text", "text": "**As long as you don't execute the changeset, you are at 0% risk as AWS will not touch the resource.**", "keywords": ["change"]}]}, {"Id": "123656846", "PostId": "69949453", "Score": "0", "Text": "Creating a changeset has the guarantee of not deploying anything - use the changeset output to then make the template match what is currently in live.", "CreationDate": "2021-11-13T10:19:18.223", "UserId": "4800344", "filtered-sentences": [{"source": "Text", "text": "Creating a changeset has the guarantee of not deploying anything - use the changeset output to then make the template match what is currently in live.", "keywords": ["change"]}]}, {"Id": "123664850", "PostId": "69949453", "Score": "0", "Text": "@ErmiyaEskandary I can try what you suggest, but how does it square with the claim (quoted in the update to my post) that Cloudformation \"does a diff of the template, not the actual resources to determine if it should trigger for those resources.\" It seems to me that the only way the change set could \"show no difference\" relative to the actual resources would be if it did a diff between the (changed) template and the actual resources. Does that mean that the quoted claim is false? Or is there some subtlety I'm overlooking?", "CreationDate": "2021-11-13T20:17:26.917", "UserId": "1337498", "filtered-sentences": [{"source": "Text", "text": "It seems to me that the only way the change set could \"show no difference\" relative to the actual resources would be if it did a diff between the (changed) template and the actual resources. ", "keywords": ["change"]}]}, {"Id": "123666055", "PostId": "69949453", "Score": "0", "Text": "@Hephaestus Where is that quote from? Can you please give a direct link? Regardless, you're worrying too much - how AWS does the changeset has nothing to do with you or me; just consume the output and rely on the guarantee that AWS provides.", "CreationDate": "2021-11-13T21:55:54.500", "UserId": "4800344", "filtered-sentences": [{"source": "Text", "text": "Regardless, you're worrying too much - how AWS does the changeset has nothing to do with you or me; just consume the output and rely on the guarantee that AWS provides.", "keywords": ["change"]}]}, {"Id": "123666569", "PostId": "69949453", "Score": "0", "Text": "@ErmiyaEskandary That quote is from one of the comments to this ServerFault answer: https://serverfault.com/a/699638 (also linked from my post). As I mentioned at the time: \"the claim is unattested by any reference to CF documentation\" -- and now I also see it's from a user with 101 rep. True, comments from random users are worth what I pay for them; but as I'm trying to build a decent mental model of how CF works, I'm finding (as usual) that the AWS high level docs tend to be a bit _too_ high-level, while the detailed docs focus exclusively on how to interact with the service step-by-step.", "CreationDate": "2021-11-13T22:42:32.553", "UserId": "1337498", "filtered-sentences": [{"source": "Text", "text": "True, comments from random users are worth what I pay for them; but as I'm trying to build a decent mental model of how CF works, I'm finding (as usual) that the AWS high level docs tend to be a bit _too_ high-level, while the detailed docs focus exclusively on how to interact with the service step-by-step.", "keywords": ["pay"]}]}, {"Id": "123666716", "PostId": "69949453", "Score": "0", "Text": "@Hephaestus I don't quite get how they've worded it but in the context of that comment, they are right - CF will just not execute anything outside of the execution of changesets. Try what I said without fear :)", "CreationDate": "2021-11-13T23:00:26.797", "UserId": "4800344", "filtered-sentences": [{"source": "Text", "text": "@Hephaestus I don't quite get how they've worded it but in the context of that comment, they are right - CF will just not execute anything outside of the execution of changesets. ", "keywords": ["change"]}]}, {"Id": "125068133", "PostId": "69949453", "Score": "0", "Text": "It supports the import, just the name of the service changed: AWS::OpenSearchService::Domain https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resource-import-supported-resources.html . Although I have not tried it myself.", "CreationDate": "2022-01-17T19:13:00.347", "UserId": "283676", "filtered-sentences": [{"source": "Text", "text": "It supports the import, just the name of the service changed: AWS::OpenSearchService::Domain https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resource-import-supported-resources.html . ", "keywords": ["domain", "change"]}]}, {"Id": "125398608", "PostId": "69949453", "Score": "0", "Text": "@Andrey Thanks, good to know! That seems to be a recent change, since that page (`/latest/`) is precisely the one that I linked to in my OP in November. (As recently as 10 Jan it didn't appear in the markdown source for that page: https://github.com/awsdocs/aws-cloudformation-user-guide/blob/f423b8c24b3b6165c3baabaee49ebed3ba80f32a/doc_source/resource-import-supported-resources.md )", "CreationDate": "2022-01-31T23:51:40.323", "UserId": "1337498", "filtered-sentences": [{"source": "Text", "text": "That seems to be a recent change, since that page (`/latest/`) is precisely the one that I linked to in my OP in November. ", "keywords": ["change"]}]}, {"Id": "125407418", "PostId": "69949453", "Score": "0", "Text": "@Hephaestus yes it is a very recent change. btw the markdown page you linked has much fewer resource types to begin with, so I am wondering what is this even.", "CreationDate": "2022-02-01T10:58:47.850", "UserId": "283676", "filtered-sentences": [{"source": "Text", "text": "@Hephaestus yes it is a very recent change. ", "keywords": ["change"]}]}], "history": [{"Id": "257872502", "PostHistoryTypeId": "5", "PostId": "69949453", "RevisionGUID": "2488ec01-3292-482e-bca5-415c91b62796", "CreationDate": "2021-11-12T22:49:47.283", "UserId": "1337498", "Comment": "Fix some typos; add further findings", "Text": "In our AWS environment, we have an Elasticsearch cluster that was initially created a couple of years ago, via a (rather simplistic) CloudFormation template.\r\n\r\nSince then, a number of changes have been made to that cluster, such as:\r\n- Changing the class of the dedicated master nodes\r\n- Increasing the number of data nodes\r\n- Increasing the EBS volume size for each data node\r\n- Updating the Elasticsearch version from 6.7 to 6.8\r\n- Attaching a couple of Ultrawarm nodes\r\n\r\nUnfortunately, _all_ of these changes were made directly via the AWS Elasticsearch console, and ignored the CF template and stack, which were left unchanged. I'd now like to get the CF template back in sync with the current state of the cluster, if possible. \r\n\r\nBy my reading of the CF documentation, and in particular the AWS Blog post [Remediate drift via resource import with AWS CloudFormation][1], the preferred way to do this in general would be to:\r\n\r\n 1. Update the CF template to give the resource a `DeletionPolicy` of `Retain`\r\n 2. Delete the CF stack (which should leave the resource in place, because of the `Retain` policy)\r\n 3. Create a new template, but now \"import\" the resource into the new stack.\r\n\r\nWhich sounds great, except for the fact that Elasticsearch/OpenSearch resources [don't support import][2].\r\n\r\nSo, what's my alternative? \r\n\r\nI do see [another recent question][3], self-answered by the OP, that suggests that the only other truly workable alternative is to delete and re-create the resource -- but that seems _awfully_ extreme when the resource is a live Elasticsearch cluster in production.\r\n\r\nBeing rather new to CloudFormation, I'll also remark that even updating the template & stack to _only_ add the new deletion policy looks pretty risky, since most everything about the current ES cluster is different from what the original template expresses. For example, the live cluster is running ES 6.8, whereas the original template says it should be running ES 6.7.\r\n\r\nWhat guarantees that re-running the updated stack (with the new deletion policy added) won't revert the cluster to running ES 6.7, or revert any of the other manually-applied changes listed above?\r\n\r\n(Some might argue that this last question should be a separate question, but I believe the context is important.)\r\n\r\n**Small Update**: After a bit more searching, I found a comment to a [SeverFault answer][4] about manual changes to CF stack resources, which says in part: \r\n\r\n> ... CloudFormation will not recreate a resource if there were no changes to the properties of that resource. It does a diff of the template, not the actual resources to determine if it should trigger for those resources.\r\n\r\nSince `DeletionPolicy` is an \"attribute\" and not a \"property\" of the resource, and assuming that the above claim is true, then addition of `DeletionPolicy` alone _might_ be a safe thing to do. That said, the claim is unattested by any reference to CF documentation, so I'm still a bit skeptical...\r\n\r\n\r\n  [1]: https://aws.amazon.com/blogs/mt/remediate-drift-via-resource-import-with-aws-cloudformation/\r\n  [2]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resource-import-supported-resources.html\r\n  [3]: https://stackoverflow.com/questions/69828574/importing-non-importable-resources-into-a-cloudformation-stack\r\n  [4]: https://serverfault.com/a/699638", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "In our AWS environment, we have an Elasticsearch cluster that was initially created a couple of years ago, via a (rather simplistic) CloudFormation template. ", "keywords": ["cluster"]}, {"source": "Text", "text": "Since then, a number of changes have been made to that cluster, such as: - Changing the class of the dedicated master nodes - Increasing the number of data nodes - Increasing the EBS volume size for each data node - Updating the Elasticsearch version from 6.7 to 6.8 - Attaching a couple of Ultrawarm nodes ", "keywords": ["cluster", "change"]}, {"source": "Text", "text": "Unfortunately, _all_ of these changes were made directly via the AWS Elasticsearch console, and ignored the CF template and stack, which were left unchanged. ", "keywords": ["change"]}, {"source": "Text", "text": "I'd now like to get the CF template back in sync with the current state of the cluster, if possible. ", "keywords": ["cluster"]}, {"source": "Text", "text": "Delete the CF stack (which should leave the resource in place, because of the `Retain` policy) 3. ", "keywords": ["policy"]}, {"source": "Text", "text": "I do see [another recent question][3], self-answered by the OP, that suggests that the only other truly workable alternative is to delete and re-create the resource -- but that seems _awfully_ extreme when the resource is a live Elasticsearch cluster in production. ", "keywords": ["cluster"]}, {"source": "Text", "text": "Being rather new to CloudFormation, I'll also remark that even updating the template & stack to _only_ add the new deletion policy looks pretty risky, since most everything about the current ES cluster is different from what the original template expresses. ", "keywords": ["policy", "cluster"]}, {"source": "Text", "text": "For example, the live cluster is running ES 6.8, whereas the original template says it should be running ES 6.7. ", "keywords": ["cluster"]}, {"source": "Text", "text": "What guarantees that re-running the updated stack (with the new deletion policy added) won't revert the cluster to running ES 6.7, or revert any of the other manually-applied changes listed above? ", "keywords": ["policy", "cluster", "change"]}, {"source": "Text", "text": "(Some might argue that this last question should be a separate question, but I believe the context is important.) **Small Update**: After a bit more searching, I found a comment to a [SeverFault answer][4] about manual changes to CF stack resources, which says in part: > ... ", "keywords": ["change"]}, {"source": "Text", "text": "CloudFormation will not recreate a resource if there were no changes to the properties of that resource. ", "keywords": ["change"]}]}, {"Id": "257870473", "PostHistoryTypeId": "2", "PostId": "69949453", "RevisionGUID": "e17679d1-a67d-4d0d-84d6-16b8149c88c5", "CreationDate": "2021-11-12T21:52:51.140", "UserId": "1337498", "Text": "In our AWS environment, we have an Elasticsearch cluster that was initially created a couple of years ago, via a (rather simplistic) CloudFormation template.\r\n\r\nSince then, a number of changes have been made to that clusters, such as:\r\n- Changing the class of the dedicated master nodes\r\n- Increasing the number of data nodes\r\n- Increasing the EBS volume size for each data node\r\n- Updating the Elasticsearch version from 6.7 to 6.8\r\n- Attaching a couple of Ultrawarm nodes\r\n\r\nUnfortunately, _all_ of these changes were made directly via the AWS Elasticsearch console, and ignored the CF template and stack, which were left unchanged. I'd now like to get the CF template back in sync with the current state of the cluster, if possible. \r\n\r\nBy my reading of the CF documentation, and in particular the AWS Blog post [Remediate drift via resource import with AWS CloudFormation][1], the preferred way to do this in general would be to:\r\n\r\n 1. Update the CF template to give the resource a `DeletionPolicy` of `Retain`\r\n 2. Delete the CF stack (which should leave the resource in place, because of the `Retain` policy)\r\n 3. Create a new template, but now \"import\" the resource into the new stack.\r\n\r\nWhich sounds great, except for the fact that Elasticsearch/OpenSearch resources [don't support import][2].\r\n\r\nSo, what's my alternative? \r\n\r\nI do see [another recent question][3], self-answered by the OP, that suggests that the only other truly workable alternative is to delete and re-create the resource -- but that seems _awfully_ extreme when the resource is a live Elasticsearch cluster in production.\r\n\r\nBeing rather new to CloudFormation, I'll also remark that even updating the template & stack to _only_ add the new deletion policy looks pretty risky, since the most everything about the current ES cluster is different from what the original template expresses. For example, the live cluster is running ES 6.8, whereas the original template says it should be running ES 6.7.\r\n\r\nWhat guarantees that re-running the updated stack (with the new deletion policy added) won't revert the cluster to running ES 6.7, or revert any of the other manually-applied changes listed above?\r\n\r\n(Some might argue that this last question should be a separate question, but I believe the context is important.)\r\n\r\n\r\n  [1]: https://aws.amazon.com/blogs/mt/remediate-drift-via-resource-import-with-aws-cloudformation/\r\n  [2]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resource-import-supported-resources.html\r\n  [3]: https://stackoverflow.com/questions/69828574/importing-non-importable-resources-into-a-cloudformation-stack", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "In our AWS environment, we have an Elasticsearch cluster that was initially created a couple of years ago, via a (rather simplistic) CloudFormation template. ", "keywords": ["cluster"]}, {"source": "Text", "text": "Since then, a number of changes have been made to that clusters, such as: - Changing the class of the dedicated master nodes - Increasing the number of data nodes - Increasing the EBS volume size for each data node - Updating the Elasticsearch version from 6.7 to 6.8 - Attaching a couple of Ultrawarm nodes ", "keywords": ["change"]}, {"source": "Text", "text": "Unfortunately, _all_ of these changes were made directly via the AWS Elasticsearch console, and ignored the CF template and stack, which were left unchanged. ", "keywords": ["change"]}, {"source": "Text", "text": "I'd now like to get the CF template back in sync with the current state of the cluster, if possible. ", "keywords": ["cluster"]}, {"source": "Text", "text": "Delete the CF stack (which should leave the resource in place, because of the `Retain` policy) 3. ", "keywords": ["policy"]}, {"source": "Text", "text": "I do see [another recent question][3], self-answered by the OP, that suggests that the only other truly workable alternative is to delete and re-create the resource -- but that seems _awfully_ extreme when the resource is a live Elasticsearch cluster in production. ", "keywords": ["cluster"]}, {"source": "Text", "text": "Being rather new to CloudFormation, I'll also remark that even updating the template & stack to _only_ add the new deletion policy looks pretty risky, since the most everything about the current ES cluster is different from what the original template expresses. ", "keywords": ["policy", "cluster"]}, {"source": "Text", "text": "For example, the live cluster is running ES 6.8, whereas the original template says it should be running ES 6.7. ", "keywords": ["cluster"]}, {"source": "Text", "text": "What guarantees that re-running the updated stack (with the new deletion policy added) won't revert the cluster to running ES 6.7, or revert any of the other manually-applied changes listed above? ", "keywords": ["policy", "cluster", "change"]}]}, {"Id": "257870475", "PostHistoryTypeId": "1", "PostId": "69949453", "RevisionGUID": "e17679d1-a67d-4d0d-84d6-16b8149c88c5", "CreationDate": "2021-11-12T21:52:51.140", "UserId": "1337498", "Text": "CloudFormation: Drift remediation for non-importable resources?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "257870476", "PostHistoryTypeId": "3", "PostId": "69949453", "RevisionGUID": "e17679d1-a67d-4d0d-84d6-16b8149c88c5", "CreationDate": "2021-11-12T21:52:51.140", "UserId": "1337498", "Text": "|elasticsearch|aws-cloudformation|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "In our AWS environment, we have an Elasticsearch cluster that was initially created a couple of years ago, via a (rather simplistic) CloudFormation template. ", "keywords": ["cluster"]}, {"source": "Body", "text": "Since then, a number of changes have been made to that cluster, such as: Changing the class of the dedicated master nodes ", "keywords": ["cluster", "change"]}, {"source": "Body", "text": "Unfortunately, all of these changes were made directly via the AWS Elasticsearch console, and ignored the CF template and stack, which were left unchanged. ", "keywords": ["change"]}, {"source": "Body", "text": "I'd now like to get the CF template back in sync with the current state of the cluster, if possible. ", "keywords": ["cluster"]}, {"source": "Body", "text": "By my reading of the CF documentation, and in particular the AWS Blog post Remediate drift via resource import with AWS CloudFormation, the preferred way to do this in general would be to: Update the CF template to give the resource a DeletionPolicy of Retain Delete the CF stack (which should leave the resource in place, because of the Retain policy) Create a new template, but now \"import\" the resource into the new stack. ", "keywords": ["policy"]}, {"source": "Body", "text": "I do see another recent question, self-answered by the OP, that suggests that the only other truly workable alternative is to delete and re-create the resource -- but that seems awfully extreme when the resource is a live Elasticsearch cluster in production. ", "keywords": ["cluster"]}, {"source": "Body", "text": "Being rather new to CloudFormation, I'll also remark that even updating the template & stack to only add the new deletion policy looks pretty risky, since most everything about the current ES cluster is different from what the original template expresses. ", "keywords": ["policy", "cluster"]}, {"source": "Body", "text": "For example, the live cluster is running ES 6.8, whereas the original template says it should be running ES 6.7. ", "keywords": ["cluster"]}, {"source": "Body", "text": "What guarantees that re-running the updated stack (with the new deletion policy added) won't revert the cluster to running ES 6.7, or revert any of the other manually-applied changes listed above? ", "keywords": ["policy", "cluster", "change"]}, {"source": "Body", "text": "Small Update: After a bit more searching, I found a comment to a SeverFault answer about manual changes to CF stack resources, which says in part: ... ", "keywords": ["change"]}, {"source": "Body", "text": "CloudFormation will not recreate a resource if there were no changes to the properties of that resource. ", "keywords": ["change"]}]}