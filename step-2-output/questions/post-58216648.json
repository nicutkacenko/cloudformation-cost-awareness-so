{"Id": "58216648", "PostTypeId": "1", "CreationDate": "2019-10-03T09:56:01.660", "Score": "-2", "ViewCount": "1507", "Body": "<p>I am looking to setup some CloudFormation stuff that is able to find any email addresses in CloudWatch logs and let us know that one slipped through the cracks. I thought this would be a simple process of using a RegEx pattern that catches all the possible variations and email address can have, and using that as a filter. Having discovered that CloudWatch filtering does not support RegEx I've become a bit stumped as to how to write a filter that can be relied upon to catch any email address. </p>\n\n<p>Has anyone done something similar to this, or know where a good place to start would be?</p>\n", "OwnerUserId": "2005530", "LastActivityDate": "2019-12-02T11:14:06.437", "Title": "Filtering for email addresses in AWS Cloudwatch Logs?", "Tags": "|regex|filtering|aws-cloudformation|amazon-cloudwatchlogs|data-protection|", "AnswerCount": "3", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "126343225", "PostId": "58216648", "Score": "0", "Text": "If you have un-redacted logs that you want to send to a third party, you can use Sublime Text to retrospectively redact them - see  https://codingrob.medium.com/how-to-redact-text-from-hundreds-of-text-files-in-less-than-60-seconds-511b4b91c2d8", "CreationDate": "2022-03-15T12:13:46.003", "UserId": "583616", "filtered-sentences": []}], "history": [{"Id": "206519397", "PostHistoryTypeId": "2", "PostId": "58216648", "RevisionGUID": "f320ad55-3f5b-4d2f-978e-47c7242ec4b0", "CreationDate": "2019-10-03T09:56:01.660", "UserId": "2005530", "Text": "I am looking to setup some CloudFormation stuff that is able to find any email addresses in CloudWatch logs and let us know that one slipped through the cracks. I thought this would be a simple process of using a RegEx pattern that catches all the possible variations and email address can have, and using that as a filter. Having discovered that CloudWatch filtering does not support RegEx I've become a bit stumped as to how to write a filter that can be relied upon to catch any email address. \r\n\r\nHas anyone done something similar to this, or know where a good place to start would be?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "206519398", "PostHistoryTypeId": "1", "PostId": "58216648", "RevisionGUID": "f320ad55-3f5b-4d2f-978e-47c7242ec4b0", "CreationDate": "2019-10-03T09:56:01.660", "UserId": "2005530", "Text": "Filtering for email addresses in AWS Cloudwatch Logs?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "206519399", "PostHistoryTypeId": "3", "PostId": "58216648", "RevisionGUID": "f320ad55-3f5b-4d2f-978e-47c7242ec4b0", "CreationDate": "2019-10-03T09:56:01.660", "UserId": "2005530", "Text": "|regex|filtering|aws-cloudformation|amazon-cloudwatchlogs|data-protection|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "58217483", "PostTypeId": "2", "ParentId": "58216648", "CreationDate": "2019-10-03T10:45:11.097", "Score": "0", "Body": "<p>If you're exporting the logs somewhere (Like Sumologic, Datadog etc) thats a better place to do that alerting. </p>\n\n<p>If not and you're exporting them into S3 then a triggered lambda function that runs the check might do the trick. Could be expensive long term though.</p>\n", "OwnerUserId": "11585840", "LastActivityDate": "2019-10-03T10:45:11.097", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "206522695", "PostHistoryTypeId": "2", "PostId": "58217483", "RevisionGUID": "fedb7e35-7d5c-4e22-a20b-79bb9214f758", "CreationDate": "2019-10-03T10:45:11.097", "UserId": "11585840", "Text": "If you're exporting the logs somewhere (Like Sumologic, Datadog etc) thats a better place to do that alerting. \r\n\r\nIf not and you're exporting them into S3 then a triggered lambda function that runs the check might do the trick. Could be expensive long term though.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Could be expensive long term though.", "keywords": ["expense"]}]}], "filtered-sentences": [{"source": "Body", "text": "Could be expensive long term though.", "keywords": ["expense"]}]}, {"Id": "59137764", "PostTypeId": "2", "ParentId": "58216648", "CreationDate": "2019-12-02T11:14:06.437", "Score": "1", "Body": "<p>Amazon has launched a service called <a href=\"https://docs.aws.amazon.com/en_uk/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html\" rel=\"nofollow noreferrer\">CloudWatch insights</a> and it allows to filter messages logs. In the previous link you have examples of queries.</p>\n\n<p>You need to select the CloudWatch Log Group and the period of time in which search.</p>\n\n<p>Example:</p>\n\n<pre><code>fields @message\n| sort @timestamp desc\n| filter @message like /.*47768.*/\n</code></pre>\n", "OwnerUserId": "9593712", "LastActivityDate": "2019-12-02T11:14:06.437", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "210375492", "PostHistoryTypeId": "2", "PostId": "59137764", "RevisionGUID": "4e37f5cd-54e9-44f3-97e1-ef8b793a74b4", "CreationDate": "2019-12-02T11:14:06.437", "UserId": "9593712", "Text": "Amazon has launched a service called [CloudWatch insights][1] and it allows to filter messages logs. In the previous link you have examples of queries.\r\n\r\nYou need to select the CloudWatch Log Group and the period of time in which search.\r\n\r\nExample:\r\n\r\n    fields @message\r\n    | sort @timestamp desc\r\n    | filter @message like /.*47768.*/\r\n\r\n\r\n  [1]: https://docs.aws.amazon.com/en_uk/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "59095305", "PostTypeId": "2", "ParentId": "58216648", "CreationDate": "2019-11-28T19:38:41.020", "Score": "0", "Body": "<p>The solution that we landed upon was to pass stings through a RegEx pattern that recognises email addresses before they logged into AWS. Replacing any matches with [REDACTED]. Which is simple enough to do in a lambda.</p>\n", "OwnerUserId": "2005530", "LastActivityDate": "2019-11-28T19:38:41.020", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "210188372", "PostHistoryTypeId": "2", "PostId": "59095305", "RevisionGUID": "a535c8ee-4a90-41b8-a953-ee589dc2482c", "CreationDate": "2019-11-28T19:38:41.020", "UserId": "2005530", "Text": "The solution that we landed upon was to pass stings through a RegEx pattern that recognises email addresses before they logged into AWS. Replacing any matches with [REDACTED]. Which is simple enough to do in a lambda.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": false, "filtered-sentences": []}