{"Id": "54639520", "PostTypeId": "1", "AcceptedAnswerId": "55323782", "CreationDate": "2019-02-11T21:36:17.170", "Score": "8", "ViewCount": "12415", "Body": "<p>I created a new AWS Serverless Application (.NET Core) and set up a Lambda function, but I want to read some information from an appsettings.json file like I would do with a normal ASP.NET Core 2 web app.  How can I include an appsettings.json file and read a setting?   I have some endpoints that I'd like to store and don't want to hard code those into my app.</p>\n\n<p><a href=\"https://i.stack.imgur.com/p5Ykd.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/p5Ykd.png\" alt=\"d\"></a></p>\n", "OwnerUserId": "3047", "LastEditorUserId": "3047", "LastEditDate": "2020-02-04T20:25:04.353", "LastActivityDate": "2023-01-11T22:07:25.187", "Title": "Read an appsettings.json file using the AWS Serverless Application in VS2017", "Tags": "|c#|aws-lambda|visual-studio-2017|aws-cloudformation|asp.net-core-2.0|", "AnswerCount": "1", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "120947099", "PostId": "54639520", "Score": "2", "Text": "I would also suggest that - if you'd like to make your environment variables easier to store and edit outside of the application code - you can use AWS Lambda environment variables. These will be accessible to Environment.GetEnvironmentVariable() during execution.", "CreationDate": "2021-07-19T06:39:34.033", "UserId": "8390889", "filtered-sentences": []}], "history": [{"Id": "191428746", "PostHistoryTypeId": "2", "PostId": "54639520", "RevisionGUID": "7316af5a-f359-4e9f-bda4-b01569fcb6c5", "CreationDate": "2019-02-11T21:36:17.170", "UserId": "3047", "Text": "I created a new AWS Serverless Application (.NET Core) and set up a Lambda function, but I want to read some information from an appsettings.json file like I would do with a normal ASP.NET Core 2 web app.  How can I include an appsettings.json file and read a setting?   I have some endpoints that I'd like to store and don't want to hard code those into my app.\r\n\r\n[![d][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/p5Ykd.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "191428747", "PostHistoryTypeId": "1", "PostId": "54639520", "RevisionGUID": "7316af5a-f359-4e9f-bda4-b01569fcb6c5", "CreationDate": "2019-02-11T21:36:17.170", "UserId": "3047", "Text": "Read an appsettings.json file using the AWS Serverless Application in VS2017", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "191428748", "PostHistoryTypeId": "3", "PostId": "54639520", "RevisionGUID": "7316af5a-f359-4e9f-bda4-b01569fcb6c5", "CreationDate": "2019-02-11T21:36:17.170", "UserId": "3047", "Text": "|c#|visual-studio-2017|aws-lambda|aws-cloudformation|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "191477916", "PostHistoryTypeId": "6", "PostId": "54639520", "RevisionGUID": "0cf00e38-52b3-445b-b79e-659b316e8dd8", "CreationDate": "2019-02-12T13:51:27.793", "UserId": "3047", "Comment": "added tags", "Text": "|c#|amazon-web-services|visual-studio-2017|aws-lambda|aws-cloudformation|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "214308138", "PostHistoryTypeId": "6", "PostId": "54639520", "RevisionGUID": "dc4e778b-4419-4fb5-a405-386ec9cd5687", "CreationDate": "2020-02-04T20:25:04.353", "UserId": "3047", "Comment": "edited tags", "Text": "|c#|aws-lambda|visual-studio-2017|aws-cloudformation|asp.net-core-2.0|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "55323782", "PostTypeId": "2", "ParentId": "54639520", "CreationDate": "2019-03-24T12:25:48.633", "Score": "16", "Body": "<p>You would do this the same way that you would add the configuration system to any non asp core project.</p>\n<p>Add the following nuget packages to your serverless application:</p>\n<blockquote>\n<p>Microsoft.Extensions.Configuration</p>\n<p>Microsoft.Extensions.Configuration.Binder</p>\n<p>Microsoft.Extensions.Configuration.Json</p>\n</blockquote>\n<p>Then add your <code>appSettings.json</code> configuration file. Since you want the settings to be included in the published zip make sure to set <code>Copy to Output Directory</code> to <code>true</code>.</p>\n<p>After this you can write some initialization code:</p>\n<pre><code>     public IConfiguration Configuration { get; private set; }\n\n     private void ConfigureSettings()\n        {\n            Configuration = new ConfigurationBuilder()\n                .AddJsonFile(&quot;appSettings.json&quot;, optional: true)\n                .Build();\n        }\n</code></pre>\n<p>I am blind typing above so hopefully it works. If you wanted to use a strongly typed POCO instead of the Configuration you could use the <code>Microsoft.Extensions.Configuration.Json</code> capability by doing something like this:</p>\n<pre><code>        public ApplicationConfigPoco Configuration\n        {\n            get\n            {\n                return Configuration.Get&lt;ApplicationConfigPoco&gt;();\n            }\n        }\n</code></pre>\n<p>Lastly, since your Lambda runs on linux, be mindful of the case sensitivity that would not be present on a Windows system. For example <code>appsettings.json</code> will not load if your file is <code>appSettings.json</code>.</p>\n", "OwnerUserId": "4513978", "LastEditorUserId": "-1", "LastEditDate": "2020-06-20T09:12:55.060", "LastActivityDate": "2020-05-15T17:22:47.653", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "115278412", "PostId": "55323782", "Score": "1", "Text": "your last comment about  case sensitivity in linux was very useful. and I can confirm it's working.", "CreationDate": "2020-12-08T20:34:06.963", "UserId": "471499", "filtered-sentences": []}, {"Id": "121523282", "PostId": "55323782", "Score": "0", "Text": "This worked very well. I added it in the lambda function implementation class constructor. That was the nearest thing I could find to an entry point for this type of app.", "CreationDate": "2021-08-12T18:47:10.243", "UserId": "680773", "filtered-sentences": []}, {"Id": "133234851", "PostId": "55323782", "Score": "0", "Text": "Is there any specific advantage to doing it this way rather than setting and using environment variables in the Lambda console and read it from the Lambda function to handle different logics as below\n`environment.GetEnvironmentVariable(\"env\")`", "CreationDate": "2023-02-21T01:51:48.090", "UserId": "1954783", "filtered-sentences": []}, {"Id": "134720227", "PostId": "55323782", "Score": "1", "Text": "Yes there is @oshan2csd - the `appsettings.development.json` / `appsettings.production.json` file would have NOT-SENSITIVE information in there. Like maybe some logging stuff (min logging level, logging sink, etc). While the env vars _could_ be used to put sensitive stuff in there. Lastly, consider a secrets manager for sensitive values, like DB connection strings or api keys and some auth key to a 3rd party, etc. Especially when it cost  to store (and retrieve) sensitive key/values versus not paying anything for having the not-sensitive values in the `.json` file.", "CreationDate": "2023-06-04T12:58:19.823", "UserId": "18666425", "filtered-sentences": [{"source": "Text", "text": "Especially when it cost to store (and retrieve) sensitive key/values versus not paying anything for having the not-sensitive values in the `.json` file.", "keywords": ["cost"]}]}], "history": [{"Id": "194301066", "PostHistoryTypeId": "2", "PostId": "55323782", "RevisionGUID": "ce8b6b6a-bb4d-4e8b-8ed7-c8071f1aeb40", "CreationDate": "2019-03-24T12:25:48.633", "UserId": "4513978", "Text": "You would do this the same way that you would add the configuration system to any non asp core project.\r\n\r\nAdd the following nuget packages to your serverless application:\r\n\r\n> Microsoft.Extensions.Configuration\r\n\r\n> Microsoft.Extensions.Configuration.Binder\r\n\r\n> Microsoft.Extensions.Configuration.Json\r\n\r\nThen add your `appSettings.json` configuration file. Since you want the settings to be included in the published zip make sure to set `Copy to Output Directory` to `true`.\r\n\r\nAfter this you can write some initialization code:\r\n\r\n         public IConfiguration Configuration { get; private set; }\r\n    \r\n         private void ConfigureSettings()\r\n            {\r\n                Configuration = new ConfigurationBuilder()\r\n                    .AddJsonFile(\"appSettings.json\", optional: true)\r\n                    .Build();\r\n            }\r\n\r\nI am blind typing above so hopefully it works. If you wanted to use a strongly typed POCO instead of the Configuration you could use the `Microsoft.Extensions.Configuration.Json` capability by doing something like this:\r\n\r\n            public ApplicationConfigPoco Configuration\r\n            {\r\n                get\r\n                {\r\n                    return Configuration.Get<ApplicationConfigPoco>();\r\n                }\r\n            }\r\n\r\nLastly, since your Lambda runs on linux, be mindful of the case sensitivity that would not be present on a Windows system. For example `appsettings.json` will not load if your file is `appSetting.json`.\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "221744443", "PostHistoryTypeId": "5", "PostId": "55323782", "RevisionGUID": "098ac5a3-c437-4eaf-a90e-c8bdcf3de985", "CreationDate": "2020-05-15T17:22:47.653", "UserId": "112139", "Comment": "Adjusted appsettings at the end. Was missing an s which defeated the point of talking about case sensitivity.", "Text": "You would do this the same way that you would add the configuration system to any non asp core project.\r\n\r\nAdd the following nuget packages to your serverless application:\r\n\r\n> Microsoft.Extensions.Configuration\r\n\r\n> Microsoft.Extensions.Configuration.Binder\r\n\r\n> Microsoft.Extensions.Configuration.Json\r\n\r\nThen add your `appSettings.json` configuration file. Since you want the settings to be included in the published zip make sure to set `Copy to Output Directory` to `true`.\r\n\r\nAfter this you can write some initialization code:\r\n\r\n         public IConfiguration Configuration { get; private set; }\r\n    \r\n         private void ConfigureSettings()\r\n            {\r\n                Configuration = new ConfigurationBuilder()\r\n                    .AddJsonFile(\"appSettings.json\", optional: true)\r\n                    .Build();\r\n            }\r\n\r\nI am blind typing above so hopefully it works. If you wanted to use a strongly typed POCO instead of the Configuration you could use the `Microsoft.Extensions.Configuration.Json` capability by doing something like this:\r\n\r\n            public ApplicationConfigPoco Configuration\r\n            {\r\n                get\r\n                {\r\n                    return Configuration.Get<ApplicationConfigPoco>();\r\n                }\r\n            }\r\n\r\nLastly, since your Lambda runs on linux, be mindful of the case sensitivity that would not be present on a Windows system. For example `appsettings.json` will not load if your file is `appSettings.json`.\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "224837670", "PostHistoryTypeId": "5", "PostId": "55323782", "RevisionGUID": "55a25e1e-8aea-4d23-a0f2-184664f83458", "CreationDate": "2020-06-20T09:12:55.060", "UserId": "-1", "Comment": "Commonmark migration", "Text": "You would do this the same way that you would add the configuration system to any non asp core project.\n\nAdd the following nuget packages to your serverless application:\n\n> Microsoft.Extensions.Configuration\n>\n> Microsoft.Extensions.Configuration.Binder\n>\n> Microsoft.Extensions.Configuration.Json\n\nThen add your `appSettings.json` configuration file. Since you want the settings to be included in the published zip make sure to set `Copy to Output Directory` to `true`.\n\nAfter this you can write some initialization code:\n\n         public IConfiguration Configuration { get; private set; }\n    \n         private void ConfigureSettings()\n            {\n                Configuration = new ConfigurationBuilder()\n                    .AddJsonFile(\"appSettings.json\", optional: true)\n                    .Build();\n            }\n\nI am blind typing above so hopefully it works. If you wanted to use a strongly typed POCO instead of the Configuration you could use the `Microsoft.Extensions.Configuration.Json` capability by doing something like this:\n\n            public ApplicationConfigPoco Configuration\n            {\n                get\n                {\n                    return Configuration.Get<ApplicationConfigPoco>();\n                }\n            }\n\nLastly, since your Lambda runs on linux, be mindful of the case sensitivity that would not be present on a Windows system. For example `appsettings.json` will not load if your file is `appSettings.json`.\n\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": false, "filtered-sentences": []}