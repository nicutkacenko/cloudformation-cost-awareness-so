{"Id": "27648474", "PostTypeId": "1", "AcceptedAnswerId": "27685385", "CreationDate": "2014-12-25T15:21:07.503", "Score": "0", "ViewCount": "1052", "Body": "<p>I wish to create the following using <code>Cloudformation</code>:</p>\n\n<p>An autoscale group with a single spot instance, with an assigned route53 record which will always be directed to the instance, even if the instance is replaced.</p>\n\n<p>I know how to do this with the Ruby API (not cloudformation).</p>\n\n<p>How can I define this using Cloudformation ?</p>\n", "OwnerUserId": "1889311", "LastEditorUserId": "498256", "LastEditDate": "2014-12-25T22:30:47.840", "LastActivityDate": "2014-12-29T08:01:52.103", "Title": "Cloudformation stack where a route53 record is assigned to a a single instance in an autoscale group", "Tags": "|amazon-ec2|aws-cloudformation|", "AnswerCount": "1", "CommentCount": "1", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "43715027", "PostId": "27648474", "Score": "0", "Text": "A 'persistent spot instance' is an oxymoron, what do you mean by that?", "CreationDate": "2014-12-25T16:17:34.360", "UserId": "53686", "filtered-sentences": [{"source": "Text", "text": "A 'persistent spot instance' is an oxymoron, what do you mean by that?", "keywords": ["instance"]}]}], "history": [{"Id": "80435495", "PostHistoryTypeId": "5", "PostId": "27648474", "RevisionGUID": "66c5e8e3-2af7-442b-bc6d-685e05918fe5", "CreationDate": "2014-12-25T17:15:16.117", "UserId": "1889311", "Comment": "added 31 characters in body", "Text": "I wish to create the following using Cloudformation:\r\nAn autoscale group with a single spot instance, with an assigned route53 record which will always be directed to the instance, even if the instance is replaced.\r\nI know how to do this with the Ruby API (not cloudformation).\r\nHow can I define this using Cloudformation ?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "I wish to create the following using Cloudformation: An autoscale group with a single spot instance, with an assigned route53 record which will always be directed to the instance, even if the instance is replaced. ", "keywords": ["instance"]}]}, {"Id": "80432462", "PostHistoryTypeId": "2", "PostId": "27648474", "RevisionGUID": "84d864fe-a007-41c0-ad2b-612dc4ea46cf", "CreationDate": "2014-12-25T15:21:07.503", "UserId": "1889311", "Text": "I wish to create the following using Cloudformation:\r\nA persistent spot instance, with an assigned route53 record which will always be directed to the instance, even if it is replace.\r\nI know how to do this with the Ruby API (not cloudformation).\r\nHow can I define this using Cloudformation ?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "I wish to create the following using Cloudformation: A persistent spot instance, with an assigned route53 record which will always be directed to the instance, even if it is replace. ", "keywords": ["instance"]}]}, {"Id": "80432463", "PostHistoryTypeId": "1", "PostId": "27648474", "RevisionGUID": "84d864fe-a007-41c0-ad2b-612dc4ea46cf", "CreationDate": "2014-12-25T15:21:07.503", "UserId": "1889311", "Text": "Cloudformation stack where a route53 record is assigned to a a single instance in an autoscale group", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Cloudformation stack where a route53 record is assigned to a a single instance in an autoscale group", "keywords": ["instance"]}]}, {"Id": "80432464", "PostHistoryTypeId": "3", "PostId": "27648474", "RevisionGUID": "84d864fe-a007-41c0-ad2b-612dc4ea46cf", "CreationDate": "2014-12-25T15:21:07.503", "UserId": "1889311", "Text": "|amazon-ec2|aws-cloudformation|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "80442781", "PostHistoryTypeId": "5", "PostId": "27648474", "RevisionGUID": "8d73210f-0fd4-49c6-ab5f-41ac0236447f", "CreationDate": "2014-12-25T22:30:47.840", "UserId": "498256", "Comment": "added 8 characters in body", "Text": "I wish to create the following using `Cloudformation`:\r\n\r\nAn autoscale group with a single spot instance, with an assigned route53 record which will always be directed to the instance, even if the instance is replaced.\r\n\r\nI know how to do this with the Ruby API (not cloudformation).\r\n\r\nHow can I define this using Cloudformation ?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "An autoscale group with a single spot instance, with an assigned route53 record which will always be directed to the instance, even if the instance is replaced. ", "keywords": ["instance"]}]}], "answers": [{"Id": "27685385", "PostTypeId": "2", "ParentId": "27648474", "CreationDate": "2014-12-29T08:01:52.103", "Score": "2", "Body": "<p>You have two options:</p>\n\n<p>Option #1: Update R53 in your spot instance, after it boots: </p>\n\n<ol>\n<li>In your Cloudformation template create an IAM role with permissions to update the appropriate R53 record</li>\n<li>Assign that role to your spot instance</li>\n<li>When your spot instance initializes have it update R53 directly via the REST APIs. I usually do this by setting a shell script in the <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-launchconfig.html#cfn-as-launchconfig-userdata\" rel=\"nofollow\">UserData</a> and have cloudinit run it on boot. </li>\n</ol>\n\n<p>To update via Ruby you'll need the access id, access key and security token. Since you assigned an IAM role to the instance these are available via the <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\" rel=\"nofollow\">Metadata API</a>. Most libraries automatically pull out these values so you might not even need to do it manually. Boto and the nodejs SDK does it automatically.</p>\n\n<p>Option #2: Use an ELB</p>\n\n<ol>\n<li>In your CloudFormation create an ELB </li>\n<li>In your CloudFormation create an R53 alias record that points at the ELB's DNS name</li>\n</ol>\n\n<p>If cost is a factor, an ELB may be a little expensive to just add an extra layer of indirection. </p>\n", "OwnerUserId": "445792", "LastActivityDate": "2014-12-29T08:01:52.103", "CommentCount": "1", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "43792460", "PostId": "27685385", "Score": "0", "Text": "doing this in the userdata is actually something I haven't thought of. thanks!", "CreationDate": "2014-12-29T13:16:39.563", "UserId": "1889311", "filtered-sentences": []}], "history": [{"Id": "80583097", "PostHistoryTypeId": "2", "PostId": "27685385", "RevisionGUID": "2f615179-cd3f-481c-b46b-9ec3f9d435e2", "CreationDate": "2014-12-29T08:01:52.103", "UserId": "445792", "Text": "You have two options:\r\n\r\nOption #1: Update R53 in your spot instance, after it boots: \r\n\r\n1. In your Cloudformation template create an IAM role with permissions to update the appropriate R53 record\r\n1. Assign that role to your spot instance\r\n1. When your spot instance initializes have it update R53 directly via the REST APIs. I usually do this by setting a shell script in the [UserData][1] and have cloudinit run it on boot. \r\n\r\nTo update via Ruby you'll need the access id, access key and security token. Since you assigned an IAM role to the instance these are available via the [Metadata API][2]. Most libraries automatically pull out these values so you might not even need to do it manually. Boto and the nodejs SDK does it automatically.\r\n\r\nOption #2: Use an ELB\r\n\r\n1. In your CloudFormation create an ELB \r\n1. In your CloudFormation create an R53 alias record that points at the ELB's DNS name\r\n\r\nIf cost is a factor, an ELB may be a little expensive to just add an extra layer of indirection. \r\n\r\n\r\n  [1]: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-launchconfig.html#cfn-as-launchconfig-userdata\r\n  [2]: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You have two options: Option #1: Update R53 in your spot instance, after it boots: 1. ", "keywords": ["instance"]}, {"source": "Text", "text": "In your Cloudformation template create an IAM role with permissions to update the appropriate R53 record 1. ", "keywords": ["permissions"]}, {"source": "Text", "text": "Assign that role to your spot instance 1. ", "keywords": ["instance"]}, {"source": "Text", "text": "When your spot instance initializes have it update R53 directly via the REST APIs. ", "keywords": ["instance"]}, {"source": "Text", "text": "Since you assigned an IAM role to the instance these are available via the [Metadata API][2]. ", "keywords": ["instance"]}, {"source": "Text", "text": "If cost is a factor, an ELB may be a little expensive to just add an extra layer of indirection. [1]: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-launchconfig.html#cfn-as-launchconfig-userdata [2]: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html", "keywords": ["cost", "expense", "instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "You have two options: Option #1: Update R53 in your spot instance, after it boots: ", "keywords": ["instance"]}, {"source": "Body", "text": "In your Cloudformation template create an IAM role with permissions to update the appropriate R53 record Assign that role to your spot instance When your spot instance initializes have it update R53 directly via the REST APIs. ", "keywords": ["instance", "permissions"]}, {"source": "Body", "text": "Since you assigned an IAM role to the instance these are available via the Metadata API. ", "keywords": ["instance"]}, {"source": "Body", "text": "If cost is a factor, an ELB may be a little expensive to just add an extra layer of indirection.", "keywords": ["cost", "expense"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "Cloudformation stack where a route53 record is assigned to a a single instance in an autoscale group", "keywords": ["instance"]}, {"source": "Body", "text": "I wish to create the following using Cloudformation: An autoscale group with a single spot instance, with an assigned route53 record which will always be directed to the instance, even if the instance is replaced. ", "keywords": ["instance"]}]}