{"Id": "48895651", "PostTypeId": "1", "CreationDate": "2018-02-20T23:05:23.673", "Score": "2", "ViewCount": "440", "Body": "<p>I'm a noobie to CloudFormation.  But reading the documentation for CloudFormation, Amazon seems to think it is <em>the</em> method we should use to consistently, repeatedly deploy a given topology of AWS service instances.  However AWS has been around for over a decade, and the AWS push for CF seems to be only within the last 5 years.</p>\n\n<p>I stumbled across a great post, <a href=\"https://stackoverflow.com/questions/21310125/aws-opsworks-vs-aws-beanstalk-vs-aws-cloudformation\">AWS OpsWorks vs AWS Beanstalk vs AWS CloudFormation?</a>, which explores the strengths of different AWS deployment offerings.  And given the needs of my organization for flexible and repeatable IaaS/PaaS deployments, CF seems to fit the bill.</p>\n\n<p>What I want to know is: How prevalent is the use of CF, vs other \"template\" deployment technologies?  What is YOUR team using for deploying repeated configurations of AWS services?</p>\n\n<p>How usable/learnable is it?  If I adopt CF, how likely is it that existing developers on AWS will already be familiar with it, and be able to use it straight off the bat?  CF seems to support <em>many</em> or <em>most</em> AWS services already, but are people actually using it to repeatedly stamp out identically-configured topologies of services?</p>\n\n<p>Or do most teams favor a simpler, less endlessly-configurable option?  And if so, why?</p>\n\n<p>What pitfalls do I need to watch out for when using CloudFormation Templates?  What <em>doesn't</em> CF handle, which it really should?</p>\n", "OwnerUserId": "9387806", "LastActivityDate": "2018-02-21T00:21:25.763", "Title": "How common is it to use AWS Cloud Formation for repeated provisioning of AWS environments?", "Tags": "|amazon-web-services|amazon-elastic-beanstalk|aws-cloudformation|aws-opsworks|", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "167329365", "PostHistoryTypeId": "2", "PostId": "48895651", "RevisionGUID": "83017911-05f5-4819-beae-502585bf5753", "CreationDate": "2018-02-20T23:05:23.673", "UserId": "9387806", "Text": "I'm a noobie to CloudFormation.  But reading the documentation for CloudFormation, Amazon seems to think it is *the* method we should use to consistently, repeatedly deploy a given topology of AWS service instances.  However AWS has been around for over a decade, and the AWS push for CF seems to be only within the last 5 years.\r\n\r\nI stumbled across a great post, https://stackoverflow.com/questions/21310125/aws-opsworks-vs-aws-beanstalk-vs-aws-cloudformation, which explores the strengths of different AWS deployment offerings.  And given the needs of my organization for flexible and repeatable IaaS/PaaS deployments, CF seems to fit the bill.\r\n\r\nWhat I want to know is: How prevalent is the use of CF, vs other \"template\" deployment technologies?  What is YOUR team using for deploying repeated configurations of AWS services?\r\n\r\nHow usable/learnable is it?  If I adopt CF, how likely is it that existing developers on AWS will already be familiar with it, and be able to use it straight off the bat?  CF seems to support *many* or *most* AWS services already, but are people actually using it to repeatedly stamp out identically-configured topologies of services?\r\n\r\nOr do most teams favor a simpler, less endlessly-configurable option?  And if so, why?\r\n\r\nWhat pitfalls do I need to watch out for when using CloudFormation Templates?  What *doesn't* CF handle, which it really should?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "And given the needs of my organization for flexible and repeatable IaaS/PaaS deployments, CF seems to fit the bill. ", "keywords": ["bill"]}]}, {"Id": "167329366", "PostHistoryTypeId": "1", "PostId": "48895651", "RevisionGUID": "83017911-05f5-4819-beae-502585bf5753", "CreationDate": "2018-02-20T23:05:23.673", "UserId": "9387806", "Text": "How common is it to use AWS Cloud Formation for repeated provisioning of AWS environments?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "167329367", "PostHistoryTypeId": "3", "PostId": "48895651", "RevisionGUID": "83017911-05f5-4819-beae-502585bf5753", "CreationDate": "2018-02-20T23:05:23.673", "UserId": "9387806", "Text": "|amazon-web-services|amazon-elastic-beanstalk|aws-cloudformation|aws-opsworks|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "48896364", "PostTypeId": "2", "ParentId": "48895651", "CreationDate": "2018-02-21T00:21:25.763", "Score": "5", "Body": "<p>I'll try to answer most of your questions based on my personal experience:</p>\n\n<blockquote>\n  <p>What I want to know is: How prevalent is the use of CF, vs other \"template\" deployment technologies?</p>\n</blockquote>\n\n<p>I can't assert to specific usage distribution, but I know people who use <a href=\"https://www.terraform.io/\" rel=\"noreferrer\">Terraform</a>. Although Terraform supports CF, my team decided not to use it simply because CF already satisfies our needs.</p>\n\n<blockquote>\n  <p>What is YOUR team using for deploying repeated configurations of AWS\n  services?</p>\n</blockquote>\n\n<p>My team uses CloudFormation (without Terraform) to deploy our whole infrastructure to AWS</p>\n\n<blockquote>\n  <p>How usable/learnable is it?</p>\n</blockquote>\n\n<p>Pretty easy. Start with a small template (ideally YAML), then build up from there. The <a href=\"https://docs.aws.amazon.com/cli/latest/reference/cloudformation/deploy/index.html\" rel=\"noreferrer\"><code>aws cloudformation deploy</code></a> will speed up your feedback loop.</p>\n\n<blockquote>\n  <p>If I adopt CF, how likely is it that existing developers on AWS will already be familiar with it, and be able to use it straight off the bat?</p>\n</blockquote>\n\n<p>I think developers who are familiar to AWS can easily pick up CF. If you can find your way around AWS documentation, CF is just another service to learn. I can't assert to the likeliness that existing AWS devs are familiar with CF.</p>\n\n<blockquote>\n  <p>CF seems to support many or most AWS services already, but are people actually using it to repeatedly stamp out identically-configured topologies of services?</p>\n</blockquote>\n\n<p>My team uses it to provision testing and production environments that have the same topology. Some parts of our infrastructure is duplicated for redundancy using shared CF templates.</p>\n\n<blockquote>\n  <p>What pitfalls do I need to watch out for when using CloudFormation Templates?</p>\n</blockquote>\n\n<p>You have to watch out for some CF <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html\" rel=\"noreferrer\">limits</a>, namely the template body's maximum size, which is capped at 46KB. We have hit this limit a few times, especially when provisioning EC2 instances with larger user data scripts. That being said, you should not hit that limit early on, and there are many workarounds</p>\n\n<blockquote>\n  <p>What doesn't CF handle, which it really should?</p>\n</blockquote>\n\n<p>From the top of my head: Elastic Transcoder, EC2 AMIs, API Gateway VPC Links. My team has circumvented these limitations using <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources-lambda.html\" rel=\"noreferrer\">Lambda-backed custom resources</a>, which allow you to extend CF to your needs.</p>\n\n<p>Overall, my team is very satisfied with CloudFormation. It definitely helps us maintain our AWS accounts in order.</p>\n\n<p>Hope this helps!</p>\n", "OwnerUserId": "902751", "LastActivityDate": "2018-02-21T00:21:25.763", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "167332126", "PostHistoryTypeId": "2", "PostId": "48896364", "RevisionGUID": "6332898b-ba10-4a9a-8b61-bca3c21a97de", "CreationDate": "2018-02-21T00:21:25.763", "UserId": "902751", "Text": "I'll try to answer most of your questions based on my personal experience:\r\n\r\n> What I want to know is: How prevalent is the use of CF, vs other \"template\" deployment technologies?\r\n\r\nI can't assert to specific usage distribution, but I know people who use [Terraform][1]. Although Terraform supports CF, my team decided not to use it simply because CF already satisfies our needs.\r\n\r\n\r\n> What is YOUR team using for deploying repeated configurations of AWS\r\n> services?\r\n\r\nMy team uses CloudFormation (without Terraform) to deploy our whole infrastructure to AWS\r\n\r\n> How usable/learnable is it?\r\n\r\nPretty easy. Start with a small template (ideally YAML), then build up from there. The [`aws cloudformation deploy`][2] will speed up your feedback loop.\r\n\r\n> If I adopt CF, how likely is it that existing developers on AWS will already be familiar with it, and be able to use it straight off the bat?\r\n\r\nI think developers who are familiar to AWS can easily pick up CF. If you can find your way around AWS documentation, CF is just another service to learn. I can't assert to the likeliness that existing AWS devs are familiar with CF.\r\n\r\n> CF seems to support many or most AWS services already, but are people actually using it to repeatedly stamp out identically-configured topologies of services?\r\n\r\nMy team uses it to provision testing and production environments that have the same topology. Some parts of our infrastructure is duplicated for redundancy using shared CF templates.\r\n\r\n> What pitfalls do I need to watch out for when using CloudFormation Templates?\r\n\r\nYou have to watch out for some CF [limits][3], namely the template body's maximum size, which is capped at 46KB. We have hit this limit a few times, especially when provisioning EC2 instances with larger user data scripts. That being said, you should not hit that limit early on, and there are many workarounds\r\n\r\n> What doesn't CF handle, which it really should?\r\n\r\nFrom the top of my head: Elastic Transcoder, EC2 AMIs, API Gateway VPC Links. My team has circumvented these limitations using [Lambda-backed custom resources][4], which allow you to extend CF to your needs.\r\n\r\nOverall, my team is very satisfied with CloudFormation. It definitely helps us maintain our AWS accounts in order.\r\n\r\nHope this helps!\r\n\r\n  [1]: https://www.terraform.io/\r\n  [2]: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/deploy/index.html\r\n  [3]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html\r\n  [4]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources-lambda.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "My team uses it to provision testing and production environments that have the same topology. ", "keywords": ["test"]}]}], "filtered-sentences": [{"source": "Body", "text": "My team uses it to provision testing and production environments that have the same topology. ", "keywords": ["test"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "And given the needs of my organization for flexible and repeatable IaaS/PaaS deployments, CF seems to fit the bill. ", "keywords": ["bill"]}]}