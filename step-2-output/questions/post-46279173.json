{"Id": "46279173", "PostTypeId": "1", "AcceptedAnswerId": "46291643", "CreationDate": "2017-09-18T12:21:34.333", "Score": "-1", "ViewCount": "831", "Body": "<p>I would like to find a way to debug cloudformation scripts.</p>\n\n<p>I wrote some bash-script, which works when executed manually, via SSH.</p>\n\n<p>It fails indeed, when executed via Cloud formation.\nThen there are some intrinsic cloudformation functions, which can not be executed via bash, which makes them difficult to debug.</p>\n\n<p>The whole script needs 30 Minutes. So when I think Im done - I restart the script and find another errors after 30 Minutes.</p>\n\n<p>Is there a way to reduce this cycle? <br>\nIs there a way to execute a command, how it will be executed by cloudformation?</p>\n", "OwnerUserId": "513393", "LastActivityDate": "2017-09-19T04:07:42.617", "Title": "Any efficient way to debug a cloudformation script?", "Tags": "|aws-cloudformation|", "AnswerCount": "1", "CommentCount": "3", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "79530522", "PostId": "46279173", "Score": "0", "Text": "Can you give an example of a command that CloudFormation is running and failing on? The most common problem that I see with things in CloudFormation is ensuring that the proper permissions are given.", "CreationDate": "2017-09-18T16:08:13.890", "UserId": "1017797", "filtered-sentences": []}, {"Id": "79533252", "PostId": "46279173", "Score": "0", "Text": "It is not a question of concrete failures. I am asking for an approach to debug cloudformation.", "CreationDate": "2017-09-18T17:33:22.287", "UserId": "513393", "filtered-sentences": []}, {"Id": "79533419", "PostId": "46279173", "Score": "1", "Text": "The best way that I've found for debugging CloudFormation is to incrementally add resources, and then update the stack. The benefit of this is that when you make a change, it only needs to create the new resources, and the existing resources already work. If you find that one resource is giving you trouble, create the stack without that resource first, then add the resource. In that case, if there is a failure, it will only roll back to the existing stack, and you can debug that one resource.", "CreationDate": "2017-09-18T17:38:10.403", "UserId": "1017797", "filtered-sentences": [{"source": "Text", "text": "The benefit of this is that when you make a change, it only needs to create the new resources, and the existing resources already work. ", "keywords": ["change"]}]}], "history": [{"Id": "156409299", "PostHistoryTypeId": "2", "PostId": "46279173", "RevisionGUID": "9fb0a421-ab83-4994-b75b-34e073b63512", "CreationDate": "2017-09-18T12:21:34.333", "UserId": "513393", "Text": "I would like to find a way to debug cloudformation scripts.\r\n\r\nI wrote some bash-script, which works when executed manually, via SSH.\r\n\r\nIt fails indeed, when executed via Cloud formation.\r\nThen there are some intrinsic cloudformation functions, which can not be executed via bash, which makes them difficult to debug.\r\n\r\nThe whole script needs 30 Minutes. So when I think Im done - I restart the script and find another errors after 30 Minutes.\r\n\r\nIs there a way to reduce this cycle? <br>\r\nIs there a way to execute a command, how it will be executed by cloudformation?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "156409300", "PostHistoryTypeId": "1", "PostId": "46279173", "RevisionGUID": "9fb0a421-ab83-4994-b75b-34e073b63512", "CreationDate": "2017-09-18T12:21:34.333", "UserId": "513393", "Text": "Any efficient way to debug a cloudformation script?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Any efficient way to debug a cloudformation script?", "keywords": ["efficient"]}]}, {"Id": "156409301", "PostHistoryTypeId": "3", "PostId": "46279173", "RevisionGUID": "9fb0a421-ab83-4994-b75b-34e073b63512", "CreationDate": "2017-09-18T12:21:34.333", "UserId": "513393", "Text": "|aws-cloudformation|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "46291643", "PostTypeId": "2", "ParentId": "46279173", "CreationDate": "2017-09-19T04:07:42.617", "Score": "2", "Body": "<p>The most efficient way that I've found for debugging CloudFormation scripts, is to take a template that failed, and remove all of the Resources that failed to deploy, and the Resources that depend on them, then create the CloudFormation Stack. The benefit to this is that this way, all the resources that the failing element depend on can be created ahead of time, then you can update the stack, and debug the one element until it creates. If it fails, it will rollback the update to the working state, which is much faster than creating the whole stack again.</p>\n\n<p>Keep an eye on the events stack for when the stack fails due to permissions, as this is also quite common if you're following Least Privilege. The good thing is that CloudFormation is usually quite good about telling you that a specific User/Role/etc does not have permission to perform a specific action on a specific resource.</p>\n", "OwnerUserId": "1017797", "LastActivityDate": "2017-09-19T04:07:42.617", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "156459053", "PostHistoryTypeId": "2", "PostId": "46291643", "RevisionGUID": "fe552357-250b-4530-aeae-09507bfb3abd", "CreationDate": "2017-09-19T04:07:42.617", "UserId": "1017797", "Text": "The most efficient way that I've found for debugging CloudFormation scripts, is to take a template that failed, and remove all of the Resources that failed to deploy, and the Resources that depend on them, then create the CloudFormation Stack. The benefit to this is that this way, all the resources that the failing element depend on can be created ahead of time, then you can update the stack, and debug the one element until it creates. If it fails, it will rollback the update to the working state, which is much faster than creating the whole stack again.\r\n\r\nKeep an eye on the events stack for when the stack fails due to permissions, as this is also quite common if you're following Least Privilege. The good thing is that CloudFormation is usually quite good about telling you that a specific User/Role/etc does not have permission to perform a specific action on a specific resource.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "The most efficient way that I've found for debugging CloudFormation scripts, is to take a template that failed, and remove all of the Resources that failed to deploy, and the Resources that depend on them, then create the CloudFormation Stack. ", "keywords": ["efficient"]}]}], "filtered-sentences": [{"source": "Body", "text": "The most efficient way that I've found for debugging CloudFormation scripts, is to take a template that failed, and remove all of the Resources that failed to deploy, and the Resources that depend on them, then create the CloudFormation Stack. ", "keywords": ["efficient"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "Any efficient way to debug a cloudformation script?", "keywords": ["efficient"]}]}