{"Id": "64031706", "PostTypeId": "1", "AcceptedAnswerId": "64037262", "CreationDate": "2020-09-23T15:47:56.047", "Score": "2", "ViewCount": "612", "Body": "<p>Trying to deploy an environment using a CF template. Currently we have a NAT GW for outbound traffic and works well. The traffic is low and sporadic. I'm considering to use a NAT instance (being much more cost effective).</p>\n<p>Deploying a NAT instance itself is not a problem, but I'm trying to have it in an autoscaling group for resiliency (the instance should be restarted / recreated if one fails). However - I'm unable to find any option to disable the source/destination check needed for a NAT instance. Is it even possible?</p>\n", "OwnerUserId": "1645712", "LastActivityDate": "2023-12-28T05:12:17.710", "Title": "AWS CloudFormation for a NAT instance - disable SourceDestinationCheck in a LaunchConfig", "Tags": "|aws-cloudformation|", "AnswerCount": "3", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "231417476", "PostHistoryTypeId": "2", "PostId": "64031706", "RevisionGUID": "c16b89f6-eaef-4863-8d45-ce5027bee385", "CreationDate": "2020-09-23T15:47:56.047", "UserId": "1645712", "Text": "Trying to deploy an environment using a CF template. Currently we have a NAT GW for outbound traffic and works well. The traffic is low and sporadic. I'm considering to use a NAT instance (being much more cost effective).\r\n\r\nDeploying a NAT instance itself is not a problem, but I'm trying to have it in an autoscaling group for resiliency (the instance should be restarted / recreated if one fails). However - I'm unable to find any option to disable the source/destination check needed for a NAT instance. Is it even possible?\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Currently we have a NAT GW for outbound traffic and works well. ", "keywords": ["nat"]}, {"source": "Text", "text": "I'm considering to use a NAT instance (being much more cost effective). ", "keywords": ["cost", "nat", "instance"]}, {"source": "Text", "text": "Deploying a NAT instance itself is not a problem, but I'm trying to have it in an autoscaling group for resiliency (the instance should be restarted / recreated if one fails). ", "keywords": ["nat", "instance"]}, {"source": "Text", "text": "However - I'm unable to find any option to disable the source/destination check needed for a NAT instance. ", "keywords": ["nat", "instance"]}]}, {"Id": "231417477", "PostHistoryTypeId": "1", "PostId": "64031706", "RevisionGUID": "c16b89f6-eaef-4863-8d45-ce5027bee385", "CreationDate": "2020-09-23T15:47:56.047", "UserId": "1645712", "Text": "AWS CloudFormation for a NAT instance - disable SourceDestinationCheck in a LaunchConfig", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "AWS CloudFormation for a NAT instance - disable SourceDestinationCheck in a LaunchConfig", "keywords": ["nat", "instance"]}]}, {"Id": "231417478", "PostHistoryTypeId": "3", "PostId": "64031706", "RevisionGUID": "c16b89f6-eaef-4863-8d45-ce5027bee385", "CreationDate": "2020-09-23T15:47:56.047", "UserId": "1645712", "Text": "|aws-cloudformation|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "64037262", "PostTypeId": "2", "ParentId": "64031706", "CreationDate": "2020-09-23T22:47:07.023", "Score": "2", "Body": "<p>The <code>SourceDestCheck</code> is property of <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-network-interface.html\" rel=\"nofollow noreferrer\">AWS::EC2::NetworkInterface</a> or an Instance. Sadly both <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-launchconfig.html\" rel=\"nofollow noreferrer\">LaunchConfiguration</a> nor <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-networkinterface.html\" rel=\"nofollow noreferrer\">LaunchTemplate</a> allow you to set it.</p>\n<p>However, since you put your NAT instance in an ASG you have to somehow manage updating route tables automatically for that to work. Thus whatever process (e.g. lambda) you use to update route tables when NAT instance is launched, replaced or relocated, you could use this process to also disable the <code>SourceDestCheck</code> programmatically using AWS SDK.</p>\n<p>The alternative if is use <code>UserData</code> in a LC or LT. In this solution, the NAT instance, when launched would disable its own <code>SourceDestCheck</code> using AWS CLI in its <code>UserData</code>.</p>\n", "OwnerUserId": "248823", "LastActivityDate": "2020-09-23T22:47:07.023", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "113249683", "PostId": "64037262", "Score": "1", "Text": "Indeed, using the `UserData` for disabling the source/dest check and updating the route table seems reasonable assuming the nat instance will get proper permissions. Thanks.", "CreationDate": "2020-09-24T09:29:07.123", "UserId": "1645712", "filtered-sentences": [{"source": "Text", "text": "Indeed, using the `UserData` for disabling the source/dest check and updating the route table seems reasonable assuming the nat instance will get proper permissions. ", "keywords": ["nat", "instance", "permissions"]}]}, {"Id": "113251319", "PostId": "64037262", "Score": "0", "Text": "@gusto2 No problem. Glad I could help.", "CreationDate": "2020-09-24T10:23:21.790", "UserId": "248823", "filtered-sentences": []}], "history": [{"Id": "231440671", "PostHistoryTypeId": "2", "PostId": "64037262", "RevisionGUID": "d5dd310a-cea4-4773-baa4-4912a946aaae", "CreationDate": "2020-09-23T22:47:07.023", "UserId": "248823", "Text": "The `SourceDestCheck` is property of [AWS::EC2::NetworkInterface](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-network-interface.html) or an Instance. Sadly both [LaunchConfiguration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-launchconfig.html) nor [LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-networkinterface.html) allow you to set it.\r\n\r\nHowever, since you put your NAT instance in an ASG you have to somehow manage updating route tables automatically for that to work. Thus whatever process (e.g. lambda) you use to update route tables when NAT instance is launched, replaced or relocated, you could use this process to also disable the `SourceDestCheck` programmatically using AWS SDK.\r\n\r\nThe alternative if is use `UserData` in a LC or LT. In this solution, the NAT instance, when launched would disable its own `SourceDestCheck` using AWS CLI in its `UserData`.\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The `SourceDestCheck` is property of [AWS::EC2::NetworkInterface](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-network-interface.html) or an Instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "However, since you put your NAT instance in an ASG you have to somehow manage updating route tables automatically for that to work. ", "keywords": ["nat", "instance"]}, {"source": "Text", "text": "Thus whatever process (e.g. lambda) you use to update route tables when NAT instance is launched, replaced or relocated, you could use this process to also disable the `SourceDestCheck` programmatically using AWS SDK. ", "keywords": ["nat", "instance"]}, {"source": "Text", "text": "In this solution, the NAT instance, when launched would disable its own `SourceDestCheck` using AWS CLI in its `UserData`.", "keywords": ["nat", "instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "The SourceDestCheck is property of AWS::EC2::NetworkInterface or an Instance. ", "keywords": ["instance"]}, {"source": "Body", "text": "However, since you put your NAT instance in an ASG you have to somehow manage updating route tables automatically for that to work. ", "keywords": ["nat", "instance"]}, {"source": "Body", "text": "Thus whatever process (e.g. lambda) you use to update route tables when NAT instance is launched, replaced or relocated, you could use this process to also disable the SourceDestCheck programmatically using AWS SDK. ", "keywords": ["nat", "instance"]}, {"source": "Body", "text": "In this solution, the NAT instance, when launched would disable its own SourceDestCheck using AWS CLI in its UserData.", "keywords": ["nat", "instance"]}]}, {"Id": "77725127", "PostTypeId": "2", "ParentId": "64031706", "CreationDate": "2023-12-28T05:12:17.710", "Score": "0", "Body": "<p>This problem can be cleanly solved with a AWS Lambda function subscribed to the SNS Topic receiving a Autoscaling Group notification after the instance starts.</p>\n<p>Consider the following snippets.</p>\n<p>CloudFormation:</p>\n<pre><code>InstanceTopic:\n  Type: AWS::SNS::Topic\n\nAutoScalingGroup:\n  Type: AWS::AutoScaling::AutoScalingGroup\n  Properties:\n\n    ...\n\n    NotificationConfigurations:\n      - TopicARN: !Ref InstanceTopic\n        NotificationTypes:\n          - 'autoscaling:EC2_INSTANCE_LAUNCH'\n</code></pre>\n<p>The following is the code for a AWS Lambda function:</p>\n<pre><code>import json\nimport boto3\n\nec2 = boto3.client('ec2')\n\n\ndef disable_srcdst_check(instance_id):\n    response_instances = ec2.describe_instances(\n        InstanceIds=[\n            instance_id,\n        ]\n    )\n    eni_id = response_instances['Reservations'][0]['Instances'][0]['NetworkInterfaces'][0]['NetworkInterfaceId']\n    response_eni = ec2.modify_network_interface_attribute(\n        NetworkInterfaceId=eni_id,\n        SourceDestCheck={\n            'Value': False\n        }\n    )\n    assert response_eni['ResponseMetadata']['HTTPStatusCode'] == 200\n\n\ndef handler(event, context):\n    as_json = event['Records'][0]['Sns']['Message']\n    as_message = json.loads(as_json)\n    instance_id = as_message['EC2InstanceId']\n    disable_srcdst_check(instance_id)\n</code></pre>\n<p>The function requires the following IAM permissions:</p>\n<pre><code>ec2:DescribeInstances\nec2:ModifyNetworkInterfaceAttribute\n</code></pre>\n<p>I intentionally omitted details about deploying the AWS Lambda function and automatically subscribing it to the SNS topic to keep the response clear and conscise.</p>\n", "OwnerUserId": "383839", "LastActivityDate": "2023-12-28T05:12:17.710", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "301651739", "PostHistoryTypeId": "2", "PostId": "77725127", "RevisionGUID": "70f37827-f1e9-47d2-ae1d-f1581ae4cbc9", "CreationDate": "2023-12-28T05:12:17.710", "UserId": "383839", "Text": "This problem can be cleanly solved with a AWS Lambda function subscribed to the SNS Topic receiving a Autoscaling Group notification after the instance starts.\r\n\r\nConsider the following snippets.\r\n\r\nCloudFormation:\r\n\r\n```\r\nInstanceTopic:\r\n  Type: AWS::SNS::Topic\r\n\r\nAutoScalingGroup:\r\n  Type: AWS::AutoScaling::AutoScalingGroup\r\n  Properties:\r\n\r\n    ...\r\n\r\n    NotificationConfigurations:\r\n      - TopicARN: !Ref InstanceTopic\r\n        NotificationTypes:\r\n          - 'autoscaling:EC2_INSTANCE_LAUNCH'\r\n```\r\n\r\nThe following is the code for a AWS Lambda function:\r\n\r\n```\r\nimport json\r\nimport boto3\r\n\r\nec2 = boto3.client('ec2')\r\n\r\n\r\ndef disable_srcdst_check(instance_id):\r\n    response_instances = ec2.describe_instances(\r\n        InstanceIds=[\r\n            instance_id,\r\n        ]\r\n    )\r\n    eni_id = response_instances['Reservations'][0]['Instances'][0]['NetworkInterfaces'][0]['NetworkInterfaceId']\r\n    response_eni = ec2.modify_network_interface_attribute(\r\n        NetworkInterfaceId=eni_id,\r\n        SourceDestCheck={\r\n            'Value': False\r\n        }\r\n    )\r\n    assert response_eni['ResponseMetadata']['HTTPStatusCode'] == 200\r\n\r\n\r\ndef handler(event, context):\r\n    as_json = event['Records'][0]['Sns']['Message']\r\n    as_message = json.loads(as_json)\r\n    instance_id = as_message['EC2InstanceId']\r\n    disable_srcdst_check(instance_id)\r\n```\r\n\r\nThe function requires the following IAM permissions:\r\n\r\n```\r\nec2:DescribeInstances\r\nec2:ModifyNetworkInterfaceAttribute\r\n```\r\n\r\nI intentionally omitted details about deploying the AWS Lambda function and automatically subscribing it to the SNS topic to keep the response clear and conscise.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "This problem can be cleanly solved with a AWS Lambda function subscribed to the SNS Topic receiving a Autoscaling Group notification after the instance starts. ", "keywords": ["instance"]}, {"source": "Text", "text": "Consider the following snippets. CloudFormation: ``` InstanceTopic: Type: AWS::SNS::Topic AutoScalingGroup: Type: AWS::AutoScaling::AutoScalingGroup Properties: ... NotificationConfigurations: - TopicARN: !Ref InstanceTopic NotificationTypes: - 'autoscaling:EC2_INSTANCE_LAUNCH' ``` The following is the code for a AWS Lambda function: ``` import json import boto3 ec2 = boto3.client('ec2') def disable_srcdst_check(instance_id): response_instances = ec2.describe_instances( InstanceIds=[ instance_id, ] ) eni_id = response_instances['Reservations'][0]['Instances'][0]['NetworkInterfaces'][0]['NetworkInterfaceId'] response_eni = ec2.modify_network_interface_attribute( NetworkInterfaceId=eni_id, SourceDestCheck={ 'Value': False } ) assert response_eni['ResponseMetadata']['HTTPStatusCode'] == 200 def handler(event, context): as_json = event['Records'][0]['Sns']['Message'] as_message = json.loads(as_json) instance_id = as_message['EC2InstanceId'] disable_srcdst_check(instance_id) ``` The function requires the following IAM permissions: ``` ec2:DescribeInstances ec2:ModifyNetworkInterfaceAttribute ``` I intentionally omitted details about deploying the AWS Lambda function and automatically subscribing it to the SNS topic to keep the response clear and conscise.", "keywords": ["permissions"]}]}], "filtered-sentences": [{"source": "Body", "text": "This problem can be cleanly solved with a AWS Lambda function subscribed to the SNS Topic receiving a Autoscaling Group notification after the instance starts. ", "keywords": ["instance"]}, {"source": "Body", "text": "The function requires the following IAM permissions: I intentionally omitted details about deploying the AWS Lambda function and automatically subscribing it to the SNS topic to keep the response clear and conscise.", "keywords": ["permissions"]}]}, {"Id": "64259319", "PostTypeId": "2", "ParentId": "64031706", "CreationDate": "2020-10-08T09:11:43.330", "Score": "0", "Body": "<p>Self-posting the UserData that's working, I hope someone finds it useful</p>\n<pre><code>UserData:\n Fn::Base64: !Sub\n   - |\n     #!/bin/bash -xe\n     yum update -y aws-cfn-bootstrap\n     yum install -y jq\n     export EC2_INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n     export ENI=$(aws ec2 --region ${AWS::Region} describe-network-interfaces \\\n      | jq -Mr &quot;.NetworkInterfaces[] | select(.Attachment.InstanceId==\\&quot;${!EC2_INSTANCE_ID}\\&quot;) | .NetworkInterfaceId&quot;)\n     aws ec2 modify-network-interface-attribute --region ${AWS::Region} --network-interface-id ${!ENI} --no-source-dest-check\n     aws ec2 replace-route --region ${AWS::Region} --route-table-id ${PrivateRouteRef} \\\n       --destination-cidr-block &quot;0.0.0.0/0&quot; --network-interface-id ${!ENI}\n\n   - PublicRouteRef: !Ref PublicRouteTable\n     PrivateRouteRef: !Ref PrivateRouteTable\n</code></pre>\n", "OwnerUserId": "1645712", "LastActivityDate": "2020-10-08T09:11:43.330", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "232394296", "PostHistoryTypeId": "2", "PostId": "64259319", "RevisionGUID": "8533551c-6939-4bca-b5b4-ec9dfbb99534", "CreationDate": "2020-10-08T09:11:43.330", "UserId": "1645712", "Text": "Self-posting the UserData that's working, I hope someone finds it useful\r\n\r\n    UserData:\r\n     Fn::Base64: !Sub\r\n       - |\r\n         #!/bin/bash -xe\r\n         yum update -y aws-cfn-bootstrap\r\n         yum install -y jq\r\n         export EC2_INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)\r\n         export ENI=$(aws ec2 --region ${AWS::Region} describe-network-interfaces \\\r\n          | jq -Mr \".NetworkInterfaces[] | select(.Attachment.InstanceId==\\\"${!EC2_INSTANCE_ID}\\\") | .NetworkInterfaceId\")\r\n         aws ec2 modify-network-interface-attribute --region ${AWS::Region} --network-interface-id ${!ENI} --no-source-dest-check\r\n         aws ec2 replace-route --region ${AWS::Region} --route-table-id ${PrivateRouteRef} \\\r\n           --destination-cidr-block \"0.0.0.0/0\" --network-interface-id ${!ENI}\r\n\r\n       - PublicRouteRef: !Ref PublicRouteTable\r\n         PrivateRouteRef: !Ref PrivateRouteTable\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Self-posting the UserData that's working, I hope someone finds it useful UserData: Fn::Base64: !Sub - | #!/bin/bash -xe yum update -y aws-cfn-bootstrap yum install -y jq export EC2_INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id) export ENI=$(aws ec2 --region ${AWS::Region} describe-network-interfaces \\ | jq -Mr \".NetworkInterfaces[] | select(.Attachment.InstanceId==\\\"${!EC2_INSTANCE_ID}\\\") | .NetworkInterfaceId\") aws ec2 modify-network-interface-attribute --region ${AWS::Region} --network-interface-id ${!ENI} --no-source-dest-check aws ec2 replace-route --region ${AWS::Region} --route-table-id ${PrivateRouteRef} \\ --destination-cidr-block \"0.0.0.0/0\" --network-interface-id ${!ENI} - PublicRouteRef: !Ref PublicRouteTable PrivateRouteRef: !Ref PrivateRouteTable", "keywords": ["instance"]}]}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "AWS CloudFormation for a NAT instance - disable SourceDestinationCheck in a LaunchConfig", "keywords": ["nat", "instance"]}, {"source": "Body", "text": "Currently we have a NAT GW for outbound traffic and works well. ", "keywords": ["nat"]}, {"source": "Body", "text": "I'm considering to use a NAT instance (being much more cost effective). ", "keywords": ["cost", "nat", "instance"]}, {"source": "Body", "text": "Deploying a NAT instance itself is not a problem, but I'm trying to have it in an autoscaling group for resiliency (the instance should be restarted / recreated if one fails). ", "keywords": ["nat", "instance"]}, {"source": "Body", "text": "However - I'm unable to find any option to disable the source/destination check needed for a NAT instance. ", "keywords": ["nat", "instance"]}]}