{"Id": "46745297", "PostTypeId": "1", "AcceptedAnswerId": "46749308", "CreationDate": "2017-10-14T13:49:40.113", "Score": "3", "ViewCount": "7177", "Body": "<p>I am trying to deploy my lambda functions using CloudFormation StackSets to multiple AWS accounts and regions. But failed because of the below error</p>\n\n<blockquote>\n  <p>ResourceLogicalId:OfficeHoursAutoScalingStart, ResourceType:AWS::Lambda::Function, ResourceStatusReason:Error occurred while GetObject. S3 Error Code: AuthorizationHeaderMalformed. S3 Error Message: The authorization header is malformed; the region 'us-east-1' is wrong; expecting 'ap-southeast-1'</p>\n</blockquote>\n\n<p>It seems like its a permissions thing? How do I resolve this? </p>\n\n<p>My template:</p>\n\n<pre><code>AWSTemplateFormatVersion : '2010-09-09'\nDescription: 'Skynet. AWS Management Assistant'\nParameters:\n  AppName:\n    Type: String\n    Description: Prefix for resources\n    Default: skynet-lambda-stackset\n  ArtifactsBucket:\n    Type: String\n    Description: S3 bucket storing lambda function zip\n  ArtifactZipPath:\n    Type: String\n    Description: Path to lambda function zip\n  CostCenter:\n    Type: String\n    Description: Cost center\n    Default: Admin\n  Owner:\n    Type: String\n    Description: Owner\n    Default: Jiew Meng\n\nResources:\n  LambdaRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: !Sub '${AppName}-lambda'\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n        - Effect: Allow\n          Principal:\n            Service:\n              - lambda.amazonaws.com\n              - apigateway.amazonaws.com\n          Action:\n          - sts:AssumeRole\n      ManagedPolicyArns:\n        - 'arn:aws:iam::aws:policy/AmazonEC2FullAccess'\n        - 'arn:aws:iam::aws:policy/AWSLambdaFullAccess'\n        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'\n        - 'arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess'\n        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'\n\n  NewEc2AutoTag:\n    Type: AWS::Lambda::Function\n    Properties:\n      Code:\n        S3Bucket: !Ref ArtifactsBucket\n        S3Key: !Ref ArtifactZipPath\n      Handler: ec2/newEc2_autoTag.handler\n      Runtime: nodejs6.10\n      FunctionName: 'NewEC2_AutoTag'\n      Description: 'Auto tag new EC2 instances with Owner tag'\n      Timeout: 30\n      Role: !GetAtt LambdaRole.Arn\n      Tags:\n        - Key: Cost Center\n          Value: !Ref CostCenter\n        - Key: Owner\n          Value: !Ref Owner\n\n  NewEc2Event:\n    Type: AWS::Events::Rule\n    Properties:\n      Name: !Sub ${AppName}-newEc2\n      Description: On new EC2 instance created\n      EventPattern:\n        source:\n          - 'aws.ec2'\n        detail-type:\n          - 'AWS API Call via CloudTrail'\n        detail:\n          eventName:\n            - RunInstances\n      Targets:\n        - !Ref NewEc2AutoTag\n\n  AfterhoursEc2Shutdown:\n    Type: AWS::Lambda::Function\n    Properties:\n      Code:\n        S3Bucket: !Ref ArtifactsBucket\n        S3Key: !Ref ArtifactZipPath\n      Handler: ec2/afterHours_shutdown.handler\n      Runtime: nodejs6.10\n      FunctionName: 'Afterhours_Shutdown'\n      Description: 'Shutdown instances tagged Auto Shutdown: true'\n      Timeout: 30\n      Role: !GetAtt LambdaRole.Arn\n      Tags:\n        - Key: Cost Center\n          Value: !Ref CostCenter\n        - Key: Owner\n          Value: !Ref Owner\n\n  AfterHoursEvent:\n    Type: AWS::Events::Rule\n    Properties:\n      Name: !Sub ${AppName}-afterHours\n      Description: Triggered on weekdays 2400 SGT\n      ScheduleExpression: cron(0 16 ? * MON,TUE,WED,THUR,FRI *)\n      Targets:\n        - !Ref AfterhoursEc2Shutdown\n        - !Ref AfterhoursAutoScalingShutdown\n\n  OfficeHoursEc2Start:\n    Type: AWS::Lambda::Function\n    Properties:\n      Code:\n        S3Bucket: !Ref ArtifactsBucket\n        S3Key: !Ref ArtifactZipPath\n      Handler: ec2/officeHours_start.handler\n      Runtime: nodejs6.10\n      FunctionName: 'OfficeHours_Start'\n      Description: 'Starts instances with Auto Shutdown: true'\n      Timeout: 30\n      Role: !GetAtt LambdaRole.Arn\n      Tags:\n        - Key: Cost Center\n          Value: !Ref CostCenter\n        - Key: Owner\n          Value: !Ref Owner\n\n  OfficeHoursEvent:\n    Type: AWS::Events::Rule\n    Properties:\n      Name: !Sub ${AppName}-officeHours\n      Description: Triggered on 7AM SGT weekdays\n      ScheduleExpression: cron(0 23 ? * SUN,MON,TUE,WED,THU *)\n      Targets:\n        - !Ref OfficeHoursEc2Start\n        - !Ref OfficeHoursAutoScalingStart\n\n  StartedEc2ConfigureDns:\n    Type: AWS::Lambda::Function\n    Properties:\n      Code:\n        S3Bucket: !Ref ArtifactsBucket\n        S3Key: !Ref ArtifactZipPath\n      Handler: ec2/started_configureDns.handler\n      Runtime: nodejs6.10\n      FunctionName: 'StartedEc2_ConfigureDns'\n      Description: 'When EC2 started, configure DNS if required'\n      Timeout: 30\n      Role: !GetAtt LambdaRole.Arn\n      Tags:\n        - Key: Cost Center\n          Value: !Ref CostCenter\n        - Key: Owner\n          Value: !Ref Owner\n\n  Ec2StartedEvent:\n    Type: AWS::Events::Rule\n    Properties:\n      Name: !Sub ${AppName}-ec2-started\n      Description: Triggered on EC2 starts\n      EventPattern:\n        source:\n          - 'aws.ec2'\n        detail-type:\n          - 'EC2 Instance State-change Notification'\n        detail:\n          state:\n            - running\n      Targets:\n        - !Ref StartedEc2ConfigureDns\n\n  AfterhoursAutoScalingShutdown:\n    Type: AWS::Lambda::Function\n    Properties:\n      Code:\n        S3Bucket: !Ref ArtifactsBucket\n        S3Key: !Ref ArtifactZipPath\n      Handler: autoscaling/afterHours_shutdown.handler\n      Runtime: nodejs6.10\n      FunctionName: 'Afterhours_AutoScalingShutdown'\n      Description: 'Scales down autoscaling groups tagged Auto Shutdown: true'\n      Timeout: 30\n      Role: !GetAtt LambdaRole.Arn\n      Tags:\n        - Key: Cost Center\n          Value: !Ref CostCenter\n        - Key: Owner\n          Value: !Ref Owner\n\n  OfficeHoursAutoScalingStart:\n    Type: AWS::Lambda::Function\n    Properties:\n      Code:\n        S3Bucket: !Ref ArtifactsBucket\n        S3Key: !Ref ArtifactZipPath\n      Handler: autoscaling/officeHours_start.handler\n      Runtime: nodejs6.10\n      FunctionName: 'OfficeHours_AutoScalingStart'\n      Description: 'Scales up auto scaling groups that are scaled down to 0 and tagged autostart: true'\n      Timeout: 30\n      Role: !GetAtt LambdaRole.Arn\n      Tags:\n        - Key: Cost Center\n          Value: !Ref CostCenter\n        - Key: Owner\n          Value: !Ref Owner\n\n  NewAutoScalingGroupEvent:\n    Type: AWS::Events::Rule\n    Properties:\n      Name: !Sub ${AppName}-autoscaling-new\n      Description: Triggered when new autoscaling group created\n      EventPattern:\n        source:\n          - 'aws.autoscaling'\n        detail-type:\n          - 'AWS API Call via CloudTrail'\n        detail:\n          eventName:\n            - CreateAutoScalingGroup\n      Targets:\n        - !Ref NewAutoScalingGroupAutoTag\n\n  NewAutoScalingGroupAutoTag:\n    Type: AWS::Lambda::Function\n    Properties:\n      Code:\n        S3Bucket: !Ref ArtifactsBucket\n        S3Key: !Ref ArtifactZipPath\n      Handler: autoscaling/new_autoTag.handler\n      Runtime: nodejs6.10\n      FunctionName: 'NewAutoScalingGroup_AutoTag'\n      Description: 'Tags new autoscaling groups with owner and autoshutdown tags if not existing'\n      Timeout: 30\n      Role: !GetAtt LambdaRole.Arn\n      Tags:\n        - Key: Cost Center\n          Value: !Ref CostCenter\n        - Key: Owner\n          Value: !Ref Owner\n</code></pre>\n", "OwnerUserId": "292291", "LastActivityDate": "2019-07-13T05:37:47.410", "Title": "CloudFormation StackSet S3 Error: the region 'us-east-1' is wrong; expecting 'ap-southeast-1'", "Tags": "|amazon-web-services|amazon-s3|aws-cloudformation|", "AnswerCount": "1", "CommentCount": "0", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "158340164", "PostHistoryTypeId": "2", "PostId": "46745297", "RevisionGUID": "c812ed16-2514-477e-ba48-7e0333fe6fa9", "CreationDate": "2017-10-14T13:49:40.113", "UserId": "292291", "Text": "I am trying to deploy my lambda functions using CloudFormation StackSets to multiple AWS accounts and regions. But failed because of the below error\r\n\r\n> ResourceLogicalId:OfficeHoursAutoScalingStart, ResourceType:AWS::Lambda::Function, ResourceStatusReason:Error occurred while GetObject. S3 Error Code: AuthorizationHeaderMalformed. S3 Error Message: The authorization header is malformed; the region 'us-east-1' is wrong; expecting 'ap-southeast-1'\r\n\r\nIt seems like its a permissions thing? How do I resolve this? \r\n\r\nMy template:\r\n\r\n    AWSTemplateFormatVersion : '2010-09-09'\r\n    Description: 'Skynet. AWS Management Assistant'\r\n    Parameters:\r\n      AppName:\r\n        Type: String\r\n        Description: Prefix for resources\r\n        Default: skynet-lambda-stackset\r\n      ArtifactsBucket:\r\n        Type: String\r\n        Description: S3 bucket storing lambda function zip\r\n      ArtifactZipPath:\r\n        Type: String\r\n        Description: Path to lambda function zip\r\n      CostCenter:\r\n        Type: String\r\n        Description: Cost center\r\n        Default: Admin\r\n      Owner:\r\n        Type: String\r\n        Description: Owner\r\n        Default: Jiew Meng\r\n    \r\n    Resources:\r\n      LambdaRole:\r\n        Type: AWS::IAM::Role\r\n        Properties:\r\n          RoleName: !Sub '${AppName}-lambda'\r\n          AssumeRolePolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n            - Effect: Allow\r\n              Principal:\r\n                Service:\r\n                  - lambda.amazonaws.com\r\n                  - apigateway.amazonaws.com\r\n              Action:\r\n              - sts:AssumeRole\r\n          ManagedPolicyArns:\r\n            - 'arn:aws:iam::aws:policy/AmazonEC2FullAccess'\r\n            - 'arn:aws:iam::aws:policy/AWSLambdaFullAccess'\r\n            - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'\r\n            - 'arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess'\r\n            - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'\r\n    \r\n      NewEc2AutoTag:\r\n        Type: AWS::Lambda::Function\r\n        Properties:\r\n          Code:\r\n            S3Bucket: !Ref ArtifactsBucket\r\n            S3Key: !Ref ArtifactZipPath\r\n          Handler: ec2/newEc2_autoTag.handler\r\n          Runtime: nodejs6.10\r\n          FunctionName: 'NewEC2_AutoTag'\r\n          Description: 'Auto tag new EC2 instances with Owner tag'\r\n          Timeout: 30\r\n          Role: !GetAtt LambdaRole.Arn\r\n          Tags:\r\n            - Key: Cost Center\r\n              Value: !Ref CostCenter\r\n            - Key: Owner\r\n              Value: !Ref Owner\r\n    \r\n      NewEc2Event:\r\n        Type: AWS::Events::Rule\r\n        Properties:\r\n          Name: !Sub ${AppName}-newEc2\r\n          Description: On new EC2 instance created\r\n          EventPattern:\r\n            source:\r\n              - 'aws.ec2'\r\n            detail-type:\r\n              - 'AWS API Call via CloudTrail'\r\n            detail:\r\n              eventName:\r\n                - RunInstances\r\n          Targets:\r\n            - !Ref NewEc2AutoTag\r\n    \r\n      AfterhoursEc2Shutdown:\r\n        Type: AWS::Lambda::Function\r\n        Properties:\r\n          Code:\r\n            S3Bucket: !Ref ArtifactsBucket\r\n            S3Key: !Ref ArtifactZipPath\r\n          Handler: ec2/afterHours_shutdown.handler\r\n          Runtime: nodejs6.10\r\n          FunctionName: 'Afterhours_Shutdown'\r\n          Description: 'Shutdown instances tagged Auto Shutdown: true'\r\n          Timeout: 30\r\n          Role: !GetAtt LambdaRole.Arn\r\n          Tags:\r\n            - Key: Cost Center\r\n              Value: !Ref CostCenter\r\n            - Key: Owner\r\n              Value: !Ref Owner\r\n    \r\n      AfterHoursEvent:\r\n        Type: AWS::Events::Rule\r\n        Properties:\r\n          Name: !Sub ${AppName}-afterHours\r\n          Description: Triggered on weekdays 2400 SGT\r\n          ScheduleExpression: cron(0 16 ? * MON,TUE,WED,THUR,FRI *)\r\n          Targets:\r\n            - !Ref AfterhoursEc2Shutdown\r\n            - !Ref AfterhoursAutoScalingShutdown\r\n    \r\n      OfficeHoursEc2Start:\r\n        Type: AWS::Lambda::Function\r\n        Properties:\r\n          Code:\r\n            S3Bucket: !Ref ArtifactsBucket\r\n            S3Key: !Ref ArtifactZipPath\r\n          Handler: ec2/officeHours_start.handler\r\n          Runtime: nodejs6.10\r\n          FunctionName: 'OfficeHours_Start'\r\n          Description: 'Starts instances with Auto Shutdown: true'\r\n          Timeout: 30\r\n          Role: !GetAtt LambdaRole.Arn\r\n          Tags:\r\n            - Key: Cost Center\r\n              Value: !Ref CostCenter\r\n            - Key: Owner\r\n              Value: !Ref Owner\r\n    \r\n      OfficeHoursEvent:\r\n        Type: AWS::Events::Rule\r\n        Properties:\r\n          Name: !Sub ${AppName}-officeHours\r\n          Description: Triggered on 7AM SGT weekdays\r\n          ScheduleExpression: cron(0 23 ? * SUN,MON,TUE,WED,THU *)\r\n          Targets:\r\n            - !Ref OfficeHoursEc2Start\r\n            - !Ref OfficeHoursAutoScalingStart\r\n    \r\n      StartedEc2ConfigureDns:\r\n        Type: AWS::Lambda::Function\r\n        Properties:\r\n          Code:\r\n            S3Bucket: !Ref ArtifactsBucket\r\n            S3Key: !Ref ArtifactZipPath\r\n          Handler: ec2/started_configureDns.handler\r\n          Runtime: nodejs6.10\r\n          FunctionName: 'StartedEc2_ConfigureDns'\r\n          Description: 'When EC2 started, configure DNS if required'\r\n          Timeout: 30\r\n          Role: !GetAtt LambdaRole.Arn\r\n          Tags:\r\n            - Key: Cost Center\r\n              Value: !Ref CostCenter\r\n            - Key: Owner\r\n              Value: !Ref Owner\r\n    \r\n      Ec2StartedEvent:\r\n        Type: AWS::Events::Rule\r\n        Properties:\r\n          Name: !Sub ${AppName}-ec2-started\r\n          Description: Triggered on EC2 starts\r\n          EventPattern:\r\n            source:\r\n              - 'aws.ec2'\r\n            detail-type:\r\n              - 'EC2 Instance State-change Notification'\r\n            detail:\r\n              state:\r\n                - running\r\n          Targets:\r\n            - !Ref StartedEc2ConfigureDns\r\n    \r\n      AfterhoursAutoScalingShutdown:\r\n        Type: AWS::Lambda::Function\r\n        Properties:\r\n          Code:\r\n            S3Bucket: !Ref ArtifactsBucket\r\n            S3Key: !Ref ArtifactZipPath\r\n          Handler: autoscaling/afterHours_shutdown.handler\r\n          Runtime: nodejs6.10\r\n          FunctionName: 'Afterhours_AutoScalingShutdown'\r\n          Description: 'Scales down autoscaling groups tagged Auto Shutdown: true'\r\n          Timeout: 30\r\n          Role: !GetAtt LambdaRole.Arn\r\n          Tags:\r\n            - Key: Cost Center\r\n              Value: !Ref CostCenter\r\n            - Key: Owner\r\n              Value: !Ref Owner\r\n    \r\n      OfficeHoursAutoScalingStart:\r\n        Type: AWS::Lambda::Function\r\n        Properties:\r\n          Code:\r\n            S3Bucket: !Ref ArtifactsBucket\r\n            S3Key: !Ref ArtifactZipPath\r\n          Handler: autoscaling/officeHours_start.handler\r\n          Runtime: nodejs6.10\r\n          FunctionName: 'OfficeHours_AutoScalingStart'\r\n          Description: 'Scales up auto scaling groups that are scaled down to 0 and tagged autostart: true'\r\n          Timeout: 30\r\n          Role: !GetAtt LambdaRole.Arn\r\n          Tags:\r\n            - Key: Cost Center\r\n              Value: !Ref CostCenter\r\n            - Key: Owner\r\n              Value: !Ref Owner\r\n    \r\n      NewAutoScalingGroupEvent:\r\n        Type: AWS::Events::Rule\r\n        Properties:\r\n          Name: !Sub ${AppName}-autoscaling-new\r\n          Description: Triggered when new autoscaling group created\r\n          EventPattern:\r\n            source:\r\n              - 'aws.autoscaling'\r\n            detail-type:\r\n              - 'AWS API Call via CloudTrail'\r\n            detail:\r\n              eventName:\r\n                - CreateAutoScalingGroup\r\n          Targets:\r\n            - !Ref NewAutoScalingGroupAutoTag\r\n    \r\n      NewAutoScalingGroupAutoTag:\r\n        Type: AWS::Lambda::Function\r\n        Properties:\r\n          Code:\r\n            S3Bucket: !Ref ArtifactsBucket\r\n            S3Key: !Ref ArtifactZipPath\r\n          Handler: autoscaling/new_autoTag.handler\r\n          Runtime: nodejs6.10\r\n          FunctionName: 'NewAutoScalingGroup_AutoTag'\r\n          Description: 'Tags new autoscaling groups with owner and autoshutdown tags if not existing'\r\n          Timeout: 30\r\n          Role: !GetAtt LambdaRole.Arn\r\n          Tags:\r\n            - Key: Cost Center\r\n              Value: !Ref CostCenter\r\n            - Key: Owner\r\n              Value: !Ref Owner\r\n\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "My template: AWSTemplateFormatVersion : '2010-09-09' Description: 'Skynet. AWS Management Assistant' Parameters: AppName: Type: String Description: Prefix for resources Default: skynet-lambda-stackset ArtifactsBucket: Type: String Description: S3 bucket storing lambda function zip ArtifactZipPath: Type: String Description: Path to lambda function zip CostCenter: Type: String Description: Cost center Default: Admin Owner: Type: String Description: Owner Default: Jiew Meng Resources: LambdaRole: Type: AWS::IAM::Role Properties: RoleName: !Sub '${AppName}-lambda' AssumeRolePolicyDocument: Version: '2012-10-17' Statement: - Effect: Allow Principal: Service: - lambda.amazonaws.com - apigateway.amazonaws.com Action: - sts:AssumeRole ManagedPolicyArns: - 'arn:aws:iam::aws:policy/AmazonEC2FullAccess' - 'arn:aws:iam::aws:policy/AWSLambdaFullAccess' - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess' - 'arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess' - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess' NewEc2AutoTag: Type: AWS::Lambda::Function Properties: Code: S3Bucket: !Ref ArtifactsBucket S3Key: !Ref ArtifactZipPath Handler: ec2/newEc2_autoTag.handler Runtime: nodejs6.10 FunctionName: 'NewEC2_AutoTag' Description: 'Auto tag new EC2 instances with Owner tag' Timeout: 30 Role: !GetAtt LambdaRole.Arn Tags: - Key: Cost Center Value: !Ref CostCenter - Key: Owner Value: !Ref Owner NewEc2Event: Type: AWS::Events::Rule Properties: Name: !Sub ${AppName}-newEc2 Description: On new EC2 instance created EventPattern: source: - 'aws.ec2' detail-type: - 'AWS API Call via CloudTrail' detail: eventName: - RunInstances Targets: - !Ref NewEc2AutoTag AfterhoursEc2Shutdown: Type: AWS::Lambda::Function Properties: Code: S3Bucket: !Ref ArtifactsBucket S3Key: !Ref ArtifactZipPath Handler: ec2/afterHours_shutdown.handler Runtime: nodejs6.10 FunctionName: 'Afterhours_Shutdown' Description: 'Shutdown instances tagged Auto Shutdown: true' Timeout: 30 Role: !GetAtt LambdaRole.Arn Tags: - Key: Cost Center Value: !Ref CostCenter - Key: Owner Value: !Ref Owner AfterHoursEvent: Type: AWS::Events::Rule Properties: Name: !Sub ${AppName}-afterHours Description: Triggered on weekdays 2400 SGT ScheduleExpression: cron(0 16 ? * MON,TUE,WED,THUR,FRI *) Targets: - !Ref AfterhoursEc2Shutdown - !Ref AfterhoursAutoScalingShutdown OfficeHoursEc2Start: Type: AWS::Lambda::Function Properties: Code: S3Bucket: !Ref ArtifactsBucket S3Key: !Ref ArtifactZipPath Handler: ec2/officeHours_start.handler Runtime: nodejs6.10 FunctionName: 'OfficeHours_Start' Description: 'Starts instances with Auto Shutdown: true' Timeout: 30 Role: !GetAtt LambdaRole.Arn Tags: - Key: Cost Center Value: !Ref CostCenter - Key: Owner Value: !Ref Owner OfficeHoursEvent: Type: AWS::Events::Rule Properties: Name: !Sub ${AppName}-officeHours Description: Triggered on 7AM SGT weekdays ScheduleExpression: cron(0 23 ? * SUN,MON,TUE,WED,THU *) Targets: - !Ref OfficeHoursEc2Start - !Ref OfficeHoursAutoScalingStart StartedEc2ConfigureDns: Type: AWS::Lambda::Function Properties: Code: S3Bucket: !Ref ArtifactsBucket S3Key: !Ref ArtifactZipPath Handler: ec2/started_configureDns.handler Runtime: nodejs6.10 FunctionName: 'StartedEc2_ConfigureDns' Description: 'When EC2 started, configure DNS if required' Timeout: 30 Role: !GetAtt LambdaRole.Arn Tags: - Key: Cost Center Value: !Ref CostCenter - Key: Owner Value: !Ref Owner Ec2StartedEvent: Type: AWS::Events::Rule Properties: Name: !Sub ${AppName}-ec2-started Description: Triggered on EC2 starts EventPattern: source: - 'aws.ec2' detail-type: - 'EC2 Instance State-change Notification' detail: state: - running Targets: - !Ref StartedEc2ConfigureDns AfterhoursAutoScalingShutdown: Type: AWS::Lambda::Function Properties: Code: S3Bucket: !Ref ArtifactsBucket S3Key: !Ref ArtifactZipPath Handler: autoscaling/afterHours_shutdown.handler Runtime: nodejs6.10 FunctionName: 'Afterhours_AutoScalingShutdown' Description: 'Scales down autoscaling groups tagged Auto Shutdown: true' Timeout: 30 Role: !GetAtt LambdaRole.Arn Tags: - Key: Cost Center Value: !Ref CostCenter - Key: Owner Value: !Ref Owner OfficeHoursAutoScalingStart: Type: AWS::Lambda::Function Properties: Code: S3Bucket: !Ref ArtifactsBucket S3Key: !Ref ArtifactZipPath Handler: autoscaling/officeHours_start.handler Runtime: nodejs6.10 FunctionName: 'OfficeHours_AutoScalingStart' Description: 'Scales up auto scaling groups that are scaled down to 0 and tagged autostart: true' Timeout: 30 Role: !GetAtt LambdaRole.Arn Tags: - Key: Cost Center Value: !Ref CostCenter - Key: Owner Value: !Ref Owner NewAutoScalingGroupEvent: Type: AWS::Events::Rule Properties: Name: !Sub ${AppName}-autoscaling-new Description: Triggered when new autoscaling group created EventPattern: source: - 'aws.autoscaling' detail-type: - 'AWS API Call via CloudTrail' detail: eventName: - CreateAutoScalingGroup Targets: - !Ref NewAutoScalingGroupAutoTag NewAutoScalingGroupAutoTag: Type: AWS::Lambda::Function Properties: Code: S3Bucket: !Ref ArtifactsBucket S3Key: !Ref ArtifactZipPath Handler: autoscaling/new_autoTag.handler Runtime: nodejs6.10 FunctionName: 'NewAutoScalingGroup_AutoTag' Description: 'Tags new autoscaling groups with owner and autoshutdown tags if not existing' Timeout: 30 Role: !GetAtt LambdaRole.Arn Tags: - Key: Cost Center Value: !Ref CostCenter - Key: Owner Value: !Ref Owner", "keywords": ["cost", "instance", "policy", "change"]}]}, {"Id": "158340165", "PostHistoryTypeId": "1", "PostId": "46745297", "RevisionGUID": "c812ed16-2514-477e-ba48-7e0333fe6fa9", "CreationDate": "2017-10-14T13:49:40.113", "UserId": "292291", "Text": "CloudFormation StackSet S3 Error: the region 'us-east-1' is wrong; expecting 'ap-southeast-1'", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "158340166", "PostHistoryTypeId": "3", "PostId": "46745297", "RevisionGUID": "c812ed16-2514-477e-ba48-7e0333fe6fa9", "CreationDate": "2017-10-14T13:49:40.113", "UserId": "292291", "Text": "|amazon-web-services|amazon-s3|aws-cloudformation|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "46749308", "PostTypeId": "2", "ParentId": "46745297", "CreationDate": "2017-10-14T21:03:47.467", "Score": "11", "Body": "<p>Looks like you have created the s3 bucket (referenced by variable <code>ArtifactsBucket</code> in your template) in AWS region <code>ap-southeast-1</code>. </p>\n\n<p>Using AWS Stacksets, You have selected <code>us-east-1</code> as one of the regions in <strong><em>Deployment Order</em></strong>. </p>\n\n<p>The AWS Stackset passes the <strong>SAME parameters</strong> to all the stacks which it tries to create in multiple regions/accounts.</p>\n\n<p>So when it is trying to create the lambda function <code>OfficeHoursAutoScalingStart</code> in <code>us-east-1</code> region, It is tryin to access the s3 bucket(GETObject request) in <code>us-east-1</code> region itself, with the same bucket name. </p>\n\n<p>ie. It is presuming that the s3 bucket with name passed by <code>ArtifactsBucket</code>parameter, is present in us-east-1 itself.But since the source code of the lambda function is actually in the bucket present in region <code>ap-southeast-1</code>,the <code>header malformed error</code> is thrown. In this case the bucket name is matching, but the region is not.</p>\n\n<p>Currently, when you create lambda function using CloudFormation, <em>there is a restriction that the S3 bucket that contains the source code of your Lambda function must be in the SAME region as the STACK which you are creating</em>. <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html\" rel=\"noreferrer\">Doc Reference Link</a></p>\n\n<p>If this is the issue, then as a fix, you can think of creating s3 buckets (add region-name as a prefix to the bucket name) in the required regions and use them in the template based on the region.</p>\n\n<pre><code>Example:\nus-east-1-lambdabkt\nus-east-2-lambdabkt\nap-southeast-1-lambdabkt\n</code></pre>\n", "OwnerUserId": "7828093", "LastActivityDate": "2017-10-14T21:03:47.467", "CommentCount": "1", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "80448590", "PostId": "46749308", "Score": "0", "Text": "I solved the error with your suggestions already. But now I encounter another permissions error: https://stackoverflow.com/questions/46751355/aws-cloudformation-stackset-s3-accessdenied maybe you can help too :)", "CreationDate": "2017-10-15T03:20:20.490", "UserId": "292291", "filtered-sentences": []}], "history": [{"Id": "158356928", "PostHistoryTypeId": "2", "PostId": "46749308", "RevisionGUID": "f5ae2f2a-0e2f-4b5b-bf52-f04dc8eeb5a5", "CreationDate": "2017-10-14T21:03:47.467", "UserId": "7828093", "Text": "Looks like you have created the s3 bucket (referenced by variable `ArtifactsBucket` in your template) in AWS region `ap-southeast-1`. \r\n\r\nUsing AWS Stacksets, You have selected `us-east-1` as one of the regions in ***Deployment Order***. \r\n\r\nThe AWS Stackset passes the **SAME parameters** to all the stacks which it tries to create in multiple regions/accounts.\r\n\r\nSo when it is trying to create the lambda function `OfficeHoursAutoScalingStart` in `us-east-1` region, It is tryin to access the s3 bucket(GETObject request) in `us-east-1` region itself, with the same bucket name. \r\n\r\nie. It is presuming that the s3 bucket with name passed by `ArtifactsBucket`parameter, is present in us-east-1 itself.But since the source code of the lambda function is actually in the bucket present in region `ap-southeast-1`,the `header malformed error` is thrown. In this case the bucket name is matching, but the region is not.\r\n\r\nCurrently, when you create lambda function using CloudFormation, *there is a restriction that the S3 bucket that contains the source code of your Lambda function must be in the SAME region as the STACK which you are creating*. [Doc Reference Link][1]\r\n\r\nIf this is the issue, then as a fix, you can think of creating s3 buckets (add region-name as a prefix to the bucket name) in the required regions and use them in the template based on the region.\r\n\r\n    Example:\r\n    us-east-1-lambdabkt\r\n    us-east-2-lambdabkt\r\n    ap-southeast-1-lambdabkt\r\n\r\n\r\n\r\n  [1]: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}