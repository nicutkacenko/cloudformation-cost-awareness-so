{"Id": "33336346", "PostTypeId": "1", "CreationDate": "2015-10-25T23:34:52.087", "Score": "3", "ViewCount": "1309", "Body": "<p>I am reading about Amazon CloudFormation and want to launch this CF template <a href=\"https://s3.amazonaws.com/cloudformation-templates-us-east-1/WordPress_Single_Instance_With_RDS.template\" rel=\"nofollow noreferrer\">https://s3.amazonaws.com/cloudformation-templates-us-east-1/WordPress_Single_Instance_With_RDS.template</a> which has been provided by \"Getting Started\" of Amazon.</p>\n\n<p>Before I have removed default VPC and subnets, so now I need to specify its directly. After googling I have edited above template to such view:</p>\n\n<pre><code>{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n\n  \"Description\" : \"AWS CloudFormation Sample Template WordPress_Single_Instance_With_RDS: WordPress is web software you can use to create a website or blog. This template installs a single-instance WordPress deployment that uses an Amazon RDS database instance for storage. It demonstrates using the AWS CloudFormation bootstrap scripts to install packages and files when an instance is launched. **WARNING** This template creates an Amazon EC2 instance and an Amazon RDS database instance. You will be billed for the AWS resources used if you create a stack from this template.\",\n\n  \"Parameters\" : {\n\n    \"KeyName\": {\n      \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instances\",\n      \"Type\": \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"255\",\n      \"AllowedPattern\" : \"[\\\\x20-\\\\x7E]*\",\n      \"ConstraintDescription\" : \"can contain only ASCII characters.\"\n    },\n\n    \"InstanceType\" : {\n      \"Description\" : \"WebServer EC2 instance type\",\n      \"Type\" : \"String\",\n      \"Default\" : \"t1.micro\",\n      \"AllowedValues\" : [ \"t1.micro\", \"t2.micro\", \"t2.small\", \"t2.medium\", \"m3.medium\", \"m3.large\", \"m3.xlarge\", \"m3.2xlarge\" ],\n      \"ConstraintDescription\" : \"must be a valid EC2 instance type.\"\n    },\n\n    \"myVPC\": {\n        \"Description\" : \"Id of my VPC\",\n        \"Type\"        : \"String\",\n        \"Default\"     : \"vpc-1bcf9e7e\"\n    },\n\n    \"MySubnet\": {\n        \"Description\" : \"My subnet from my VPC\",\n        \"Type\": \"String\",\n        \"Default\": \"subnet-75eec810\"\n    },\n\n    \"RDSSubnets\": {\n        \"Description\" : \"RDS subnets from my VPC\",\n        \"Type\": \"CommaDelimitedList\",\n        \"Default\": \"subnet-75eec810,subnet-448bcc33\"\n    },\n\n    \"DBClass\" : {\n      \"Default\" : \"db.t1.micro\",\n      \"Description\" : \"Database instance class\",\n      \"Type\" : \"String\",\n      \"AllowedValues\" : [ \"db.t1.micro\", \"db.t2.micro\", \"db.t2.small\", \"db.t2.medium\", \"db.m3.medium\", \"db.m3.large\", \"db.m3.xlarge\", \"db.m3.2xlarge\" ],\n      \"ConstraintDescription\" : \"must select a valid database instance type.\"\n    },\n\n    \"DBName\" : {\n      \"Default\": \"wordpress\",\n      \"Description\" : \"The WordPress database name\",\n      \"Type\": \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"64\",\n      \"AllowedPattern\" : \"[a-zA-Z][a-zA-Z0-9]*\",\n      \"ConstraintDescription\" : \"must begin with a letter and contain only alphanumeric characters.\"\n    },\n\n    \"DBUsername\" : {\n      \"Default\": \"admin\",\n      \"NoEcho\": \"true\",\n      \"Description\" : \"The WordPress database admin account username\",\n      \"Type\": \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"16\",\n      \"AllowedPattern\" : \"[a-zA-Z][a-zA-Z0-9]*\",\n      \"ConstraintDescription\" : \"must begin with a letter and contain only alphanumeric characters.\"\n    },\n\n    \"DBPassword\" : {\n      \"Default\": \"password\",\n      \"NoEcho\": \"true\",\n      \"Description\" : \"The WordPress database admin account password\",\n      \"Type\": \"String\",\n      \"MinLength\": \"8\",\n      \"MaxLength\": \"41\",\n      \"AllowedPattern\" : \"[a-zA-Z0-9]*\",\n      \"ConstraintDescription\" : \"must contain only alphanumeric characters.\"\n    },\n\n    \"DBAllocatedStorage\" : {\n      \"Default\": \"5\",\n      \"Description\" : \"The size of the database (Gb)\",\n      \"Type\": \"Number\",\n      \"MinValue\": \"5\",\n      \"MaxValue\": \"1024\",\n      \"ConstraintDescription\" : \"must be between 5 and 1024Gb.\"\n    },\n    \"SSHLocation\" : {\n      \"Description\" : \" The IP address range that can be used to SSH to the EC2 instances\",\n      \"Type\": \"String\",\n      \"MinLength\": \"9\",\n      \"MaxLength\": \"18\",\n      \"Default\": \"0.0.0.0/0\",\n      \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\",\n      \"ConstraintDescription\": \"must be a valid IP CIDR range of the form x.x.x.x/x.\"\n    }\n  },\n\n  \"Mappings\" : {\n      \"AWSInstanceType2Arch\" : {\n      \"t1.micro\"    : { \"Arch\" : \"PV64\"  },\n      \"t2.micro\"    : { \"Arch\" : \"HVM64\"  },\n      \"t2.small\"    : { \"Arch\" : \"HVM64\"  },\n      \"t2.medium\"   : { \"Arch\" : \"HVM64\"  },\n      \"m3.medium\"   : { \"Arch\" : \"PV64\"   },\n      \"m3.large\"    : { \"Arch\" : \"PV64\"   },\n      \"m3.xlarge\"   : { \"Arch\" : \"PV64\"   },\n      \"m3.2xlarge\"  : { \"Arch\" : \"PV64\"   }\n    },\n\n    \"AWSRegionArch2AMI\" : {\n      \"us-east-1\"      : { \"PV64\" : \"ami-7c807d14\", \"HVM64\" : \"ami-76817c1e\" },\n      \"us-west-2\"      : { \"PV64\" : \"ami-1b3b462b\", \"HVM64\" : \"ami-d13845e1\" },\n      \"us-west-1\"      : { \"PV64\" : \"ami-a8d3d4ed\", \"HVM64\" : \"ami-f0d3d4b5\" },\n      \"eu-west-1\"      : { \"PV64\" : \"ami-672ce210\", \"HVM64\" : \"ami-892fe1fe\" },\n      \"ap-southeast-1\" : { \"PV64\" : \"ami-56b7eb04\", \"HVM64\" : \"ami-a6b6eaf4\" },\n      \"ap-northeast-1\" : { \"PV64\" : \"ami-25dd9324\", \"HVM64\" : \"ami-29dc9228\" },\n      \"ap-southeast-2\" : { \"PV64\" : \"ami-6bf99c51\", \"HVM64\" : \"ami-d9fe9be3\" },\n      \"sa-east-1\"      : { \"PV64\" : \"ami-c7e649da\", \"HVM64\" : \"ami-c9e649d4\" },\n      \"us-gov-west-1\"  : { \"PV64\" : \"ami-ab4a2d88\", \"HVM64\" : \"ami-a54a2d86\" },\n      \"cn-north-1\"     : { \"PV64\" : \"ami-cab82af3\", \"HVM64\" : \"ami-ccb82af5\" }\n    }\n  },\n\n  \"Resources\" : {\n\n    \"WebServer\": {\n      \"Type\": \"AWS::EC2::Instance\",\n      \"Metadata\" : {\n        \"AWS::CloudFormation::Init\" : {\n          \"config\" : {\n            \"packages\" : {\n              \"yum\" : {\n                \"httpd\"     : [],\n                \"php\"       : [],\n                \"php-mysql\" : []\n              }\n            },\n            \"sources\" : {\n              \"/var/www/html\" : \"http://wordpress.org/latest.tar.gz\"\n            },\n            \"files\" : {\n              \"/var/www/html/wordpress/wp-config.php\" : {\n                \"content\" : { \"Fn::Join\" : [\"\", [\n                  \"&lt;?php\\n\",\n                  \"define('DB_NAME',          '\", {\"Ref\" : \"DBName\"}, \"');\\n\",\n                  \"define('DB_USER',          '\", {\"Ref\" : \"DBUsername\"}, \"');\\n\",\n                  \"define('DB_PASSWORD',      '\", {\"Ref\" : \"DBPassword\" }, \"');\\n\",\n                  \"define('DB_HOST',          '\", {\"Fn::GetAtt\" : [\"DBInstance\", \"Endpoint.Address\"]},\"');\\n\",\n                  \"define('DB_CHARSET',       'utf8');\\n\",\n                  \"define('DB_COLLATE',       '');\\n\"\n                ]] },\n                \"mode\" : \"000644\",\n                \"owner\" : \"root\",\n                \"group\" : \"root\"\n              }\n            },\n            \"services\" : {\n              \"sysvinit\" : {\n                \"httpd\"    : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\" },\n                \"sendmail\" : { \"enabled\" : \"false\", \"ensureRunning\" : \"false\" }\n              }\n            }\n          }\n        }\n      },\n      \"Properties\": {\n        \"SubnetId\": { \"Ref\": \"MySubnet\" },\n        \"ImageId\" : { \"Fn::FindInMap\" : [ \"AWSRegionArch2AMI\", { \"Ref\" : \"AWS::Region\" },\n                          { \"Fn::FindInMap\" : [ \"AWSInstanceType2Arch\", { \"Ref\" : \"InstanceType\" }, \"Arch\" ] } ] },\n        \"InstanceType\"   : { \"Ref\" : \"InstanceType\" },\n        \"SecurityGroupIds\" : [ {\"Ref\" : \"WebServerSecurityGroup\"} ],\n        \"KeyName\"        : { \"Ref\" : \"KeyName\" },\n        \"UserData\"       : { \"Fn::Base64\" : { \"Fn::Join\" : [\"\", [\n          \"#!/bin/bash\\n\",\n          \"yum update -y aws-cfn-bootstrap\\n\",\n\n          \"/opt/aws/bin/cfn-init -s \", { \"Ref\" : \"AWS::StackId\" }, \" -r WebServer \",\n          \"         --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\",\n\n          \"/opt/aws/bin/cfn-signal -e $? '\", { \"Ref\" : \"WaitHandle\" }, \"'\\n\",\n\n          \"# Setup correct file ownership\\n\",\n          \"chown -R apache:apache /var/www/html/wordpress\\n\",\n\n          \"# Add keys and salts to the config file\\n\",\n          \"wp_config=/var/www/html/wordpress/wp-config.php\\n\",\n          \"GET https://api.wordpress.org/secret-key/1.1/salt/ &gt;&gt; $wp_config\\n\",\n          \"echo \\\"define('WPLANG'            , '');\\\" &gt;&gt; $wp_config\\n\",\n          \"echo \\\"define('WP_DEBUG'          , false);\\\" &gt;&gt; $wp_config\\n\", \n          \"echo \\\"\\\\$table_prefix  = 'wp_';\\\" &gt;&gt; $wp_config\\n\",\n          \"echo \\\"if ( !defined('ABSPATH') )\\\" &gt;&gt; $wp_config\\n\",\n          \"echo \\\"    define('ABSPATH', dirname(__FILE__) . '/');\\\" &gt;&gt; $wp_config\\n\",\n          \"echo \\\"require_once(ABSPATH . 'wp-settings.php');\\\" &gt;&gt; $wp_config\\n\"\n\n        ]]}}\n      }\n    },\n\n    \"WaitHandle\" : {\n      \"Type\" : \"AWS::CloudFormation::WaitConditionHandle\"\n    },\n\n    \"WaitCondition\" : {\n      \"Type\" : \"AWS::CloudFormation::WaitCondition\",\n      \"DependsOn\" : \"WebServer\",\n      \"Properties\" : {\n        \"Handle\" : {\"Ref\" : \"WaitHandle\"},\n        \"Timeout\" : \"1200\"\n      }\n    },\n\n    \"DBInstance\" : {\n      \"Type\": \"AWS::RDS::DBInstance\",\n      \"Properties\": {\n        \"DBSubnetGroupName\" : { \"Ref\" : \"MyDBSubnetGroup\" },\n        \"VPCSecurityGroups\" : [ { \"Ref\" : \"DBSecurityGroup\" } ],\n        \"DBName\"            : { \"Ref\" : \"DBName\" },\n        \"Engine\"            : \"MySQL\",\n        \"MasterUsername\"    : { \"Ref\" : \"DBUsername\" },\n        \"DBInstanceClass\"   : { \"Ref\" : \"DBClass\" },\n        \"DBSecurityGroups\"  : [{ \"Ref\" : \"DBSecurityGroup\" }],\n        \"AllocatedStorage\"  : { \"Ref\" : \"DBAllocatedStorage\" },\n        \"MasterUserPassword\": { \"Ref\" : \"DBPassword\" }\n      }\n    },\n\n    \"DBSecurityGroup\": {\n      \"Type\": \"AWS::RDS::DBSecurityGroup\",\n      \"Properties\": {\n        \"EC2VpcId\" : { \"Ref\" : \"myVPC\" },\n        \"DBSecurityGroupIngress\": { \"EC2SecurityGroupId\": { \"Fn::GetAtt\" : [ \"WebServerSecurityGroup\", \"GroupId\" ] } },\n        \"GroupDescription\"      : \"Frontend Access\"\n      }\n    },\n\n    \"WebServerSecurityGroup\" : {\n      \"Type\" : \"AWS::EC2::SecurityGroup\",\n      \"Properties\" : {\n        \"VpcId\" : {\"Ref\" : \"myVPC\"},\n        \"GroupDescription\" : \"Enable HTTP access via port 80 and SSH access\",\n        \"SecurityGroupIngress\" : [\n          {\"IpProtocol\" : \"tcp\", \"FromPort\" : \"80\", \"ToPort\" : \"80\", \"CidrIp\" : \"0.0.0.0/0\"},\n          {\"IpProtocol\" : \"tcp\", \"FromPort\" : \"22\", \"ToPort\" : \"22\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"}}\n        ]\n      }\n    },\n\n    \"MyDBSubnetGroup\" : {\n      \"Type\" : \"AWS::RDS::DBSubnetGroup\",\n      \"Properties\" : {\n        \"DBSubnetGroupDescription\" : \"Subnets available for the RDS DB Instance\",\n        \"SubnetIds\" : { \"Ref\" : \"RDSSubnets\" }\n      }\n    }\n  },\n\n  \"Outputs\" : {\n    \"WebsiteURL\" : {\n      \"Value\" : { \"Fn::Join\" : [\"\", [\"http://\", { \"Fn::GetAtt\" : [ \"WebServer\", \"PublicDnsName\" ]}, \"/wordpress\"]] },\n      \"Description\" : \"WordPress Website\"\n    }\n  }\n}\n</code></pre>\n\n<p><a href=\"http://pastebin.com/0cS9Ba0t\" rel=\"nofollow noreferrer\">http://pastebin.com/0cS9Ba0t</a></p>\n\n<p>Unfortunately now I have error which I dont know how to fix:</p>\n\n<pre><code>CREATE_FAILED   AWS::CloudFormation::WaitCondition  WaitCondition   WaitCondition timed out. Received 0 conditions when expecting 1\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/mbEFU.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/mbEFU.png\" alt=\"enter image description here\"></a></p>\n\n<p>What should be changed in this template?</p>\n", "OwnerUserId": "2971192", "LastEditorUserId": "2971192", "LastEditDate": "2015-10-26T08:54:04.197", "LastActivityDate": "2019-04-09T03:34:51.480", "Title": "AWS CloudFormation Wordpress template. WaitCondition timed out", "Tags": "|templates|amazon-web-services|cloud|aws-cloudformation|", "AnswerCount": "2", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "102634122", "PostHistoryTypeId": "2", "PostId": "33336346", "RevisionGUID": "238e3a77-4199-405a-b290-a9f111dbdb59", "CreationDate": "2015-10-25T23:34:52.087", "UserId": "2971192", "Text": "I am reading about Amazon CloudFormation and want to launch this CF template https://s3.amazonaws.com/cloudformation-templates-us-east-1/WordPress_Single_Instance_With_RDS.template which has been provided by \"Getting Started\" of Amazon.\r\n\r\nBefore I have removed default VPC and subnets, so now I need to specify its directly. After googling I have edited above template to such view:\r\n\r\n    {\r\n      \"AWSTemplateFormatVersion\" : \"2010-09-09\",\r\n    \r\n      \"Description\" : \"AWS CloudFormation Sample Template WordPress_Single_Instance_With_RDS: WordPress is web software you can use to create a website or blog. This template installs a single-instance WordPress deployment that uses an Amazon RDS database instance for storage. It demonstrates using the AWS CloudFormation bootstrap scripts to install packages and files when an instance is launched. **WARNING** This template creates an Amazon EC2 instance and an Amazon RDS database instance. You will be billed for the AWS resources used if you create a stack from this template.\",\r\n    \r\n      \"Parameters\" : {\r\n    \r\n        \"KeyName\": {\r\n          \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instances\",\r\n          \"Type\": \"String\",\r\n          \"MinLength\": \"1\",\r\n          \"MaxLength\": \"255\",\r\n          \"AllowedPattern\" : \"[\\\\x20-\\\\x7E]*\",\r\n          \"ConstraintDescription\" : \"can contain only ASCII characters.\"\r\n        },\r\n    \r\n        \"InstanceType\" : {\r\n          \"Description\" : \"WebServer EC2 instance type\",\r\n          \"Type\" : \"String\",\r\n          \"Default\" : \"t1.micro\",\r\n          \"AllowedValues\" : [ \"t1.micro\", \"t2.micro\", \"t2.small\", \"t2.medium\", \"m3.medium\", \"m3.large\", \"m3.xlarge\", \"m3.2xlarge\" ],\r\n          \"ConstraintDescription\" : \"must be a valid EC2 instance type.\"\r\n        },\r\n    \r\n        \"myVPC\": {\r\n            \"Description\" : \"Id of my VPC\",\r\n            \"Type\"        : \"String\",\r\n            \"Default\"     : \"vpc-1bcf9e7e\"\r\n        },\r\n     \r\n        \"MySubnet\": {\r\n            \"Description\" : \"My subnet from my VPC\",\r\n            \"Type\": \"String\",\r\n            \"Default\": \"subnet-75eec810\"\r\n        },\r\n    \r\n        \"RDSSubnets\": {\r\n            \"Description\" : \"RDS subnets from my VPC\",\r\n            \"Type\": \"CommaDelimitedList\",\r\n            \"Default\": \"subnet-75eec810,subnet-448bcc33\"\r\n        },\r\n    \r\n        \"DBClass\" : {\r\n          \"Default\" : \"db.t1.micro\",\r\n          \"Description\" : \"Database instance class\",\r\n          \"Type\" : \"String\",\r\n          \"AllowedValues\" : [ \"db.t1.micro\", \"db.t2.micro\", \"db.t2.small\", \"db.t2.medium\", \"db.m3.medium\", \"db.m3.large\", \"db.m3.xlarge\", \"db.m3.2xlarge\" ],\r\n          \"ConstraintDescription\" : \"must select a valid database instance type.\"\r\n        },\r\n    \r\n        \"DBName\" : {\r\n          \"Default\": \"wordpress\",\r\n          \"Description\" : \"The WordPress database name\",\r\n          \"Type\": \"String\",\r\n          \"MinLength\": \"1\",\r\n          \"MaxLength\": \"64\",\r\n          \"AllowedPattern\" : \"[a-zA-Z][a-zA-Z0-9]*\",\r\n          \"ConstraintDescription\" : \"must begin with a letter and contain only alphanumeric characters.\"\r\n        },\r\n    \r\n        \"DBUsername\" : {\r\n          \"Default\": \"admin\",\r\n          \"NoEcho\": \"true\",\r\n          \"Description\" : \"The WordPress database admin account username\",\r\n          \"Type\": \"String\",\r\n          \"MinLength\": \"1\",\r\n          \"MaxLength\": \"16\",\r\n          \"AllowedPattern\" : \"[a-zA-Z][a-zA-Z0-9]*\",\r\n          \"ConstraintDescription\" : \"must begin with a letter and contain only alphanumeric characters.\"\r\n        },\r\n    \r\n        \"DBPassword\" : {\r\n          \"Default\": \"password\",\r\n          \"NoEcho\": \"true\",\r\n          \"Description\" : \"The WordPress database admin account password\",\r\n          \"Type\": \"String\",\r\n          \"MinLength\": \"8\",\r\n          \"MaxLength\": \"41\",\r\n          \"AllowedPattern\" : \"[a-zA-Z0-9]*\",\r\n          \"ConstraintDescription\" : \"must contain only alphanumeric characters.\"\r\n        },\r\n    \r\n        \"DBAllocatedStorage\" : {\r\n          \"Default\": \"5\",\r\n          \"Description\" : \"The size of the database (Gb)\",\r\n          \"Type\": \"Number\",\r\n          \"MinValue\": \"5\",\r\n          \"MaxValue\": \"1024\",\r\n          \"ConstraintDescription\" : \"must be between 5 and 1024Gb.\"\r\n        },\r\n        \"SSHLocation\" : {\r\n          \"Description\" : \" The IP address range that can be used to SSH to the EC2 instances\",\r\n          \"Type\": \"String\",\r\n          \"MinLength\": \"9\",\r\n          \"MaxLength\": \"18\",\r\n          \"Default\": \"0.0.0.0/0\",\r\n          \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\",\r\n          \"ConstraintDescription\": \"must be a valid IP CIDR range of the form x.x.x.x/x.\"\r\n        }\r\n      },\r\n    \r\n      \"Mappings\" : {\r\n          \"AWSInstanceType2Arch\" : {\r\n          \"t1.micro\"    : { \"Arch\" : \"PV64\"  },\r\n          \"t2.micro\"    : { \"Arch\" : \"HVM64\"  },\r\n          \"t2.small\"    : { \"Arch\" : \"HVM64\"  },\r\n          \"t2.medium\"   : { \"Arch\" : \"HVM64\"  },\r\n          \"m3.medium\"   : { \"Arch\" : \"PV64\"   },\r\n          \"m3.large\"    : { \"Arch\" : \"PV64\"   },\r\n          \"m3.xlarge\"   : { \"Arch\" : \"PV64\"   },\r\n          \"m3.2xlarge\"  : { \"Arch\" : \"PV64\"   }\r\n        },\r\n    \r\n        \"AWSRegionArch2AMI\" : {\r\n          \"us-east-1\"      : { \"PV64\" : \"ami-7c807d14\", \"HVM64\" : \"ami-76817c1e\" },\r\n          \"us-west-2\"      : { \"PV64\" : \"ami-1b3b462b\", \"HVM64\" : \"ami-d13845e1\" },\r\n          \"us-west-1\"      : { \"PV64\" : \"ami-a8d3d4ed\", \"HVM64\" : \"ami-f0d3d4b5\" },\r\n          \"eu-west-1\"      : { \"PV64\" : \"ami-672ce210\", \"HVM64\" : \"ami-892fe1fe\" },\r\n          \"ap-southeast-1\" : { \"PV64\" : \"ami-56b7eb04\", \"HVM64\" : \"ami-a6b6eaf4\" },\r\n          \"ap-northeast-1\" : { \"PV64\" : \"ami-25dd9324\", \"HVM64\" : \"ami-29dc9228\" },\r\n          \"ap-southeast-2\" : { \"PV64\" : \"ami-6bf99c51\", \"HVM64\" : \"ami-d9fe9be3\" },\r\n          \"sa-east-1\"      : { \"PV64\" : \"ami-c7e649da\", \"HVM64\" : \"ami-c9e649d4\" },\r\n          \"us-gov-west-1\"  : { \"PV64\" : \"ami-ab4a2d88\", \"HVM64\" : \"ami-a54a2d86\" },\r\n          \"cn-north-1\"     : { \"PV64\" : \"ami-cab82af3\", \"HVM64\" : \"ami-ccb82af5\" }\r\n        }\r\n      },\r\n    \r\n      \"Resources\" : {\r\n    \r\n        \"WebServer\": {\r\n          \"Type\": \"AWS::EC2::Instance\",\r\n          \"Metadata\" : {\r\n            \"AWS::CloudFormation::Init\" : {\r\n              \"config\" : {\r\n                \"packages\" : {\r\n                  \"yum\" : {\r\n                    \"httpd\"     : [],\r\n                    \"php\"       : [],\r\n                    \"php-mysql\" : []\r\n                  }\r\n                },\r\n                \"sources\" : {\r\n                  \"/var/www/html\" : \"http://wordpress.org/latest.tar.gz\"\r\n                },\r\n                \"files\" : {\r\n                  \"/var/www/html/wordpress/wp-config.php\" : {\r\n                    \"content\" : { \"Fn::Join\" : [\"\", [\r\n                      \"<?php\\n\",\r\n                      \"define('DB_NAME',          '\", {\"Ref\" : \"DBName\"}, \"');\\n\",\r\n                      \"define('DB_USER',          '\", {\"Ref\" : \"DBUsername\"}, \"');\\n\",\r\n                      \"define('DB_PASSWORD',      '\", {\"Ref\" : \"DBPassword\" }, \"');\\n\",\r\n                      \"define('DB_HOST',          '\", {\"Fn::GetAtt\" : [\"DBInstance\", \"Endpoint.Address\"]},\"');\\n\",\r\n                      \"define('DB_CHARSET',       'utf8');\\n\",\r\n                      \"define('DB_COLLATE',       '');\\n\"\r\n                    ]] },\r\n                    \"mode\" : \"000644\",\r\n                    \"owner\" : \"root\",\r\n                    \"group\" : \"root\"\r\n                  }\r\n                },\r\n                \"services\" : {\r\n                  \"sysvinit\" : {\r\n                    \"httpd\"    : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\" },\r\n                    \"sendmail\" : { \"enabled\" : \"false\", \"ensureRunning\" : \"false\" }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          },\r\n          \"Properties\": {\r\n            \"SubnetId\": { \"Ref\": \"MySubnet\" },\r\n            \"ImageId\" : { \"Fn::FindInMap\" : [ \"AWSRegionArch2AMI\", { \"Ref\" : \"AWS::Region\" },\r\n                              { \"Fn::FindInMap\" : [ \"AWSInstanceType2Arch\", { \"Ref\" : \"InstanceType\" }, \"Arch\" ] } ] },\r\n            \"InstanceType\"   : { \"Ref\" : \"InstanceType\" },\r\n            \"SecurityGroupIds\" : [ {\"Ref\" : \"WebServerSecurityGroup\"} ],\r\n            \"KeyName\"        : { \"Ref\" : \"KeyName\" },\r\n            \"UserData\"       : { \"Fn::Base64\" : { \"Fn::Join\" : [\"\", [\r\n              \"#!/bin/bash\\n\",\r\n              \"yum update -y aws-cfn-bootstrap\\n\",\r\n    \r\n              \"/opt/aws/bin/cfn-init -s \", { \"Ref\" : \"AWS::StackId\" }, \" -r WebServer \",\r\n              \"         --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\",\r\n    \r\n              \"/opt/aws/bin/cfn-signal -e $? '\", { \"Ref\" : \"WaitHandle\" }, \"'\\n\",\r\n    \r\n              \"# Setup correct file ownership\\n\",\r\n              \"chown -R apache:apache /var/www/html/wordpress\\n\",\r\n              \r\n              \"# Add keys and salts to the config file\\n\",\r\n              \"wp_config=/var/www/html/wordpress/wp-config.php\\n\",\r\n              \"GET https://api.wordpress.org/secret-key/1.1/salt/ >> $wp_config\\n\",\r\n              \"echo \\\"define('WPLANG'            , '');\\\" >> $wp_config\\n\",\r\n              \"echo \\\"define('WP_DEBUG'          , false);\\\" >> $wp_config\\n\", \r\n              \"echo \\\"\\\\$table_prefix  = 'wp_';\\\" >> $wp_config\\n\",\r\n              \"echo \\\"if ( !defined('ABSPATH') )\\\" >> $wp_config\\n\",\r\n              \"echo \\\"    define('ABSPATH', dirname(__FILE__) . '/');\\\" >> $wp_config\\n\",\r\n              \"echo \\\"require_once(ABSPATH . 'wp-settings.php');\\\" >> $wp_config\\n\"\r\n    \r\n            ]]}}\r\n          }\r\n        },\r\n    \r\n        \"WaitHandle\" : {\r\n          \"Type\" : \"AWS::CloudFormation::WaitConditionHandle\"\r\n        },\r\n    \r\n        \"WaitCondition\" : {\r\n          \"Type\" : \"AWS::CloudFormation::WaitCondition\",\r\n          \"DependsOn\" : \"WebServer\",\r\n          \"Properties\" : {\r\n            \"Handle\" : {\"Ref\" : \"WaitHandle\"},\r\n            \"Timeout\" : \"1200\"\r\n          }\r\n        },\r\n    \r\n        \"DBInstance\" : {\r\n          \"Type\": \"AWS::RDS::DBInstance\",\r\n          \"Properties\": {\r\n            \"DBSubnetGroupName\" : { \"Ref\" : \"MyDBSubnetGroup\" },\r\n            \"VPCSecurityGroups\" : [ { \"Ref\" : \"DBSecurityGroup\" } ],\r\n            \"DBName\"            : { \"Ref\" : \"DBName\" },\r\n            \"Engine\"            : \"MySQL\",\r\n            \"MasterUsername\"    : { \"Ref\" : \"DBUsername\" },\r\n            \"DBInstanceClass\"   : { \"Ref\" : \"DBClass\" },\r\n            \"DBSecurityGroups\"  : [{ \"Ref\" : \"DBSecurityGroup\" }],\r\n            \"AllocatedStorage\"  : { \"Ref\" : \"DBAllocatedStorage\" },\r\n            \"MasterUserPassword\": { \"Ref\" : \"DBPassword\" }\r\n          }\r\n        },\r\n    \r\n        \"DBSecurityGroup\": {\r\n          \"Type\": \"AWS::RDS::DBSecurityGroup\",\r\n          \"Properties\": {\r\n            \"EC2VpcId\" : { \"Ref\" : \"myVPC\" },\r\n            \"DBSecurityGroupIngress\": { \"EC2SecurityGroupId\": { \"Fn::GetAtt\" : [ \"WebServerSecurityGroup\", \"GroupId\" ] } },\r\n            \"GroupDescription\"      : \"Frontend Access\"\r\n          }\r\n        },\r\n    \r\n        \"WebServerSecurityGroup\" : {\r\n          \"Type\" : \"AWS::EC2::SecurityGroup\",\r\n          \"Properties\" : {\r\n            \"VpcId\" : {\"Ref\" : \"myVPC\"},\r\n            \"GroupDescription\" : \"Enable HTTP access via port 80 and SSH access\",\r\n            \"SecurityGroupIngress\" : [\r\n              {\"IpProtocol\" : \"tcp\", \"FromPort\" : \"80\", \"ToPort\" : \"80\", \"CidrIp\" : \"0.0.0.0/0\"},\r\n              {\"IpProtocol\" : \"tcp\", \"FromPort\" : \"22\", \"ToPort\" : \"22\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"}}\r\n            ]\r\n          }\r\n        },\r\n    \r\n        \"MyDBSubnetGroup\" : {\r\n          \"Type\" : \"AWS::RDS::DBSubnetGroup\",\r\n          \"Properties\" : {\r\n            \"DBSubnetGroupDescription\" : \"Subnets available for the RDS DB Instance\",\r\n            \"SubnetIds\" : { \"Ref\" : \"RDSSubnets\" }\r\n          }\r\n        }\r\n      },\r\n    \r\n      \"Outputs\" : {\r\n        \"WebsiteURL\" : {\r\n          \"Value\" : { \"Fn::Join\" : [\"\", [\"http://\", { \"Fn::GetAtt\" : [ \"WebServer\", \"PublicDnsName\" ]}, \"/wordpress\"]] },\r\n          \"Description\" : \"WordPress Website\"\r\n        }\r\n      }\r\n    }\r\n\r\nhttp://pastebin.com/0cS9Ba0t\r\n\r\nUnfortunately now I have error which I dont know how to fix:\r\n\r\n    The following resource(s) failed to create: [WaitCondition]. . Rollback requested by user.\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/mbEFU.png\r\n\r\nWhat should be changed in this template?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "This template installs a single-instance WordPress deployment that uses an Amazon RDS database instance for storage. ", "keywords": ["instance", "storage"]}, {"source": "Text", "text": "It demonstrates using the AWS CloudFormation bootstrap scripts to install packages and files when an instance is launched. ", "keywords": ["instance"]}, {"source": "Text", "text": "This template creates an Amazon EC2 instance and an Amazon RDS database instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "You will be billed for the AWS resources used if you create a stack from this template.\", \"Parameters\" : { \"KeyName\": { \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instances\", \"Type\": \"String\", \"MinLength\": \"1\", \"MaxLength\": \"255\", \"AllowedPattern\" : \"[\\\\x20-\\\\x7E]*\", \"ConstraintDescription\" : \"can contain only ASCII characters.\" }, \"InstanceType\" : { \"Description\" : \"WebServer EC2 instance type\", \"Type\" : \"String\", \"Default\" : \"t1.micro\", \"AllowedValues\" : [ \"t1.micro\", \"t2.micro\", \"t2.small\", \"t2.medium\", \"m3.medium\", \"m3.large\", \"m3.xlarge\", \"m3.2xlarge\" ], \"ConstraintDescription\" : \"must be a valid EC2 instance type.\" }, \"myVPC\": { \"Description\" : \"Id of my VPC\", \"Type\" : \"String\", \"Default\" : \"vpc-1bcf9e7e\" }, \"MySubnet\": { \"Description\" : \"My subnet from my VPC\", \"Type\": \"String\", \"Default\": \"subnet-75eec810\" }, \"RDSSubnets\": { \"Description\" : \"RDS subnets from my VPC\", \"Type\": \"CommaDelimitedList\", \"Default\": \"subnet-75eec810,subnet-448bcc33\" }, \"DBClass\" : { \"Default\" : \"db.t1.micro\", \"Description\" : \"Database instance class\", \"Type\" : \"String\", \"AllowedValues\" : [ \"db.t1.micro\", \"db.t2.micro\", \"db.t2.small\", \"db.t2.medium\", \"db.m3.medium\", \"db.m3.large\", \"db.m3.xlarge\", \"db.m3.2xlarge\" ], \"ConstraintDescription\" : \"must select a valid database instance type.\" }, \"DBName\" : { \"Default\": \"wordpress\", \"Description\" : \"The WordPress database name\", \"Type\": \"String\", \"MinLength\": \"1\", \"MaxLength\": \"64\", \"AllowedPattern\" : \"[a-zA-Z][a-zA-Z0-9]*\", \"ConstraintDescription\" : \"must begin with a letter and contain only alphanumeric characters.\" }, \"DBUsername\" : { \"Default\": \"admin\", \"NoEcho\": \"true\", \"Description\" : \"The WordPress database admin account username\", \"Type\": \"String\", \"MinLength\": \"1\", \"MaxLength\": \"16\", \"AllowedPattern\" : \"[a-zA-Z][a-zA-Z0-9]*\", \"ConstraintDescription\" : \"must begin with a letter and contain only alphanumeric characters.\" }, \"DBPassword\" : { \"Default\": \"password\", \"NoEcho\": \"true\", \"Description\" : \"The WordPress database admin account password\", \"Type\": \"String\", \"MinLength\": \"8\", \"MaxLength\": \"41\", \"AllowedPattern\" : \"[a-zA-Z0-9]*\", \"ConstraintDescription\" : \"must contain only alphanumeric characters.\" }, \"DBAllocatedStorage\" : { \"Default\": \"5\", \"Description\" : \"The size of the database (Gb)\", \"Type\": \"Number\", \"MinValue\": \"5\", \"MaxValue\": \"1024\", \"ConstraintDescription\" : \"must be between 5 and 1024Gb.\" }, \"SSHLocation\" : { \"Description\" : \" The IP address range that can be used to SSH to the EC2 instances\", \"Type\": \"String\", \"MinLength\": \"9\", \"MaxLength\": \"18\", \"Default\": \"0.0.0.0/0\", \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\", \"ConstraintDescription\": \"must be a valid IP CIDR range of the form x.x.x.x/x.\" } }, \"Mappings\" : { \"AWSInstanceType2Arch\" : { \"t1.micro\" : { \"Arch\" : \"PV64\" ", "keywords": ["bill", "instance"]}, {"source": "Text", "text": "} } }, \"Resources\" : { \"WebServer\": { \"Type\": \"AWS::EC2::Instance\", \"Metadata\" : { \"AWS::CloudFormation::Init\" : { \"config\" : { \"packages\" : { \"yum\" : { \"httpd\" : [], \"php\" : [], \"php-mysql\" : [] } }, \"sources\" : { \"/var/www/html\" : \"http://wordpress.org/latest.tar.gz\" }, \"files\" : { \"/var/www/html/wordpress/wp-config.php\" : { \"content\" : { \"Fn::Join\" : [\"\", [ \"> $wp_config\\n\", \"echo \\\"define('WPLANG' , '');\\\" >> $wp_config\\n\", \"echo \\\"define('WP_DEBUG' , false);\\\" >> $wp_config\\n\", \"echo \\\"\\\\$table_prefix = 'wp_';\\\" >> $wp_config\\n\", \"echo \\\"if ( !defined('ABSPATH') )\\\" >> $wp_config\\n\", \"echo \\\" define('ABSPATH', dirname(__FILE__) . '/');\\\" >> $wp_config\\n\", \"echo \\\"require_once(ABSPATH . 'wp-settings.php');\\\" >> $wp_config\\n\" ]]}} } }, \"WaitHandle\" : { \"Type\" : \"AWS::CloudFormation::WaitConditionHandle\" }, \"WaitCondition\" : { \"Type\" : \"AWS::CloudFormation::WaitCondition\", \"DependsOn\" : \"WebServer\", \"Properties\" : { \"Handle\" : {\"Ref\" : \"WaitHandle\"}, \"Timeout\" : \"1200\" } }, \"DBInstance\" : { \"Type\": \"AWS::RDS::DBInstance\", \"Properties\": { \"DBSubnetGroupName\" : { \"Ref\" : \"MyDBSubnetGroup\" }, \"VPCSecurityGroups\" : [ { \"Ref\" : \"DBSecurityGroup\" } ], \"DBName\" : { \"Ref\" : \"DBName\" ", "keywords": ["instance"]}, {"source": "Text", "text": "}, \"DBSecurityGroupIngress\": { \"EC2SecurityGroupId\": { \"Fn::GetAtt\" : [ \"WebServerSecurityGroup\", \"GroupId\" ] } }, \"GroupDescription\" : \"Frontend Access\" } }, \"WebServerSecurityGroup\" : { \"Type\" : \"AWS::EC2::SecurityGroup\", \"Properties\" : { \"VpcId\" : {\"Ref\" : \"myVPC\"}, \"GroupDescription\" : \"Enable HTTP access via port 80 and SSH access\", \"SecurityGroupIngress\" : [ {\"IpProtocol\" : \"tcp\", \"FromPort\" : \"80\", \"ToPort\" : \"80\", \"CidrIp\" : \"0.0.0.0/0\"}, {\"IpProtocol\" : \"tcp\", \"FromPort\" : \"22\", \"ToPort\" : \"22\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"}} ] } }, \"MyDBSubnetGroup\" : { \"Type\" : \"AWS::RDS::DBSubnetGroup\", \"Properties\" : { \"DBSubnetGroupDescription\" : \"Subnets available for the RDS DB Instance\", \"SubnetIds\" : { \"Ref\" : \"RDSSubnets\" } } } }, \"Outputs\" : { \"WebsiteURL\" : { \"Value\" : { \"Fn::Join\" : [\"\", [\"http://\", { \"Fn::GetAtt\" : [ \"WebServer\", \"PublicDnsName\" ]}, \"/wordpress\"]] }, \"Description\" : \"WordPress Website\" } } } http://pastebin.com/0cS9Ba0t Unfortunately now I have error which I dont know how to fix: The following resource(s) failed to create: [WaitCondition]. . ", "keywords": ["instance"]}, {"source": "Text", "text": "Rollback requested by user. [![enter image description here][1]][1] [1]: http://i.stack.imgur.com/mbEFU.png What should be changed in this template?", "keywords": ["change"]}]}, {"Id": "102634123", "PostHistoryTypeId": "1", "PostId": "33336346", "RevisionGUID": "238e3a77-4199-405a-b290-a9f111dbdb59", "CreationDate": "2015-10-25T23:34:52.087", "UserId": "2971192", "Text": "AWS CloudFormation Wordpress template", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "102634124", "PostHistoryTypeId": "3", "PostId": "33336346", "RevisionGUID": "238e3a77-4199-405a-b290-a9f111dbdb59", "CreationDate": "2015-10-25T23:34:52.087", "UserId": "2971192", "Text": "|templates|amazon-web-services|cloud|aws-cloudformation|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "102650579", "PostHistoryTypeId": "5", "PostId": "33336346", "RevisionGUID": "bb9e2df3-cbd1-472b-9736-a75c5634b1df", "CreationDate": "2015-10-26T07:15:44.620", "UserId": "2971192", "Comment": "added 36 characters in body", "Text": "I am reading about Amazon CloudFormation and want to launch this CF template https://s3.amazonaws.com/cloudformation-templates-us-east-1/WordPress_Single_Instance_With_RDS.template which has been provided by \"Getting Started\" of Amazon.\r\n\r\nBefore I have removed default VPC and subnets, so now I need to specify its directly. After googling I have edited above template to such view:\r\n\r\n    {\r\n      \"AWSTemplateFormatVersion\" : \"2010-09-09\",\r\n    \r\n      \"Description\" : \"AWS CloudFormation Sample Template WordPress_Single_Instance_With_RDS: WordPress is web software you can use to create a website or blog. This template installs a single-instance WordPress deployment that uses an Amazon RDS database instance for storage. It demonstrates using the AWS CloudFormation bootstrap scripts to install packages and files when an instance is launched. **WARNING** This template creates an Amazon EC2 instance and an Amazon RDS database instance. You will be billed for the AWS resources used if you create a stack from this template.\",\r\n    \r\n      \"Parameters\" : {\r\n    \r\n        \"KeyName\": {\r\n          \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instances\",\r\n          \"Type\": \"String\",\r\n          \"MinLength\": \"1\",\r\n          \"MaxLength\": \"255\",\r\n          \"AllowedPattern\" : \"[\\\\x20-\\\\x7E]*\",\r\n          \"ConstraintDescription\" : \"can contain only ASCII characters.\"\r\n        },\r\n    \r\n        \"InstanceType\" : {\r\n          \"Description\" : \"WebServer EC2 instance type\",\r\n          \"Type\" : \"String\",\r\n          \"Default\" : \"t1.micro\",\r\n          \"AllowedValues\" : [ \"t1.micro\", \"t2.micro\", \"t2.small\", \"t2.medium\", \"m3.medium\", \"m3.large\", \"m3.xlarge\", \"m3.2xlarge\" ],\r\n          \"ConstraintDescription\" : \"must be a valid EC2 instance type.\"\r\n        },\r\n    \r\n        \"myVPC\": {\r\n            \"Description\" : \"Id of my VPC\",\r\n            \"Type\"        : \"String\",\r\n            \"Default\"     : \"vpc-1bcf9e7e\"\r\n        },\r\n     \r\n        \"MySubnet\": {\r\n            \"Description\" : \"My subnet from my VPC\",\r\n            \"Type\": \"String\",\r\n            \"Default\": \"subnet-75eec810\"\r\n        },\r\n    \r\n        \"RDSSubnets\": {\r\n            \"Description\" : \"RDS subnets from my VPC\",\r\n            \"Type\": \"CommaDelimitedList\",\r\n            \"Default\": \"subnet-75eec810,subnet-448bcc33\"\r\n        },\r\n    \r\n        \"DBClass\" : {\r\n          \"Default\" : \"db.t1.micro\",\r\n          \"Description\" : \"Database instance class\",\r\n          \"Type\" : \"String\",\r\n          \"AllowedValues\" : [ \"db.t1.micro\", \"db.t2.micro\", \"db.t2.small\", \"db.t2.medium\", \"db.m3.medium\", \"db.m3.large\", \"db.m3.xlarge\", \"db.m3.2xlarge\" ],\r\n          \"ConstraintDescription\" : \"must select a valid database instance type.\"\r\n        },\r\n    \r\n        \"DBName\" : {\r\n          \"Default\": \"wordpress\",\r\n          \"Description\" : \"The WordPress database name\",\r\n          \"Type\": \"String\",\r\n          \"MinLength\": \"1\",\r\n          \"MaxLength\": \"64\",\r\n          \"AllowedPattern\" : \"[a-zA-Z][a-zA-Z0-9]*\",\r\n          \"ConstraintDescription\" : \"must begin with a letter and contain only alphanumeric characters.\"\r\n        },\r\n    \r\n        \"DBUsername\" : {\r\n          \"Default\": \"admin\",\r\n          \"NoEcho\": \"true\",\r\n          \"Description\" : \"The WordPress database admin account username\",\r\n          \"Type\": \"String\",\r\n          \"MinLength\": \"1\",\r\n          \"MaxLength\": \"16\",\r\n          \"AllowedPattern\" : \"[a-zA-Z][a-zA-Z0-9]*\",\r\n          \"ConstraintDescription\" : \"must begin with a letter and contain only alphanumeric characters.\"\r\n        },\r\n    \r\n        \"DBPassword\" : {\r\n          \"Default\": \"password\",\r\n          \"NoEcho\": \"true\",\r\n          \"Description\" : \"The WordPress database admin account password\",\r\n          \"Type\": \"String\",\r\n          \"MinLength\": \"8\",\r\n          \"MaxLength\": \"41\",\r\n          \"AllowedPattern\" : \"[a-zA-Z0-9]*\",\r\n          \"ConstraintDescription\" : \"must contain only alphanumeric characters.\"\r\n        },\r\n    \r\n        \"DBAllocatedStorage\" : {\r\n          \"Default\": \"5\",\r\n          \"Description\" : \"The size of the database (Gb)\",\r\n          \"Type\": \"Number\",\r\n          \"MinValue\": \"5\",\r\n          \"MaxValue\": \"1024\",\r\n          \"ConstraintDescription\" : \"must be between 5 and 1024Gb.\"\r\n        },\r\n        \"SSHLocation\" : {\r\n          \"Description\" : \" The IP address range that can be used to SSH to the EC2 instances\",\r\n          \"Type\": \"String\",\r\n          \"MinLength\": \"9\",\r\n          \"MaxLength\": \"18\",\r\n          \"Default\": \"0.0.0.0/0\",\r\n          \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\",\r\n          \"ConstraintDescription\": \"must be a valid IP CIDR range of the form x.x.x.x/x.\"\r\n        }\r\n      },\r\n    \r\n      \"Mappings\" : {\r\n          \"AWSInstanceType2Arch\" : {\r\n          \"t1.micro\"    : { \"Arch\" : \"PV64\"  },\r\n          \"t2.micro\"    : { \"Arch\" : \"HVM64\"  },\r\n          \"t2.small\"    : { \"Arch\" : \"HVM64\"  },\r\n          \"t2.medium\"   : { \"Arch\" : \"HVM64\"  },\r\n          \"m3.medium\"   : { \"Arch\" : \"PV64\"   },\r\n          \"m3.large\"    : { \"Arch\" : \"PV64\"   },\r\n          \"m3.xlarge\"   : { \"Arch\" : \"PV64\"   },\r\n          \"m3.2xlarge\"  : { \"Arch\" : \"PV64\"   }\r\n        },\r\n    \r\n        \"AWSRegionArch2AMI\" : {\r\n          \"us-east-1\"      : { \"PV64\" : \"ami-7c807d14\", \"HVM64\" : \"ami-76817c1e\" },\r\n          \"us-west-2\"      : { \"PV64\" : \"ami-1b3b462b\", \"HVM64\" : \"ami-d13845e1\" },\r\n          \"us-west-1\"      : { \"PV64\" : \"ami-a8d3d4ed\", \"HVM64\" : \"ami-f0d3d4b5\" },\r\n          \"eu-west-1\"      : { \"PV64\" : \"ami-672ce210\", \"HVM64\" : \"ami-892fe1fe\" },\r\n          \"ap-southeast-1\" : { \"PV64\" : \"ami-56b7eb04\", \"HVM64\" : \"ami-a6b6eaf4\" },\r\n          \"ap-northeast-1\" : { \"PV64\" : \"ami-25dd9324\", \"HVM64\" : \"ami-29dc9228\" },\r\n          \"ap-southeast-2\" : { \"PV64\" : \"ami-6bf99c51\", \"HVM64\" : \"ami-d9fe9be3\" },\r\n          \"sa-east-1\"      : { \"PV64\" : \"ami-c7e649da\", \"HVM64\" : \"ami-c9e649d4\" },\r\n          \"us-gov-west-1\"  : { \"PV64\" : \"ami-ab4a2d88\", \"HVM64\" : \"ami-a54a2d86\" },\r\n          \"cn-north-1\"     : { \"PV64\" : \"ami-cab82af3\", \"HVM64\" : \"ami-ccb82af5\" }\r\n        }\r\n      },\r\n    \r\n      \"Resources\" : {\r\n    \r\n        \"WebServer\": {\r\n          \"Type\": \"AWS::EC2::Instance\",\r\n          \"Metadata\" : {\r\n            \"AWS::CloudFormation::Init\" : {\r\n              \"config\" : {\r\n                \"packages\" : {\r\n                  \"yum\" : {\r\n                    \"httpd\"     : [],\r\n                    \"php\"       : [],\r\n                    \"php-mysql\" : []\r\n                  }\r\n                },\r\n                \"sources\" : {\r\n                  \"/var/www/html\" : \"http://wordpress.org/latest.tar.gz\"\r\n                },\r\n                \"files\" : {\r\n                  \"/var/www/html/wordpress/wp-config.php\" : {\r\n                    \"content\" : { \"Fn::Join\" : [\"\", [\r\n                      \"<?php\\n\",\r\n                      \"define('DB_NAME',          '\", {\"Ref\" : \"DBName\"}, \"');\\n\",\r\n                      \"define('DB_USER',          '\", {\"Ref\" : \"DBUsername\"}, \"');\\n\",\r\n                      \"define('DB_PASSWORD',      '\", {\"Ref\" : \"DBPassword\" }, \"');\\n\",\r\n                      \"define('DB_HOST',          '\", {\"Fn::GetAtt\" : [\"DBInstance\", \"Endpoint.Address\"]},\"');\\n\",\r\n                      \"define('DB_CHARSET',       'utf8');\\n\",\r\n                      \"define('DB_COLLATE',       '');\\n\"\r\n                    ]] },\r\n                    \"mode\" : \"000644\",\r\n                    \"owner\" : \"root\",\r\n                    \"group\" : \"root\"\r\n                  }\r\n                },\r\n                \"services\" : {\r\n                  \"sysvinit\" : {\r\n                    \"httpd\"    : { \"enabled\" : \"true\", \"ensureRunning\" : \"true\" },\r\n                    \"sendmail\" : { \"enabled\" : \"false\", \"ensureRunning\" : \"false\" }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          },\r\n          \"Properties\": {\r\n            \"SubnetId\": { \"Ref\": \"MySubnet\" },\r\n            \"ImageId\" : { \"Fn::FindInMap\" : [ \"AWSRegionArch2AMI\", { \"Ref\" : \"AWS::Region\" },\r\n                              { \"Fn::FindInMap\" : [ \"AWSInstanceType2Arch\", { \"Ref\" : \"InstanceType\" }, \"Arch\" ] } ] },\r\n            \"InstanceType\"   : { \"Ref\" : \"InstanceType\" },\r\n            \"SecurityGroupIds\" : [ {\"Ref\" : \"WebServerSecurityGroup\"} ],\r\n            \"KeyName\"        : { \"Ref\" : \"KeyName\" },\r\n            \"UserData\"       : { \"Fn::Base64\" : { \"Fn::Join\" : [\"\", [\r\n              \"#!/bin/bash\\n\",\r\n              \"yum update -y aws-cfn-bootstrap\\n\",\r\n    \r\n              \"/opt/aws/bin/cfn-init -s \", { \"Ref\" : \"AWS::StackId\" }, \" -r WebServer \",\r\n              \"         --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\",\r\n    \r\n              \"/opt/aws/bin/cfn-signal -e $? '\", { \"Ref\" : \"WaitHandle\" }, \"'\\n\",\r\n    \r\n              \"# Setup correct file ownership\\n\",\r\n              \"chown -R apache:apache /var/www/html/wordpress\\n\",\r\n              \r\n              \"# Add keys and salts to the config file\\n\",\r\n              \"wp_config=/var/www/html/wordpress/wp-config.php\\n\",\r\n              \"GET https://api.wordpress.org/secret-key/1.1/salt/ >> $wp_config\\n\",\r\n              \"echo \\\"define('WPLANG'            , '');\\\" >> $wp_config\\n\",\r\n              \"echo \\\"define('WP_DEBUG'          , false);\\\" >> $wp_config\\n\", \r\n              \"echo \\\"\\\\$table_prefix  = 'wp_';\\\" >> $wp_config\\n\",\r\n              \"echo \\\"if ( !defined('ABSPATH') )\\\" >> $wp_config\\n\",\r\n              \"echo \\\"    define('ABSPATH', dirname(__FILE__) . '/');\\\" >> $wp_config\\n\",\r\n              \"echo \\\"require_once(ABSPATH . 'wp-settings.php');\\\" >> $wp_config\\n\"\r\n    \r\n            ]]}}\r\n          }\r\n        },\r\n    \r\n        \"WaitHandle\" : {\r\n          \"Type\" : \"AWS::CloudFormation::WaitConditionHandle\"\r\n        },\r\n    \r\n        \"WaitCondition\" : {\r\n          \"Type\" : \"AWS::CloudFormation::WaitCondition\",\r\n          \"DependsOn\" : \"WebServer\",\r\n          \"Properties\" : {\r\n            \"Handle\" : {\"Ref\" : \"WaitHandle\"},\r\n            \"Timeout\" : \"1200\"\r\n          }\r\n        },\r\n    \r\n        \"DBInstance\" : {\r\n          \"Type\": \"AWS::RDS::DBInstance\",\r\n          \"Properties\": {\r\n            \"DBSubnetGroupName\" : { \"Ref\" : \"MyDBSubnetGroup\" },\r\n            \"VPCSecurityGroups\" : [ { \"Ref\" : \"DBSecurityGroup\" } ],\r\n            \"DBName\"            : { \"Ref\" : \"DBName\" },\r\n            \"Engine\"            : \"MySQL\",\r\n            \"MasterUsername\"    : { \"Ref\" : \"DBUsername\" },\r\n            \"DBInstanceClass\"   : { \"Ref\" : \"DBClass\" },\r\n            \"DBSecurityGroups\"  : [{ \"Ref\" : \"DBSecurityGroup\" }],\r\n            \"AllocatedStorage\"  : { \"Ref\" : \"DBAllocatedStorage\" },\r\n            \"MasterUserPassword\": { \"Ref\" : \"DBPassword\" }\r\n          }\r\n        },\r\n    \r\n        \"DBSecurityGroup\": {\r\n          \"Type\": \"AWS::RDS::DBSecurityGroup\",\r\n          \"Properties\": {\r\n            \"EC2VpcId\" : { \"Ref\" : \"myVPC\" },\r\n            \"DBSecurityGroupIngress\": { \"EC2SecurityGroupId\": { \"Fn::GetAtt\" : [ \"WebServerSecurityGroup\", \"GroupId\" ] } },\r\n            \"GroupDescription\"      : \"Frontend Access\"\r\n          }\r\n        },\r\n    \r\n        \"WebServerSecurityGroup\" : {\r\n          \"Type\" : \"AWS::EC2::SecurityGroup\",\r\n          \"Properties\" : {\r\n            \"VpcId\" : {\"Ref\" : \"myVPC\"},\r\n            \"GroupDescription\" : \"Enable HTTP access via port 80 and SSH access\",\r\n            \"SecurityGroupIngress\" : [\r\n              {\"IpProtocol\" : \"tcp\", \"FromPort\" : \"80\", \"ToPort\" : \"80\", \"CidrIp\" : \"0.0.0.0/0\"},\r\n              {\"IpProtocol\" : \"tcp\", \"FromPort\" : \"22\", \"ToPort\" : \"22\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"}}\r\n            ]\r\n          }\r\n        },\r\n    \r\n        \"MyDBSubnetGroup\" : {\r\n          \"Type\" : \"AWS::RDS::DBSubnetGroup\",\r\n          \"Properties\" : {\r\n            \"DBSubnetGroupDescription\" : \"Subnets available for the RDS DB Instance\",\r\n            \"SubnetIds\" : { \"Ref\" : \"RDSSubnets\" }\r\n          }\r\n        }\r\n      },\r\n    \r\n      \"Outputs\" : {\r\n        \"WebsiteURL\" : {\r\n          \"Value\" : { \"Fn::Join\" : [\"\", [\"http://\", { \"Fn::GetAtt\" : [ \"WebServer\", \"PublicDnsName\" ]}, \"/wordpress\"]] },\r\n          \"Description\" : \"WordPress Website\"\r\n        }\r\n      }\r\n    }\r\n\r\nhttp://pastebin.com/0cS9Ba0t\r\n\r\nUnfortunately now I have error which I dont know how to fix:\r\n\r\n    CREATE_FAILED AWS::CloudFormation::WaitCondition WaitCondition WaitCondition timed out. Received 0 conditions when expecting 1\r\n\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: http://i.stack.imgur.com/mbEFU.png\r\n\r\nWhat should be changed in this template?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "This template installs a single-instance WordPress deployment that uses an Amazon RDS database instance for storage. ", "keywords": ["instance", "storage"]}, {"source": "Text", "text": "It demonstrates using the AWS CloudFormation bootstrap scripts to install packages and files when an instance is launched. ", "keywords": ["instance"]}, {"source": "Text", "text": "This template creates an Amazon EC2 instance and an Amazon RDS database instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "You will be billed for the AWS resources used if you create a stack from this template.\", \"Parameters\" : { \"KeyName\": { \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instances\", \"Type\": \"String\", \"MinLength\": \"1\", \"MaxLength\": \"255\", \"AllowedPattern\" : \"[\\\\x20-\\\\x7E]*\", \"ConstraintDescription\" : \"can contain only ASCII characters.\" }, \"InstanceType\" : { \"Description\" : \"WebServer EC2 instance type\", \"Type\" : \"String\", \"Default\" : \"t1.micro\", \"AllowedValues\" : [ \"t1.micro\", \"t2.micro\", \"t2.small\", \"t2.medium\", \"m3.medium\", \"m3.large\", \"m3.xlarge\", \"m3.2xlarge\" ], \"ConstraintDescription\" : \"must be a valid EC2 instance type.\" }, \"myVPC\": { \"Description\" : \"Id of my VPC\", \"Type\" : \"String\", \"Default\" : \"vpc-1bcf9e7e\" }, \"MySubnet\": { \"Description\" : \"My subnet from my VPC\", \"Type\": \"String\", \"Default\": \"subnet-75eec810\" }, \"RDSSubnets\": { \"Description\" : \"RDS subnets from my VPC\", \"Type\": \"CommaDelimitedList\", \"Default\": \"subnet-75eec810,subnet-448bcc33\" }, \"DBClass\" : { \"Default\" : \"db.t1.micro\", \"Description\" : \"Database instance class\", \"Type\" : \"String\", \"AllowedValues\" : [ \"db.t1.micro\", \"db.t2.micro\", \"db.t2.small\", \"db.t2.medium\", \"db.m3.medium\", \"db.m3.large\", \"db.m3.xlarge\", \"db.m3.2xlarge\" ], \"ConstraintDescription\" : \"must select a valid database instance type.\" }, \"DBName\" : { \"Default\": \"wordpress\", \"Description\" : \"The WordPress database name\", \"Type\": \"String\", \"MinLength\": \"1\", \"MaxLength\": \"64\", \"AllowedPattern\" : \"[a-zA-Z][a-zA-Z0-9]*\", \"ConstraintDescription\" : \"must begin with a letter and contain only alphanumeric characters.\" }, \"DBUsername\" : { \"Default\": \"admin\", \"NoEcho\": \"true\", \"Description\" : \"The WordPress database admin account username\", \"Type\": \"String\", \"MinLength\": \"1\", \"MaxLength\": \"16\", \"AllowedPattern\" : \"[a-zA-Z][a-zA-Z0-9]*\", \"ConstraintDescription\" : \"must begin with a letter and contain only alphanumeric characters.\" }, \"DBPassword\" : { \"Default\": \"password\", \"NoEcho\": \"true\", \"Description\" : \"The WordPress database admin account password\", \"Type\": \"String\", \"MinLength\": \"8\", \"MaxLength\": \"41\", \"AllowedPattern\" : \"[a-zA-Z0-9]*\", \"ConstraintDescription\" : \"must contain only alphanumeric characters.\" }, \"DBAllocatedStorage\" : { \"Default\": \"5\", \"Description\" : \"The size of the database (Gb)\", \"Type\": \"Number\", \"MinValue\": \"5\", \"MaxValue\": \"1024\", \"ConstraintDescription\" : \"must be between 5 and 1024Gb.\" }, \"SSHLocation\" : { \"Description\" : \" The IP address range that can be used to SSH to the EC2 instances\", \"Type\": \"String\", \"MinLength\": \"9\", \"MaxLength\": \"18\", \"Default\": \"0.0.0.0/0\", \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\", \"ConstraintDescription\": \"must be a valid IP CIDR range of the form x.x.x.x/x.\" } }, \"Mappings\" : { \"AWSInstanceType2Arch\" : { \"t1.micro\" : { \"Arch\" : \"PV64\" ", "keywords": ["bill", "instance"]}, {"source": "Text", "text": "} } }, \"Resources\" : { \"WebServer\": { \"Type\": \"AWS::EC2::Instance\", \"Metadata\" : { \"AWS::CloudFormation::Init\" : { \"config\" : { \"packages\" : { \"yum\" : { \"httpd\" : [], \"php\" : [], \"php-mysql\" : [] } }, \"sources\" : { \"/var/www/html\" : \"http://wordpress.org/latest.tar.gz\" }, \"files\" : { \"/var/www/html/wordpress/wp-config.php\" : { \"content\" : { \"Fn::Join\" : [\"\", [ \"> $wp_config\\n\", \"echo \\\"define('WPLANG' , '');\\\" >> $wp_config\\n\", \"echo \\\"define('WP_DEBUG' , false);\\\" >> $wp_config\\n\", \"echo \\\"\\\\$table_prefix = 'wp_';\\\" >> $wp_config\\n\", \"echo \\\"if ( !defined('ABSPATH') )\\\" >> $wp_config\\n\", \"echo \\\" define('ABSPATH', dirname(__FILE__) . '/');\\\" >> $wp_config\\n\", \"echo \\\"require_once(ABSPATH . 'wp-settings.php');\\\" >> $wp_config\\n\" ]]}} } }, \"WaitHandle\" : { \"Type\" : \"AWS::CloudFormation::WaitConditionHandle\" }, \"WaitCondition\" : { \"Type\" : \"AWS::CloudFormation::WaitCondition\", \"DependsOn\" : \"WebServer\", \"Properties\" : { \"Handle\" : {\"Ref\" : \"WaitHandle\"}, \"Timeout\" : \"1200\" } }, \"DBInstance\" : { \"Type\": \"AWS::RDS::DBInstance\", \"Properties\": { \"DBSubnetGroupName\" : { \"Ref\" : \"MyDBSubnetGroup\" }, \"VPCSecurityGroups\" : [ { \"Ref\" : \"DBSecurityGroup\" } ], \"DBName\" : { \"Ref\" : \"DBName\" ", "keywords": ["instance"]}, {"source": "Text", "text": "}, \"DBSecurityGroupIngress\": { \"EC2SecurityGroupId\": { \"Fn::GetAtt\" : [ \"WebServerSecurityGroup\", \"GroupId\" ] } }, \"GroupDescription\" : \"Frontend Access\" } }, \"WebServerSecurityGroup\" : { \"Type\" : \"AWS::EC2::SecurityGroup\", \"Properties\" : { \"VpcId\" : {\"Ref\" : \"myVPC\"}, \"GroupDescription\" : \"Enable HTTP access via port 80 and SSH access\", \"SecurityGroupIngress\" : [ {\"IpProtocol\" : \"tcp\", \"FromPort\" : \"80\", \"ToPort\" : \"80\", \"CidrIp\" : \"0.0.0.0/0\"}, {\"IpProtocol\" : \"tcp\", \"FromPort\" : \"22\", \"ToPort\" : \"22\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"}} ] } }, \"MyDBSubnetGroup\" : { \"Type\" : \"AWS::RDS::DBSubnetGroup\", \"Properties\" : { \"DBSubnetGroupDescription\" : \"Subnets available for the RDS DB Instance\", \"SubnetIds\" : { \"Ref\" : \"RDSSubnets\" } } } }, \"Outputs\" : { \"WebsiteURL\" : { \"Value\" : { \"Fn::Join\" : [\"\", [\"http://\", { \"Fn::GetAtt\" : [ \"WebServer\", \"PublicDnsName\" ]}, \"/wordpress\"]] }, \"Description\" : \"WordPress Website\" } } } http://pastebin.com/0cS9Ba0t Unfortunately now I have error which I dont know how to fix: CREATE_FAILED AWS::CloudFormation::WaitCondition WaitCondition WaitCondition timed out", "keywords": ["instance"]}, {"source": "Text", "text": "Received 0 conditions when expecting 1 [![enter image description here][1]][1] [1]: http://i.stack.imgur.com/mbEFU.png What should be changed in this template?", "keywords": ["change"]}]}, {"Id": "102656255", "PostHistoryTypeId": "4", "PostId": "33336346", "RevisionGUID": "afde1b12-7f9b-4bf3-9a69-b60c934de818", "CreationDate": "2015-10-26T08:54:04.197", "UserId": "2971192", "Comment": "edited title", "Text": "AWS CloudFormation Wordpress template. WaitCondition timed out", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "33345774", "PostTypeId": "2", "ParentId": "33336346", "CreationDate": "2015-10-26T12:27:46.443", "Score": "2", "Body": "<p>The template includes a wait condition. After the EC2 instance was started completely it calls cfn-signal. It seems like the installation and configuration of Wordpress fails on your machine.</p>\n\n<p>Double check the VPC and the subnet while creating the CloudFormation stack.</p>\n\n<ul>\n<li>The subnet must be part of the VPC. </li>\n<li>The subnet has to be a public subnet (Route to IGW).</li>\n<li>Make sure all EC2 instances will get a public IP address by default when launched into the subnet (configuration of subnet).</li>\n</ul>\n", "OwnerUserId": "4091496", "LastActivityDate": "2015-10-26T12:27:46.443", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "102671740", "PostHistoryTypeId": "2", "PostId": "33345774", "RevisionGUID": "94909df6-71dd-47dd-8b52-a0bf4b8e78c2", "CreationDate": "2015-10-26T12:27:46.443", "UserId": "4091496", "Text": "The template includes a wait condition. After the EC2 instance was started completely it calls cfn-signal. It seems like the installation and configuration of Wordpress fails on your machine.\r\n\r\nDouble check the VPC and the subnet while creating the CloudFormation stack.\r\n\r\n* The subnet must be part of the VPC. \r\n* The subnet has to be a public subnet (Route to IGW).\r\n* Make sure all EC2 instances will get a public IP address by default when launched into the subnet (configuration of subnet).", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "After the EC2 instance was started completely it calls cfn-signal. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "After the EC2 instance was started completely it calls cfn-signal. ", "keywords": ["instance"]}]}, {"Id": "55584746", "PostTypeId": "2", "ParentId": "33336346", "CreationDate": "2019-04-09T03:34:51.480", "Score": "0", "Body": "<p>in my case the problem was the username and password of the DB instance, and the stack name had already been used by other configurations. So I choose a unique name for the stack and used only char for dbname and password.</p>\n", "OwnerUserId": "11332280", "LastActivityDate": "2019-04-09T03:34:51.480", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "195394482", "PostHistoryTypeId": "2", "PostId": "55584746", "RevisionGUID": "5bad6b95-51d2-4428-b56f-e93e82b3e9bb", "CreationDate": "2019-04-09T03:34:51.480", "UserId": "11332280", "Text": "in my case the problem was the username and password of the DB instance, and the stack name had already been used by other configurations. So I choose a unique name for the stack and used only char for dbname and password.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "in my case the problem was the username and password of the DB instance, and the stack name had already been used by other configurations. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "in my case the problem was the username and password of the DB instance, and the stack name had already been used by other configurations. ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "After googling I have edited above template to such view: http://pastebin.com/0cS9Ba0t Unfortunately now I have error which I dont know how to fix: What should be changed in this template?", "keywords": ["change"]}]}