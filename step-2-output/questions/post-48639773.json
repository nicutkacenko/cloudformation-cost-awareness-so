{"Id": "48639773", "PostTypeId": "1", "CreationDate": "2018-02-06T09:37:59.953", "Score": "1", "ViewCount": "123", "Body": "<p>I have a project running on AWS using components like RDS, Lambda, etc. and I have used tools like CloudFormation, CodeCommit (for source code), CodeBuild (to build) and CodePipeline (for CI/CD) purposes. </p>\n\n<p>Should the pipeline and the source repository itself be defined using a CloudFormation stack?</p>\n", "OwnerUserId": "888361", "LastEditorUserId": "3880363", "LastEditDate": "2018-02-06T14:05:43.280", "LastActivityDate": "2018-02-06T14:05:43.280", "Title": "On AWS, should every part of my infrastructure be defined as code?", "Tags": "|amazon-web-services|aws-cloudformation|aws-codepipeline|aws-codecommit|", "AnswerCount": "2", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "166262484", "PostHistoryTypeId": "2", "PostId": "48639773", "RevisionGUID": "cd7bac36-570e-406c-8d52-14f26acd072d", "CreationDate": "2018-02-06T09:37:59.953", "UserId": "888361", "Text": "Supose I have a project running on AWS (RDS, Lambda, etc). I have the application resources defined via CloudFormation, CodeCommit for source code, CodeBuild to build and CodePipeline to continuously build and delivery it.\r\n\r\nShould the pipeline and the source repository itself be defined via a CloudFormation stack?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "166262485", "PostHistoryTypeId": "1", "PostId": "48639773", "RevisionGUID": "cd7bac36-570e-406c-8d52-14f26acd072d", "CreationDate": "2018-02-06T09:37:59.953", "UserId": "888361", "Text": "On AWS, should every part of my infrastructure be defined as code?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "166262486", "PostHistoryTypeId": "3", "PostId": "48639773", "RevisionGUID": "cd7bac36-570e-406c-8d52-14f26acd072d", "CreationDate": "2018-02-06T09:37:59.953", "UserId": "888361", "Text": "|amazon-web-services|aws-cloudformation|aws-codepipeline|aws-codecommit|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "166283329", "PostHistoryTypeId": "5", "PostId": "48639773", "RevisionGUID": "aaa92a56-81f9-4d75-a887-509d76325c65", "CreationDate": "2018-02-06T14:05:43.280", "UserId": "3880363", "Comment": "Updated question's description to make it compact. ", "Text": "I have a project running on AWS using components like RDS, Lambda, etc. and I have used tools like CloudFormation, CodeCommit (for source code), CodeBuild (to build) and CodePipeline (for CI/CD) purposes. \r\n\r\nShould the pipeline and the source repository itself be defined using a CloudFormation stack?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "166283330", "PostHistoryTypeId": "24", "PostId": "48639773", "RevisionGUID": "aaa92a56-81f9-4d75-a887-509d76325c65", "CreationDate": "2018-02-06T14:05:43.280", "Comment": "Proposed by 3880363 approved by 85421, 48869 edit id of 3548203", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "48640656", "PostTypeId": "2", "ParentId": "48639773", "CreationDate": "2018-02-06T10:22:45.660", "Score": "1", "Body": "<p>Yes, Using cloud formation template, you can configure source code repositories, build project and pipelines for your project.</p>\n\n<p>Please refer the below links for official documentation. </p>\n\n<p><a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codecommit-repository.html\" rel=\"nofollow noreferrer\">CodeCommit with Cloud Formation</a></p>\n\n<p><a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codebuild-project.html\" rel=\"nofollow noreferrer\">CodeBuild with Cloud Formation</a></p>\n\n<p><a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-pipeline.html\" rel=\"nofollow noreferrer\">CodePipeline with Cloud Formation</a></p>\n\n<p>Edit 1 - Advantages of CF templates over CLI / Sdk.</p>\n\n<p>Cloud formation is the way to go for deployments on AWS. Here are couple of advantages of CFn over CLI / SDK / Console. </p>\n\n<ol>\n<li><p>Managing the set of resources is easy. If something fails, AWS will take care of rollbacks.  If SDK / CLI is used, you have to take care of error scenarios so that, resources are cleaned up. </p></li>\n<li><p>Outputs can be piped from one resource / template to other easily. Again in SDK / CLI you have to write that orchestration code. </p></li>\n<li><p>Updates are easier to manage as Cloud formation templates are declarative. The state of your resources is maintained by AWS. In SDK / CLI, you need to take care of the state manually. </p></li>\n</ol>\n\n<p>Please refer to the <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html\" rel=\"nofollow noreferrer\">Best practices</a> section for the usage of Cloud formation templates for efficient results. </p>\n", "OwnerUserId": "3880363", "LastEditorUserId": "3880363", "LastEditDate": "2018-02-06T13:46:21.967", "LastActivityDate": "2018-02-06T13:46:21.967", "CommentCount": "2", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "84284749", "PostId": "48640656", "Score": "0", "Text": "Ok I understand that, but the question is: Should I manage them through cloudformation? I mean, is that a known good practice? In such case, what advantages I would get for that?", "CreationDate": "2018-02-06T13:23:33.183", "UserId": "888361", "filtered-sentences": []}, {"Id": "84285717", "PostId": "48640656", "Score": "0", "Text": "Updated the answer as requested. Hope that helps.", "CreationDate": "2018-02-06T13:47:02.290", "UserId": "3880363", "filtered-sentences": []}], "history": [{"Id": "166281870", "PostHistoryTypeId": "5", "PostId": "48640656", "RevisionGUID": "3ec26891-7e0f-4e79-b64e-ef0cf3d73b7b", "CreationDate": "2018-02-06T13:46:21.967", "UserId": "3880363", "Comment": "added 916 characters in body", "Text": "Yes, Using cloud formation template, you can configure source code repositories, build project and pipelines for your project.\r\n\r\nPlease refer the below links for official documentation. \r\n\r\n[CodeCommit with Cloud Formation][1]\r\n\r\n[CodeBuild with Cloud Formation][2]\r\n\r\n[CodePipeline with Cloud Formation][3]\r\n\r\nEdit 1 - Advantages of CF templates over CLI / Sdk.\r\n\r\nCloud formation is the way to go for deployments on AWS. Here are couple of advantages of CFn over CLI / SDK / Console. \r\n\r\n 1. Managing the set of resources is easy. If something fails, AWS will take care of rollbacks.  If SDK / CLI is used, you have to take care of error scenarios so that, resources are cleaned up. \r\n\r\n 2. Outputs can be piped from one resource / template to other easily. Again in SDK / CLI you have to write that orchestration code. \r\n\r\n 3. Updates are easier to manage as Cloud formation templates are declarative. The state of your resources is maintained by AWS. In SDK / CLI, you need to take care of the state manually. \r\n\r\nPlease refer to the [Best practices][4] section for the usage of Cloud formation templates for efficient results. \r\n\r\n\r\n  [1]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codecommit-repository.html\r\n  [2]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codebuild-project.html\r\n  [3]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-pipeline.html\r\n  [4]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Please refer to the [Best practices][4] section for the usage of Cloud formation templates for efficient results. [1]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codecommit-repository.html [2]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codebuild-project.html [3]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-pipeline.html [4]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html", "keywords": ["efficient"]}]}, {"Id": "166266159", "PostHistoryTypeId": "2", "PostId": "48640656", "RevisionGUID": "b8c05aff-988e-48ab-83eb-34ced8e99f40", "CreationDate": "2018-02-06T10:22:45.660", "UserId": "3880363", "Text": "Yes, Using cloud formation template, you can configure source code repositories, build project and pipelines for your project.\r\n\r\nPlease refer the below links for official documentation. \r\n\r\n[CodeCommit with Cloud Formation][1]\r\n\r\n[CodeBuild with Cloud Formation][2]\r\n\r\n[CodePipeline with Cloud Formation][3]\r\n\r\n\r\n  [1]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codecommit-repository.html\r\n  [2]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codebuild-project.html\r\n  [3]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-pipeline.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "filtered-sentences": [{"source": "Body", "text": "Please refer to the Best practices section for the usage of Cloud formation templates for efficient results.", "keywords": ["efficient"]}]}, {"Id": "48641821", "PostTypeId": "2", "ParentId": "48639773", "CreationDate": "2018-02-06T11:20:24.643", "Score": "1", "Body": "<p>I think the best practice is to have two different <strong>stacks</strong> for the above scenario.</p>\n\n<p>1) First stack - should have support resources such as codecommit, codebuild and codepipeline.</p>\n\n<p>These resources could be used across different applications</p>\n\n<p>2) Second stack - should have the application related resources such as RDS, Lambda</p>\n\n<blockquote>\n  <p>A stack is a collection of AWS resources that you can manage as a\n  single unit. In other words, you can create, update, or delete a\n  collection of resources by creating, updating, or deleting stacks. All\n  the resources in a stack are defined by the stack's AWS CloudFormation\n  template. A stack, for instance, can include all the resources\n  required to run a web application, such as a web server, a database,\n  and networking rules. If you no longer require that web application,\n  you can simply delete the stack, and all of its related resources are\n  deleted.</p>\n</blockquote>\n\n<p><a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacks.html\" rel=\"nofollow noreferrer\">Stacks user guide</a></p>\n", "OwnerUserId": "6337748", "LastActivityDate": "2018-02-06T11:20:24.643", "CommentCount": "2", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "84284829", "PostId": "48641821", "Score": "0", "Text": "I understand how couldformation+codepipeline is good for provisioning the app infrastructure (lambdas, ec2s, rds, etc), but what would be the advantage of using it for provisioning the development infrastructure (source repository, pipeline)?", "CreationDate": "2018-02-06T13:25:42.440", "UserId": "888361", "filtered-sentences": []}, {"Id": "84285348", "PostId": "48641821", "Score": "0", "Text": "That is the whole point of Infrastructure as Code (IAC)? Once you have the infrastructure code, you can provision the infrastructure in any region or multiple regions (i.e. in case of disaster recovery etc.). Also, the environments will be identical. If it is manual, you may end-up missing few minor things.", "CreationDate": "2018-02-06T13:38:39.660", "UserId": "6337748", "filtered-sentences": []}], "history": [{"Id": "166270840", "PostHistoryTypeId": "2", "PostId": "48641821", "RevisionGUID": "e1634d7a-27f4-4da7-9ce9-ec5088b4561c", "CreationDate": "2018-02-06T11:20:24.643", "UserId": "6337748", "Text": "I think the best practice is to have two different **stacks** for the above scenario.\r\n\r\n1) First stack - should have support resources such as codecommit, codebuild and codepipeline.\r\n\r\nThese resources could be used across different applications\r\n\r\n2) Second stack - should have the application related resources such as RDS, Lambda\r\n\r\n> A stack is a collection of AWS resources that you can manage as a\r\n> single unit. In other words, you can create, update, or delete a\r\n> collection of resources by creating, updating, or deleting stacks. All\r\n> the resources in a stack are defined by the stack's AWS CloudFormation\r\n> template. A stack, for instance, can include all the resources\r\n> required to run a web application, such as a web server, a database,\r\n> and networking rules. If you no longer require that web application,\r\n> you can simply delete the stack, and all of its related resources are\r\n> deleted.\r\n\r\n[Stacks user guide][1]\r\n\r\n\r\n  [1]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacks.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "A stack, for instance, can include all the resources > required to run a web application, such as a web server, a database, > and networking rules. ", "keywords": ["networking", "instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "A stack, for instance, can include all the resources required to run a web application, such as a web server, a database, and networking rules. ", "keywords": ["networking", "instance"]}]}], "contains-topic": true, "filtered-sentences": []}