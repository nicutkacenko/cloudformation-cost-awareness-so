{"Id": "75581557", "PostTypeId": "1", "CreationDate": "2023-02-27T14:10:55.413", "Score": "3", "ViewCount": "420", "Body": "<p>I have a simple AWS CloudFormation template for creating a hosted zone for <code>example.com</code> along with an SSL/TLS certificate for that domain. It looks something like this:</p>\n<pre class=\"lang-yaml prettyprint-override\"><code>\u2026\n\nResources:\n  HostedZone:\n    Type: AWS::Route53::HostedZone\n    Properties: \n      Name: example.com\n\n  Certificate:\n    Type: AWS::CertificateManager::Certificate\n    Properties:\n      DomainName: example.com\n      ValidationMethod: DNS\n      DomainValidationOptions:\n        - DomainName: example.com\n          HostedZoneId: !Ref HostedZone\n</code></pre>\n<p>I had understood that if I don't specify a <code>DeletionPolicy</code>, <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html\" rel=\"nofollow noreferrer\">by default CloudFormation deletes resources in a stack</a> when a stack is deleted. There are a few exceptions such as a non-empty S3 bucket, but that makes sense because in that case someone went in and added things to the bucket independent of the CloudFormation stack I presume.</p>\n<p>However when I delete the stack for the above template, I get an error:</p>\n<blockquote>\n<p><code>The specified hosted zone contains non-required resource record sets and so cannot be deleted. (Service: Route53, Status Code: 400, Request ID: \u2026)</code></p>\n</blockquote>\n<p>Of course the error message is understandable: an extra record was added to the hosted zone in order to verify the certificate, and the hosted zone can't be deleted unless you first delete that extra record. The same thing would happen if I created all this manually.</p>\n<p>Still that behavior isn't really consistent with the documentation of <code>DeletionPolicy</code> (which says resources should be deleted automatically), and there is nothing here that wasn't created by the stack. It would seem that, despite all the assurances that &quot;CloudFormation is declarative&quot; and &quot;CloudFormation figures out the order in which to do things&quot;, it comes with a lot of caveats at least when it comes to deletion.</p>\n<p>In this case CloudFormation should figure out that it added the record after creating the hosted zone, so it should remove that record before deleting the hosted zone. But it can't figure that out.</p>\n<p><em>If CloudFormation can figure out how to delete the hosted zone (which it can), and if CloudFormation can figure out how to remove the load balancer (which it can), and if CloudFormation can figure out how to remove the record from the hosted zone pointing to the load balancer before deleting the hosted zone (which it can), why can't CloudFormation figure out how to delete the certificate verification record from the hosted zone before deleting the hosted zone? </em></p>\n<p>Is there some workaround to add to my stack definition to allow the hosted zone to be deleted when the stack is deleted? If I have to go in and manually remove a record every time, it defeats the purpose of CloudFormation as far as deletion is concerned.</p>\n", "OwnerUserId": "421049", "LastEditorUserId": "421049", "LastEditDate": "2023-03-08T22:53:45.387", "LastActivityDate": "2023-03-08T22:53:45.387", "Title": "CloudFormation stack hosted zone deletion with certificate DNS verification", "Tags": "|amazon-web-services|aws-cloudformation|aws-certificate-manager|", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "288822617", "PostHistoryTypeId": "2", "PostId": "75581557", "RevisionGUID": "6fb0ccc0-7082-440e-accd-02564b201973", "CreationDate": "2023-02-27T14:10:55.413", "UserId": "421049", "Text": "I have a simple AWS CloudFormation template for creating a hosted zone for `example.com` along with an SSL/TLS certificate for that domain. It looks something like this:\r\n\r\n```yaml\r\n\u2026\r\n\r\nResources:\r\n  HostedZone:\r\n    Type: AWS::Route53::HostedZone\r\n    Properties: \r\n      Name: example.com\r\n\r\n  Certificate:\r\n    Type: AWS::CertificateManager::Certificate\r\n    Properties:\r\n      DomainName: example.com\r\n      ValidationMethod: DNS\r\n      DomainValidationOptions:\r\n        - DomainName: example.com\r\n          HostedZoneId: !Ref HostedZone\r\n```\r\n\r\nI had understood that if I don't specify a `DeletionPolicy`, [by default CloudFormation deletes resources in a stack][1] when a stack is deleted. There are a few exceptions such as a non-empty S3 bucket, but that makes sense because in that case someone went in and added things to the bucket independent of the CloudFormation stack I presume.\r\n\r\nHowever when I delete the stack for the above template, I get an error:\r\n\r\n> `The specified hosted zone contains non-required resource record sets and so cannot be deleted. (Service: Route53, Status Code: 400, Request ID: \u2026)`\r\n\r\nOf course the error message is understandable: an extra record was added to the hosted zone in order to verify the certificate, and the hosted zone can't be deleted unless you first delete that extra record. The same thing would happen if I created all this manually.\r\n\r\nStill that behavior isn't really consistent with the documentation of `DeletionPolicy` (which says resources should be deleted automatically), and there is nothing here that wasn't created by the stack. It would seem that, despite all the assurances that \"CloudFormation is declarative\" and \"CloudFormation figures out the order in which to do things\", it comes with a lot of caveats at least when it comes to deletion.\r\n\r\nIn this case CloudFormation should figure out that it added the record after creating the hosted zone, so it should remove that record before deleting the hosted zone. But it can't figure that out.\r\n\r\nIs there some workaround to add to my stack definition to allow the hosted zone to be deleted when the stack is deleted? If I have to go in and manually remove a record every time, it defeats the purpose of CloudFormation as far as deletion is concerned.\r\n\r\n  [1]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have a simple AWS CloudFormation template for creating a hosted zone for `example.com` along with an SSL/TLS certificate for that domain. ", "keywords": ["domain"]}]}, {"Id": "288822619", "PostHistoryTypeId": "1", "PostId": "75581557", "RevisionGUID": "6fb0ccc0-7082-440e-accd-02564b201973", "CreationDate": "2023-02-27T14:10:55.413", "UserId": "421049", "Text": "CloudFormation stack hosted zone deletion with certificate DNS verification", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "288822620", "PostHistoryTypeId": "3", "PostId": "75581557", "RevisionGUID": "6fb0ccc0-7082-440e-accd-02564b201973", "CreationDate": "2023-02-27T14:10:55.413", "UserId": "421049", "Text": "|amazon-web-services|aws-cloudformation|aws-certificate-manager|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "289386281", "PostHistoryTypeId": "5", "PostId": "75581557", "RevisionGUID": "c93bbfd8-ec01-4c72-bb06-11a5bad6dba3", "CreationDate": "2023-03-08T22:53:45.387", "UserId": "421049", "Comment": "Added more information to question.", "Text": "I have a simple AWS CloudFormation template for creating a hosted zone for `example.com` along with an SSL/TLS certificate for that domain. It looks something like this:\r\n\r\n```yaml\r\n\u2026\r\n\r\nResources:\r\n  HostedZone:\r\n    Type: AWS::Route53::HostedZone\r\n    Properties: \r\n      Name: example.com\r\n\r\n  Certificate:\r\n    Type: AWS::CertificateManager::Certificate\r\n    Properties:\r\n      DomainName: example.com\r\n      ValidationMethod: DNS\r\n      DomainValidationOptions:\r\n        - DomainName: example.com\r\n          HostedZoneId: !Ref HostedZone\r\n```\r\n\r\nI had understood that if I don't specify a `DeletionPolicy`, [by default CloudFormation deletes resources in a stack][1] when a stack is deleted. There are a few exceptions such as a non-empty S3 bucket, but that makes sense because in that case someone went in and added things to the bucket independent of the CloudFormation stack I presume.\r\n\r\nHowever when I delete the stack for the above template, I get an error:\r\n\r\n> `The specified hosted zone contains non-required resource record sets and so cannot be deleted. (Service: Route53, Status Code: 400, Request ID: \u2026)`\r\n\r\nOf course the error message is understandable: an extra record was added to the hosted zone in order to verify the certificate, and the hosted zone can't be deleted unless you first delete that extra record. The same thing would happen if I created all this manually.\r\n\r\nStill that behavior isn't really consistent with the documentation of `DeletionPolicy` (which says resources should be deleted automatically), and there is nothing here that wasn't created by the stack. It would seem that, despite all the assurances that \"CloudFormation is declarative\" and \"CloudFormation figures out the order in which to do things\", it comes with a lot of caveats at least when it comes to deletion.\r\n\r\nIn this case CloudFormation should figure out that it added the record after creating the hosted zone, so it should remove that record before deleting the hosted zone. But it can't figure that out.\r\n\r\n_If CloudFormation can figure out how to delete the hosted zone (which it can), and if CloudFormation can figure out how to remove the load balancer (which it can), and if CloudFormation can figure out how to remove the record from the hosted zone pointing to the load balancer before deleting the hosted zone (which it can), why can't CloudFormation figure out how to delete the certificate verification record from the hosted zone before deleting the hosted zone? _\r\n\r\nIs there some workaround to add to my stack definition to allow the hosted zone to be deleted when the stack is deleted? If I have to go in and manually remove a record every time, it defeats the purpose of CloudFormation as far as deletion is concerned.\r\n\r\n  [1]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I have a simple AWS CloudFormation template for creating a hosted zone for `example.com` along with an SSL/TLS certificate for that domain. ", "keywords": ["domain"]}]}], "answers": [{"Id": "75586517", "PostTypeId": "2", "ParentId": "75581557", "CreationDate": "2023-02-27T23:26:46.047", "Score": "0", "Body": "<p>You have to create a <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html\" rel=\"nofollow noreferrer\">custom resource</a> in a form of  a lambda function. The function would execute as part of a delete procedure of your stack and clean up your hosted zone.</p>\n<p>Your custom resource would have to use AWS SDK, e.g. boto3, to delete records from your zone. Specifically you can use <a href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/route53/client/change_resource_record_sets.html\" rel=\"nofollow noreferrer\">change_resource_record_sets</a> which can delete the records.</p>\n", "OwnerUserId": "248823", "LastEditorUserId": "248823", "LastEditDate": "2023-03-01T01:41:11.837", "LastActivityDate": "2023-03-01T01:41:11.837", "CommentCount": "9", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "133364493", "PostId": "75586517", "Score": "0", "Text": "That's a great tip with a link, and it will be useful to me to for doing more research. But could you explain further how this is done and give a rough example, so we can turn this into a full answer? Thanks.", "CreationDate": "2023-02-28T13:11:16.027", "UserId": "421049", "filtered-sentences": []}, {"Id": "133375912", "PostId": "75586517", "Score": "0", "Text": "@GarretWilson I added a bit more info to the answer, but I do not have an example. You can find it in AWS docs [here](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-custom-resources-lambda-lookup-amiids.html).", "CreationDate": "2023-03-01T01:41:58.480", "UserId": "248823", "filtered-sentences": []}, {"Id": "133511237", "PostId": "75586517", "Score": "0", "Text": "I still don't understand why CloudFormation can figure out how to remove the record pointing to the load balancer but can't figure out how to remove the record used for certificate verification.", "CreationDate": "2023-03-08T22:54:41.143", "UserId": "421049", "filtered-sentences": []}, {"Id": "133511242", "PostId": "75586517", "Score": "0", "Text": "@GarretWilson This is the question for AWS. I did not design nor maintain CloudFormation implementation.", "CreationDate": "2023-03-08T22:55:12.203", "UserId": "248823", "filtered-sentences": []}, {"Id": "133511282", "PostId": "75586517", "Score": "1", "Text": "Marcin fair enough. I guess it was a rhetorical question. Arg, these little pointless glitches are irritating. They should hire me to fix it. ", "CreationDate": "2023-03-08T22:58:51.537", "UserId": "421049", "filtered-sentences": []}, {"Id": "133511352", "PostId": "75586517", "Score": "0", "Text": "@GarretWilson That's why many people choose to use terraform instead.", "CreationDate": "2023-03-08T23:07:08.617", "UserId": "248823", "filtered-sentences": []}, {"Id": "133511405", "PostId": "75586517", "Score": "0", "Text": "Yeah, I'm seeing that. I thought I'd learn both so I would know how to compare them beyond these little one-page comparisons online which I'm sure don't reveal the real-life glitches one encounters. But for some reason I had also thought I had to pay to use Terraform on AWS. Maybe I was confused and was thinking about Kubernetes vs ECS. Anyway if Terraform is free, too, I'll probably eventually switch, but at least I'll know which is best from experience.", "CreationDate": "2023-03-08T23:13:26.297", "UserId": "421049", "filtered-sentences": [{"source": "Text", "text": "But for some reason I had also thought I had to pay to use Terraform on AWS. ", "keywords": ["pay"]}]}, {"Id": "133511415", "PostId": "75586517", "Score": "0", "Text": "@GarretWilson TF is cloud agnostic. So once you learn it once, you can work with any cloud. CloudFormation is AWS specific only.", "CreationDate": "2023-03-08T23:14:29.880", "UserId": "248823", "filtered-sentences": []}, {"Id": "133511427", "PostId": "75586517", "Score": "0", "Text": "Oh, I remember one reason I went ahead and started with CloudFormation. It is my understanding that CloudFormation will allow any developer to upload a new CloudFormation template and perform needed changes to bring the cloud state in line with the new template, but I had read that Terraform requires the current state to be kept on one machine or something. But we're getting off topic here, and I don't want to abuse Stack Overflow. Thanks for suggestions. I'll keep Terraform in mind.", "CreationDate": "2023-03-08T23:15:41.830", "UserId": "421049", "filtered-sentences": [{"source": "Text", "text": "It is my understanding that CloudFormation will allow any developer to upload a new CloudFormation template and perform needed changes to bring the cloud state in line with the new template, but I had read that Terraform requires the current state to be kept on one machine or something. ", "keywords": ["change"]}]}], "history": [{"Id": "288851191", "PostHistoryTypeId": "2", "PostId": "75586517", "RevisionGUID": "f69be344-6f1f-4b56-902f-5b0cd80bbfe1", "CreationDate": "2023-02-27T23:26:46.047", "UserId": "248823", "Text": "You have to create a [custom resource](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html) in a form of  a lambda function. The function would execute as part of a delete procedure of your stack and clean up your hosted zone.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "288920986", "PostHistoryTypeId": "5", "PostId": "75586517", "RevisionGUID": "9fc96927-b44c-4cf5-9a98-0297d80ddf86", "CreationDate": "2023-03-01T01:41:11.837", "UserId": "248823", "Comment": "added 306 characters in body", "Text": "You have to create a [custom resource](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html) in a form of  a lambda function. The function would execute as part of a delete procedure of your stack and clean up your hosted zone.\r\n\r\nYour custom resource would have to use AWS SDK, e.g. boto3, to delete records from your zone. Specifically you can use [change_resource_record_sets](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/route53/client/change_resource_record_sets.html) which can delete the records.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Specifically you can use [change_resource_record_sets](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/route53/client/change_resource_record_sets.html) which can delete the records.", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "Specifically you can use change_resource_record_sets which can delete the records.", "keywords": ["change"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I have a simple AWS CloudFormation template for creating a hosted zone for example.com along with an SSL/TLS certificate for that domain. ", "keywords": ["domain"]}]}