{"Id": "43976305", "PostTypeId": "1", "CreationDate": "2017-05-15T09:49:36.503", "Score": "0", "ViewCount": "1958", "Body": "<p>Able to create Lambda function successfully in Lambda service. But its not automatically sending mail. Iam manually clicking on Test after the Lambda function is created. How to do it from CloudFormation.</p>\n\n<p><strong>IAM Role</strong></p>\n\n<pre><code>\"LambdaExecutionRole\": {\n\"Type\": \"AWS::IAM::Role\",\n\"Properties\": {\n    \"AssumeRolePolicyDocument\": {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [{ \"Effect\": \"Allow\", \"Principal\": {\"Service\": [\"lambda.amazonaws.com\"]}, \"Action\": [\"sts:AssumeRole\"] }]\n    },          \n    \"Path\": \"/\",\n    \"Policies\": [{\n        \"PolicyName\": \"root\",\n        \"PolicyDocument\": {\n            \"Version\": \"2012-10-17\",\n            \"Statement\": [{ \"Effect\": \"Allow\", \"Action\": [\"ses:*\"], \"Resource\": \"*\" }]\n        }\n    }]\n} }\n</code></pre>\n\n<p><strong>Lamda Function</strong></p>\n\n<pre><code>\"SendEmailNotification\" : {\n  \"Type\": \"AWS::Lambda::Function\",\n  \"Properties\": {\n    \"Handler\": \"index.handler\",\n    \"Role\": { \"Fn::GetAtt\" : [\"LambdaExecutionRole\", \"Arn\"] },\n    \"Code\": {\n      \"ZipFile\":  { \"Fn::Join\": [\"\", [\n        \"var response = require('cfn-response');\\n\",\n        \"var aws = require('aws-sdk');\\n\",\n        \"var ses = new aws.SES({\\n\",\n        \"region:'us-east-1'\\n\",\n        \"});\\n\",\n        \"exports.handler = function(event, context) {\\n\",\n        \"console.log('Incoming: ', event);\\n\",\n        \"var eParams = {\\n\",\n        \"Destination: {\\n\"  ,\n        \"ToAddresses: ['abc@example.com']\\n\",\n        \"},\\n\",\n        \"Message: {\\n\",\n        \"Body: {\\n\",\n        \"Text: {\\n\",\n        {\"Fn::Join\" : [\"\",[\"Data: '\", { \"Fn::ImportValue\" : \"Route53DNSName\" },\"'\\n\"]]},\n        \"}\\n\",\n        \"},\\n\",\n        \"Subject: {\\n\",\n        \"Data: 'DNSName'\\n\",\n        \"}\\n\",\n        \"},\\n\",\n        \"Source: 'abc@example.com'\\n\",\n        \"};\\n\",\n        \"console.log('SENDING EMAIL');\\n\",\n        \"var email = ses.sendEmail(eParams, function(err, data){\\n\",\n        \"if(err) console.log(err);\\n\",\n        \"else {\\n\",\n        \"console.log('EMAIL SENT');\\n\",\n        \"console.log(data);\\n\",\n        \"console.log('EMAIL: ', email);\\n\",\n        \"context.succeed(event);\\n\",\n        \"}\\n\",\n        \"});\\n\",\n        \"};\"\n      ]]}\n    },\n    \"Runtime\": \"nodejs6.10\"\n  }\n}\n</code></pre>\n", "OwnerUserId": "6694393", "LastEditorUserId": "108207", "LastEditDate": "2019-09-27T10:18:04.547", "LastActivityDate": "2019-09-27T10:18:04.547", "Title": "Lambda Function in AWS CloudFormation", "Tags": "|node.js|amazon-web-services|aws-lambda|aws-cloudformation|", "AnswerCount": "1", "CommentCount": "2", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "75017512", "PostId": "43976305", "Score": "0", "Text": "Without looking much at your code, when do you want your lambda function to be called? Have you configured a trigger to call the function?", "CreationDate": "2017-05-16T07:00:14.683", "UserId": "2087854", "filtered-sentences": []}, {"Id": "75025953", "PostId": "43976305", "Score": "0", "Text": "How do I get SES or SNS notification of Route 53 DNS ?", "CreationDate": "2017-05-16T10:25:12.453", "UserId": "6694393", "filtered-sentences": []}], "history": [{"Id": "145397157", "PostHistoryTypeId": "2", "PostId": "43976305", "RevisionGUID": "09fe614b-8c0c-4ef4-8fd9-199cca3f8e8f", "CreationDate": "2017-05-15T09:49:36.503", "UserId": "6694393", "Text": "Able to create Lambda function successfully in Lambda service. But its not automatically sending mail. Iam manually clicking on Test after the Lambda function is created. How to do it from CloudFormation.\r\n\r\n**IAM Role**\r\n\r\n    \"LambdaExecutionRole\": {\r\n \"Type\": \"AWS::IAM::Role\",\r\n \"Properties\": {\r\n  \"AssumeRolePolicyDocument\": {\r\n         \"Version\": \"2012-10-17\",\r\n         \"Statement\": [{ \"Effect\": \"Allow\", \"Principal\": {\"Service\": [\"lambda.amazonaws.com\"]}, \"Action\": [\"sts:AssumeRole\"] }]\r\n     },      \r\n        \"Path\": \"/\",\r\n     \"Policies\": [{\r\n        \"PolicyName\": \"root\",\r\n         \"PolicyDocument\": {\r\n             \"Version\": \"2012-10-17\",\r\n             \"Statement\": [{ \"Effect\": \"Allow\", \"Action\": [\"ses:*\"], \"Resource\": \"*\" }]\r\n         }\r\n     }]\r\n   } }\r\n\r\n**Lamda Fucntion**\r\n\r\n   \r\n\r\n    \"SendEmailNotification\" : {\r\n      \"Type\": \"AWS::Lambda::Function\",\r\n      \"Properties\": {\r\n        \"Handler\": \"index.handler\",\r\n        \"Role\": { \"Fn::GetAtt\" : [\"LambdaExecutionRole\", \"Arn\"] },\r\n        \"Code\": {\r\n          \"ZipFile\":  { \"Fn::Join\": [\"\", [\r\n            \"var response = require('cfn-response');\\n\",\r\n           \"var aws = require('aws-sdk');\\n\",\r\n           \"var ses = new aws.SES({\\n\",\r\n          \"region:'us-east-1'\\n\",\r\n        \"});\\n\",\r\n        \"exports.handler = function(event, context) {\\n\",\r\n        \"console.log('Incoming: ', event);\\n\",\r\n        \"var eParams = {\\n\",\r\n        \"Destination: {\\n\" ,\r\n        \"ToAddresses: ['abc@example.com']\\n\",\r\n        \"},\\n\",\r\n        \"Message: {\\n\",\r\n        \"Body: {\\n\",\r\n        \"Text: {\\n\",\r\n        {\"Fn::Join\" : [\"\",[\"Data: '\", { \"Fn::ImportValue\" : \"SubnetId\" },\"'\\n\"]]},\r\n        \"}\\n\",\r\n        \"},\\n\",\r\n        \"Subject: {\\n\",\r\n            \"Data: 'Subnet'\\n\",\r\n            \"}\\n\",\r\n            \"},\\n\",\r\n            \"Source: 'abc@example.com'\\n\",\r\n          \"};\\n\",\r\n          \"console.log('SENDING EMAIL');\\n\",\r\n          \"var email = ses.sendEmail(eParams, function(err, data){\\n\",\r\n          \"if(err) console.log(err);\\n\",\r\n          \"else {\\n\",\r\n          \"console.log('EMAIL SENT');\\n\",\r\n          \"console.log(data);\\n\",\r\n          \"console.log('EMAIL: ', email);\\n\",\r\n          \"context.succeed(event);\\n\",\r\n          \"}\\n\",\r\n          \"});\\n\",\r\n          \"};\"\r\n          ]]}\r\n        },\r\n        \"Runtime\": \"nodejs6.10\"\r\n      }\r\n    }\r\n\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Iam manually clicking on Test after the Lambda function is created. ", "keywords": ["test"]}]}, {"Id": "145397158", "PostHistoryTypeId": "1", "PostId": "43976305", "RevisionGUID": "09fe614b-8c0c-4ef4-8fd9-199cca3f8e8f", "CreationDate": "2017-05-15T09:49:36.503", "UserId": "6694393", "Text": "Lambda Function in AWS CloudFormation", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "145397159", "PostHistoryTypeId": "3", "PostId": "43976305", "RevisionGUID": "09fe614b-8c0c-4ef4-8fd9-199cca3f8e8f", "CreationDate": "2017-05-15T09:49:36.503", "UserId": "6694393", "Text": "|node.js|amazon-web-services|aws-lambda|aws-cloudformation|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "145397736", "PostHistoryTypeId": "5", "PostId": "43976305", "RevisionGUID": "c527c215-c04d-4fd0-b82e-9c9d789b3232", "CreationDate": "2017-05-15T09:55:16.063", "UserId": "6694393", "Comment": "deleted 41 characters in body", "Text": "Able to create Lambda function successfully in Lambda service. But its not automatically sending mail. Iam manually clicking on Test after the Lambda function is created. How to do it from CloudFormation.\r\n\r\n**IAM Role**\r\n\r\n    \"LambdaExecutionRole\": {\r\n \"Type\": \"AWS::IAM::Role\",\r\n \"Properties\": {\r\n  \"AssumeRolePolicyDocument\": {\r\n         \"Version\": \"2012-10-17\",\r\n         \"Statement\": [{ \"Effect\": \"Allow\", \"Principal\": {\"Service\": [\"lambda.amazonaws.com\"]}, \"Action\": [\"sts:AssumeRole\"] }]\r\n     },      \r\n        \"Path\": \"/\",\r\n     \"Policies\": [{\r\n        \"PolicyName\": \"root\",\r\n         \"PolicyDocument\": {\r\n             \"Version\": \"2012-10-17\",\r\n             \"Statement\": [{ \"Effect\": \"Allow\", \"Action\": [\"ses:*\"], \"Resource\": \"*\" }]\r\n         }\r\n     }]\r\n   } }\r\n\r\n**Lamda Fucntion**\r\n\r\n   \r\n\r\n    \"SendEmailNotification\" : {\r\n      \"Type\": \"AWS::Lambda::Function\",\r\n      \"Properties\": {\r\n        \"Handler\": \"index.handler\",\r\n        \"Role\": { \"Fn::GetAtt\" : [\"LambdaExecutionRole\", \"Arn\"] },\r\n        \"Code\": {\r\n          \"ZipFile\":  { \"Fn::Join\": [\"\", [\r\n            \"var response = require('cfn-response');\\n\",\r\n           \"var aws = require('aws-sdk');\\n\",\r\n           \"var ses = new aws.SES({\\n\",\r\n         \"region:'us-east-1'\\n\",\r\n      \"});\\n\",\r\n      \"exports.handler = function(event, context) {\\n\",\r\n      \"console.log('Incoming: ', event);\\n\",\r\n      \"var eParams = {\\n\",\r\n      \"Destination: {\\n\" ,\r\n      \"ToAddresses: ['abc@example.com']\\n\",\r\n      \"},\\n\",\r\n      \"Message: {\\n\",\r\n      \"Body: {\\n\",\r\n      \"Text: {\\n\",\r\n      {\"Fn::Join\" : [\"\",[\"Data: '\", { \"Fn::ImportValue\" : \"SubnetId\" },\"'\\n\"]]},\r\n      \"}\\n\",\r\n      \"},\\n\",\r\n      \"Subject: {\\n\",\r\n            \"Data: 'Subnet'\\n\",\r\n            \"}\\n\",\r\n            \"},\\n\",\r\n            \"Source: 'abc@example.com'\\n\",\r\n         \"};\\n\",\r\n         \"console.log('SENDING EMAIL');\\n\",\r\n         \"var email = ses.sendEmail(eParams, function(err, data){\\n\",\r\n         \"if(err) console.log(err);\\n\",\r\n         \"else {\\n\",\r\n         \"console.log('EMAIL SENT');\\n\",\r\n         \"console.log(data);\\n\",\r\n         \"console.log('EMAIL: ', email);\\n\",\r\n         \"context.succeed(event);\\n\",\r\n         \"}\\n\",\r\n         \"});\\n\",\r\n         \"};\"\r\n          ]]}\r\n        },\r\n        \"Runtime\": \"nodejs6.10\"\r\n      }\r\n    }\r\n\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Iam manually clicking on Test after the Lambda function is created. ", "keywords": ["test"]}]}, {"Id": "145485014", "PostHistoryTypeId": "5", "PostId": "43976305", "RevisionGUID": "f7830eed-5840-4bc2-92b1-edf5a98cd504", "CreationDate": "2017-05-16T10:17:17.897", "UserId": "6694393", "Comment": "added 7 characters in body", "Text": "Able to create Lambda function successfully in Lambda service. But its not automatically sending mail. Iam manually clicking on Test after the Lambda function is created. How to do it from CloudFormation.\r\n\r\n**IAM Role**\r\n\r\n    \"LambdaExecutionRole\": {\r\n \"Type\": \"AWS::IAM::Role\",\r\n \"Properties\": {\r\n  \"AssumeRolePolicyDocument\": {\r\n         \"Version\": \"2012-10-17\",\r\n         \"Statement\": [{ \"Effect\": \"Allow\", \"Principal\": {\"Service\": [\"lambda.amazonaws.com\"]}, \"Action\": [\"sts:AssumeRole\"] }]\r\n     },      \r\n        \"Path\": \"/\",\r\n     \"Policies\": [{\r\n        \"PolicyName\": \"root\",\r\n         \"PolicyDocument\": {\r\n             \"Version\": \"2012-10-17\",\r\n             \"Statement\": [{ \"Effect\": \"Allow\", \"Action\": [\"ses:*\"], \"Resource\": \"*\" }]\r\n         }\r\n     }]\r\n   } }\r\n\r\n**Lamda Fucntion**\r\n\r\n   \r\n\r\n    \"SendEmailNotification\" : {\r\n      \"Type\": \"AWS::Lambda::Function\",\r\n      \"Properties\": {\r\n        \"Handler\": \"index.handler\",\r\n        \"Role\": { \"Fn::GetAtt\" : [\"LambdaExecutionRole\", \"Arn\"] },\r\n        \"Code\": {\r\n          \"ZipFile\":  { \"Fn::Join\": [\"\", [\r\n            \"var response = require('cfn-response');\\n\",\r\n           \"var aws = require('aws-sdk');\\n\",\r\n           \"var ses = new aws.SES({\\n\",\r\n         \"region:'us-east-1'\\n\",\r\n      \"});\\n\",\r\n      \"exports.handler = function(event, context) {\\n\",\r\n      \"console.log('Incoming: ', event);\\n\",\r\n      \"var eParams = {\\n\",\r\n      \"Destination: {\\n\" ,\r\n      \"ToAddresses: ['abc@example.com']\\n\",\r\n      \"},\\n\",\r\n      \"Message: {\\n\",\r\n      \"Body: {\\n\",\r\n      \"Text: {\\n\",\r\n      {\"Fn::Join\" : [\"\",[\"Data: '\", { \"Fn::ImportValue\" : \"Route53DNSName\" },\"'\\n\"]]},\r\n      \"}\\n\",\r\n      \"},\\n\",\r\n      \"Subject: {\\n\",\r\n            \"Data: 'DNSName'\\n\",\r\n            \"}\\n\",\r\n            \"},\\n\",\r\n            \"Source: 'abc@example.com'\\n\",\r\n         \"};\\n\",\r\n         \"console.log('SENDING EMAIL');\\n\",\r\n         \"var email = ses.sendEmail(eParams, function(err, data){\\n\",\r\n         \"if(err) console.log(err);\\n\",\r\n         \"else {\\n\",\r\n         \"console.log('EMAIL SENT');\\n\",\r\n         \"console.log(data);\\n\",\r\n         \"console.log('EMAIL: ', email);\\n\",\r\n         \"context.succeed(event);\\n\",\r\n         \"}\\n\",\r\n         \"});\\n\",\r\n         \"};\"\r\n          ]]}\r\n        },\r\n        \"Runtime\": \"nodejs6.10\"\r\n      }\r\n    }\r\n\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Iam manually clicking on Test after the Lambda function is created. ", "keywords": ["test"]}]}, {"Id": "206163930", "PostHistoryTypeId": "5", "PostId": "43976305", "RevisionGUID": "0a810598-e5fe-4027-82d6-2f001e65ffe0", "CreationDate": "2019-09-27T10:18:04.547", "UserId": "108207", "Comment": "edited body", "Text": "Able to create Lambda function successfully in Lambda service. But its not automatically sending mail. Iam manually clicking on Test after the Lambda function is created. How to do it from CloudFormation.\r\n\r\n**IAM Role**\r\n\r\n    \"LambdaExecutionRole\": {\r\n \"Type\": \"AWS::IAM::Role\",\r\n \"Properties\": {\r\n  \"AssumeRolePolicyDocument\": {\r\n         \"Version\": \"2012-10-17\",\r\n         \"Statement\": [{ \"Effect\": \"Allow\", \"Principal\": {\"Service\": [\"lambda.amazonaws.com\"]}, \"Action\": [\"sts:AssumeRole\"] }]\r\n     },      \r\n        \"Path\": \"/\",\r\n     \"Policies\": [{\r\n        \"PolicyName\": \"root\",\r\n         \"PolicyDocument\": {\r\n             \"Version\": \"2012-10-17\",\r\n             \"Statement\": [{ \"Effect\": \"Allow\", \"Action\": [\"ses:*\"], \"Resource\": \"*\" }]\r\n         }\r\n     }]\r\n   } }\r\n\r\n**Lamda Function**\r\n\r\n   \r\n\r\n    \"SendEmailNotification\" : {\r\n      \"Type\": \"AWS::Lambda::Function\",\r\n      \"Properties\": {\r\n        \"Handler\": \"index.handler\",\r\n        \"Role\": { \"Fn::GetAtt\" : [\"LambdaExecutionRole\", \"Arn\"] },\r\n        \"Code\": {\r\n          \"ZipFile\":  { \"Fn::Join\": [\"\", [\r\n            \"var response = require('cfn-response');\\n\",\r\n           \"var aws = require('aws-sdk');\\n\",\r\n           \"var ses = new aws.SES({\\n\",\r\n         \"region:'us-east-1'\\n\",\r\n      \"});\\n\",\r\n      \"exports.handler = function(event, context) {\\n\",\r\n      \"console.log('Incoming: ', event);\\n\",\r\n      \"var eParams = {\\n\",\r\n      \"Destination: {\\n\" ,\r\n      \"ToAddresses: ['abc@example.com']\\n\",\r\n      \"},\\n\",\r\n      \"Message: {\\n\",\r\n      \"Body: {\\n\",\r\n      \"Text: {\\n\",\r\n      {\"Fn::Join\" : [\"\",[\"Data: '\", { \"Fn::ImportValue\" : \"Route53DNSName\" },\"'\\n\"]]},\r\n      \"}\\n\",\r\n      \"},\\n\",\r\n      \"Subject: {\\n\",\r\n            \"Data: 'DNSName'\\n\",\r\n            \"}\\n\",\r\n            \"},\\n\",\r\n            \"Source: 'abc@example.com'\\n\",\r\n         \"};\\n\",\r\n         \"console.log('SENDING EMAIL');\\n\",\r\n         \"var email = ses.sendEmail(eParams, function(err, data){\\n\",\r\n         \"if(err) console.log(err);\\n\",\r\n         \"else {\\n\",\r\n         \"console.log('EMAIL SENT');\\n\",\r\n         \"console.log(data);\\n\",\r\n         \"console.log('EMAIL: ', email);\\n\",\r\n         \"context.succeed(event);\\n\",\r\n         \"}\\n\",\r\n         \"});\\n\",\r\n         \"};\"\r\n          ]]}\r\n        },\r\n        \"Runtime\": \"nodejs6.10\"\r\n      }\r\n    }\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Iam manually clicking on Test after the Lambda function is created. ", "keywords": ["test"]}]}], "answers": [{"Id": "43997896", "PostTypeId": "2", "ParentId": "43976305", "CreationDate": "2017-05-16T09:43:38.933", "Score": "1", "Body": "<p>I understook you want to send the Lambda function to be triggered when you run the cloud formation template. </p>\n\n<p>The <code>AWS::Lambda::Function</code> resource type only creates the lambda function, it does <strong>not</strong> execute it. If you want it to be run together with cloudformation, you need a Custom Lambda Backed Resource (<a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources-lambda.html\" rel=\"nofollow noreferrer\">http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources-lambda.html</a>)</p>\n\n<p>Here is a sample that runs a lambda when cloudformation is created:</p>\n\n<pre><code>Resources:\n  TestFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      Runtime: python2.7\n      Handler: index.handler\n      Role: !GetAtt TestRole.Arn\n      Code:\n        ZipFile: !Sub |\n          from botocore.vendored import requests\n          import json\n\n\n          def send(event, context, responseStatus, responseData, physicalResourceId):\n              responseUrl = event['ResponseURL']\n\n              print responseUrl\n\n              responseBody = {}\n              responseBody['Status'] = responseStatus\n              responseBody['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name\n              responseBody['PhysicalResourceId'] = physicalResourceId or context.log_stream_name\n              responseBody['StackId'] = event['StackId']\n              responseBody['RequestId'] = event['RequestId']\n              responseBody['LogicalResourceId'] = event['LogicalResourceId']\n              responseBody['Data'] = responseData\n\n              json_responseBody = json.dumps(responseBody)\n\n              print \"Response body:\\n\" + json_responseBody\n\n              headers = {\n                  'content-type' : '',\n                  'content-length' : str(len(json_responseBody))\n              }\n\n              try:\n                  response = requests.put(responseUrl,\n                                          data=json_responseBody,\n                                          headers=headers)\n                  print \"Status code: \" + response.reason\n              except Exception as e:\n                  print \"send(..) failed executing requests.put(..): \" + str(e)\n\n          def handler(event, context):\n              print event\n              print context\n\n              responseData = {}\n\n              send(event, context, \"SUCCESS\", responseData, \"CustomResourcePhysicalID\")\n\n  TestRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          -\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Policies:\n        - PolicyName: AllowAccess\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action:\n                  - \"logs:*\"\n                Resource: \"arn:aws:logs:*:*:*\"\n\n  CustomResourceTest:\n    Type: Custom::Demo\n    Properties:\n      ServiceToken: !GetAtt TestFunction.Arn\n</code></pre>\n\n<p>This simply runs the function, as you can see in the CloudWatch logs. Adapt as you need for sending email.</p>\n\n<p>You have to pay attention to a couple of things:</p>\n\n<ul>\n<li>The function will only be executed if the CustomResource changes. Changing an input parameter will do the trick. In your case, maybe pass the subnet ID to the custom resource.</li>\n<li>Also, consider if sending emails from Cloudformation is indeed a good idea. Without knowing your use case exactly it's hard to tell, but maybe listening to config changes in CloudTrail is better? Also consider sending a notification to SNS instead of directly email.</li>\n</ul>\n", "OwnerUserId": "1544021", "LastActivityDate": "2017-05-16T09:43:38.933", "CommentCount": "2", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "75025566", "PostId": "43997896", "Score": "0", "Text": "Actually my goal is to get notified by Hosted Zone DNS. Iam creating the stack ( Hosted Zone attached Application Load Balancer ) by using AWS CLI. So without checking in AWS Console, I should get the Email notification of Hosted Zone DNS Name.", "CreationDate": "2017-05-16T10:15:58.603", "UserId": "6694393", "filtered-sentences": []}, {"Id": "75108978", "PostId": "43997896", "Score": "0", "Text": "Why Iam getting Custom Resource creation failed?", "CreationDate": "2017-05-18T07:40:41.930", "UserId": "6694393", "filtered-sentences": []}], "history": [{"Id": "145482005", "PostHistoryTypeId": "2", "PostId": "43997896", "RevisionGUID": "0d545e7c-8df4-47d6-9c47-d9d2246f0b66", "CreationDate": "2017-05-16T09:43:38.933", "UserId": "1544021", "Text": "I understook you want to send the Lambda function to be triggered when you run the cloud formation template. \r\n\r\nThe `AWS::Lambda::Function` resource type only creates the lambda function, it does **not** execute it. If you want it to be run together with cloudformation, you need a Custom Lambda Backed Resource (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources-lambda.html)\r\n\r\nHere is a sample that runs a lambda when cloudformation is created:\r\n\r\n    Resources:\r\n      TestFunction:\r\n        Type: AWS::Lambda::Function\r\n        Properties:\r\n          Runtime: python2.7\r\n          Handler: index.handler\r\n          Role: !GetAtt TestRole.Arn\r\n          Code:\r\n            ZipFile: !Sub |\r\n              from botocore.vendored import requests\r\n              import json\r\n    \r\n    \r\n              def send(event, context, responseStatus, responseData, physicalResourceId):\r\n                  responseUrl = event['ResponseURL']\r\n    \r\n                  print responseUrl\r\n    \r\n                  responseBody = {}\r\n                  responseBody['Status'] = responseStatus\r\n                  responseBody['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name\r\n                  responseBody['PhysicalResourceId'] = physicalResourceId or context.log_stream_name\r\n                  responseBody['StackId'] = event['StackId']\r\n                  responseBody['RequestId'] = event['RequestId']\r\n                  responseBody['LogicalResourceId'] = event['LogicalResourceId']\r\n                  responseBody['Data'] = responseData\r\n    \r\n                  json_responseBody = json.dumps(responseBody)\r\n    \r\n                  print \"Response body:\\n\" + json_responseBody\r\n    \r\n                  headers = {\r\n                      'content-type' : '',\r\n                      'content-length' : str(len(json_responseBody))\r\n                  }\r\n    \r\n                  try:\r\n                      response = requests.put(responseUrl,\r\n                                              data=json_responseBody,\r\n                                              headers=headers)\r\n                      print \"Status code: \" + response.reason\r\n                  except Exception as e:\r\n                      print \"send(..) failed executing requests.put(..): \" + str(e)\r\n    \r\n              def handler(event, context):\r\n                  print event\r\n                  print context\r\n    \r\n                  responseData = {}\r\n    \r\n                  send(event, context, \"SUCCESS\", responseData, \"CustomResourcePhysicalID\")\r\n    \r\n      TestRole:\r\n        Type: AWS::IAM::Role\r\n        Properties:\r\n          AssumeRolePolicyDocument:\r\n            Version: 2012-10-17\r\n            Statement:\r\n              -\r\n                Effect: Allow\r\n                Principal:\r\n                  Service:\r\n                    - lambda.amazonaws.com\r\n                Action:\r\n                  - sts:AssumeRole\r\n          Policies:\r\n            - PolicyName: AllowAccess\r\n              PolicyDocument:\r\n                Version: 2012-10-17\r\n                Statement:\r\n                  - Effect: Allow\r\n                    Action:\r\n                      - \"logs:*\"\r\n                    Resource: \"arn:aws:logs:*:*:*\"\r\n    \r\n      CustomResourceTest:\r\n        Type: Custom::Demo\r\n        Properties:\r\n          ServiceToken: !GetAtt TestFunction.Arn\r\n\r\nThis simply runs the function, as you can see in the CloudWatch logs. Adapt as you need for sending email.\r\n\r\nYou have to pay attention to a couple of things:\r\n\r\n* The function will only be executed if the CustomResource changes. Changing an input parameter will do the trick. In your case, maybe pass the subnet ID to the custom resource.\r\n* Also, consider if sending emails from Cloudformation is indeed a good idea. Without knowing your use case exactly it's hard to tell, but maybe listening to config changes in CloudTrail is better? Also consider sending a notification to SNS instead of directly email.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "If you want it to be run together with cloudformation, you need a Custom Lambda Backed Resource (http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources-lambda.html) Here is a sample that runs a lambda when cloudformation is created: Resources: TestFunction: Type: AWS::Lambda::Function Properties: Runtime: python2.7 Handler: index.handler Role: !GetAtt TestRole.Arn Code: ZipFile: !Sub | from botocore.vendored import requests import json def send(event, context, responseStatus, responseData, physicalResourceId): responseUrl = event['ResponseURL'] print responseUrl responseBody = {} responseBody['Status'] = responseStatus responseBody['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name responseBody['PhysicalResourceId'] = physicalResourceId or context.log_stream_name responseBody['StackId'] = event['StackId'] responseBody['RequestId'] = event['RequestId'] responseBody['LogicalResourceId'] = event['LogicalResourceId'] responseBody['Data'] = responseData json_responseBody = json.dumps(responseBody) print \"Response body:\\n\" + json_responseBody headers = { 'content-type' : '', 'content-length' : str(len(json_responseBody)) } try: response = requests.put(responseUrl, data=json_responseBody, headers=headers) print \"Status code: \" + response.reason except Exception as e: print \"send(..) failed executing requests.put(..): \" + str(e) def handler(event, context): print event print context responseData = {} send(event, context, \"SUCCESS\", responseData, \"CustomResourcePhysicalID\") TestRole: Type: AWS::IAM::Role Properties: AssumeRolePolicyDocument: Version: 2012-10-17 Statement: - Effect: Allow Principal: Service: - lambda.amazonaws.com Action: - sts:AssumeRole Policies: - PolicyName: AllowAccess PolicyDocument: Version: 2012-10-17 Statement: - Effect: Allow Action: - \"logs:*\" Resource: \"arn:aws:logs:*:*:*\" CustomResourceTest: Type: Custom::Demo Properties: ServiceToken: !GetAtt TestFunction.Arn ", "keywords": ["test"]}, {"source": "Text", "text": "You have to pay attention to a couple of things: * ", "keywords": ["pay"]}, {"source": "Text", "text": "The function will only be executed if the CustomResource changes. ", "keywords": ["change"]}, {"source": "Text", "text": "Changing an input parameter will do the trick. ", "keywords": ["change"]}, {"source": "Text", "text": "Without knowing your use case exactly it's hard to tell, but maybe listening to config changes in CloudTrail is better? ", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "You have to pay attention to a couple of things: ", "keywords": ["pay"]}, {"source": "Body", "text": "The function will only be executed if the CustomResource changes. ", "keywords": ["change"]}, {"source": "Body", "text": "Changing an input parameter will do the trick. ", "keywords": ["change"]}, {"source": "Body", "text": "Without knowing your use case exactly it's hard to tell, but maybe listening to config changes in CloudTrail is better? ", "keywords": ["change"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "Iam manually clicking on Test after the Lambda function is created. ", "keywords": ["test"]}]}