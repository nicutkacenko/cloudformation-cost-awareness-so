{"Id": "50577887", "PostTypeId": "1", "AcceptedAnswerId": "50665885", "CreationDate": "2018-05-29T06:43:41.810", "Score": "5", "ViewCount": "5033", "Body": "<p>The below lambda function is to associate a SNS topic to the existing directories, followed by a custom resource to invoke the lambda func itself. I see that the lambda creation is successful with the 'Register_event_topic' also completing. However, the stack fails after a while mostly because the 'custom resource failed to stabilize in expected time'; How can I ensure that the stack does not error out?    </p>\n\n<pre><code>AWSTemplateFormatVersion: '2010-09-09'\n    #creating lambda function to register_event_topic\n    Description: Lambda function to register event topic with existing directory ID\n    Parameters:\n      RoleName:\n        Type: String\n        Description: \"IAM Role used for Lambda execution\"\n        Default: \"arn:aws:iam::&lt;&lt;Accountnumber&gt;&gt;:role/LambdaExecutionRole\"\n      EnvVariable:\n        Type: String\n        Description: \"The Environment variable set for the lambda func\"\n        Default: \"ESdirsvcSNS\"\n    Resources:\n      REGISTEREVENTTOPIC:\n        Type: 'AWS::Lambda::Function'\n        Properties:\n          FunctionName: dirsvc_snstopic_lambda\n          Handler: index.lambda_handler\n          Runtime: python3.6\n          Description: Lambda func code to assoc dirID with created SNS topic\n          Code:\n            ZipFile: |\n              import boto3\n              import os\n              import logging\n              dsclient = boto3.client('ds')\n              def lambda_handler(event, context):\n                response = dsclient.describe_directories()\n                directoryList = []\n                print(response)\n                for directoryList in response['DirectoryDescriptions']:\n                    listTopics = dsclient.describe_event_topics(\n                      DirectoryId=directoryList['DirectoryId']\n                    )\n                    eventTopics = listTopics['EventTopics']\n                    topiclength = len(eventTopics)\n                    if topiclength == 0:\n                      response = dsclient.register_event_topic(\n                          DirectoryId=directoryList['DirectoryId'],\n                          TopicName= (os.environ['MONITORING_TOPIC_NAME'])\n                      )  \n                    print(listTopics)\n          Timeout: 60\n          Environment:\n            Variables:\n              MONITORING_TOPIC_NAME: !Ref EnvVariable\n          Role: !Ref RoleName\n\n      InvokeLambda:\n        Type: Custom::InvokeLambda\n        Properties:\n          ServiceToken: !GetAtt REGISTEREVENTTOPIC.Arn\n          ReservedConcurrentExecutions: 1\n</code></pre>\n", "OwnerUserId": "9834351", "LastActivityDate": "2019-03-20T20:00:03.460", "Title": "Lambda backed custom resource cf template returns 'CREATE_FAILED'", "Tags": "|aws-lambda|aws-cloudformation|", "AnswerCount": "2", "CommentCount": "0", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "174410392", "PostHistoryTypeId": "2", "PostId": "50577887", "RevisionGUID": "e36f42fa-386c-48dc-8bc1-00e033a2da24", "CreationDate": "2018-05-29T06:43:41.810", "UserId": "9834351", "Text": "The below lambda function is to associate a SNS topic to the existing directories, followed by a custom resource to invoke the lambda func itself. I see that the lambda creation is successful with the 'Register_event_topic' also completing. However, the stack fails after a while mostly because the 'custom resource failed to stabilize in expected time'; How can I ensure that the stack does not error out?    \r\n\r\n    AWSTemplateFormatVersion: '2010-09-09'\r\n        #creating lambda function to register_event_topic\r\n        Description: Lambda function to register event topic with existing directory ID\r\n        Parameters:\r\n          RoleName:\r\n            Type: String\r\n            Description: \"IAM Role used for Lambda execution\"\r\n            Default: \"arn:aws:iam::<<Accountnumber>>:role/LambdaExecutionRole\"\r\n          EnvVariable:\r\n            Type: String\r\n            Description: \"The Environment variable set for the lambda func\"\r\n            Default: \"ESdirsvcSNS\"\r\n        Resources:\r\n          REGISTEREVENTTOPIC:\r\n            Type: 'AWS::Lambda::Function'\r\n            Properties:\r\n              FunctionName: dirsvc_snstopic_lambda\r\n              Handler: index.lambda_handler\r\n              Runtime: python3.6\r\n              Description: Lambda func code to assoc dirID with created SNS topic\r\n              Code:\r\n                ZipFile: |\r\n                  import boto3\r\n                  import os\r\n                  import logging\r\n                  dsclient = boto3.client('ds')\r\n                  def lambda_handler(event, context):\r\n                    response = dsclient.describe_directories()\r\n                    directoryList = []\r\n                    print(response)\r\n                    for directoryList in response['DirectoryDescriptions']:\r\n                        listTopics = dsclient.describe_event_topics(\r\n                          DirectoryId=directoryList['DirectoryId']\r\n                        )\r\n                        eventTopics = listTopics['EventTopics']\r\n                        topiclength = len(eventTopics)\r\n                        if topiclength == 0:\r\n                          response = dsclient.register_event_topic(\r\n                              DirectoryId=directoryList['DirectoryId'],\r\n                              TopicName= (os.environ['MONITORING_TOPIC_NAME'])\r\n                          )  \r\n                        print(listTopics)\r\n              Timeout: 60\r\n              Environment:\r\n                Variables:\r\n                  MONITORING_TOPIC_NAME: !Ref EnvVariable\r\n              Role: !Ref RoleName\r\n          \r\n          InvokeLambda:\r\n            Type: Custom::InvokeLambda\r\n            Properties:\r\n              ServiceToken: !GetAtt REGISTEREVENTTOPIC.Arn\r\n              ReservedConcurrentExecutions: 1", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "AWSTemplateFormatVersion: '2010-09-09' #creating lambda function to register_event_topic Description: Lambda function to register event topic with existing directory ID Parameters: RoleName: Type: String Description: \"IAM Role used for Lambda execution\" Default: \"arn:aws:iam::<>:role/LambdaExecutionRole\" EnvVariable: Type: String Description: \"The Environment variable set for the lambda func\" Default: \"ESdirsvcSNS\" Resources: REGISTEREVENTTOPIC: Type: 'AWS::Lambda::Function' Properties: FunctionName: dirsvc_snstopic_lambda Handler: index.lambda_handler Runtime: python3.6 Description: Lambda func code to assoc dirID with created SNS topic Code: ZipFile: | import boto3 import os import logging dsclient = boto3.client('ds') def lambda_handler(event, context): response = dsclient.describe_directories() directoryList = [] print(response) for directoryList in response['DirectoryDescriptions']: listTopics = dsclient.describe_event_topics( DirectoryId=directoryList['DirectoryId'] ) eventTopics = listTopics['EventTopics'] topiclength = len(eventTopics) if topiclength == 0: response = dsclient.register_event_topic( DirectoryId=directoryList['DirectoryId'], TopicName= (os.environ['MONITORING_TOPIC_NAME']) ) print(listTopics) Timeout: 60 Environment: Variables: MONITORING_TOPIC_NAME: !Ref EnvVariable Role: !Ref RoleName InvokeLambda: Type: Custom::InvokeLambda Properties: ServiceToken: !GetAtt REGISTEREVENTTOPIC.Arn ReservedConcurrentExecutions: 1", "keywords": ["logging"]}]}, {"Id": "174410393", "PostHistoryTypeId": "1", "PostId": "50577887", "RevisionGUID": "e36f42fa-386c-48dc-8bc1-00e033a2da24", "CreationDate": "2018-05-29T06:43:41.810", "UserId": "9834351", "Text": "Lambda backed custom resource cf template returns 'CREATE_FAILED'", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "174410394", "PostHistoryTypeId": "3", "PostId": "50577887", "RevisionGUID": "e36f42fa-386c-48dc-8bc1-00e033a2da24", "CreationDate": "2018-05-29T06:43:41.810", "UserId": "9834351", "Text": "|aws-lambda|aws-cloudformation|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "50578620", "PostTypeId": "2", "ParentId": "50577887", "CreationDate": "2018-05-29T07:24:46.900", "Score": "7", "Body": "<p>Alas, writing a Custom Resource is not as simple as you'd initially think. Instead, special code must be added to <strong>post the response back to a URL</strong>.</p>\n\n<p>You can see this in the sample Zip file provided on: <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-custom-resources-lambda-lookup-amiids.html\" rel=\"noreferrer\">Walkthrough: Looking Up Amazon Machine Image IDs - AWS CloudFormation</a></p>\n\n<p>From the <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html\" rel=\"noreferrer\">Custom Resources - AWS CloudFormation</a> documentation:</p>\n\n<blockquote>\n  <p>The custom resource provider processes the AWS CloudFormation request and returns a response of <code>SUCCESS</code> or <code>FAILED</code> to the pre-signed URL. The custom resource provider provides the response in a JSON-formatted file and uploads it to the pre-signed S3 URL.</p>\n</blockquote>\n\n<p>This is due to the asynchronous behaviour of CloudFormation. It doesn't simply call the Lambda function and then wait for a response. Rather, it triggers the Lambda function and the function must call back and trigger the next step in CloudFormation.</p>\n", "OwnerUserId": "174777", "LastActivityDate": "2018-05-29T07:24:46.900", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "98936513", "PostId": "50578620", "Score": "1", "Text": "That little note about CFN being async was what was missing for me, I assumed it worked the same as CFN transform macros which require a correct synchronous response from the Lambda...thanks for the link!", "CreationDate": "2019-05-15T16:07:59.487", "UserId": "7207514", "filtered-sentences": []}], "history": [{"Id": "174413280", "PostHistoryTypeId": "2", "PostId": "50578620", "RevisionGUID": "3db28c9a-71a2-4ba3-9ac7-b3237cfc23ab", "CreationDate": "2018-05-29T07:24:46.900", "UserId": "174777", "Text": "Alas, writing a Custom Resource is not as simple as you'd initially think. Instead, special code must be added to **post the response back to a URL**.\r\n\r\nYou can see this in the sample Zip file provided on: [Walkthrough: Looking Up Amazon Machine Image IDs - AWS CloudFormation](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-custom-resources-lambda-lookup-amiids.html)\r\n\r\nFrom the [Custom Resources - AWS CloudFormation](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html) documentation:\r\n\r\n>The custom resource provider processes the AWS CloudFormation request and returns a response of `SUCCESS` or `FAILED` to the pre-signed URL. The custom resource provider provides the response in a JSON-formatted file and uploads it to the pre-signed S3 URL.\r\n\r\nThis is due to the asynchronous behaviour of CloudFormation. It doesn't simply call the Lambda function and then wait for a response. Rather, it triggers the Lambda function and the function must call back and trigger the next step in CloudFormation.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You can see this in the sample Zip file provided on: [Walkthrough: Looking Up Amazon Machine Image IDs - AWS CloudFormation](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-custom-resources-lambda-lookup-amiids.html) From the [Custom Resources - AWS CloudFormation](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html) documentation: >The custom resource provider processes the AWS CloudFormation request and returns a response of `SUCCESS` or `FAILED` to the pre-signed URL. ", "keywords": ["provider"]}, {"source": "Text", "text": "The custom resource provider provides the response in a JSON-formatted file and uploads it to the pre-signed S3 URL. ", "keywords": ["provider"]}]}], "filtered-sentences": [{"source": "Body", "text": "The custom resource provider processes the AWS CloudFormation request and returns a response of SUCCESS or FAILED to the pre-signed URL. ", "keywords": ["provider"]}, {"source": "Body", "text": "The custom resource provider provides the response in a JSON-formatted file and uploads it to the pre-signed S3 URL. ", "keywords": ["provider"]}]}, {"Id": "50665885", "PostTypeId": "2", "ParentId": "50577887", "CreationDate": "2018-06-03T11:28:20.993", "Score": "5", "Body": "<p>Your lambda doesn't support custom resource life cycle</p>\n\n<blockquote>\n  <p>In a Lambda backed custom resource, you implement your logic to\n  support creation, update and deletion of the resource. These\n  indications are sent from CloudFormation via the event and give you\n  information about the stack process.</p>\n</blockquote>\n\n<p>In addition, you should also return your status back to CloudFormation</p>\n\n<blockquote>\n  <p>CloudFormation expects to get a response from your Lambda function after you're done with your logic. It will not continue with the deployment process if it doesn\u2019t get a response, or at least until a 1 hour(!) timeout is reached. It can cost you a lot of time and frustration.</p>\n</blockquote>\n\n<p>You can read more <a href=\"https://medium.com/@sch.bar/a-deep-dive-on-aws-cloudformation-custom-resources-8e04c6d155fd\" rel=\"nofollow noreferrer\">here</a></p>\n", "OwnerUserId": "4698029", "LastEditorUserId": "4698029", "LastEditDate": "2019-03-10T06:49:49.340", "LastActivityDate": "2019-03-10T06:49:49.340", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "174781737", "PostHistoryTypeId": "5", "PostId": "50665885", "RevisionGUID": "45237772-5cfd-4336-9a17-25594732fcee", "CreationDate": "2018-06-03T12:08:14.260", "UserId": "4698029", "Comment": "added 13 characters in body", "Text": "Your lambda doesn't support custom resource life cycle\r\n\r\n> In a Lambda backed custom resource, you implement your logic to\r\n> support creation, update and deletion of the resource. These\r\n> indications are sent from CloudFormation via the event and give you\r\n> information about the stack process.\r\n\r\nIn addition, you should also return your status back to CloudFormation\r\n\r\n> CloudFormation expects to get a response from your Lambda function after you're done with your logic. It will not continue with the deployment process if it doesn\u2019t get a response, or at least until a 1 hour(!) timeout is reached. It can cost you a lot of time and frustration.\r\n\r\nYou can read more [here][1]\r\n\r\n\r\n  [1]: https://medium.com/@sch.bar/a-deep-dive-on-aws-cloudformation-custom-resources-72416f2e9cef", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "It can cost you a lot of time and frustration. ", "keywords": ["cost"]}]}, {"Id": "174780323", "PostHistoryTypeId": "2", "PostId": "50665885", "RevisionGUID": "f1f2110e-a61b-4909-956b-df2cecbc0d67", "CreationDate": "2018-06-03T11:28:20.993", "UserId": "4698029", "Text": "Your lambda doesn't support custom resource life cycle\r\n\r\n> In a Lambda backed custom resource, you implement your logic to\r\n> support creation, update and deletion of the resource. These\r\n> indications are sent from CloudFormation via the event and give you\r\n> information about the stack process.\r\n\r\nIn addition, you should also return your status back to CloudFormation\r\n\r\n> CloudFormation expects to get a response from your Lambda function after you're done with your logic. It will not continue with the deployment process if it doesn\u2019t get a response, or at least until a 1 hour(!) timeout is reached. It can cost you a lot of time and frustration.\r\n\r\nYou can read more [here][1]\r\n\r\n\r\n  [1]: https://www.puresec.io/blog/a-deep-dive-on-aws-cloudformation-custom-resources", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "It can cost you a lot of time and frustration. ", "keywords": ["cost"]}]}, {"Id": "193292215", "PostHistoryTypeId": "5", "PostId": "50665885", "RevisionGUID": "09bda452-d8a3-465c-98ff-0790060a35b0", "CreationDate": "2019-03-10T06:49:49.340", "UserId": "4698029", "Comment": "edited body", "Text": "Your lambda doesn't support custom resource life cycle\r\n\r\n> In a Lambda backed custom resource, you implement your logic to\r\n> support creation, update and deletion of the resource. These\r\n> indications are sent from CloudFormation via the event and give you\r\n> information about the stack process.\r\n\r\nIn addition, you should also return your status back to CloudFormation\r\n\r\n> CloudFormation expects to get a response from your Lambda function after you're done with your logic. It will not continue with the deployment process if it doesn\u2019t get a response, or at least until a 1 hour(!) timeout is reached. It can cost you a lot of time and frustration.\r\n\r\nYou can read more [here][1]\r\n\r\n\r\n  [1]: https://medium.com/@sch.bar/a-deep-dive-on-aws-cloudformation-custom-resources-8e04c6d155fd", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "It can cost you a lot of time and frustration. ", "keywords": ["cost"]}]}], "filtered-sentences": [{"source": "Body", "text": "It can cost you a lot of time and frustration. ", "keywords": ["cost"]}]}], "contains-topic": true, "filtered-sentences": []}