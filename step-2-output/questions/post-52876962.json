{"Id": "52876962", "PostTypeId": "1", "AcceptedAnswerId": "52877164", "CreationDate": "2018-10-18T14:59:24.980", "Score": "0", "ViewCount": "377", "Body": "<p>Is it possible to create an aws dynamodb resource and attach it to a cloudformation stack post stack creation?</p>\n\n<p>Use case: I have a dynamodb table that I want to wipe clean (delete all items). The two ways to do this are deleting and then recreating the table or deleting each item individually which is costly. As such, I would like to opt for deleting and recreating the whole table. However, the resource belongs to a cloudformation stack and I'd like to keep it that way.</p>\n\n<p>Any ideas?</p>\n", "OwnerUserId": "8397886", "LastActivityDate": "2018-10-18T15:09:33.703", "Title": "Create AWS dynamodb table via aws cli and attach it to a cloudformation stack", "Tags": "|amazon-web-services|amazon-dynamodb|aws-cloudformation|", "AnswerCount": "1", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "92670200", "PostId": "52876962", "Score": "1", "Text": "I wouldn't recommend it but you could always try it first with another stack. Save off the table's tags, then delete the table, then recreate it with the same table name, same key, same LSI/GSI, and re-apply the tags. The CF stack refers to the table by ARN, which will be the same if you give the table the same name.", "CreationDate": "2018-10-18T16:18:06.553", "UserId": "271415", "filtered-sentences": []}], "history": [{"Id": "184039725", "PostHistoryTypeId": "2", "PostId": "52876962", "RevisionGUID": "60521aaa-4a30-457c-bdcb-2dbc34b12ff6", "CreationDate": "2018-10-18T14:59:24.980", "UserId": "8397886", "Text": "Is it possible to create an aws dynamodb resource and attach it to a cloudformation stack post stack creation?\r\n\r\nUse case: I have a dynamodb table that I want to wipe clean (delete all items). The two ways to do this are deleting and then recreating the table or deleting each item individually which is costly. As such, I would like to opt for deleting and recreating the whole table. However, the resource belongs to a cloudformation stack and I'd like to keep it that way.\r\n\r\nAny ideas?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "184039726", "PostHistoryTypeId": "1", "PostId": "52876962", "RevisionGUID": "60521aaa-4a30-457c-bdcb-2dbc34b12ff6", "CreationDate": "2018-10-18T14:59:24.980", "UserId": "8397886", "Text": "Create AWS dynamodb table via aws cli and attach it to a cloudformation stack", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "184039727", "PostHistoryTypeId": "3", "PostId": "52876962", "RevisionGUID": "60521aaa-4a30-457c-bdcb-2dbc34b12ff6", "CreationDate": "2018-10-18T14:59:24.980", "UserId": "8397886", "Text": "|amazon-web-services|amazon-dynamodb|aws-cloudformation|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "52877164", "PostTypeId": "2", "ParentId": "52876962", "CreationDate": "2018-10-18T15:09:33.703", "Score": "2", "Body": "<p>It's easy enough to remove the table from the stack resources, either by simply removing the resource from the template, or, a bit of a cleaner solution, use a <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html\" rel=\"nofollow noreferrer\">Condition</a> on the cloudformation resource to toggle the table on or off.  you can then toggle off, deploy the stack ( removing the table), toggle on, and recreate the stack (recreating the table).  </p>\n\n<p>The real challenge with this technique is not the table itself, but all the references to that table in the CloudFormation stack.  It's likely that you'll  be referring to the table elsewhere - for example, as resources in your IAM Policies allowing access, in your application config to specify the table, etc.  If this is the case, you'll have to change those places too, to use <code>Fn::If</code> to control the creation of the reference with the same condition that creates the table.  This ends up being rather complicated, but can be done with a combination of <code>Fn::If</code> and <code>{\"Ref\": \"AWS::NoValue\" }</code>.  </p>\n\n<p>I've done devops in AWS for quite a few years, and overall, I'd strongly recommend my developers to build an efficient script to clear dynamo tables and use that.  It's not trivial to purge the table by deleting all items, but it's a lot simpler than conditionalizing the creation of all references to the table in your stack.  At the end of the day, resetting the table data is an operational task distinct from infrastructure management, I'd suggest you keep it that way.  <a href=\"https://stackoverflow.com/questions/9154264/what-is-the-recommended-way-to-delete-a-large-number-of-items-from-dynamodb\">What is the recommended way to delete a large number of items from DynamoDB?</a> might get you started .  </p>\n", "OwnerUserId": "1726083", "LastActivityDate": "2018-10-18T15:09:33.703", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "184040535", "PostHistoryTypeId": "2", "PostId": "52877164", "RevisionGUID": "c19972ad-d575-4ce2-8bc2-23550b56ce24", "CreationDate": "2018-10-18T15:09:33.703", "UserId": "1726083", "Text": "It's easy enough to remove the table from the stack resources, either by simply removing the resource from the template, or, a bit of a cleaner solution, use a [Condition](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html) on the cloudformation resource to toggle the table on or off.  you can then toggle off, deploy the stack ( removing the table), toggle on, and recreate the stack (recreating the table).  \r\n\r\nThe real challenge with this technique is not the table itself, but all the references to that table in the CloudFormation stack.  It's likely that you'll  be referring to the table elsewhere - for example, as resources in your IAM Policies allowing access, in your application config to specify the table, etc.  If this is the case, you'll have to change those places too, to use `Fn::If` to control the creation of the reference with the same condition that creates the table.  This ends up being rather complicated, but can be done with a combination of `Fn::If` and `{\"Ref\": \"AWS::NoValue\" }`.  \r\n\r\nI've done devops in AWS for quite a few years, and overall, I'd strongly recommend my developers to build an efficient script to clear dynamo tables and use that.  It's not trivial to purge the table by deleting all items, but it's a lot simpler than conditionalizing the creation of all references to the table in your stack.  At the end of the day, resetting the table data is an operational task distinct from infrastructure management, I'd suggest you keep it that way.  https://stackoverflow.com/questions/9154264/what-is-the-recommended-way-to-delete-a-large-number-of-items-from-dynamodb might get you started .  ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "If this is the case, you'll have to change those places too, to use `Fn::If` to control the creation of the reference with the same condition that creates the table. ", "keywords": ["change"]}, {"source": "Text", "text": "I've done devops in AWS for quite a few years, and overall, I'd strongly recommend my developers to build an efficient script to clear dynamo tables and use that. ", "keywords": ["efficient"]}]}], "filtered-sentences": [{"source": "Body", "text": "If this is the case, you'll have to change those places too, to use Fn::If to control the creation of the reference with the same condition that creates the table. ", "keywords": ["change"]}, {"source": "Body", "text": "I've done devops in AWS for quite a few years, and overall, I'd strongly recommend my developers to build an efficient script to clear dynamo tables and use that. ", "keywords": ["efficient"]}]}], "contains-topic": true, "filtered-sentences": []}