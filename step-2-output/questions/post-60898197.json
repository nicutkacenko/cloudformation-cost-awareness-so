{"Id": "60898197", "PostTypeId": "1", "AcceptedAnswerId": "64399051", "CreationDate": "2020-03-28T06:58:55.960", "Score": "15", "ViewCount": "3343", "Body": "<p>I'm working with AWS CDK and every time I go to create a new resource (CodePipeline, VPC, etc) I end up in the same loop of...</p>\n\n<ul>\n<li>try to deploy</li>\n<li>\"you are not authorized to foo:CreateBar\"</li>\n<li>update IAM permissions</li>\n<li>try to deploy</li>\n<li>\"you are not authorized to baz:CreateZzz\"</li>\n<li>update IAM permissions</li>\n</ul>\n\n<p>...over and over again. Then the same when I <code>cdk destroy</code>, but for \"foo:DeleteFoo\"</p>\n\n<p>Is there a more efficient way to determine what permissions a policy needs to perform a certain CDK action? Maybe somewhere in the documentation I can reference?</p>\n\n<p>Thanks</p>\n", "OwnerUserId": "2291892", "LastActivityDate": "2020-10-17T04:38:48.983", "Title": "determine required permissions for AWS CDK", "Tags": "|aws-cloudformation|aws-cdk|", "AnswerCount": "1", "CommentCount": "15", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "107957210", "PostId": "60898197", "Score": "0", "Text": "Can you share an example of a specific resource with a specific error?", "CreationDate": "2020-04-03T23:07:59.427", "UserId": "9931092", "filtered-sentences": []}, {"Id": "108002912", "PostId": "60898197", "Score": "0", "Text": "I think an example is any Resource that requires other resources to be created.\n\nE.g if I create a CodePipeline, the deploy will also required an IAM Role and an IAM Policy, which CDK will attempt to create. But since I didn't know that a CodePipeline Resource will create the IAM Roles and Policies the deploy will fail at \"deploy-user is not permitted to perform iam:role:create\", so I'll add the role, and try again, and then the next time it will fail at \"iam:policy:create\" etc. Does that help clarify?", "CreationDate": "2020-04-05T20:08:13.273", "UserId": "2291892", "filtered-sentences": [{"source": "Text", "text": "E.g if I create a CodePipeline, the deploy will also required an IAM Role and an IAM Policy, which CDK will attempt to create. ", "keywords": ["policy"]}, {"source": "Text", "text": "But since I didn't know that a CodePipeline Resource will create the IAM Roles and Policies the deploy will fail at \"deploy-user is not permitted to perform iam:role:create\", so I'll add the role, and try again, and then the next time it will fail at \"iam:policy:create\" etc. ", "keywords": ["policy"]}]}, {"Id": "108003903", "PostId": "60898197", "Score": "0", "Text": "It does, but it means the end-user doesn't have permissions to add permissions into the stack, once you update the I am: role permissions you are able to deploy the stack?", "CreationDate": "2020-04-05T20:54:57.187", "UserId": "9931092", "filtered-sentences": [{"source": "Text", "text": "It does, but it means the end-user doesn't have permissions to add permissions into the stack, once you update the I am: role permissions you are able to deploy the stack?", "keywords": ["permissions"]}]}, {"Id": "108004409", "PostId": "60898197", "Score": "1", "Text": "Yeah if I update the permissions I am able to deploy the stack. But as the stack gets larger having it fail is time consuming, so I am wondering if there is a way to know in advance (before failed deploy) to know exactly what permissions the deploying user is going to need (via cli command, documentation, or otherwise).", "CreationDate": "2020-04-05T21:20:55.267", "UserId": "2291892", "filtered-sentences": [{"source": "Text", "text": "Yeah if I update the permissions I am able to deploy the stack. ", "keywords": ["permissions"]}, {"source": "Text", "text": "But as the stack gets larger having it fail is time consuming, so I am wondering if there is a way to know in advance (before failed deploy) to know exactly what permissions the deploying user is going to need (via cli command, documentation, or otherwise).", "keywords": ["permissions"]}]}, {"Id": "108005074", "PostId": "60898197", "Score": "0", "Text": "I thought about debugging CDK source code from GitHub, I found some interesting things but I don't think they are related to your issue. If CDK would raise an error about code pipeline when trying to deploy code pipeline then GitHub is the right place. but if it's only permissions to create permissions.. then it's the user problem and not CDK.", "CreationDate": "2020-04-05T21:53:30.663", "UserId": "9931092", "filtered-sentences": [{"source": "Text", "text": "If CDK would raise an error about code pipeline when trying to deploy code pipeline then GitHub is the right place. but if it's only permissions to create permissions.. then it's the user problem and not CDK.", "keywords": ["permissions"]}]}, {"Id": "108007950", "PostId": "60898197", "Score": "0", "Text": "appreciate your time, thanks", "CreationDate": "2020-04-06T01:04:04.990", "UserId": "2291892", "filtered-sentences": []}, {"Id": "108014860", "PostId": "60898197", "Score": "0", "Text": "In case you get another issue with a specific resource please let me know.", "CreationDate": "2020-04-06T08:11:41.627", "UserId": "9931092", "filtered-sentences": []}, {"Id": "110520555", "PostId": "60898197", "Score": "1", "Text": "There's two ways, neither of which are all that palatable, hence I'm not offering them as answer: run with admin policies or do a `cdk synth` and grep for the resource types, then build your role and policies based on the permissions required to create and destroy those resources. Refusing to simply go the admin access route I use a variety of the latter where I built up a dev role over time that covers most of my CDK use cases. Not ideal either way.", "CreationDate": "2020-06-21T03:55:54.283", "UserId": "4053717", "filtered-sentences": [{"source": "Text", "text": "There's two ways, neither of which are all that palatable, hence I'm not offering them as answer: run with admin policies or do a `cdk synth` and grep for the resource types, then build your role and policies based on the permissions required to create and destroy those resources. ", "keywords": ["permissions"]}]}, {"Id": "111069749", "PostId": "60898197", "Score": "2", "Text": "I don't think this is feasible. Theoretically it's possible to analyze the synthesized template. Though probably this is going to take you more time than the annoying loop you described. As an alternative, allow everything that is triggered via CloudFormation and just explicitly deny what you do not want to be managed by CFN. That's not the least-privilege principle, but the don't-go-crazy-on-every-tiny-change principle. ;) Here's a policy to do that: https://stackoverflow.com/a/61102280/2753241", "CreationDate": "2020-07-09T06:10:24.037", "UserId": "2753241", "filtered-sentences": [{"source": "Text", "text": "That's not the least-privilege principle, but the don't-go-crazy-on-every-tiny-change principle. ;) ", "keywords": ["change"]}, {"source": "Text", "text": "Here's a policy to do that: https://stackoverflow.com/a/61102280/2753241", "keywords": ["policy"]}]}, {"Id": "111095184", "PostId": "60898197", "Score": "0", "Text": "appreciate the feedback, i ended up just white listing everything on a per service basis which is unfortunate but trying to keep up w/ permissions otherwise is too time consuming", "CreationDate": "2020-07-09T20:12:09.200", "UserId": "2291892", "filtered-sentences": [{"source": "Text", "text": "appreciate the feedback, i ended up just white listing everything on a per service basis which is unfortunate but trying to keep up w/ permissions otherwise is too time consuming", "keywords": ["permissions"]}]}, {"Id": "112289101", "PostId": "60898197", "Score": "0", "Text": "Does this answer your question? [What IAM permissions are needed to use CDK Deploy?](https://stackoverflow.com/questions/57118082/what-iam-permissions-are-needed-to-use-cdk-deploy)", "CreationDate": "2020-08-20T08:49:28.030", "UserId": "2250672", "filtered-sentences": [{"source": "Text", "text": "[What IAM permissions are needed to use CDK Deploy?](https://stackoverflow.com/questions/57118082/what-iam-permissions-are-needed-to-use-cdk-deploy)", "keywords": ["permissions"]}]}, {"Id": "112538952", "PostId": "60898197", "Score": "0", "Text": "Unfortunately not, the top voted answer there says, \"Apart from the permissions you need to create the actual resources\", which is precisely what I am after. I think this is just a feature not supported by CDK, and I don't think there is any clearcut documentation that lists specifically which permissions are needed to create a specific resource.", "CreationDate": "2020-08-28T22:01:04.320", "UserId": "2291892", "filtered-sentences": [{"source": "Text", "text": "Unfortunately not, the top voted answer there says, \"Apart from the permissions you need to create the actual resources\", which is precisely what I am after. ", "keywords": ["permissions"]}, {"source": "Text", "text": "I think this is just a feature not supported by CDK, and I don't think there is any clearcut documentation that lists specifically which permissions are needed to create a specific resource.", "keywords": ["feature", "permissions"]}]}, {"Id": "115791435", "PostId": "60898197", "Score": "1", "Text": "This isn't specifically a CDK problem - getting permissions right is challenging in AWS, and they can do better with their documentation. Also because the CDK is an abstraction on top of Cloudformation it makes it tougher. But as someone mentioned above if you run cdk synth and inspect the type of resource that's being created, e.g. Type: AWS::Cognito::UserPool that should give you a rough idea of the permissions you need to grant, this may be a useful reference https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazoncognitouserpools.html", "CreationDate": "2020-12-29T15:22:44.947", "UserId": "4130114", "filtered-sentences": [{"source": "Text", "text": "This isn't specifically a CDK problem - getting permissions right is challenging in AWS, and they can do better with their documentation. ", "keywords": ["permissions"]}, {"source": "Text", "text": "But as someone mentioned above if you run cdk synth and inspect the type of resource that's being created, e.g. Type: AWS::Cognito::UserPool that should give you a rough idea of the permissions you need to grant, this may be a useful reference https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazoncognitouserpools.html", "keywords": ["permissions"]}]}, {"Id": "125060764", "PostId": "60898197", "Score": "0", "Text": "I am a bit late to the party, but I ran into this situation while trying to deploy my serverless app on SEED using a CI User. I ended up assigning AdministratorAccess to the user for the first run. Once the run has finished, head over to IAM -> Users -> User -> Access Adviser. It'll give you an overview of the services and actions within each service. You can then use this to build your policy and **replace the AdmininstratorAccess** policy on the user. Not ideal as the user has temporary admin access, but perhaps a trade off between security and not going crazy!", "CreationDate": "2022-01-17T13:46:01.077", "UserId": "4774347", "filtered-sentences": [{"source": "Text", "text": "You can then use this to build your policy and **replace the AdmininstratorAccess** policy on the user. ", "keywords": ["policy"]}]}, {"Id": "125321534", "PostId": "60898197", "Score": "0", "Text": "@Sam excellent information, thank you for that", "CreationDate": "2022-01-28T06:48:49.457", "UserId": "2291892", "filtered-sentences": []}], "history": [{"Id": "217864104", "PostHistoryTypeId": "2", "PostId": "60898197", "RevisionGUID": "ab8b11e1-9c33-4515-8ff0-599c8d207ea0", "CreationDate": "2020-03-28T06:58:55.960", "UserId": "2291892", "Text": "I'm working with AWS CDK and every time I go to create a new resource (CodePipeline, VPC, etc) I end up in the same loop of...\r\n\r\n- try to deploy\r\n- \"you are not authorized to foo:CreateBar\"\r\n- update IAM permissions\r\n- try to deploy\r\n- \"you are not authorized to baz:CreateZzz\"\r\n- update IAM permissions\r\n\r\n...over and over again. Then the same when I `cdk destroy`, but for \"foo:DeleteFoo\"\r\n\r\nIs there a more efficient way to determine what permissions a policy needs to perform a certain CDK action? Maybe somewhere in the documentation I can reference?\r\n\r\nThanks", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I'm working with AWS CDK and every time I go to create a new resource (CodePipeline, VPC, etc) I end up in the same loop of... - try to deploy - \"you are not authorized to foo:CreateBar\" - update IAM permissions - try to deploy - \"you are not authorized to baz:CreateZzz\" - update IAM permissions ...over and over again. ", "keywords": ["permissions"]}, {"source": "Text", "text": "Is there a more efficient way to determine what permissions a policy needs to perform a certain CDK action? ", "keywords": ["efficient", "policy", "permissions"]}]}, {"Id": "217864105", "PostHistoryTypeId": "1", "PostId": "60898197", "RevisionGUID": "ab8b11e1-9c33-4515-8ff0-599c8d207ea0", "CreationDate": "2020-03-28T06:58:55.960", "UserId": "2291892", "Text": "determine required permissions for AWS CDK", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "determine required permissions for AWS CDK", "keywords": ["permissions"]}]}, {"Id": "217864106", "PostHistoryTypeId": "3", "PostId": "60898197", "RevisionGUID": "ab8b11e1-9c33-4515-8ff0-599c8d207ea0", "CreationDate": "2020-03-28T06:58:55.960", "UserId": "2291892", "Text": "|aws-cloudformation|aws-cdk|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "218047816", "PostHistoryTypeId": "33", "PostId": "60898197", "RevisionGUID": "9dce5b99-7b82-4323-b681-ce323bec6d4d", "CreationDate": "2020-03-30T23:37:30.103", "UserId": "1623249", "Comment": "201448", "filtered-sentences": []}, {"Id": "218684280", "PostHistoryTypeId": "34", "PostId": "60898197", "RevisionGUID": "0bc56eab-d033-4979-b5c3-2aa915b357f2", "CreationDate": "2020-04-08T01:02:10.453", "UserId": "-1", "Comment": "201448", "filtered-sentences": []}], "answers": [{"Id": "64399051", "PostTypeId": "2", "ParentId": "60898197", "CreationDate": "2020-10-17T04:38:48.983", "Score": "8", "Body": "<p>Here is a script that will execute whatever you pass to it but will also capture the timestamps between what you passed it and when it finished executing and will print all the AWS API Events captured by the configured default aws user using cloudtrail.  It can take like 20 minutes for the actions to show up in cloudtrail but the script will check every minute until it gets results for that time range.  If no AWS api calls are made during the time range then no results will ever be returned.  It's a simple script, there is no max timeout or anything.</p>\n<pre><code>#!/bin/bash -x\n\nuser_name=`aws sts get-caller-identity | jq -r '.Arn' | sed -e 's/user\\// /g' | awk '{print $2}'`\nsleep 5 # Sleep to avoid getting the sts call in our time range\n\nstart_time=`date`\nsleep 1 # Sleep to avoid millisecond rounding issues\n\neval $@\n\nsleep 1 # Sleep to avoid millisecond rounding issues\nend_time=`date`\n\nactions=&quot;&quot;\nwhile [ -z &quot;$actions&quot; ]; do\nsleep 60\necho &quot;Checking for events from $start_time to $end_time...&quot;\nactions=`aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=${user_name} --start-time &quot;${start_time}&quot;  --end-time &quot;${end_time}&quot; | jq -r '.Events[].CloudTrailEvent' | jq -s | jq -r '.[] | &quot;\\(.eventSource) \\(.eventName)&quot;' | sed -e 's/.amazonaws.com /:/g' | sed -e 's/[0-9]//g' | sort | uniq`\ndone\n\necho &quot;AWS Actions Used:&quot;\necho &quot;$actions&quot;\n</code></pre>\n<p>I call it get-aws-actions.sh and it requires the aws cli to be installed as well as jq.  For cdk I would use it like this</p>\n<pre><code>./get-aws-actions.sh &quot;cdk deploy &amp;&amp; cdk destroy&quot;\n</code></pre>\n<p>I'd have my admin level credentials configured as the default profile so I know the deployment will not fail because of permission issues then I use the returned results from this script to give permissions to a more specific deployment user/role for long term use.  The problem you can run into is the first time you may only see a bunch of :Create* or :Add* actions but really you'll need to add all the lifecycle actions for the ones you see.  So if you see dynamodb:CreateTable you'll want to make sure you also add UpdateTable and DeleteTable.  If you see s3:PutBucketPolicy you'll also want s3:DeleteBucketPolicy.</p>\n<p>To be honest, any services that don't deal with API calls that allow access to data, I will just do &lt;service&gt;:*.  An example might be ECS.  I can't use ECS API calls to call an API do anything to a container that CloudFormation won't need to do to manage the service.  So for that service if I knew I was doing containers I'd just grant ecs:* on * to my deployer role.  A service like s3, lambda, sqs, sns where there is data access as well as resource creation access through an API I'll need to be more deliberate with the permissions granted.  My deployer role shouldn't have access to read all the data off all buckets or execute functions but it does need to create buckets and functions.</p>\n", "OwnerUserId": "12093417", "LastActivityDate": "2020-10-17T04:38:48.983", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "125321723", "PostId": "64399051", "Score": "0", "Text": "dunno how I missed this one two years ago, gonna blame covid tho.\n  \nMarked accepted as `most helpful` given there doesn't really seem to be a direct AWS way to accomplish what we were looking for here.\n  \nReally appreciate the effort you put into the response, thank you. Some good info in the comments on the original question as well re: 'Access Adviser'.", "CreationDate": "2022-01-28T07:03:28.350", "UserId": "2291892", "filtered-sentences": []}], "history": [{"Id": "233006750", "PostHistoryTypeId": "2", "PostId": "64399051", "RevisionGUID": "4c0a57fc-c45f-49cc-91d9-5e53d401af85", "CreationDate": "2020-10-17T04:38:48.983", "UserId": "12093417", "Text": "Here is a script that will execute whatever you pass to it but will also capture the timestamps between what you passed it and when it finished executing and will print all the AWS API Events captured by the configured default aws user using cloudtrail.  It can take like 20 minutes for the actions to show up in cloudtrail but the script will check every minute until it gets results for that time range.  If no AWS api calls are made during the time range then no results will ever be returned.  It's a simple script, there is no max timeout or anything. \r\n\r\n    #!/bin/bash -x\r\n    \r\n    user_name=`aws sts get-caller-identity | jq -r '.Arn' | sed -e 's/user\\// /g' | awk '{print $2}'`\r\n    sleep 5 # Sleep to avoid getting the sts call in our time range\r\n    \r\n    start_time=`date`\r\n    sleep 1 # Sleep to avoid millisecond rounding issues\r\n    \r\n    eval $@\r\n    \r\n    sleep 1 # Sleep to avoid millisecond rounding issues\r\n    end_time=`date`\r\n    \r\n    actions=\"\"\r\n    while [ -z \"$actions\" ]; do\r\n    sleep 60\r\n    echo \"Checking for events from $start_time to $end_time...\"\r\n    actions=`aws cloudtrail lookup-events --lookup-attributes AttributeKey=Username,AttributeValue=${user_name} --start-time \"${start_time}\"  --end-time \"${end_time}\" | jq -r '.Events[].CloudTrailEvent' | jq -s | jq -r '.[] | \"\\(.eventSource) \\(.eventName)\"' | sed -e 's/.amazonaws.com /:/g' | sed -e 's/[0-9]//g' | sort | uniq`\r\n    done\r\n    \r\n    echo \"AWS Actions Used:\"\r\n    echo \"$actions\"\r\n\r\nI call it get-aws-actions.sh and it requires the aws cli to be installed as well as jq.  For cdk I would use it like this\r\n\r\n    ./get-aws-actions.sh \"cdk deploy && cdk destroy\"\r\n\r\nI'd have my admin level credentials configured as the default profile so I know the deployment will not fail because of permission issues then I use the returned results from this script to give permissions to a more specific deployment user/role for long term use.  The problem you can run into is the first time you may only see a bunch of <service>:Create* or <service>:Add* actions but really you'll need to add all the lifecycle actions for the ones you see.  So if you see dynamodb:CreateTable you'll want to make sure you also add UpdateTable and DeleteTable.  If you see s3:PutBucketPolicy you'll also want s3:DeleteBucketPolicy.  \r\n\r\nTo be honest, any services that don't deal with API calls that allow access to data, I will just do \\<service\\>:*.  An example might be ECS.  I can't use ECS API calls to call an API do anything to a container that CloudFormation won't need to do to manage the service.  So for that service if I knew I was doing containers I'd just grant ecs:\\* on * to my deployer role.  A service like s3, lambda, sqs, sns where there is data access as well as resource creation access through an API I'll need to be more deliberate with the permissions granted.  My deployer role shouldn't have access to read all the data off all buckets or execute functions but it does need to create buckets and functions. ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I'd have my admin level credentials configured as the default profile so I know the deployment will not fail because of permission issues then I use the returned results from this script to give permissions to a more specific deployment user/role for long term use. ", "keywords": ["permissions"]}, {"source": "Text", "text": "A service like s3, lambda, sqs, sns where there is data access as well as resource creation access through an API I'll need to be more deliberate with the permissions granted. ", "keywords": ["permissions"]}]}], "filtered-sentences": [{"source": "Body", "text": "For cdk I would use it like this I'd have my admin level credentials configured as the default profile so I know the deployment will not fail because of permission issues then I use the returned results from this script to give permissions to a more specific deployment user/role for long term use. ", "keywords": ["permissions"]}, {"source": "Body", "text": "A service like s3, lambda, sqs, sns where there is data access as well as resource creation access through an API I'll need to be more deliberate with the permissions granted. ", "keywords": ["permissions"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "determine required permissions for AWS CDK", "keywords": ["permissions"]}, {"source": "Body", "text": "I'm working with AWS CDK and every time I go to create a new resource (CodePipeline, VPC, etc) I end up in the same loop of... try to deploy \"you are not authorized to foo:CreateBar\" update IAM permissions try to deploy \"you are not authorized to baz:CreateZzz\" update IAM permissions ...over and over again. ", "keywords": ["permissions"]}, {"source": "Body", "text": "Is there a more efficient way to determine what permissions a policy needs to perform a certain CDK action? ", "keywords": ["efficient", "policy", "permissions"]}]}