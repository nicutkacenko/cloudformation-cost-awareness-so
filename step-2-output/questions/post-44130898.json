{"Id": "44130898", "PostTypeId": "1", "AcceptedAnswerId": "44237221", "CreationDate": "2017-05-23T09:28:18.950", "Score": "1", "ViewCount": "2167", "Body": "<p>I have an <em>AWS CloudFormation</em> template that creates an <em>OpsWorks</em> stack and deploys an application. To deploy the application, I am using a Lambda function and a custom resource which utilizes that function. My problem is: that Lambda function will only be executed one time during the creation of the stack, and then it will never be used again. Is there any way to delete the Lambda function by <em>AWS CloudFormation</em> at the end of the execution of the stack?</p>\n", "OwnerUserId": "2337243", "LastEditorUserId": "2962667", "LastEditDate": "2017-05-26T13:53:14.873", "LastActivityDate": "2019-03-10T06:50:26.280", "Title": "Delete the backing Lambda function for a Lambda-backed custom resource", "Tags": "|json|instance|aws-lambda|aws-cloudformation|aws-opsworks|", "AnswerCount": "3", "CommentCount": "7", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "75282012", "PostId": "44130898", "Score": "1", "Text": "It will also be called again if you delete the stack, or update the custom resource, so deleting it is probably not ideal. You might consider creating the lambda in a separate stack, and export its ARN and use that, instead of inlining the custom resource; then at least you wont have an extra function for each stack you create that uses the custom resource.", "CreationDate": "2017-05-23T10:09:03.503", "UserId": "1544021", "filtered-sentences": []}, {"Id": "75284089", "PostId": "44130898", "Score": "0", "Text": "Understood. but for our usecase, we have already a lot of lambda functions and having more usless ones is not preferable. the lambda will be created again any way if we create another stack so we don't really need to have it after that it has done its job", "CreationDate": "2017-05-23T10:56:40.900", "UserId": "2337243", "filtered-sentences": []}, {"Id": "75287316", "PostId": "44130898", "Score": "1", "Text": "You **could** delete the function from inside the function itself, immediately after it runs. \nBut you're really setting yourself up for trouble. When you delete your stack CF will try to call the lambda, if you update it it might also get called, depending on parameters. CustomResources are not supposed to be throwaway scripts.\nAnother option would be to wrap the call to cloudformation a script, and have that call the deploy. Good luck!", "CreationDate": "2017-05-23T12:09:06.160", "UserId": "1544021", "filtered-sentences": []}, {"Id": "75287511", "PostId": "44130898", "Score": "0", "Text": "Do you have the aws documentation that says that while deleting a cloudformation stack, the lambda function are being called again?", "CreationDate": "2017-05-23T12:13:46.643", "UserId": "2337243", "filtered-sentences": []}, {"Id": "75288389", "PostId": "44130898", "Score": "1", "Text": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/crpg-ref-requesttypes-delete.html - first line: \"Custom resource provider requests with RequestType set to \"Delete\" are sent when the template developer deletes a stack that contains a custom resource. To successfully delete a stack with a custom resource, the custom resource provider must respond successfully to a delete request.\"", "CreationDate": "2017-05-23T12:34:54.533", "UserId": "1544021", "filtered-sentences": [{"source": "Text", "text": "http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/crpg-ref-requesttypes-delete.html - first line: \"Custom resource provider requests with RequestType set to \"Delete\" are sent when the template developer deletes a stack that contains a custom resource. ", "keywords": ["provider"]}, {"source": "Text", "text": "To successfully delete a stack with a custom resource, the custom resource provider must respond successfully to a delete request.\"", "keywords": ["provider"]}]}, {"Id": "75289030", "PostId": "44130898", "Score": "0", "Text": "Yes but I only send requestType = create", "CreationDate": "2017-05-23T12:48:37.733", "UserId": "2337243", "filtered-sentences": []}, {"Id": "75292166", "PostId": "44130898", "Score": "0", "Text": "Your comment resolved my question. I delete the function by itself and i have no problem when deleting the stack. Could you add it as an answer?", "CreationDate": "2017-05-23T13:54:15.440", "UserId": "2337243", "filtered-sentences": []}], "history": [{"Id": "146013954", "PostHistoryTypeId": "2", "PostId": "44130898", "RevisionGUID": "d9406d2e-25a7-41e6-b72e-5765cca1927f", "CreationDate": "2017-05-23T09:28:18.950", "UserId": "2337243", "Text": "I have a cloudformation template that creates an opsworks stack and deply an application. To deploy the application, I am using a function lambda and a custom resource who is calling that function. My problem is: that function will only be executed one time during the creation of the stack then It will never be used. Is there any way to delete the function by clouformation at the end of the excecution of the stack?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "146013955", "PostHistoryTypeId": "1", "PostId": "44130898", "RevisionGUID": "d9406d2e-25a7-41e6-b72e-5765cca1927f", "CreationDate": "2017-05-23T09:28:18.950", "UserId": "2337243", "Text": "delete a resource by clouformation", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "146013956", "PostHistoryTypeId": "3", "PostId": "44130898", "RevisionGUID": "d9406d2e-25a7-41e6-b72e-5765cca1927f", "CreationDate": "2017-05-23T09:28:18.950", "UserId": "2337243", "Text": "|json|instance|aws-cloudformation|aws-opsworks|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "|json|instance|aws-cloudformation|aws-opsworks|", "keywords": ["instance"]}]}, {"Id": "146014931", "PostHistoryTypeId": "5", "PostId": "44130898", "RevisionGUID": "3fa9bc17-f60d-41aa-bb49-0151967349e1", "CreationDate": "2017-05-23T09:39:35.557", "UserId": "2337243", "Comment": "added 6 characters in body", "Text": "I have a cloudformation template that creates an opsworks stack and deply an application. To deploy the application, I am using a function lambda and a custom resource who is calling that function. My problem is: that function will only be executed one time during the creation of the stack then It will never be used again. Is there any way to delete the function by cloudformation at the end of the excecution of the stack?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "146317700", "PostHistoryTypeId": "6", "PostId": "44130898", "RevisionGUID": "e43f8d78-b5a4-47f3-bb72-b3e47b6349bb", "CreationDate": "2017-05-23T11:22:25.323", "UserId": "2337243", "Comment": "edited tags", "Text": "|json|instance|aws-lambda|aws-cloudformation|aws-opsworks|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "|json|instance|aws-lambda|aws-cloudformation|aws-opsworks|", "keywords": ["instance"]}]}, {"Id": "147979494", "PostHistoryTypeId": "5", "PostId": "44130898", "RevisionGUID": "c898492e-ecba-4e7d-8b6c-2b55eb39f445", "CreationDate": "2017-05-26T13:53:14.873", "UserId": "2962667", "Comment": "Updating sentence structure, formatting and grammar", "Text": "I have an *AWS CloudFormation* template that creates an *OpsWorks* stack and deploys an application. To deploy the application, I am using a Lambda function and a custom resource which utilizes that function. My problem is: that Lambda function will only be executed one time during the creation of the stack, and then it will never be used again. Is there any way to delete the Lambda function by *AWS CloudFormation* at the end of the execution of the stack?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "147979495", "PostHistoryTypeId": "4", "PostId": "44130898", "RevisionGUID": "c898492e-ecba-4e7d-8b6c-2b55eb39f445", "CreationDate": "2017-05-26T13:53:14.873", "UserId": "2962667", "Comment": "Updating sentence structure, formatting and grammar", "Text": "Delete the backing Lambda function for a Lambda-backed custom resource", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "147979496", "PostHistoryTypeId": "24", "PostId": "44130898", "RevisionGUID": "c898492e-ecba-4e7d-8b6c-2b55eb39f445", "CreationDate": "2017-05-26T13:53:14.873", "Comment": "Proposed by 2962667 approved by 2337243 edit id of 3116177", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "44203739", "PostTypeId": "2", "ParentId": "44130898", "CreationDate": "2017-05-26T14:10:40.370", "Score": "2", "Body": "<blockquote>\n  <p>that Lambda function will only be executed one time during the\n  creation of the stack, and then it will never be used again.</p>\n</blockquote>\n\n<p>^^That's not the case. The backing Lambda function for a Lambda-backed custom resource will be invoked everytime the corresponding resource is touched (i.e. created, updated or deleted). AWS CloudFormation will pass <em>RequestType</em> parameter to that function everytime it sees that the resource is being touched, and pass it one of <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/crpg-ref-requesttypes.html\" rel=\"nofollow noreferrer\">these values</a>: <code>Create</code>, <code>Update</code>, <code>Delete</code>. Your Lambda function should perform the necessary action taking that param into account. Based on your question it appears that your Lambda function only caters to <code>RequestType = Create</code>?</p>\n\n<p>Also, as per <a href=\"https://aws.amazon.com/lambda/faqs/\" rel=\"nofollow noreferrer\">AWS docs</a>, you won't be charged for creating a Lambda function, but only if you actually invoke it. So cost can't be deterring factor for keeping the function around.\nOn the contrary, if your concern is that you don't want extra <em>clutter</em>, you can try creating a <em>common</em> CloudFormation stack who's job will be to create shared resources, and you can then define that Lambda function over there? I'll have to know about your entire workflow to say for sure if that approach will work or not.</p>\n\n<p>For what it's worth, I'd recommend not deleting the backing function of the Lambda-backed custom resource because it'll be a pain when someone touches the corresponding resource in the future, or wants to create another instance of the same resource type.</p>\n", "OwnerUserId": "2962667", "LastActivityDate": "2017-05-26T14:10:40.370", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "147980885", "PostHistoryTypeId": "2", "PostId": "44203739", "RevisionGUID": "aa7cd69a-a98d-4ec3-86b9-9dc413b3fa98", "CreationDate": "2017-05-26T14:10:40.370", "UserId": "2962667", "Text": "> that Lambda function will only be executed one time during the\r\n> creation of the stack, and then it will never be used again.\r\n\r\n^^That's not the case. The backing Lambda function for a Lambda-backed custom resource will be invoked everytime the corresponding resource is touched (i.e. created, updated or deleted). AWS CloudFormation will pass *RequestType* parameter to that function everytime it sees that the resource is being touched, and pass it one of [these values][1]: `Create`, `Update`, `Delete`. Your Lambda function should perform the necessary action taking that param into account. Based on your question it appears that your Lambda function only caters to `RequestType = Create`?\r\n\r\nAlso, as per [AWS docs][2], you won't be charged for creating a Lambda function, but only if you actually invoke it. So cost can't be deterring factor for keeping the function around.\r\nOn the contrary, if your concern is that you don't want extra *clutter*, you can try creating a *common* CloudFormation stack who's job will be to create shared resources, and you can then define that Lambda function over there? I'll have to know about your entire workflow to say for sure if that approach will work or not.\r\n\r\nFor what it's worth, I'd recommend not deleting the backing function of the Lambda-backed custom resource because it'll be a pain when someone touches the corresponding resource in the future, or wants to create another instance of the same resource type.\r\n\r\n\r\n  [1]: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/crpg-ref-requesttypes.html\r\n  [2]: https://aws.amazon.com/lambda/faqs/", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "So cost can't be deterring factor for keeping the function around. ", "keywords": ["cost"]}, {"source": "Text", "text": "For what it's worth, I'd recommend not deleting the backing function of the Lambda-backed custom resource because it'll be a pain when someone touches the corresponding resource in the future, or wants to create another instance of the same resource type. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "So cost can't be deterring factor for keeping the function around. ", "keywords": ["cost"]}, {"source": "Body", "text": "For what it's worth, I'd recommend not deleting the backing function of the Lambda-backed custom resource because it'll be a pain when someone touches the corresponding resource in the future, or wants to create another instance of the same resource type.", "keywords": ["instance"]}]}, {"Id": "50654841", "PostTypeId": "2", "ParentId": "44130898", "CreationDate": "2018-06-02T08:08:21.827", "Score": "0", "Body": "<p>Some of your assumptions regarding custom resources are not true. In a Lambda backed custom resource, you implement your logic to support creation, update and deletion of the resource. These indications are sent from CloudFormation via the event and give you information about the stack process.</p>\n<blockquote>\n<p>It\u2019s important to understand the custom resource life cycle, to prevent your data from being deleted.</p>\n<p>Create - that\u2019s easy, when a resource is being created an event with request type Create is sent to your function.</p>\n<p>Delete - this one is more tricky. When a resource is being deleted a Delete request type is sent. But there are more scenarios other than resource Delete. We will have to explain Update first.</p>\n<p>Update - gets called if any of your custom resource properties were changed. For example, in our app we can modify the allowed callback urls, which will trigger the function with an Update request type</p>\n</blockquote>\n<p>I welcome you to read more about best practices in creating custom resources in <a href=\"https://medium.com/@sch.bar/a-deep-dive-on-aws-cloudformation-custom-resources-8e04c6d155fd\" rel=\"nofollow noreferrer\">this blog post</a></p>\n", "OwnerUserId": "4698029", "LastEditorUserId": "-1", "LastEditDate": "2020-06-20T09:12:55.060", "LastActivityDate": "2019-03-10T06:50:26.280", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "174736224", "PostHistoryTypeId": "5", "PostId": "50654841", "RevisionGUID": "f914fa08-011c-4fb1-be36-5baac5ff7023", "CreationDate": "2018-06-02T09:38:09.243", "UserId": "4698029", "Comment": "added 748 characters in body", "Text": "Some of your assumptions regarding custom resources are not true. In a Lambda backed custom resource, you implement your logic to support creation, update and deletion of the resource. These indications are sent from CloudFormation via the event and give you information about the stack process.\r\n\r\n> It\u2019s important to understand the custom resource life cycle, to prevent your data from being deleted.\r\n\r\n> Create - that\u2019s easy, when a resource is being created an event with request type Create is sent to your function.\r\n\r\n> Delete - this one is more tricky. When a resource is being deleted a Delete request type is sent. But there are more scenarios other than resource Delete. We will have to explain Update first.\r\n\r\n> Update - gets called if any of your custom resource properties were changed. For example, in our app we can modify the allowed callback urls, which will trigger the function with an Update request type\r\n\r\n\r\nI welcome you to read more about best practices in creating custom resources in [this blog post][1] \r\n\r\n\r\n  [1]: https://www.puresec.io/blog/a-deep-dive-on-aws-cloudformation-custom-resources", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "> Update - gets called if any of your custom resource properties were changed. ", "keywords": ["change"]}]}, {"Id": "174733343", "PostHistoryTypeId": "2", "PostId": "50654841", "RevisionGUID": "f6120bc7-918b-42bc-be3a-92f90ae5e7d3", "CreationDate": "2018-06-02T08:08:21.827", "UserId": "4698029", "Text": "Some of your assumptions regarding custom resources are not true. I welcome you to visit [this blog post][1] about best practices in creating custom resources.\r\n\r\n\r\n  [1]: https://www.puresec.io/blog/a-deep-dive-on-aws-cloudformation-custom-resources", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "174781752", "PostHistoryTypeId": "5", "PostId": "50654841", "RevisionGUID": "704a9c36-01f6-4db4-a64b-f0b098d2475c", "CreationDate": "2018-06-03T12:08:34.627", "UserId": "4698029", "Comment": "added 13 characters in body", "Text": "Some of your assumptions regarding custom resources are not true. In a Lambda backed custom resource, you implement your logic to support creation, update and deletion of the resource. These indications are sent from CloudFormation via the event and give you information about the stack process.\r\n\r\n> It\u2019s important to understand the custom resource life cycle, to prevent your data from being deleted.\r\n\r\n> Create - that\u2019s easy, when a resource is being created an event with request type Create is sent to your function.\r\n\r\n> Delete - this one is more tricky. When a resource is being deleted a Delete request type is sent. But there are more scenarios other than resource Delete. We will have to explain Update first.\r\n\r\n> Update - gets called if any of your custom resource properties were changed. For example, in our app we can modify the allowed callback urls, which will trigger the function with an Update request type\r\n\r\n\r\nI welcome you to read more about best practices in creating custom resources in [this blog post][1] \r\n\r\n\r\n  [1]: https://medium.com/@sch.bar/a-deep-dive-on-aws-cloudformation-custom-resources-72416f2e9cef", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "> Update - gets called if any of your custom resource properties were changed. ", "keywords": ["change"]}]}, {"Id": "193292248", "PostHistoryTypeId": "5", "PostId": "50654841", "RevisionGUID": "a2b90509-d4d0-4599-92fb-857e139d8093", "CreationDate": "2019-03-10T06:50:26.280", "UserId": "4698029", "Comment": "edited body", "Text": "Some of your assumptions regarding custom resources are not true. In a Lambda backed custom resource, you implement your logic to support creation, update and deletion of the resource. These indications are sent from CloudFormation via the event and give you information about the stack process.\r\n\r\n> It\u2019s important to understand the custom resource life cycle, to prevent your data from being deleted.\r\n\r\n> Create - that\u2019s easy, when a resource is being created an event with request type Create is sent to your function.\r\n\r\n> Delete - this one is more tricky. When a resource is being deleted a Delete request type is sent. But there are more scenarios other than resource Delete. We will have to explain Update first.\r\n\r\n> Update - gets called if any of your custom resource properties were changed. For example, in our app we can modify the allowed callback urls, which will trigger the function with an Update request type\r\n\r\n\r\nI welcome you to read more about best practices in creating custom resources in [this blog post][1] \r\n\r\n\r\n  [1]: https://medium.com/@sch.bar/a-deep-dive-on-aws-cloudformation-custom-resources-8e04c6d155fd", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "> Update - gets called if any of your custom resource properties were changed. ", "keywords": ["change"]}]}, {"Id": "224807129", "PostHistoryTypeId": "5", "PostId": "50654841", "RevisionGUID": "53b3eb26-cd6c-4c25-a25c-71334bb7e85c", "CreationDate": "2020-06-20T09:12:55.060", "UserId": "-1", "Comment": "Commonmark migration", "Text": "Some of your assumptions regarding custom resources are not true. In a Lambda backed custom resource, you implement your logic to support creation, update and deletion of the resource. These indications are sent from CloudFormation via the event and give you information about the stack process.\n\n> It\u2019s important to understand the custom resource life cycle, to prevent your data from being deleted.\n>\n> Create - that\u2019s easy, when a resource is being created an event with request type Create is sent to your function.\n>\n> Delete - this one is more tricky. When a resource is being deleted a Delete request type is sent. But there are more scenarios other than resource Delete. We will have to explain Update first.\n>\n> Update - gets called if any of your custom resource properties were changed. For example, in our app we can modify the allowed callback urls, which will trigger the function with an Update request type\n\n\nI welcome you to read more about best practices in creating custom resources in [this blog post][1] \n\n\n  [1]: https://medium.com/@sch.bar/a-deep-dive-on-aws-cloudformation-custom-resources-8e04c6d155fd", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "> > Update - gets called if any of your custom resource properties were changed. ", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "Update - gets called if any of your custom resource properties were changed. ", "keywords": ["change"]}]}, {"Id": "44237221", "PostTypeId": "2", "ParentId": "44130898", "CreationDate": "2017-05-29T07:50:06.097", "Score": "2", "Body": "<p>First, I should say Aditya is right, you shouldn't delete the backing Lambda as it's used throughout the lifecycle. </p>\n\n<p>However, if you really really want to do it, one way is to simply have the function <em>delete itself</em> (and related resources, eg, role) after running. </p>\n", "OwnerUserId": "1544021", "LastActivityDate": "2017-05-29T07:50:06.097", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "148127204", "PostHistoryTypeId": "2", "PostId": "44237221", "RevisionGUID": "9bc62b4d-7df2-44db-b4e7-9cf30c1fa545", "CreationDate": "2017-05-29T07:50:06.097", "UserId": "1544021", "Text": "First, I should say Aditya is right, you shouldn't delete the backing Lambda as it's used throughout the lifecycle. \r\n\r\nHowever, if you really really want to do it, one way is to simply have the function _delete itself_ (and related resources, eg, role) after running. ", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}