{"Id": "5251934", "PostTypeId": "1", "CreationDate": "2011-03-09T20:46:00.113", "Score": "31", "ViewCount": "35222", "Body": "<p>How to create variable number of EC2 instance resources in Cloudformation template, according to a template parameter?</p>\n\n<p>The EC2 API and management tools allow launching multiple instances of the same AMI, but I can't find how to do this using Cloudformation.</p>\n", "OwnerUserId": "401505", "LastEditorUserId": "524427", "LastEditDate": "2013-05-23T18:34:22.013", "LastActivityDate": "2020-06-12T14:33:39.737", "Title": "How to create variable number of EC2 instance resources in Cloudformation template?", "Tags": "|amazon-web-services|amazon-ec2|autoscaling|aws-cloudformation|", "AnswerCount": "5", "CommentCount": "1", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 2.5", "comments": [{"Id": "98949067", "PostId": "5251934", "Score": "1", "Text": "In the date of May 2018, AWS released EC2 Fleet (https://aws.amazon.com/about-aws/whats-new/2018/04/introducing-amazon-ec2-fleet/), allowing to provision multiple instances at once. It is supported by CloudFormation (https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-ec2fleet.html)\nIt may not answer exactly the need of this post, but definitely worth investigating.", "CreationDate": "2019-05-16T03:50:38.983", "UserId": "7197281", "filtered-sentences": []}], "history": [{"Id": "11204514", "PostHistoryTypeId": "2", "PostId": "5251934", "RevisionGUID": "1be80814-668f-4b7c-9d92-6b6b8fe63293", "CreationDate": "2011-03-09T20:46:00.113", "UserId": "401505", "Text": "How to create variable number of EC2 instance resources in Cloudformation, according to a template parameter?\r\n\r\nThe EC2 API and management tools allow launching multiple instances of the same AMI, but I can't find how to do this using Cloudformation.\r\n", "ContentLicense": "CC BY-SA 2.5", "filtered-sentences": [{"source": "Text", "text": "How to create variable number of EC2 instance resources in Cloudformation, according to a template parameter? ", "keywords": ["instance"]}]}, {"Id": "11204515", "PostHistoryTypeId": "1", "PostId": "5251934", "RevisionGUID": "1be80814-668f-4b7c-9d92-6b6b8fe63293", "CreationDate": "2011-03-09T20:46:00.113", "UserId": "401505", "Text": "How to create variable number of EC2 instance resources in Cloudformation?", "ContentLicense": "CC BY-SA 2.5", "filtered-sentences": [{"source": "Text", "text": "How to create variable number of EC2 instance resources in Cloudformation?", "keywords": ["instance"]}]}, {"Id": "11204516", "PostHistoryTypeId": "3", "PostId": "5251934", "RevisionGUID": "1be80814-668f-4b7c-9d92-6b6b8fe63293", "CreationDate": "2011-03-09T20:46:00.113", "UserId": "401505", "Text": "|amazon-ec2|amazon-web-services|", "ContentLicense": "CC BY-SA 2.5", "filtered-sentences": []}, {"Id": "11204978", "PostHistoryTypeId": "5", "PostId": "5251934", "RevisionGUID": "c1f11bc3-7038-4118-bcb9-1e5b1cc1269d", "CreationDate": "2011-03-09T21:04:55.150", "UserId": "401505", "Comment": "added 9 characters in body; edited title", "Text": "How to create variable number of EC2 instance resources in Cloudformation template, according to a template parameter?\r\n\r\nThe EC2 API and management tools allow launching multiple instances of the same AMI, but I can't find how to do this using Cloudformation.\r\n", "ContentLicense": "CC BY-SA 2.5", "filtered-sentences": [{"source": "Text", "text": "How to create variable number of EC2 instance resources in Cloudformation template, according to a template parameter? ", "keywords": ["instance"]}]}, {"Id": "11204979", "PostHistoryTypeId": "4", "PostId": "5251934", "RevisionGUID": "c1f11bc3-7038-4118-bcb9-1e5b1cc1269d", "CreationDate": "2011-03-09T21:04:55.150", "UserId": "401505", "Comment": "added 9 characters in body; edited title", "Text": "How to create variable number of EC2 instance resources in Cloudformation template?", "ContentLicense": "CC BY-SA 2.5", "filtered-sentences": [{"source": "Text", "text": "How to create variable number of EC2 instance resources in Cloudformation template?", "keywords": ["instance"]}]}, {"Id": "20079444", "PostHistoryTypeId": "6", "PostId": "5251934", "RevisionGUID": "3a3c7974-27d5-48fe-b543-1cb8a9823c42", "CreationDate": "2012-01-17T01:42:09.467", "UserId": "45773", "Comment": "Added tag 'amazon-cloudformation'.", "Text": "|amazon-ec2|amazon-web-services|aws-cloudformation|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "41094779", "PostHistoryTypeId": "6", "PostId": "5251934", "RevisionGUID": "3009ab50-105d-469b-8b28-782ef04abbb8", "CreationDate": "2013-05-23T18:34:22.013", "UserId": "524427", "Comment": "edited tags", "Text": "|amazon-web-services|amazon-ec2|autoscaling|aws-cloudformation|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "16701454", "PostTypeId": "2", "ParentId": "5251934", "CreationDate": "2013-05-22T20:58:41.413", "Score": "2", "Body": "<p>Use the <code>Ref</code> function.</p>\n\n<p><a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref.html\" rel=\"nofollow\">http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref.html</a></p>\n\n<p>User-defined variables are defined in the <code>\"Parameters\"</code> section of the config file.  In the <code>\"Resources\"</code> section of the config file you can fill in values using references to these parameters.</p>\n\n<pre><code>{\n    \"AWSTemplateFormatVersion\": \"2010-09-09\",\n    ...\n    \"Parameters\": {\n        \"MinNumInstances\": {\n            \"Type\": \"Number\",\n            \"Description\": \"Minimum number of instances to run.\",\n            \"Default\": \"1\",\n            \"ConstraintDescription\": \"Must be an integer less than MaxNumInstances.\"\n        },\n        \"MaxNumInstances\": {\n            \"Type\": \"Number\",\n            \"Description\": \"Maximum number of instances to run.\",\n            \"Default\": \"5\",\n            \"ConstraintDescription\": \"Must be an integer greater than MinNumInstances.\"\n        },\n        \"DesiredNumInstances\": {\n            \"Type\": \"Number\",\n            \"Description\": \"Number of instances that need to be running before creation is marked as complete in CloudFormation management console.\",\n            \"Default\": \"1\",\n            \"ConstraintDescription\": \"Must be an integer in the range specified by MinNumInstances..MaxNumInstances.\"\n        }\n    },\n    \"Resources\": {\n        \"MyAutoScalingGroup\": {\n            \"Type\": \"AWS::AutoScaling::AutoScalingGroup\",\n            \"Properties\": {\n                ...\n                \"MinSize\": { \"Ref\": \"MinNumInstances\" },\n                \"MaxSize\": { \"Ref\": \"MaxNumInstances\" },\n                \"DesiredCapacity\": { \"Ref\": \"DesiredNumInstances\" },\n                ...\n            },\n        },\n        ...\n    },\n    ...\n}\n</code></pre>\n\n<p>In the example above <code>{ \"Ref\": ... }</code> is used to fill values into the template.  In this case we're providing integers as values for <code>\"MinSize\"</code> and <code>\"MaxSize\"</code>.</p>\n", "OwnerUserId": "524427", "LastEditorUserId": "395255", "LastEditDate": "2016-09-11T18:32:17.313", "LastActivityDate": "2016-09-11T18:32:17.313", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "41041290", "PostHistoryTypeId": "2", "PostId": "16701454", "RevisionGUID": "b6c6330c-7b1b-4981-8316-129abdeb5642", "CreationDate": "2013-05-22T20:58:41.413", "UserId": "524427", "Text": "User-defined variables are defined in the `\"Parameters\"` section of the config file.  In the `\"Resources\"` section of the config file you can fill in values using references to these parameters.\r\n\r\n    {\r\n        \"AWSTemplateFormatVersion\": \"2010-09-09\",\r\n        ...\r\n        \"Parameters\": {\r\n            \"MinNumInstances\": {\r\n                \"Type\": \"Number\",\r\n                \"Description\": \"Minimum number of instances to run.\"\r\n                \"Default\": \"1\",\r\n                \"ConstraintDescription\": \"Must be an integer less than MaxNumInstances.\"\r\n            },\r\n            \"MaxNumInstances\": {\r\n                \"Type\": \"Number\",\r\n                \"Description\": \"Maximum number of instances to run.\",\r\n                \"Default\": \"5\",\r\n                \"ConstraintDescription\": \"Must be an integer greater than MinNumInstances.\"\r\n            }\r\n        },\r\n        \"Resources\": {\r\n            \"MyAutoScalingGroup\": {\r\n                \"Type\": \"AWS::AutoScaling::AutoScalingGroup\",\r\n                \"Properties\": {\r\n                    ...\r\n                    \"MinSize\": { \"Ref\": \"MinNumInstances\" },\r\n                    \"MaxSize\": { \"Ref\": \"MaxNumInstances\" },\r\n                    ...\r\n                },\r\n            },\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n\r\n\r\nIn the example above `{ \"Ref\": ... }` is used to fill values into the template.  In this case we're providing integers as values for `\"MinSize\"` and `\"MaxSize\"`.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "41094429", "PostHistoryTypeId": "5", "PostId": "16701454", "RevisionGUID": "d8b2e8c8-3ecf-4ff6-881b-2ad547d42bbc", "CreationDate": "2013-05-23T18:25:39.680", "UserId": "524427", "Comment": "added 103 characters in body", "Text": "Use the `Ref` function.\r\n\r\nhttp://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref.html\r\n\r\nUser-defined variables are defined in the `\"Parameters\"` section of the config file.  In the `\"Resources\"` section of the config file you can fill in values using references to these parameters.\r\n\r\n    {\r\n        \"AWSTemplateFormatVersion\": \"2010-09-09\",\r\n        ...\r\n        \"Parameters\": {\r\n            \"MinNumInstances\": {\r\n                \"Type\": \"Number\",\r\n                \"Description\": \"Minimum number of instances to run.\"\r\n                \"Default\": \"1\",\r\n                \"ConstraintDescription\": \"Must be an integer less than MaxNumInstances.\"\r\n            },\r\n            \"MaxNumInstances\": {\r\n                \"Type\": \"Number\",\r\n                \"Description\": \"Maximum number of instances to run.\",\r\n                \"Default\": \"5\",\r\n                \"ConstraintDescription\": \"Must be an integer greater than MinNumInstances.\"\r\n            }\r\n        },\r\n        \"Resources\": {\r\n            \"MyAutoScalingGroup\": {\r\n                \"Type\": \"AWS::AutoScaling::AutoScalingGroup\",\r\n                \"Properties\": {\r\n                    ...\r\n                    \"MinSize\": { \"Ref\": \"MinNumInstances\" },\r\n                    \"MaxSize\": { \"Ref\": \"MaxNumInstances\" },\r\n                    ...\r\n                },\r\n            },\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n\r\n\r\nIn the example above `{ \"Ref\": ... }` is used to fill values into the template.  In this case we're providing integers as values for `\"MinSize\"` and `\"MaxSize\"`.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "41095032", "PostHistoryTypeId": "5", "PostId": "16701454", "RevisionGUID": "0b7be6be-a32e-406f-81fd-52825f54fc12", "CreationDate": "2013-05-23T18:40:19.490", "UserId": "524427", "Comment": "Added `DesiredCapacity` details.", "Text": "Use the `Ref` function.\r\n\r\nhttp://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref.html\r\n\r\nUser-defined variables are defined in the `\"Parameters\"` section of the config file.  In the `\"Resources\"` section of the config file you can fill in values using references to these parameters.\r\n\r\n    {\r\n        \"AWSTemplateFormatVersion\": \"2010-09-09\",\r\n        ...\r\n        \"Parameters\": {\r\n            \"MinNumInstances\": {\r\n                \"Type\": \"Number\",\r\n                \"Description\": \"Minimum number of instances to run.\"\r\n                \"Default\": \"1\",\r\n                \"ConstraintDescription\": \"Must be an integer less than MaxNumInstances.\"\r\n            },\r\n            \"MaxNumInstances\": {\r\n                \"Type\": \"Number\",\r\n                \"Description\": \"Maximum number of instances to run.\",\r\n                \"Default\": \"5\",\r\n                \"ConstraintDescription\": \"Must be an integer greater than MinNumInstances.\"\r\n            },\r\n            \"DesiredNumInstances\": {\r\n                \"Type\": \"Number\",\r\n                \"Description\": \"Number of instances that need to be running before creation is marked as complete in CloudFormation management console.\",\r\n                \"Default\": \"1\",\r\n                \"ConstraintDescription\": \"Must be an integer in the range specified by MinNumInstances..MaxNumInstances.\"\r\n            }\r\n        },\r\n        \"Resources\": {\r\n            \"MyAutoScalingGroup\": {\r\n                \"Type\": \"AWS::AutoScaling::AutoScalingGroup\",\r\n                \"Properties\": {\r\n                    ...\r\n                    \"MinSize\": { \"Ref\": \"MinNumInstances\" },\r\n                    \"MaxSize\": { \"Ref\": \"MaxNumInstances\" },\r\n                    \"DesiredCapacity\": { \"Ref\": \"DesiredNumInstances\" },\r\n                    ...\r\n                },\r\n            },\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n\r\n\r\nIn the example above `{ \"Ref\": ... }` is used to fill values into the template.  In this case we're providing integers as values for `\"MinSize\"` and `\"MaxSize\"`.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "126872244", "PostHistoryTypeId": "5", "PostId": "16701454", "RevisionGUID": "80164158-cd49-456e-a80e-c069f155fc78", "CreationDate": "2016-09-11T18:32:17.313", "UserId": "395255", "Comment": "added comma(,) in the MinNumInstances parameter", "Text": "Use the `Ref` function.\r\n\r\nhttp://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref.html\r\n\r\nUser-defined variables are defined in the `\"Parameters\"` section of the config file.  In the `\"Resources\"` section of the config file you can fill in values using references to these parameters.\r\n\r\n    {\r\n        \"AWSTemplateFormatVersion\": \"2010-09-09\",\r\n        ...\r\n        \"Parameters\": {\r\n            \"MinNumInstances\": {\r\n                \"Type\": \"Number\",\r\n                \"Description\": \"Minimum number of instances to run.\",\r\n                \"Default\": \"1\",\r\n                \"ConstraintDescription\": \"Must be an integer less than MaxNumInstances.\"\r\n            },\r\n            \"MaxNumInstances\": {\r\n                \"Type\": \"Number\",\r\n                \"Description\": \"Maximum number of instances to run.\",\r\n                \"Default\": \"5\",\r\n                \"ConstraintDescription\": \"Must be an integer greater than MinNumInstances.\"\r\n            },\r\n            \"DesiredNumInstances\": {\r\n                \"Type\": \"Number\",\r\n                \"Description\": \"Number of instances that need to be running before creation is marked as complete in CloudFormation management console.\",\r\n                \"Default\": \"1\",\r\n                \"ConstraintDescription\": \"Must be an integer in the range specified by MinNumInstances..MaxNumInstances.\"\r\n            }\r\n        },\r\n        \"Resources\": {\r\n            \"MyAutoScalingGroup\": {\r\n                \"Type\": \"AWS::AutoScaling::AutoScalingGroup\",\r\n                \"Properties\": {\r\n                    ...\r\n                    \"MinSize\": { \"Ref\": \"MinNumInstances\" },\r\n                    \"MaxSize\": { \"Ref\": \"MaxNumInstances\" },\r\n                    \"DesiredCapacity\": { \"Ref\": \"DesiredNumInstances\" },\r\n                    ...\r\n                },\r\n            },\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n\r\n\r\nIn the example above `{ \"Ref\": ... }` is used to fill values into the template.  In this case we're providing integers as values for `\"MinSize\"` and `\"MaxSize\"`.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "10444362", "PostTypeId": "2", "ParentId": "5251934", "CreationDate": "2012-05-04T07:13:39.217", "Score": "16", "Body": "<p>I think what the original poster was after is something like:</p>\n\n<pre><code>\"Parameters\" : {\n    \"InstanceCount\" : {\n        \"Description\" : \"Number of instances to start\",\n        \"Type\" : \"String\"\n    },\n</code></pre>\n\n<p>...</p>\n\n<pre><code>\"MyAutoScalingGroup\" : {\n        \"Type\" : \"AWS::AutoScaling::AutoScalingGroup\",\n        \"Properties\" : {\n        \"AvailabilityZones\" : {\"Fn::GetAZs\" : \"\"},\n        \"LaunchConfigurationName\" : { \"Ref\" : \"MyLaunchConfiguration\" },\n        \"MinSize\" : \"1\",\n        \"MaxSize\" : \"2\",\n        \"DesiredCapacity\" : **{ \"Ref\" : \"InstanceCount\" }**,\n        }\n    },\n</code></pre>\n\n<p>...in other words, insert the number of initial instances (the capacity) from a parameter.</p>\n", "OwnerUserId": "661571", "LastActivityDate": "2012-05-04T07:13:39.217", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "24022292", "PostHistoryTypeId": "2", "PostId": "10444362", "RevisionGUID": "d9e203d7-cd16-440a-9e6f-028defcf5bc5", "CreationDate": "2012-05-04T07:13:39.217", "UserId": "661571", "Text": "I think what the original poster was after is something like:\r\n\r\n    \"Parameters\" : {\r\n        \"InstanceCount\" : {\r\n            \"Description\" : \"Number of instances to start\",\r\n            \"Type\" : \"String\"\r\n        },\r\n...\r\n\r\n    \"MyAutoScalingGroup\" : {\r\n            \"Type\" : \"AWS::AutoScaling::AutoScalingGroup\",\r\n            \"Properties\" : {\r\n            \"AvailabilityZones\" : {\"Fn::GetAZs\" : \"\"},\r\n            \"LaunchConfigurationName\" : { \"Ref\" : \"MyLaunchConfiguration\" },\r\n            \"MinSize\" : \"1\",\r\n            \"MaxSize\" : \"2\",\r\n            \"DesiredCapacity\" : **{ \"Ref\" : \"InstanceCount\" }**,\r\n            }\r\n        },\r\n\r\n...in other words, insert the number of initial instances (the capacity) from a parameter.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "27367256", "PostTypeId": "2", "ParentId": "5251934", "CreationDate": "2014-12-08T21:26:40.977", "Score": "5", "Body": "<p>Short answer is : you can't. You can't get the exact same result (N identical EC2 instances, not tied by an auto scaling group). </p>\n\n<p>Launching several instances alike from the console is not like creating an auto scaling group with N instances as desired capacity. It's just a useful shortcut you have, instead of having to go N times through the same EC2 creation process. It's called \"a reservation\" (no relation to reserved instance).\nAuto scaling groups are a different beast (even though you end up with N identical EC2 instances).</p>\n\n<p>You can either:</p>\n\n<ul>\n<li>duplicate (yuk) the EC2 resource in the template</li>\n<li>use a nested template, which will do the EC2 creation itself, and call it N times from your master stack, feeding it each time with the same parameters</li>\n</ul>\n\n<p>Problem is, the number of EC2 instances will not be dynamic, it cannot be a parameter.</p>\n\n<ul>\n<li>use a frontend to CloudFormation templates, like troposphere, which allows you to write the EC2 description inside a function, and call the function N times (my choice now). At the end, you've got a CloudFormation template which does the job, but you've written the EC2 creation code only once.\nIt's not a <em>real</em> CloudFormation parameter, but at the end of the day, you get your dynamical number of EC2.</li>\n</ul>\n", "OwnerUserId": "579590", "LastEditorUserId": "579590", "LastEditDate": "2014-12-11T15:12:40.880", "LastActivityDate": "2014-12-11T15:12:40.880", "CommentCount": "1", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "43284924", "PostId": "27367256", "Score": "1", "Text": "I'd second the troposphere comment, this is the most efficient approach for this sort of problem.", "CreationDate": "2014-12-11T11:01:16.320", "UserId": "610498", "filtered-sentences": [{"source": "Text", "text": "I'd second the troposphere comment, this is the most efficient approach for this sort of problem.", "keywords": ["efficient"]}]}], "history": [{"Id": "79346028", "PostHistoryTypeId": "2", "PostId": "27367256", "RevisionGUID": "6ad88f28-a402-41a1-b95b-8ba3451faaa3", "CreationDate": "2014-12-08T21:26:40.977", "UserId": "579590", "Text": "Short answer is : you can't. You can't get the exact same result (N identical EC2 instances, not tied by an auto scaling group).\r\n\r\nLaunching several instances alike from the console is not like creating an auto scaling group with N instances as desired capacity. It's just a useful shortcut you have, instead of having to go N times through the same EC2 creation process. Auto scaling groups are a different beast (even though you end up with N identical EC2 instances).\r\n\r\nYou can either:\r\n\r\n* duplicate (yuk) the EC2 resource in the template\r\n* use a nested template, which will do the EC2 creation itself, and call it N times from your master stack, feeding it each time with the same parameters\r\n\r\nProblem is, the number of EC2 instances will not be dynamic, it cannot be a parameter.\r\n\r\n\r\n* use a frontend to CloudFormation templates, like troposphere, which allows you to write the EC2 description inside a function, and call the function N times (my choice now). At the end, you've got a CloudFormation template which does the job, but you've written the EC2 creation code only once.\r\nIt's not a *real* CloudFormation parameter, but at the end of the day, you get your dynamical number of EC2.\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "79566977", "PostHistoryTypeId": "5", "PostId": "27367256", "RevisionGUID": "13a3ceb6-9353-4219-9586-dc9360d2952d", "CreationDate": "2014-12-11T15:12:40.880", "UserId": "579590", "Comment": "added 66 characters in body", "Text": "Short answer is : you can't. You can't get the exact same result (N identical EC2 instances, not tied by an auto scaling group). \r\n\r\nLaunching several instances alike from the console is not like creating an auto scaling group with N instances as desired capacity. It's just a useful shortcut you have, instead of having to go N times through the same EC2 creation process. It's called \"a reservation\" (no relation to reserved instance).\r\nAuto scaling groups are a different beast (even though you end up with N identical EC2 instances).\r\n\r\nYou can either:\r\n\r\n* duplicate (yuk) the EC2 resource in the template\r\n* use a nested template, which will do the EC2 creation itself, and call it N times from your master stack, feeding it each time with the same parameters\r\n\r\nProblem is, the number of EC2 instances will not be dynamic, it cannot be a parameter.\r\n\r\n\r\n* use a frontend to CloudFormation templates, like troposphere, which allows you to write the EC2 description inside a function, and call the function N times (my choice now). At the end, you've got a CloudFormation template which does the job, but you've written the EC2 creation code only once.\r\nIt's not a *real* CloudFormation parameter, but at the end of the day, you get your dynamical number of EC2.\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "It's called \"a reservation\" (no relation to reserved instance). ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "It's called \"a reservation\" (no relation to reserved instance). ", "keywords": ["instance"]}]}, {"Id": "8888641", "PostTypeId": "2", "ParentId": "5251934", "CreationDate": "2012-01-17T01:30:29.507", "Score": "3", "Body": "<p>Meanwhile there are lots of <a href=\"http://aws.amazon.com/cloudformation/aws-cloudformation-templates/\" rel=\"nofollow\">AWS CloudFormation Sample Templates</a> available, and several include launching multiple instances, albeit usually demonstrating other features in parallel; for example, the <a href=\"https://s3.amazonaws.com/cloudformation-templates-us-east-1/AutoScalingKeepAtNSample.template\" rel=\"nofollow\">AutoScalingKeepAtNSample.template</a> creates a <em>load balanced, Auto Scaled sample website</em> and is configured to start 2 EC2 instances for this purpose as per this template excerpt:</p>\n\n<pre><code>\"WebServerGroup\": {\n\n    \"Type\": \"AWS::AutoScaling::AutoScalingGroup\",\n    \"Properties\": {\n        \"AvailabilityZones\": {\n            \"Fn::GetAZs\": \"\"\n        },\n        \"LaunchConfigurationName\": {\n            \"Ref\": \"LaunchConfig\"\n        },\n        \"MinSize\": \"2\",\n        \"MaxSize\": \"2\",\n        \"LoadBalancerNames\": [\n            {\n                \"Ref\": \"ElasticLoadBalancer\"\n            }\n        ]\n    }\n\n},\n</code></pre>\n\n<p>There are more advanced/complete samples available as well, e.g. the Drupal template for a <a href=\"https://s3.amazonaws.com/cloudformation-templates-us-east-1/Drupal_Multi_AZ.template\" rel=\"nofollow\">Highly Available Web Server with Multi-AZ Amazon RDS database instance and using S3 for storing file content</a>, which is currently configured to allow 1-5 web server instances talking to a <a href=\"http://aws.amazon.com/rds/mysql/#Multi-AZ\" rel=\"nofollow\">Multi-AZ</a> MySQL <a href=\"http://aws.amazon.com/rds/\" rel=\"nofollow\">Amazon RDS</a> database instance and running behind an <a href=\"http://aws.amazon.com/elasticloadbalancing/\" rel=\"nofollow\">Elastic Load Balancer</a>, which orchestrates the web server instances via <a href=\"http://aws.amazon.com/autoscaling/\" rel=\"nofollow\">Auto Scaling</a>.</p>\n", "OwnerUserId": "45773", "LastActivityDate": "2012-01-17T01:30:29.507", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "20079273", "PostHistoryTypeId": "2", "PostId": "8888641", "RevisionGUID": "bed39865-38e9-450c-a8f2-193e567fe6b3", "CreationDate": "2012-01-17T01:30:29.507", "UserId": "45773", "Text": "Meanwhile there are lots of [AWS CloudFormation Sample Templates][1] available, and several include launching multiple instances, albeit usually demonstrating other features in parallel; for example, the [AutoScalingKeepAtNSample.template][2] creates a *load balanced, Auto Scaled sample website* and is configured to start 2 EC2 instances for this purpose as per this template excerpt:\r\n\r\n    \"WebServerGroup\": {\r\n    \r\n        \"Type\": \"AWS::AutoScaling::AutoScalingGroup\",\r\n        \"Properties\": {\r\n            \"AvailabilityZones\": {\r\n                \"Fn::GetAZs\": \"\"\r\n            },\r\n            \"LaunchConfigurationName\": {\r\n                \"Ref\": \"LaunchConfig\"\r\n            },\r\n            \"MinSize\": \"2\",\r\n            \"MaxSize\": \"2\",\r\n            \"LoadBalancerNames\": [\r\n                {\r\n                    \"Ref\": \"ElasticLoadBalancer\"\r\n                }\r\n            ]\r\n        }\r\n    \r\n    },\r\n\r\nThere are more advanced/complete samples available as well, e.g. the Drupal template for a [Highly Available Web Server with Multi-AZ Amazon RDS database instance and using S3 for storing file content][3], which is currently configured to allow 1-5 web server instances talking to a [Multi-AZ][4] MySQL [Amazon RDS][5] database instance and running behind an [Elastic Load Balancer][6], which orchestrates the web server instances via [Auto Scaling][7].\r\n\r\n\r\n  [1]: http://aws.amazon.com/cloudformation/aws-cloudformation-templates/\r\n  [2]: https://s3.amazonaws.com/cloudformation-templates-us-east-1/AutoScalingKeepAtNSample.template\r\n  [3]: https://s3.amazonaws.com/cloudformation-templates-us-east-1/Drupal_Multi_AZ.template\r\n  [4]: http://aws.amazon.com/rds/mysql/#Multi-AZ\r\n  [5]: http://aws.amazon.com/rds/\r\n  [6]: http://aws.amazon.com/elasticloadbalancing/\r\n  [7]: http://aws.amazon.com/autoscaling/", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Meanwhile there are lots of [AWS CloudFormation Sample Templates][1] available, and several include launching multiple instances, albeit usually demonstrating other features in parallel; for example, the [AutoScalingKeepAtNSample.template][2] creates a *load balanced, Auto Scaled sample website* and is configured to start 2 EC2 instances for this purpose as per this template excerpt: \"WebServerGroup\": { \"Type\": \"AWS::AutoScaling::AutoScalingGroup\", \"Properties\": { \"AvailabilityZones\": { \"Fn::GetAZs\": \"\" }, \"LaunchConfigurationName\": { \"Ref\": \"LaunchConfig\" }, \"MinSize\": \"2\", \"MaxSize\": \"2\", \"LoadBalancerNames\": [ { \"Ref\": \"ElasticLoadBalancer\" } ] } }, There are more advanced/complete samples available as well, e.g. the Drupal template for a [Highly Available Web Server with Multi-AZ Amazon RDS database instance and using S3 for storing file content][3], which is currently configured to allow 1-5 web server instances talking to a [Multi-AZ][4] MySQL [Amazon RDS][5] database instance and running behind an [Elastic Load Balancer][6], which orchestrates the web server instances via [Auto Scaling][7]. [1]: http://aws.amazon.com/cloudformation/aws-cloudformation-templates/ [2]: https://s3.amazonaws.com/cloudformation-templates-us-east-1/AutoScalingKeepAtNSample.template [3]: https://s3.amazonaws.com/cloudformation-templates-us-east-1/Drupal_Multi_AZ.template [4]: http://aws.amazon.com/rds/mysql/#Multi-AZ [5]: http://aws.amazon.com/rds/ [6]: http://aws.amazon.com/elasticloadbalancing/ [7]: http://aws.amazon.com/autoscaling/", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "There are more advanced/complete samples available as well, e.g. the Drupal template for a Highly Available Web Server with Multi-AZ Amazon RDS database instance and using S3 for storing file content, which is currently configured to allow 1-5 web server instances talking to a Multi-AZ MySQL Amazon RDS database instance and running behind an Elastic Load Balancer, which orchestrates the web server instances via Auto Scaling.", "keywords": ["instance"]}]}, {"Id": "41539208", "PostTypeId": "2", "ParentId": "5251934", "CreationDate": "2017-01-08T23:51:18.860", "Score": "28", "Body": "<p>The <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html\" rel=\"noreferrer\"><code>AWS::EC2::Instance</code></a> Resource doesn't support the <code>MinCount</code>/<code>MaxCount</code> parameters of the underlying <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html\" rel=\"noreferrer\"><code>RunInstances</code></a> API, so it's not possible to create a variable number of EC2 instances by passing Parameters to a single copy of this Resource.</p>\n\n<p>To create a variable number of EC2 instance resources in CloudFormation template according to a template Parameter, and without deploying an Auto Scaling Group instead, there are two options:</p>\n\n<h1>1. Conditions</h1>\n\n<p>You can use <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html\" rel=\"noreferrer\"><code>Conditions</code></a> to create a variable number of <code>AWS::EC2::Instance</code> Resources depending on the Parameter.</p>\n\n<p>It's a little verbose (because you have to use <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-conditions.html#intrinsic-function-reference-conditions-equals\" rel=\"noreferrer\"><code>Fn::Equals</code></a>), but it works.</p>\n\n<p>Here's a working example that allows the user to specify up to a maximum of <strong>5</strong> instances:</p>\n\n<p><a href=\"https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=ec2-instances&amp;templateURL=https://s3.amazonaws.com/wjordan-cf-templates/ec2-instances-5251934-out.yml\" rel=\"noreferrer\"><img src=\"https://cdn.rawgit.com/buildkite/cloudformation-launch-stack-button-svg/master/launch-stack.svg\" alt=\"Launch Stack\"></a></p>\n\n<pre><code>Description: Create a variable number of EC2 instance resources.\nParameters:\n  InstanceCount:\n    Description: Number of EC2 instances (must be between 1 and 5).\n    Type: Number\n    Default: 1\n    MinValue: 1\n    MaxValue: 5\n    ConstraintDescription: Must be a number between 1 and 5.\n  ImageId:\n    Description: Image ID to launch EC2 instances.\n    Type: AWS::EC2::Image::Id\n    # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2\n    Default: ami-9be6f38c\n  InstanceType:\n    Description: Instance type to launch EC2 instances.\n    Type: String\n    Default: m3.medium\n    AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ]\nConditions:\n  Launch1: !Equals [1, 1]\n  Launch2: !Not [!Equals [1, !Ref InstanceCount]]\n  Launch3: !And\n  - !Not [!Equals [1, !Ref InstanceCount]]\n  - !Not [!Equals [2, !Ref InstanceCount]]\n  Launch4: !Or\n  - !Equals [4, !Ref InstanceCount]\n  - !Equals [5, !Ref InstanceCount]\n  Launch5: !Equals [5, !Ref InstanceCount]\nResources:\n  Instance1:\n    Condition: Launch1\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref ImageId\n      InstanceType: !Ref InstanceType\n  Instance2:\n    Condition: Launch2\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref ImageId\n      InstanceType: !Ref InstanceType\n  Instance3:\n    Condition: Launch3\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref ImageId\n      InstanceType: !Ref InstanceType\n  Instance4:\n    Condition: Launch4\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref ImageId\n      InstanceType: !Ref InstanceType\n  Instance5:\n    Condition: Launch5\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref ImageId\n      InstanceType: !Ref InstanceType\n</code></pre>\n\n<h2>1a. Template preprocessor with Conditions</h2>\n\n<p>As a variation on the above, you can use a template preprocessor like Ruby's <a href=\"http://www.stuartellis.name/articles/erb/\" rel=\"noreferrer\">Erb</a> to generate the above template based on a specified maximum, making your source code more compact and eliminating duplication:</p>\n\n<pre><code>&lt;%max = 10-%&gt;\nDescription: Create a variable number of EC2 instance resources.\nParameters:\n  InstanceCount:\n    Description: Number of EC2 instances (must be between 1 and &lt;%=max%&gt;).\n    Type: Number\n    Default: 1\n    MinValue: 1\n    MaxValue: &lt;%=max%&gt;\n    ConstraintDescription: Must be a number between 1 and &lt;%=max%&gt;.\n  ImageId:\n    Description: Image ID to launch EC2 instances.\n    Type: AWS::EC2::Image::Id\n    # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2\n    Default: ami-9be6f38c\n  InstanceType:\n    Description: Instance type to launch EC2 instances.\n    Type: String\n    Default: m3.medium\n    AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ]\nConditions:\n  Launch1: !Equals [1, 1]\n  Launch2: !Not [!Equals [1, !Ref InstanceCount]]\n&lt;%(3..max-1).each do |x|\n    low = (max-1)/(x-1) &lt;= 1-%&gt;\n  Launch&lt;%=x%&gt;: !&lt;%=low ? 'Or' : 'And'%&gt;\n&lt;%  (1..max).each do |i|\n      if low &amp;&amp; i &gt;= x-%&gt;\n  - !Equals [&lt;%=i%&gt;, !Ref InstanceCount]\n&lt;%    elsif !low &amp;&amp; i &lt; x-%&gt;\n  - !Not [!Equals [&lt;%=i%&gt;, !Ref InstanceCount]]\n&lt;%    end\n    end\n  end-%&gt;\n  Launch&lt;%=max%&gt;: !Equals [&lt;%=max%&gt;, !Ref InstanceCount]\nResources:\n&lt;%(1..max).each do |x|-%&gt;\n  Instance&lt;%=x%&gt;:\n    Condition: Launch&lt;%=x%&gt;\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref ImageId\n      InstanceType: !Ref InstanceType\n&lt;%end-%&gt;\n</code></pre>\n\n<p>To process the above source into a CloudFormation-compatible template, run:</p>\n\n<pre><code>ruby -rerb -e \"puts ERB.new(ARGF.read, nil, '-').result\" &lt; template.yml &gt; template-out.yml\n</code></pre>\n\n<p>For convenience, here is a gist with the generated output YAML for <a href=\"https://gist.github.com/wjordan/105da42b33667fdf3007f6dc4833208c\" rel=\"noreferrer\">10 variable EC2 instances</a>.</p>\n\n<h1>2. Custom Resource</h1>\n\n<p>An alternate approach is to implement a <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html\" rel=\"noreferrer\">Custom Resource</a> that calls the <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html\" rel=\"noreferrer\"><code>RunInstances</code></a>/<a href=\"http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TerminateInstances.html\" rel=\"noreferrer\"><code>TerminateInstances</code></a> APIs directly:</p>\n\n<p><a href=\"https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=ec2-instances&amp;templateURL=https://s3.amazonaws.com/wjordan-cf-templates/ec2-instances-5251934-b.yml\" rel=\"noreferrer\"><img src=\"https://cdn.rawgit.com/buildkite/cloudformation-launch-stack-button-svg/master/launch-stack.svg\" alt=\"Launch Stack\"></a></p>\n\n<pre><code>Description: Create a variable number of EC2 instance resources.\nParameters:\n  InstanceCount:\n    Description: Number of EC2 instances (must be between 1 and 10).\n    Type: Number\n    Default: 1\n    MinValue: 1\n    MaxValue: 10\n    ConstraintDescription: Must be a number between 1 and 10.\n  ImageId:\n    Description: Image ID to launch EC2 instances.\n    Type: AWS::EC2::Image::Id\n    # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2\n    Default: ami-9be6f38c\n  InstanceType:\n    Description: Instance type to launch EC2 instances.\n    Type: String\n    Default: m3.medium\n    AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ]\nResources:\n  EC2Instances:\n    Type: Custom::EC2Instances\n    Properties:\n      ServiceToken: !GetAtt EC2InstancesFunction.Arn\n      ImageId: !Ref ImageId\n      InstanceType: !Ref InstanceType\n      MinCount: !Ref InstanceCount\n      MaxCount: !Ref InstanceCount\n  EC2InstancesFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      Handler: index.handler\n      Role: !GetAtt LambdaExecutionRole.Arn\n      Code:\n        ZipFile: !Sub |\n          var response = require('cfn-response');\n          var AWS = require('aws-sdk');\n          exports.handler = function(event, context) {\n            var physicalId = event.PhysicalResourceId || 'none';\n            function success(data) {\n              return response.send(event, context, response.SUCCESS, data, physicalId);\n            }\n            function failed(e) {\n              return response.send(event, context, response.FAILED, e, physicalId);\n            }\n            var ec2 = new AWS.EC2();\n            var instances;\n            if (event.RequestType == 'Create') {\n              var launchParams = event.ResourceProperties;\n              delete launchParams.ServiceToken;\n              ec2.runInstances(launchParams).promise().then((data)=&gt; {\n                instances = data.Instances.map((data)=&gt; data.InstanceId);\n                physicalId = instances.join(':');\n                return ec2.waitFor('instanceRunning', {InstanceIds: instances}).promise();\n              }).then((data)=&gt; success({Instances: instances})\n              ).catch((e)=&gt; failed(e));\n            } else if (event.RequestType == 'Delete') {\n              if (physicalId == 'none') {return success({});}\n              var deleteParams = {InstanceIds: physicalId.split(':')};\n              ec2.terminateInstances(deleteParams).promise().then((data)=&gt;\n                ec2.waitFor('instanceTerminated', deleteParams).promise()\n              ).then((data)=&gt;success({})\n              ).catch((e)=&gt;failed(e));\n            } else {\n              return failed({Error: \"In-place updates not supported.\"});\n            }\n          };\n      Runtime: nodejs4.3\n      Timeout: 300\n  LambdaExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n        - Effect: Allow\n          Principal: {Service: [lambda.amazonaws.com]}\n          Action: ['sts:AssumeRole']\n      Path: /\n      ManagedPolicyArns:\n      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      Policies:\n      - PolicyName: EC2Policy\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Action:\n              - 'ec2:RunInstances'\n              - 'ec2:DescribeInstances'\n              - 'ec2:DescribeInstanceStatus'\n              - 'ec2:TerminateInstances'\n              Resource: ['*']\nOutputs:\n  Instances:\n    Value: !Join [',', !GetAtt EC2Instances.Instances]\n</code></pre>\n", "OwnerUserId": "2518355", "LastEditorUserId": "2518355", "LastEditDate": "2019-05-28T22:43:28.467", "LastActivityDate": "2019-05-28T22:43:28.467", "CommentCount": "5", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "74991698", "PostId": "41539208", "Score": "1", "Text": "If auto-scaling groups are not an option (wasn't for one of my use cases), then this custom resource is pretty handy!  Thanks for sharing!", "CreationDate": "2017-05-15T13:54:09.543", "UserId": "313063", "filtered-sentences": []}, {"Id": "82826152", "PostId": "41539208", "Score": "0", "Text": "@wjordan Can you please give conditions example for 10 instances? I know you have it upto 5 in \"1. Conditions\". Appreciated.", "CreationDate": "2017-12-21T16:17:41.777", "UserId": "2501165", "filtered-sentences": []}, {"Id": "83937168", "PostId": "41539208", "Score": "0", "Text": "This absolutely awesome and I was looking for the similar implementation. Thanks!", "CreationDate": "2018-01-27T01:03:55.207", "UserId": "4923204", "filtered-sentences": []}, {"Id": "83937312", "PostId": "41539208", "Score": "2", "Text": "@user2501165 The example template and command-line instructions in '1a' above can generate conditions for an arbitrary max number of instances. For convenience, here is a gist with the generated output YAML for [10 variable EC2 instances](https://gist.github.com/wjordan/105da42b33667fdf3007f6dc4833208c).", "CreationDate": "2018-01-27T01:15:43.440", "UserId": "2518355", "filtered-sentences": []}, {"Id": "99306890", "PostId": "41539208", "Score": "0", "Text": "Just fixed a logic bug in the Option 1 / 1a template-code conditions, the `!Or` function should be `!And` for the low-numbered (`!Not`) conditions. Thanks @gaurav-goel and @krish for pointing this out.", "CreationDate": "2019-05-28T22:48:42.580", "UserId": "2518355", "filtered-sentences": []}], "history": [{"Id": "135521182", "PostHistoryTypeId": "2", "PostId": "41539208", "RevisionGUID": "7e980c96-d531-43c3-aa32-0517cce88eba", "CreationDate": "2017-01-08T23:51:18.860", "UserId": "2518355", "Text": "The [`AWS::EC2::Instance`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html) Resource doesn't support the `MinCount`/`MaxCount` parameters of the underlying [`RunInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html) API, so it's not possible to create a variable number of EC2 instances by passing Parameters to a single copy of this Resource.\r\n\r\nTo create a variable number of EC2 instance resources in CloudFormation template according to a template Parameter, and without deploying an Auto Scaling Group instead, there are two options:\r\n\r\n#1. Conditions\r\n\r\nYou can use [`Conditions`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html) to create a variable number of `AWS::EC2::Instance` Resources depending on the Parameter.\r\n\r\nIt's a little verbose (because you have to use [`Fn::Equals`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-conditions.html#intrinsic-function-reference-conditions-equals)), but it works.\r\n\r\nHere's a working example that allows the user to specify up to a maximum of **5** instances:\r\n\r\n[![Launch Stack](https://cdn.rawgit.com/buildkite/cloudformation-launch-stack-button-svg/master/launch-stack.svg)](https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=ec2-instances&templateURL=https://s3.amazonaws.com/wjordan-cf-templates/ec2-instances-5251934-out.yml)\r\n\r\n    Description: Create a variable number of EC2 instance resources.\r\n    Parameters:\r\n      InstanceCount:\r\n        Description: Number of EC2 instances (must be between 1 and 5).\r\n        Type: Number\r\n        Default: 1\r\n        MinValue: 1\r\n        MaxValue: 5\r\n        ConstraintDescription: Must be a number between 1 and 5.\r\n      ImageId:\r\n        Description: Image ID to launch EC2 instances.\r\n        Type: AWS::EC2::Image::Id\r\n        # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2\r\n        Default: ami-9be6f38c\r\n      InstanceType:\r\n        Description: Instance type to launch EC2 instances.\r\n        Type: String\r\n        Default: m3.medium\r\n        AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ]\r\n    Conditions:\r\n      Launch1: !Equals [1, 1]\r\n      Launch2: !Not [!Equals [1, !Ref InstanceCount]]\r\n      Launch3: !Or\r\n      - !Not [!Equals [1, !Ref InstanceCount]]\r\n      - !Not [!Equals [2, !Ref InstanceCount]]\r\n      Launch4: !Or\r\n      - !Equals [4, !Ref InstanceCount]\r\n      - !Equals [5, !Ref InstanceCount]\r\n      Launch5: !Equals [5, !Ref InstanceCount]\r\n    Resources:\r\n      Instance1:\r\n        Condition: Launch1\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n      Instance2:\r\n        Condition: Launch2\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n      Instance3:\r\n        Condition: Launch3\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n      Instance4:\r\n        Condition: Launch4\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n      Instance5:\r\n        Condition: Launch5\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n\r\n##1a. Template preprocessor with Conditions\r\n\r\nAs a variation on the above, you can use a template preprocessor like Ruby's [Erb](http://www.stuartellis.name/articles/erb/) to generate the above template based on a specified maximum, making your source code more compact and eliminating duplication:\r\n\r\n    <%max = 10-%>\r\n    Description: Create a variable number of EC2 instance resources.\r\n    Parameters:\r\n      InstanceCount:\r\n        Description: Number of EC2 instances (must be between 1 and <%=max%>).\r\n        Type: Number\r\n        Default: 1\r\n        MinValue: 1\r\n        MaxValue: <%=max%>\r\n        ConstraintDescription: Must be a number between 1 and <%=max%>.\r\n      ImageId:\r\n        Description: Image ID to launch EC2 instances.\r\n        Type: AWS::EC2::Image::Id\r\n        # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2\r\n        Default: ami-9be6f38c\r\n      InstanceType:\r\n        Description: Instance type to launch EC2 instances.\r\n        Type: String\r\n        Default: m3.medium\r\n        AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ]\r\n    Conditions:\r\n      Launch1: !Equals [1, 1]\r\n      Launch2: !Not [!Equals [1, !Ref InstanceCount]]\r\n    <%(3..max-1).each do |x|\r\n        low = (max-1)/(x-1) <= 1-%>\r\n      Launch<%=x%>: !Or\r\n    <%  (1..max).each do |i|\r\n          if low && i >= x-%>\r\n      - !Equals [<%=i%>, !Ref InstanceCount]\r\n    <%    elsif !low && i < x-%>\r\n      - !Not [!Equals [<%=i%>, !Ref InstanceCount]]\r\n    <%    end\r\n        end\r\n      end-%>\r\n      Launch<%=max%>: !Equals [<%=max%>, !Ref InstanceCount]\r\n    Resources:\r\n    <%(1..max).each do |x|-%>\r\n      Instance<%=x%>:\r\n        Condition: Launch<%=x%>\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n    <%end-%>\r\n\r\nTo process the above source into a CloudFormation-compatible template, run:\r\n\r\n    ruby -rerb -e \"puts ERB.new(ARGF.read, nil, '-').result\" < template.yml > template-out.yml\r\n\r\n#2. Custom Resource\r\n\r\nAn alternate approach is to implement a [Custom Resource](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html) that calls the [`RunInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html)/[`TerminateInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TerminateInstances.html) APIs directly:\r\n\r\n[![Launch Stack](https://cdn.rawgit.com/buildkite/cloudformation-launch-stack-button-svg/master/launch-stack.svg)](https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=ec2-instances&templateURL=https://s3.amazonaws.com/wjordan-cf-templates/ec2-instances-5251934-b.yml)\r\n\r\n    Description: Create a variable number of EC2 instance resources.\r\n    Parameters:\r\n      InstanceCount:\r\n        Description: Number of EC2 instances (must be between 1 and 10).\r\n        Type: Number\r\n        Default: 1\r\n        MinValue: 1\r\n        MaxValue: 10\r\n        ConstraintDescription: Must be a number between 1 and 10.\r\n      ImageId:\r\n        Description: Image ID to launch EC2 instances.\r\n        Type: AWS::EC2::Image::Id\r\n        # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2\r\n        Default: ami-9be6f38c\r\n      InstanceType:\r\n        Description: Instance type to launch EC2 instances.\r\n        Type: String\r\n        Default: m3.medium\r\n        AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ]\r\n    Resources:\r\n      EC2Instances:\r\n        Type: Custom::EC2Instances\r\n        Properties:\r\n          ServiceToken: !GetAtt EC2InstancesFunction.Arn\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n          MinCount: !Ref InstanceCount\r\n          MaxCount: !Ref InstanceCount\r\n      EC2InstancesFunction:\r\n        Type: AWS::Lambda::Function\r\n        Properties:\r\n          Handler: index.handler\r\n          Role: !GetAtt LambdaExecutionRole.Arn\r\n          Code:\r\n            ZipFile: !Sub |\r\n              var response = require('cfn-response');\r\n              var AWS = require('aws-sdk');\r\n              exports.handler = function(event, context) {\r\n                var physicalId = event.PhysicalResourceId || 'none';\r\n                function success(data) {\r\n                  return response.send(event, context, response.SUCCESS, data, physicalId);\r\n                }\r\n                function failed(e) {\r\n                  return response.send(event, context, response.FAILED, e, physicalId);\r\n                }\r\n                var ec2 = new AWS.EC2();\r\n                var instances;\r\n                if (event.RequestType == 'Create') {\r\n                  var launchParams = event.ResourceProperties;\r\n                  delete launchParams.ServiceToken;\r\n                  ec2.runInstances(launchParams).promise().then((data)=> {\r\n                    instances = data.Instances.map((data)=> data.InstanceId);\r\n                    physicalId = instances.join(':');\r\n                    return ec2.waitFor('instanceRunning', {InstanceIds: instances}).promise();\r\n                  }).then((data)=> success({Instances: instances})\r\n                  ).catch((e)=> failed(e));\r\n                } else if (event.RequestType == 'Delete') {\r\n                  if (physicalId == 'none') {return success({});}\r\n                  var deleteParams = {InstanceIds: physicalId.split(':')};\r\n                  ec2.terminateInstances(deleteParams).promise().then((data)=>\r\n                    ec2.waitFor('instanceTerminated', deleteParams).promise()\r\n                  ).then((data)=>success({})\r\n                  ).catch((e)=>failed(e));\r\n                } else {\r\n                  return failed({Error: \"In-place updates not supported.\"});\r\n                }\r\n              };\r\n          Runtime: nodejs4.3\r\n          Timeout: 300\r\n      LambdaExecutionRole:\r\n        Type: AWS::IAM::Role\r\n        Properties:\r\n          AssumeRolePolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n            - Effect: Allow\r\n              Principal: {Service: [lambda.amazonaws.com]}\r\n              Action: ['sts:AssumeRole']\r\n          Path: /\r\n          ManagedPolicyArns:\r\n          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\r\n          Policies:\r\n          - PolicyName: EC2Policy\r\n            PolicyDocument:\r\n              Version: '2012-10-17'\r\n              Statement:\r\n                - Effect: Allow\r\n                  Action:\r\n                  - 'ec2:RunInstances'\r\n                  - 'ec2:DescribeInstances'\r\n                  - 'ec2:DescribeInstanceStatus'\r\n                  - 'ec2:TerminateInstances'\r\n                  Resource: ['*']\r\n    Outputs:\r\n      Instances:\r\n        Value: !Join [',', !GetAtt EC2Instances.Instances]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "The [`AWS::EC2::Instance`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html) Resource doesn't support the `MinCount`/`MaxCount` parameters of the underlying [`RunInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html) API, so it's not possible to create a variable number of EC2 instances by passing Parameters to a single copy of this Resource. ", "keywords": ["instance"]}, {"source": "Text", "text": "To create a variable number of EC2 instance resources in CloudFormation template according to a template Parameter, and without deploying an Auto Scaling Group instead, there are two options: #1. ", "keywords": ["instance"]}, {"source": "Text", "text": "You can use [`Conditions`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html) to create a variable number of `AWS::EC2::Instance` ", "keywords": ["instance"]}, {"source": "Text", "text": "Here's a working example that allows the user to specify up to a maximum of **5** instances: [![Launch Stack](https://cdn.rawgit.com/buildkite/cloudformation-launch-stack-button-svg/master/launch-stack.svg)](https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=ec2-instances&templateURL=https://s3.amazonaws.com/wjordan-cf-templates/ec2-instances-5251934-out.yml) Description: Create a variable number of EC2 instance resources. ", "keywords": ["instance"]}, {"source": "Text", "text": "Type: AWS::EC2::Image::Id # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2 Default: ami-9be6f38c InstanceType: Description: Instance type to launch EC2 instances. Type: String Default: m3.medium AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ] Conditions: Launch1: !Equals [1, 1] Launch2: !Not [!Equals [1, !Ref InstanceCount]] Launch3: !Or - !Not [!Equals [1, !Ref InstanceCount]] - !Not [!Equals [2, !Ref InstanceCount]] Launch4: !Or - !Equals [4, !Ref InstanceCount] - !Equals [5, !Ref InstanceCount] Launch5: !Equals [5, !Ref InstanceCount] Resources: Instance1: Condition: Launch1 Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType Instance2: Condition: Launch2 Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType Instance3: Condition: Launch3 Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType Instance4: Condition: Launch4 Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType Instance5: Condition: Launch5 Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType ##1a. ", "keywords": ["instance"]}, {"source": "Text", "text": "As a variation on the above, you can use a template preprocessor like Ruby's [Erb](http://www.stuartellis.name/articles/erb/) to generate the above template based on a specified maximum, making your source code more compact and eliminating duplication: <%max = 10-%> Description: Create a variable number of EC2 instance resources. ", "keywords": ["instance"]}, {"source": "Text", "text": "ImageId: Description: Image ID to launch EC2 instances. Type: AWS::EC2::Image::Id # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2 Default: ami-9be6f38c InstanceType: Description: Instance type to launch EC2 instances. ", "keywords": ["instance"]}, {"source": "Text", "text": "Type: String Default: m3.medium AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ] Conditions: Launch1: !Equals [1, 1] Launch2: !Not [!Equals [1, !Ref InstanceCount]] <%(3..max-1).each do |x| low = (max-1)/(x-1) <= 1-%> Launch<%=x%>: !Or <% (1..max).each do |i| if low && i >= x-%> - !Equals [<%=i%>, !Ref InstanceCount] <% elsif !low && i < x-%> - !Not [!Equals [<%=i%>, !Ref InstanceCount]] <% end end end-%> Launch<%=max%>: !Equals [<%=max%>, !Ref InstanceCount] Resources: <%(1..max).each do |x|-%> Instance<%=x%>: Condition: Launch<%=x%> Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType <%end-%> To process the above source into a CloudFormation-compatible template, run: ruby -rerb -e \"puts ERB.new(ARGF.read, nil, '-').result\" < template.yml > template-out.yml #2. ", "keywords": ["instance"]}, {"source": "Text", "text": "Custom Resource An alternate approach is to implement a [Custom Resource](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html) that calls the [`RunInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html)/[`TerminateInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TerminateInstances.html) APIs directly: [![Launch Stack](https://cdn.rawgit.com/buildkite/cloudformation-launch-stack-button-svg/master/launch-stack.svg)](https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=ec2-instances&templateURL=https://s3.amazonaws.com/wjordan-cf-templates/ec2-instances-5251934-b.yml) Description: Create a variable number of EC2 instance resources. ", "keywords": ["instance"]}, {"source": "Text", "text": "Type: Number Default: 1 MinValue: 1 MaxValue: 10 ConstraintDescription: Must be a number between 1 and 10. ImageId: Description: Image ID to launch EC2 instances. Type: AWS::EC2::Image::Id # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2 Default: ami-9be6f38c InstanceType: Description: Instance type to launch EC2 instances. Type: String Default: m3.medium AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ] Resources: EC2Instances: Type: Custom::EC2Instances Properties: ServiceToken: !GetAtt EC2InstancesFunction.Arn ImageId: !Ref ImageId InstanceType: !Ref InstanceType MinCount: !Ref InstanceCount MaxCount: !Ref InstanceCount EC2InstancesFunction: Type: AWS::Lambda::Function Properties: Handler: index.handler Role: !GetAtt LambdaExecutionRole.Arn Code: ZipFile: !Sub | var response = require('cfn-response'); var AWS = require('aws-sdk'); exports.handler = function(event, context) { var physicalId = event.PhysicalResourceId || 'none'; function success(data) { return response.send(event, context, response.SUCCESS, data, physicalId); } function failed(e) { return response.send(event, context, response.FAILED, e, physicalId); } var ec2 = new AWS.EC2(); var instances; if (event.RequestType == 'Create') { var launchParams = event.ResourceProperties; delete launchParams.ServiceToken; ec2.runInstances(launchParams).promise().then((data)=> { instances = data.Instances.map((data)=> data.InstanceId); physicalId = instances.join(':'); return ec2.waitFor('instanceRunning', {InstanceIds: instances}).promise(); }).then((data)=> success({Instances: instances}) ).catch((e)=> failed(e)); } else if (event.RequestType == 'Delete') { if (physicalId == 'none') {return success({});} var deleteParams = {InstanceIds: physicalId.split(':')}; ec2.terminateInstances(deleteParams).promise().then((data)=> ec2.waitFor('instanceTerminated', deleteParams).promise() ).then((data)=>success({}) ).catch((e)=>failed(e)); } else { return failed({Error: \"In-place updates not supported.\"}); } }; Runtime: nodejs4.3 Timeout: 300 LambdaExecutionRole: Type: AWS::IAM::Role Properties: AssumeRolePolicyDocument: Version: '2012-10-17' Statement: - Effect: Allow Principal: {Service: [lambda.amazonaws.com]} Action: ['sts:AssumeRole'] Path: / ManagedPolicyArns: - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole Policies: - PolicyName: EC2Policy PolicyDocument: Version: '2012-10-17' Statement: - Effect: Allow Action: - 'ec2:RunInstances' - 'ec2:DescribeInstances' - 'ec2:DescribeInstanceStatus' - 'ec2:TerminateInstances' Resource: ['*'] Outputs: Instances: Value: !Join [',', !GetAtt EC2Instances.Instances]", "keywords": ["instance", "policy"]}]}, {"Id": "165553161", "PostHistoryTypeId": "5", "PostId": "41539208", "RevisionGUID": "c5cbe996-1ff9-4ce7-9c06-545efb642db0", "CreationDate": "2018-01-27T01:17:02.593", "UserId": "2518355", "Comment": "added gist with 10-instance yaml", "Text": "The [`AWS::EC2::Instance`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html) Resource doesn't support the `MinCount`/`MaxCount` parameters of the underlying [`RunInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html) API, so it's not possible to create a variable number of EC2 instances by passing Parameters to a single copy of this Resource.\r\n\r\nTo create a variable number of EC2 instance resources in CloudFormation template according to a template Parameter, and without deploying an Auto Scaling Group instead, there are two options:\r\n\r\n#1. Conditions\r\n\r\nYou can use [`Conditions`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html) to create a variable number of `AWS::EC2::Instance` Resources depending on the Parameter.\r\n\r\nIt's a little verbose (because you have to use [`Fn::Equals`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-conditions.html#intrinsic-function-reference-conditions-equals)), but it works.\r\n\r\nHere's a working example that allows the user to specify up to a maximum of **5** instances:\r\n\r\n[![Launch Stack](https://cdn.rawgit.com/buildkite/cloudformation-launch-stack-button-svg/master/launch-stack.svg)](https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=ec2-instances&templateURL=https://s3.amazonaws.com/wjordan-cf-templates/ec2-instances-5251934-out.yml)\r\n\r\n    Description: Create a variable number of EC2 instance resources.\r\n    Parameters:\r\n      InstanceCount:\r\n        Description: Number of EC2 instances (must be between 1 and 5).\r\n        Type: Number\r\n        Default: 1\r\n        MinValue: 1\r\n        MaxValue: 5\r\n        ConstraintDescription: Must be a number between 1 and 5.\r\n      ImageId:\r\n        Description: Image ID to launch EC2 instances.\r\n        Type: AWS::EC2::Image::Id\r\n        # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2\r\n        Default: ami-9be6f38c\r\n      InstanceType:\r\n        Description: Instance type to launch EC2 instances.\r\n        Type: String\r\n        Default: m3.medium\r\n        AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ]\r\n    Conditions:\r\n      Launch1: !Equals [1, 1]\r\n      Launch2: !Not [!Equals [1, !Ref InstanceCount]]\r\n      Launch3: !Or\r\n      - !Not [!Equals [1, !Ref InstanceCount]]\r\n      - !Not [!Equals [2, !Ref InstanceCount]]\r\n      Launch4: !Or\r\n      - !Equals [4, !Ref InstanceCount]\r\n      - !Equals [5, !Ref InstanceCount]\r\n      Launch5: !Equals [5, !Ref InstanceCount]\r\n    Resources:\r\n      Instance1:\r\n        Condition: Launch1\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n      Instance2:\r\n        Condition: Launch2\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n      Instance3:\r\n        Condition: Launch3\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n      Instance4:\r\n        Condition: Launch4\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n      Instance5:\r\n        Condition: Launch5\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n\r\n##1a. Template preprocessor with Conditions\r\n\r\nAs a variation on the above, you can use a template preprocessor like Ruby's [Erb](http://www.stuartellis.name/articles/erb/) to generate the above template based on a specified maximum, making your source code more compact and eliminating duplication:\r\n\r\n    <%max = 10-%>\r\n    Description: Create a variable number of EC2 instance resources.\r\n    Parameters:\r\n      InstanceCount:\r\n        Description: Number of EC2 instances (must be between 1 and <%=max%>).\r\n        Type: Number\r\n        Default: 1\r\n        MinValue: 1\r\n        MaxValue: <%=max%>\r\n        ConstraintDescription: Must be a number between 1 and <%=max%>.\r\n      ImageId:\r\n        Description: Image ID to launch EC2 instances.\r\n        Type: AWS::EC2::Image::Id\r\n        # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2\r\n        Default: ami-9be6f38c\r\n      InstanceType:\r\n        Description: Instance type to launch EC2 instances.\r\n        Type: String\r\n        Default: m3.medium\r\n        AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ]\r\n    Conditions:\r\n      Launch1: !Equals [1, 1]\r\n      Launch2: !Not [!Equals [1, !Ref InstanceCount]]\r\n    <%(3..max-1).each do |x|\r\n        low = (max-1)/(x-1) <= 1-%>\r\n      Launch<%=x%>: !Or\r\n    <%  (1..max).each do |i|\r\n          if low && i >= x-%>\r\n      - !Equals [<%=i%>, !Ref InstanceCount]\r\n    <%    elsif !low && i < x-%>\r\n      - !Not [!Equals [<%=i%>, !Ref InstanceCount]]\r\n    <%    end\r\n        end\r\n      end-%>\r\n      Launch<%=max%>: !Equals [<%=max%>, !Ref InstanceCount]\r\n    Resources:\r\n    <%(1..max).each do |x|-%>\r\n      Instance<%=x%>:\r\n        Condition: Launch<%=x%>\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n    <%end-%>\r\n\r\nTo process the above source into a CloudFormation-compatible template, run:\r\n\r\n    ruby -rerb -e \"puts ERB.new(ARGF.read, nil, '-').result\" < template.yml > template-out.yml\r\n\r\nFor convenience, here is a gist with the generated output YAML for [10 variable EC2 instances](https://gist.github.com/wjordan/105da42b33667fdf3007f6dc4833208c).\r\n\r\n#2. Custom Resource\r\n\r\nAn alternate approach is to implement a [Custom Resource](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html) that calls the [`RunInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html)/[`TerminateInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TerminateInstances.html) APIs directly:\r\n\r\n[![Launch Stack](https://cdn.rawgit.com/buildkite/cloudformation-launch-stack-button-svg/master/launch-stack.svg)](https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=ec2-instances&templateURL=https://s3.amazonaws.com/wjordan-cf-templates/ec2-instances-5251934-b.yml)\r\n\r\n    Description: Create a variable number of EC2 instance resources.\r\n    Parameters:\r\n      InstanceCount:\r\n        Description: Number of EC2 instances (must be between 1 and 10).\r\n        Type: Number\r\n        Default: 1\r\n        MinValue: 1\r\n        MaxValue: 10\r\n        ConstraintDescription: Must be a number between 1 and 10.\r\n      ImageId:\r\n        Description: Image ID to launch EC2 instances.\r\n        Type: AWS::EC2::Image::Id\r\n        # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2\r\n        Default: ami-9be6f38c\r\n      InstanceType:\r\n        Description: Instance type to launch EC2 instances.\r\n        Type: String\r\n        Default: m3.medium\r\n        AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ]\r\n    Resources:\r\n      EC2Instances:\r\n        Type: Custom::EC2Instances\r\n        Properties:\r\n          ServiceToken: !GetAtt EC2InstancesFunction.Arn\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n          MinCount: !Ref InstanceCount\r\n          MaxCount: !Ref InstanceCount\r\n      EC2InstancesFunction:\r\n        Type: AWS::Lambda::Function\r\n        Properties:\r\n          Handler: index.handler\r\n          Role: !GetAtt LambdaExecutionRole.Arn\r\n          Code:\r\n            ZipFile: !Sub |\r\n              var response = require('cfn-response');\r\n              var AWS = require('aws-sdk');\r\n              exports.handler = function(event, context) {\r\n                var physicalId = event.PhysicalResourceId || 'none';\r\n                function success(data) {\r\n                  return response.send(event, context, response.SUCCESS, data, physicalId);\r\n                }\r\n                function failed(e) {\r\n                  return response.send(event, context, response.FAILED, e, physicalId);\r\n                }\r\n                var ec2 = new AWS.EC2();\r\n                var instances;\r\n                if (event.RequestType == 'Create') {\r\n                  var launchParams = event.ResourceProperties;\r\n                  delete launchParams.ServiceToken;\r\n                  ec2.runInstances(launchParams).promise().then((data)=> {\r\n                    instances = data.Instances.map((data)=> data.InstanceId);\r\n                    physicalId = instances.join(':');\r\n                    return ec2.waitFor('instanceRunning', {InstanceIds: instances}).promise();\r\n                  }).then((data)=> success({Instances: instances})\r\n                  ).catch((e)=> failed(e));\r\n                } else if (event.RequestType == 'Delete') {\r\n                  if (physicalId == 'none') {return success({});}\r\n                  var deleteParams = {InstanceIds: physicalId.split(':')};\r\n                  ec2.terminateInstances(deleteParams).promise().then((data)=>\r\n                    ec2.waitFor('instanceTerminated', deleteParams).promise()\r\n                  ).then((data)=>success({})\r\n                  ).catch((e)=>failed(e));\r\n                } else {\r\n                  return failed({Error: \"In-place updates not supported.\"});\r\n                }\r\n              };\r\n          Runtime: nodejs4.3\r\n          Timeout: 300\r\n      LambdaExecutionRole:\r\n        Type: AWS::IAM::Role\r\n        Properties:\r\n          AssumeRolePolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n            - Effect: Allow\r\n              Principal: {Service: [lambda.amazonaws.com]}\r\n              Action: ['sts:AssumeRole']\r\n          Path: /\r\n          ManagedPolicyArns:\r\n          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\r\n          Policies:\r\n          - PolicyName: EC2Policy\r\n            PolicyDocument:\r\n              Version: '2012-10-17'\r\n              Statement:\r\n                - Effect: Allow\r\n                  Action:\r\n                  - 'ec2:RunInstances'\r\n                  - 'ec2:DescribeInstances'\r\n                  - 'ec2:DescribeInstanceStatus'\r\n                  - 'ec2:TerminateInstances'\r\n                  Resource: ['*']\r\n    Outputs:\r\n      Instances:\r\n        Value: !Join [',', !GetAtt EC2Instances.Instances]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "The [`AWS::EC2::Instance`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html) Resource doesn't support the `MinCount`/`MaxCount` parameters of the underlying [`RunInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html) API, so it's not possible to create a variable number of EC2 instances by passing Parameters to a single copy of this Resource. ", "keywords": ["instance"]}, {"source": "Text", "text": "To create a variable number of EC2 instance resources in CloudFormation template according to a template Parameter, and without deploying an Auto Scaling Group instead, there are two options: #1. ", "keywords": ["instance"]}, {"source": "Text", "text": "You can use [`Conditions`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html) to create a variable number of `AWS::EC2::Instance` ", "keywords": ["instance"]}, {"source": "Text", "text": "Here's a working example that allows the user to specify up to a maximum of **5** instances: [![Launch Stack](https://cdn.rawgit.com/buildkite/cloudformation-launch-stack-button-svg/master/launch-stack.svg)](https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=ec2-instances&templateURL=https://s3.amazonaws.com/wjordan-cf-templates/ec2-instances-5251934-out.yml) Description: Create a variable number of EC2 instance resources. ", "keywords": ["instance"]}, {"source": "Text", "text": "Type: AWS::EC2::Image::Id # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2 Default: ami-9be6f38c InstanceType: Description: Instance type to launch EC2 instances. Type: String Default: m3.medium AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ] Conditions: Launch1: !Equals [1, 1] Launch2: !Not [!Equals [1, !Ref InstanceCount]] Launch3: !Or - !Not [!Equals [1, !Ref InstanceCount]] - !Not [!Equals [2, !Ref InstanceCount]] Launch4: !Or - !Equals [4, !Ref InstanceCount] - !Equals [5, !Ref InstanceCount] Launch5: !Equals [5, !Ref InstanceCount] Resources: Instance1: Condition: Launch1 Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType Instance2: Condition: Launch2 Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType Instance3: Condition: Launch3 Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType Instance4: Condition: Launch4 Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType Instance5: Condition: Launch5 Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType ##1a. ", "keywords": ["instance"]}, {"source": "Text", "text": "As a variation on the above, you can use a template preprocessor like Ruby's [Erb](http://www.stuartellis.name/articles/erb/) to generate the above template based on a specified maximum, making your source code more compact and eliminating duplication: <%max = 10-%> Description: Create a variable number of EC2 instance resources. ", "keywords": ["instance"]}, {"source": "Text", "text": "ImageId: Description: Image ID to launch EC2 instances. Type: AWS::EC2::Image::Id # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2 Default: ami-9be6f38c InstanceType: Description: Instance type to launch EC2 instances. ", "keywords": ["instance"]}, {"source": "Text", "text": "Type: String Default: m3.medium AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ] Conditions: Launch1: !Equals [1, 1] Launch2: !Not [!Equals [1, !Ref InstanceCount]] <%(3..max-1).each do |x| low = (max-1)/(x-1) <= 1-%> Launch<%=x%>: !Or <% (1..max).each do |i| if low && i >= x-%> - !Equals [<%=i%>, !Ref InstanceCount] <% elsif !low && i < x-%> - !Not [!Equals [<%=i%>, !Ref InstanceCount]] <% end end end-%> Launch<%=max%>: !Equals [<%=max%>, !Ref InstanceCount] Resources: <%(1..max).each do |x|-%> Instance<%=x%>: Condition: Launch<%=x%> Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType <%end-%> To process the above source into a CloudFormation-compatible template, run: ruby -rerb -e \"puts ERB.new(ARGF.read, nil, '-').result\" < template.yml > template-out.yml For convenience, here is a gist with the generated output YAML for [10 variable EC2 instances](https://gist.github.com/wjordan/105da42b33667fdf3007f6dc4833208c). ", "keywords": ["instance"]}, {"source": "Text", "text": "Custom Resource An alternate approach is to implement a [Custom Resource](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html) that calls the [`RunInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html)/[`TerminateInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TerminateInstances.html) APIs directly: [![Launch Stack](https://cdn.rawgit.com/buildkite/cloudformation-launch-stack-button-svg/master/launch-stack.svg)](https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=ec2-instances&templateURL=https://s3.amazonaws.com/wjordan-cf-templates/ec2-instances-5251934-b.yml) Description: Create a variable number of EC2 instance resources. ", "keywords": ["instance"]}, {"source": "Text", "text": "Type: Number Default: 1 MinValue: 1 MaxValue: 10 ConstraintDescription: Must be a number between 1 and 10. ImageId: Description: Image ID to launch EC2 instances. Type: AWS::EC2::Image::Id # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2 Default: ami-9be6f38c InstanceType: Description: Instance type to launch EC2 instances. Type: String Default: m3.medium AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ] Resources: EC2Instances: Type: Custom::EC2Instances Properties: ServiceToken: !GetAtt EC2InstancesFunction.Arn ImageId: !Ref ImageId InstanceType: !Ref InstanceType MinCount: !Ref InstanceCount MaxCount: !Ref InstanceCount EC2InstancesFunction: Type: AWS::Lambda::Function Properties: Handler: index.handler Role: !GetAtt LambdaExecutionRole.Arn Code: ZipFile: !Sub | var response = require('cfn-response'); var AWS = require('aws-sdk'); exports.handler = function(event, context) { var physicalId = event.PhysicalResourceId || 'none'; function success(data) { return response.send(event, context, response.SUCCESS, data, physicalId); } function failed(e) { return response.send(event, context, response.FAILED, e, physicalId); } var ec2 = new AWS.EC2(); var instances; if (event.RequestType == 'Create') { var launchParams = event.ResourceProperties; delete launchParams.ServiceToken; ec2.runInstances(launchParams).promise().then((data)=> { instances = data.Instances.map((data)=> data.InstanceId); physicalId = instances.join(':'); return ec2.waitFor('instanceRunning', {InstanceIds: instances}).promise(); }).then((data)=> success({Instances: instances}) ).catch((e)=> failed(e)); } else if (event.RequestType == 'Delete') { if (physicalId == 'none') {return success({});} var deleteParams = {InstanceIds: physicalId.split(':')}; ec2.terminateInstances(deleteParams).promise().then((data)=> ec2.waitFor('instanceTerminated', deleteParams).promise() ).then((data)=>success({}) ).catch((e)=>failed(e)); } else { return failed({Error: \"In-place updates not supported.\"}); } }; Runtime: nodejs4.3 Timeout: 300 LambdaExecutionRole: Type: AWS::IAM::Role Properties: AssumeRolePolicyDocument: Version: '2012-10-17' Statement: - Effect: Allow Principal: {Service: [lambda.amazonaws.com]} Action: ['sts:AssumeRole'] Path: / ManagedPolicyArns: - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole Policies: - PolicyName: EC2Policy PolicyDocument: Version: '2012-10-17' Statement: - Effect: Allow Action: - 'ec2:RunInstances' - 'ec2:DescribeInstances' - 'ec2:DescribeInstanceStatus' - 'ec2:TerminateInstances' Resource: ['*'] Outputs: Instances: Value: !Join [',', !GetAtt EC2Instances.Instances]", "keywords": ["instance", "policy"]}, {"source": "Comment", "text": "added gist with 10-instance yaml", "keywords": ["instance"]}]}, {"Id": "198460662", "PostHistoryTypeId": "5", "PostId": "41539208", "RevisionGUID": "5aa6f868-40d6-4515-ab1d-16e307c0d70e", "CreationDate": "2019-05-25T21:04:49.143", "UserId": "11555701", "Comment": "The Launch3 condition was incorrect. It was resolving true even if the InstanceCount parameter value is 2.", "Text": "The [`AWS::EC2::Instance`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html) Resource doesn't support the `MinCount`/`MaxCount` parameters of the underlying [`RunInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html) API, so it's not possible to create a variable number of EC2 instances by passing Parameters to a single copy of this Resource.\r\n\r\nTo create a variable number of EC2 instance resources in CloudFormation template according to a template Parameter, and without deploying an Auto Scaling Group instead, there are two options:\r\n\r\n#1. Conditions\r\n\r\nYou can use [`Conditions`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html) to create a variable number of `AWS::EC2::Instance` Resources depending on the Parameter.\r\n\r\nIt's a little verbose (because you have to use [`Fn::Equals`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-conditions.html#intrinsic-function-reference-conditions-equals)), but it works.\r\n\r\nHere's a working example that allows the user to specify up to a maximum of **5** instances:\r\n\r\n[![Launch Stack](https://cdn.rawgit.com/buildkite/cloudformation-launch-stack-button-svg/master/launch-stack.svg)](https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=ec2-instances&templateURL=https://s3.amazonaws.com/wjordan-cf-templates/ec2-instances-5251934-out.yml)\r\n\r\n    Description: Create a variable number of EC2 instance resources.\r\n    Parameters:\r\n      InstanceCount:\r\n        Description: Number of EC2 instances (must be between 1 and 5).\r\n        Type: Number\r\n        Default: 1\r\n        MinValue: 1\r\n        MaxValue: 5\r\n        ConstraintDescription: Must be a number between 1 and 5.\r\n      ImageId:\r\n        Description: Image ID to launch EC2 instances.\r\n        Type: AWS::EC2::Image::Id\r\n        # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2\r\n        Default: ami-9be6f38c\r\n      InstanceType:\r\n        Description: Instance type to launch EC2 instances.\r\n        Type: String\r\n        Default: m3.medium\r\n        AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ]\r\n    Conditions:\r\n      Launch1: !Equals [1, 1]\r\n      Launch2: !Not [!Equals [1, !Ref InstanceCount]]\r\n      Launch3: !Or\r\n      - !Not [!Equals [2, !Ref InstanceCount]]\r\n      - !Equals [3, !Ref InstanceCount]\r\n      Launch4: !Or\r\n      - !Equals [4, !Ref InstanceCount]\r\n      - !Equals [5, !Ref InstanceCount]\r\n      Launch5: !Equals [5, !Ref InstanceCount]\r\n    Resources:\r\n      Instance1:\r\n        Condition: Launch1\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n      Instance2:\r\n        Condition: Launch2\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n      Instance3:\r\n        Condition: Launch3\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n      Instance4:\r\n        Condition: Launch4\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n      Instance5:\r\n        Condition: Launch5\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n\r\n##1a. Template preprocessor with Conditions\r\n\r\nAs a variation on the above, you can use a template preprocessor like Ruby's [Erb](http://www.stuartellis.name/articles/erb/) to generate the above template based on a specified maximum, making your source code more compact and eliminating duplication:\r\n\r\n    <%max = 10-%>\r\n    Description: Create a variable number of EC2 instance resources.\r\n    Parameters:\r\n      InstanceCount:\r\n        Description: Number of EC2 instances (must be between 1 and <%=max%>).\r\n        Type: Number\r\n        Default: 1\r\n        MinValue: 1\r\n        MaxValue: <%=max%>\r\n        ConstraintDescription: Must be a number between 1 and <%=max%>.\r\n      ImageId:\r\n        Description: Image ID to launch EC2 instances.\r\n        Type: AWS::EC2::Image::Id\r\n        # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2\r\n        Default: ami-9be6f38c\r\n      InstanceType:\r\n        Description: Instance type to launch EC2 instances.\r\n        Type: String\r\n        Default: m3.medium\r\n        AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ]\r\n    Conditions:\r\n      Launch1: !Equals [1, 1]\r\n      Launch2: !Not [!Equals [1, !Ref InstanceCount]]\r\n    <%(3..max-1).each do |x|\r\n        low = (max-1)/(x-1) <= 1-%>\r\n      Launch<%=x%>: !Or\r\n    <%  (1..max).each do |i|\r\n          if low && i >= x-%>\r\n      - !Equals [<%=i%>, !Ref InstanceCount]\r\n    <%    elsif !low && i < x-%>\r\n      - !Not [!Equals [<%=i%>, !Ref InstanceCount]]\r\n    <%    end\r\n        end\r\n      end-%>\r\n      Launch<%=max%>: !Equals [<%=max%>, !Ref InstanceCount]\r\n    Resources:\r\n    <%(1..max).each do |x|-%>\r\n      Instance<%=x%>:\r\n        Condition: Launch<%=x%>\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n    <%end-%>\r\n\r\nTo process the above source into a CloudFormation-compatible template, run:\r\n\r\n    ruby -rerb -e \"puts ERB.new(ARGF.read, nil, '-').result\" < template.yml > template-out.yml\r\n\r\nFor convenience, here is a gist with the generated output YAML for [10 variable EC2 instances](https://gist.github.com/wjordan/105da42b33667fdf3007f6dc4833208c).\r\n\r\n#2. Custom Resource\r\n\r\nAn alternate approach is to implement a [Custom Resource](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html) that calls the [`RunInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html)/[`TerminateInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TerminateInstances.html) APIs directly:\r\n\r\n[![Launch Stack](https://cdn.rawgit.com/buildkite/cloudformation-launch-stack-button-svg/master/launch-stack.svg)](https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=ec2-instances&templateURL=https://s3.amazonaws.com/wjordan-cf-templates/ec2-instances-5251934-b.yml)\r\n\r\n    Description: Create a variable number of EC2 instance resources.\r\n    Parameters:\r\n      InstanceCount:\r\n        Description: Number of EC2 instances (must be between 1 and 10).\r\n        Type: Number\r\n        Default: 1\r\n        MinValue: 1\r\n        MaxValue: 10\r\n        ConstraintDescription: Must be a number between 1 and 10.\r\n      ImageId:\r\n        Description: Image ID to launch EC2 instances.\r\n        Type: AWS::EC2::Image::Id\r\n        # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2\r\n        Default: ami-9be6f38c\r\n      InstanceType:\r\n        Description: Instance type to launch EC2 instances.\r\n        Type: String\r\n        Default: m3.medium\r\n        AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ]\r\n    Resources:\r\n      EC2Instances:\r\n        Type: Custom::EC2Instances\r\n        Properties:\r\n          ServiceToken: !GetAtt EC2InstancesFunction.Arn\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n          MinCount: !Ref InstanceCount\r\n          MaxCount: !Ref InstanceCount\r\n      EC2InstancesFunction:\r\n        Type: AWS::Lambda::Function\r\n        Properties:\r\n          Handler: index.handler\r\n          Role: !GetAtt LambdaExecutionRole.Arn\r\n          Code:\r\n            ZipFile: !Sub |\r\n              var response = require('cfn-response');\r\n              var AWS = require('aws-sdk');\r\n              exports.handler = function(event, context) {\r\n                var physicalId = event.PhysicalResourceId || 'none';\r\n                function success(data) {\r\n                  return response.send(event, context, response.SUCCESS, data, physicalId);\r\n                }\r\n                function failed(e) {\r\n                  return response.send(event, context, response.FAILED, e, physicalId);\r\n                }\r\n                var ec2 = new AWS.EC2();\r\n                var instances;\r\n                if (event.RequestType == 'Create') {\r\n                  var launchParams = event.ResourceProperties;\r\n                  delete launchParams.ServiceToken;\r\n                  ec2.runInstances(launchParams).promise().then((data)=> {\r\n                    instances = data.Instances.map((data)=> data.InstanceId);\r\n                    physicalId = instances.join(':');\r\n                    return ec2.waitFor('instanceRunning', {InstanceIds: instances}).promise();\r\n                  }).then((data)=> success({Instances: instances})\r\n                  ).catch((e)=> failed(e));\r\n                } else if (event.RequestType == 'Delete') {\r\n                  if (physicalId == 'none') {return success({});}\r\n                  var deleteParams = {InstanceIds: physicalId.split(':')};\r\n                  ec2.terminateInstances(deleteParams).promise().then((data)=>\r\n                    ec2.waitFor('instanceTerminated', deleteParams).promise()\r\n                  ).then((data)=>success({})\r\n                  ).catch((e)=>failed(e));\r\n                } else {\r\n                  return failed({Error: \"In-place updates not supported.\"});\r\n                }\r\n              };\r\n          Runtime: nodejs4.3\r\n          Timeout: 300\r\n      LambdaExecutionRole:\r\n        Type: AWS::IAM::Role\r\n        Properties:\r\n          AssumeRolePolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n            - Effect: Allow\r\n              Principal: {Service: [lambda.amazonaws.com]}\r\n              Action: ['sts:AssumeRole']\r\n          Path: /\r\n          ManagedPolicyArns:\r\n          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\r\n          Policies:\r\n          - PolicyName: EC2Policy\r\n            PolicyDocument:\r\n              Version: '2012-10-17'\r\n              Statement:\r\n                - Effect: Allow\r\n                  Action:\r\n                  - 'ec2:RunInstances'\r\n                  - 'ec2:DescribeInstances'\r\n                  - 'ec2:DescribeInstanceStatus'\r\n                  - 'ec2:TerminateInstances'\r\n                  Resource: ['*']\r\n    Outputs:\r\n      Instances:\r\n        Value: !Join [',', !GetAtt EC2Instances.Instances]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The [`AWS::EC2::Instance`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html) Resource doesn't support the `MinCount`/`MaxCount` parameters of the underlying [`RunInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html) API, so it's not possible to create a variable number of EC2 instances by passing Parameters to a single copy of this Resource. ", "keywords": ["instance"]}, {"source": "Text", "text": "To create a variable number of EC2 instance resources in CloudFormation template according to a template Parameter, and without deploying an Auto Scaling Group instead, there are two options: #1. ", "keywords": ["instance"]}, {"source": "Text", "text": "You can use [`Conditions`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html) to create a variable number of `AWS::EC2::Instance` ", "keywords": ["instance"]}, {"source": "Text", "text": "Here's a working example that allows the user to specify up to a maximum of **5** instances: [![Launch Stack](https://cdn.rawgit.com/buildkite/cloudformation-launch-stack-button-svg/master/launch-stack.svg)](https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=ec2-instances&templateURL=https://s3.amazonaws.com/wjordan-cf-templates/ec2-instances-5251934-out.yml) Description: Create a variable number of EC2 instance resources. ", "keywords": ["instance"]}, {"source": "Text", "text": "Type: Number Default: 1 MinValue: 1 MaxValue: 5 ConstraintDescription: Must be a number between 1 and 5. ImageId: Description: Image ID to launch EC2 instances. Type: AWS::EC2::Image::Id # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2 Default: ami-9be6f38c InstanceType: Description: Instance type to launch EC2 instances. Type: String Default: m3.medium AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ] Conditions: Launch1: !Equals [1, 1] Launch2: !Not [!Equals [1, !Ref InstanceCount]] Launch3: !Or - !Not [!Equals [2, !Ref InstanceCount]] - !Equals [3, !Ref InstanceCount] Launch4: !Or - !Equals [4, !Ref InstanceCount] - !Equals [5, !Ref InstanceCount] Launch5: !Equals [5, !Ref InstanceCount] Resources: Instance1: Condition: Launch1 Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType Instance2: Condition: Launch2 Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType Instance3: Condition: Launch3 Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType Instance4: Condition: Launch4 Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType Instance5: Condition: Launch5 Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType ##1a. ", "keywords": ["instance"]}, {"source": "Text", "text": "As a variation on the above, you can use a template preprocessor like Ruby's [Erb](http://www.stuartellis.name/articles/erb/) to generate the above template based on a specified maximum, making your source code more compact and eliminating duplication: <%max = 10-%> Description: Create a variable number of EC2 instance resources. ", "keywords": ["instance"]}, {"source": "Text", "text": "ImageId: Description: Image ID to launch EC2 instances. Type: AWS::EC2::Image::Id # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2 Default: ami-9be6f38c InstanceType: Description: Instance type to launch EC2 instances. ", "keywords": ["instance"]}, {"source": "Text", "text": "Type: String Default: m3.medium AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ] Conditions: Launch1: !Equals [1, 1] Launch2: !Not [!Equals [1, !Ref InstanceCount]] <%(3..max-1).each do |x| low = (max-1)/(x-1) <= 1-%> Launch<%=x%>: !Or <% (1..max).each do |i| if low && i >= x-%> - !Equals [<%=i%>, !Ref InstanceCount] <% elsif !low && i < x-%> - !Not [!Equals [<%=i%>, !Ref InstanceCount]] <% end end end-%> Launch<%=max%>: !Equals [<%=max%>, !Ref InstanceCount] Resources: <%(1..max).each do |x|-%> Instance<%=x%>: Condition: Launch<%=x%> Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType <%end-%> To process the above source into a CloudFormation-compatible template, run: ruby -rerb -e \"puts ERB.new(ARGF.read, nil, '-').result\" < template.yml > template-out.yml For convenience, here is a gist with the generated output YAML for [10 variable EC2 instances](https://gist.github.com/wjordan/105da42b33667fdf3007f6dc4833208c). ", "keywords": ["instance"]}, {"source": "Text", "text": "Custom Resource An alternate approach is to implement a [Custom Resource](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html) that calls the [`RunInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html)/[`TerminateInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TerminateInstances.html) APIs directly: [![Launch Stack](https://cdn.rawgit.com/buildkite/cloudformation-launch-stack-button-svg/master/launch-stack.svg)](https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=ec2-instances&templateURL=https://s3.amazonaws.com/wjordan-cf-templates/ec2-instances-5251934-b.yml) Description: Create a variable number of EC2 instance resources. ", "keywords": ["instance"]}, {"source": "Text", "text": "Type: Number Default: 1 MinValue: 1 MaxValue: 10 ConstraintDescription: Must be a number between 1 and 10. ImageId: Description: Image ID to launch EC2 instances. Type: AWS::EC2::Image::Id # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2 Default: ami-9be6f38c InstanceType: Description: Instance type to launch EC2 instances. Type: String Default: m3.medium AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ] Resources: EC2Instances: Type: Custom::EC2Instances Properties: ServiceToken: !GetAtt EC2InstancesFunction.Arn ImageId: !Ref ImageId InstanceType: !Ref InstanceType MinCount: !Ref InstanceCount MaxCount: !Ref InstanceCount EC2InstancesFunction: Type: AWS::Lambda::Function Properties: Handler: index.handler Role: !GetAtt LambdaExecutionRole.Arn Code: ZipFile: !Sub | var response = require('cfn-response'); var AWS = require('aws-sdk'); exports.handler = function(event, context) { var physicalId = event.PhysicalResourceId || 'none'; function success(data) { return response.send(event, context, response.SUCCESS, data, physicalId); } function failed(e) { return response.send(event, context, response.FAILED, e, physicalId); } var ec2 = new AWS.EC2(); var instances; if (event.RequestType == 'Create') { var launchParams = event.ResourceProperties; delete launchParams.ServiceToken; ec2.runInstances(launchParams).promise().then((data)=> { instances = data.Instances.map((data)=> data.InstanceId); physicalId = instances.join(':'); return ec2.waitFor('instanceRunning', {InstanceIds: instances}).promise(); }).then((data)=> success({Instances: instances}) ).catch((e)=> failed(e)); } else if (event.RequestType == 'Delete') { if (physicalId == 'none') {return success({});} var deleteParams = {InstanceIds: physicalId.split(':')}; ec2.terminateInstances(deleteParams).promise().then((data)=> ec2.waitFor('instanceTerminated', deleteParams).promise() ).then((data)=>success({}) ).catch((e)=>failed(e)); } else { return failed({Error: \"In-place updates not supported.\"}); } }; Runtime: nodejs4.3 Timeout: 300 LambdaExecutionRole: Type: AWS::IAM::Role Properties: AssumeRolePolicyDocument: Version: '2012-10-17' Statement: - Effect: Allow Principal: {Service: [lambda.amazonaws.com]} Action: ['sts:AssumeRole'] Path: / ManagedPolicyArns: - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole Policies: - PolicyName: EC2Policy PolicyDocument: Version: '2012-10-17' Statement: - Effect: Allow Action: - 'ec2:RunInstances' - 'ec2:DescribeInstances' - 'ec2:DescribeInstanceStatus' - 'ec2:TerminateInstances' Resource: ['*'] Outputs: Instances: Value: !Join [',', !GetAtt EC2Instances.Instances]", "keywords": ["instance", "policy"]}]}, {"Id": "198460663", "PostHistoryTypeId": "24", "PostId": "41539208", "RevisionGUID": "5aa6f868-40d6-4515-ab1d-16e307c0d70e", "CreationDate": "2019-05-25T21:04:49.143", "Comment": "Proposed by 11555701 approved by 4402825, 240564 edit id of 4305279", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "198637563", "PostHistoryTypeId": "5", "PostId": "41539208", "RevisionGUID": "3adce963-8dfe-432b-8c91-99b56b8deb92", "CreationDate": "2019-05-28T22:43:28.467", "UserId": "2518355", "Comment": "Fix `And`/`Or` typo in generated conditional template (thanks @gaurav-goel)", "Text": "The [`AWS::EC2::Instance`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html) Resource doesn't support the `MinCount`/`MaxCount` parameters of the underlying [`RunInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html) API, so it's not possible to create a variable number of EC2 instances by passing Parameters to a single copy of this Resource.\r\n\r\nTo create a variable number of EC2 instance resources in CloudFormation template according to a template Parameter, and without deploying an Auto Scaling Group instead, there are two options:\r\n\r\n#1. Conditions\r\n\r\nYou can use [`Conditions`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html) to create a variable number of `AWS::EC2::Instance` Resources depending on the Parameter.\r\n\r\nIt's a little verbose (because you have to use [`Fn::Equals`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-conditions.html#intrinsic-function-reference-conditions-equals)), but it works.\r\n\r\nHere's a working example that allows the user to specify up to a maximum of **5** instances:\r\n\r\n[![Launch Stack](https://cdn.rawgit.com/buildkite/cloudformation-launch-stack-button-svg/master/launch-stack.svg)](https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=ec2-instances&templateURL=https://s3.amazonaws.com/wjordan-cf-templates/ec2-instances-5251934-out.yml)\r\n\r\n    Description: Create a variable number of EC2 instance resources.\r\n    Parameters:\r\n      InstanceCount:\r\n        Description: Number of EC2 instances (must be between 1 and 5).\r\n        Type: Number\r\n        Default: 1\r\n        MinValue: 1\r\n        MaxValue: 5\r\n        ConstraintDescription: Must be a number between 1 and 5.\r\n      ImageId:\r\n        Description: Image ID to launch EC2 instances.\r\n        Type: AWS::EC2::Image::Id\r\n        # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2\r\n        Default: ami-9be6f38c\r\n      InstanceType:\r\n        Description: Instance type to launch EC2 instances.\r\n        Type: String\r\n        Default: m3.medium\r\n        AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ]\r\n    Conditions:\r\n      Launch1: !Equals [1, 1]\r\n      Launch2: !Not [!Equals [1, !Ref InstanceCount]]\r\n      Launch3: !And\r\n      - !Not [!Equals [1, !Ref InstanceCount]]\r\n      - !Not [!Equals [2, !Ref InstanceCount]]\r\n      Launch4: !Or\r\n      - !Equals [4, !Ref InstanceCount]\r\n      - !Equals [5, !Ref InstanceCount]\r\n      Launch5: !Equals [5, !Ref InstanceCount]\r\n    Resources:\r\n      Instance1:\r\n        Condition: Launch1\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n      Instance2:\r\n        Condition: Launch2\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n      Instance3:\r\n        Condition: Launch3\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n      Instance4:\r\n        Condition: Launch4\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n      Instance5:\r\n        Condition: Launch5\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n\r\n##1a. Template preprocessor with Conditions\r\n\r\nAs a variation on the above, you can use a template preprocessor like Ruby's [Erb](http://www.stuartellis.name/articles/erb/) to generate the above template based on a specified maximum, making your source code more compact and eliminating duplication:\r\n\r\n    <%max = 10-%>\r\n    Description: Create a variable number of EC2 instance resources.\r\n    Parameters:\r\n      InstanceCount:\r\n        Description: Number of EC2 instances (must be between 1 and <%=max%>).\r\n        Type: Number\r\n        Default: 1\r\n        MinValue: 1\r\n        MaxValue: <%=max%>\r\n        ConstraintDescription: Must be a number between 1 and <%=max%>.\r\n      ImageId:\r\n        Description: Image ID to launch EC2 instances.\r\n        Type: AWS::EC2::Image::Id\r\n        # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2\r\n        Default: ami-9be6f38c\r\n      InstanceType:\r\n        Description: Instance type to launch EC2 instances.\r\n        Type: String\r\n        Default: m3.medium\r\n        AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ]\r\n    Conditions:\r\n      Launch1: !Equals [1, 1]\r\n      Launch2: !Not [!Equals [1, !Ref InstanceCount]]\r\n    <%(3..max-1).each do |x|\r\n        low = (max-1)/(x-1) <= 1-%>\r\n      Launch<%=x%>: !<%=low ? 'Or' : 'And'%>\r\n    <%  (1..max).each do |i|\r\n          if low && i >= x-%>\r\n      - !Equals [<%=i%>, !Ref InstanceCount]\r\n    <%    elsif !low && i < x-%>\r\n      - !Not [!Equals [<%=i%>, !Ref InstanceCount]]\r\n    <%    end\r\n        end\r\n      end-%>\r\n      Launch<%=max%>: !Equals [<%=max%>, !Ref InstanceCount]\r\n    Resources:\r\n    <%(1..max).each do |x|-%>\r\n      Instance<%=x%>:\r\n        Condition: Launch<%=x%>\r\n        Type: AWS::EC2::Instance\r\n        Properties:\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n    <%end-%>\r\n\r\nTo process the above source into a CloudFormation-compatible template, run:\r\n\r\n    ruby -rerb -e \"puts ERB.new(ARGF.read, nil, '-').result\" < template.yml > template-out.yml\r\n\r\nFor convenience, here is a gist with the generated output YAML for [10 variable EC2 instances](https://gist.github.com/wjordan/105da42b33667fdf3007f6dc4833208c).\r\n\r\n#2. Custom Resource\r\n\r\nAn alternate approach is to implement a [Custom Resource](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html) that calls the [`RunInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html)/[`TerminateInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TerminateInstances.html) APIs directly:\r\n\r\n[![Launch Stack](https://cdn.rawgit.com/buildkite/cloudformation-launch-stack-button-svg/master/launch-stack.svg)](https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=ec2-instances&templateURL=https://s3.amazonaws.com/wjordan-cf-templates/ec2-instances-5251934-b.yml)\r\n\r\n    Description: Create a variable number of EC2 instance resources.\r\n    Parameters:\r\n      InstanceCount:\r\n        Description: Number of EC2 instances (must be between 1 and 10).\r\n        Type: Number\r\n        Default: 1\r\n        MinValue: 1\r\n        MaxValue: 10\r\n        ConstraintDescription: Must be a number between 1 and 10.\r\n      ImageId:\r\n        Description: Image ID to launch EC2 instances.\r\n        Type: AWS::EC2::Image::Id\r\n        # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2\r\n        Default: ami-9be6f38c\r\n      InstanceType:\r\n        Description: Instance type to launch EC2 instances.\r\n        Type: String\r\n        Default: m3.medium\r\n        AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ]\r\n    Resources:\r\n      EC2Instances:\r\n        Type: Custom::EC2Instances\r\n        Properties:\r\n          ServiceToken: !GetAtt EC2InstancesFunction.Arn\r\n          ImageId: !Ref ImageId\r\n          InstanceType: !Ref InstanceType\r\n          MinCount: !Ref InstanceCount\r\n          MaxCount: !Ref InstanceCount\r\n      EC2InstancesFunction:\r\n        Type: AWS::Lambda::Function\r\n        Properties:\r\n          Handler: index.handler\r\n          Role: !GetAtt LambdaExecutionRole.Arn\r\n          Code:\r\n            ZipFile: !Sub |\r\n              var response = require('cfn-response');\r\n              var AWS = require('aws-sdk');\r\n              exports.handler = function(event, context) {\r\n                var physicalId = event.PhysicalResourceId || 'none';\r\n                function success(data) {\r\n                  return response.send(event, context, response.SUCCESS, data, physicalId);\r\n                }\r\n                function failed(e) {\r\n                  return response.send(event, context, response.FAILED, e, physicalId);\r\n                }\r\n                var ec2 = new AWS.EC2();\r\n                var instances;\r\n                if (event.RequestType == 'Create') {\r\n                  var launchParams = event.ResourceProperties;\r\n                  delete launchParams.ServiceToken;\r\n                  ec2.runInstances(launchParams).promise().then((data)=> {\r\n                    instances = data.Instances.map((data)=> data.InstanceId);\r\n                    physicalId = instances.join(':');\r\n                    return ec2.waitFor('instanceRunning', {InstanceIds: instances}).promise();\r\n                  }).then((data)=> success({Instances: instances})\r\n                  ).catch((e)=> failed(e));\r\n                } else if (event.RequestType == 'Delete') {\r\n                  if (physicalId == 'none') {return success({});}\r\n                  var deleteParams = {InstanceIds: physicalId.split(':')};\r\n                  ec2.terminateInstances(deleteParams).promise().then((data)=>\r\n                    ec2.waitFor('instanceTerminated', deleteParams).promise()\r\n                  ).then((data)=>success({})\r\n                  ).catch((e)=>failed(e));\r\n                } else {\r\n                  return failed({Error: \"In-place updates not supported.\"});\r\n                }\r\n              };\r\n          Runtime: nodejs4.3\r\n          Timeout: 300\r\n      LambdaExecutionRole:\r\n        Type: AWS::IAM::Role\r\n        Properties:\r\n          AssumeRolePolicyDocument:\r\n            Version: '2012-10-17'\r\n            Statement:\r\n            - Effect: Allow\r\n              Principal: {Service: [lambda.amazonaws.com]}\r\n              Action: ['sts:AssumeRole']\r\n          Path: /\r\n          ManagedPolicyArns:\r\n          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\r\n          Policies:\r\n          - PolicyName: EC2Policy\r\n            PolicyDocument:\r\n              Version: '2012-10-17'\r\n              Statement:\r\n                - Effect: Allow\r\n                  Action:\r\n                  - 'ec2:RunInstances'\r\n                  - 'ec2:DescribeInstances'\r\n                  - 'ec2:DescribeInstanceStatus'\r\n                  - 'ec2:TerminateInstances'\r\n                  Resource: ['*']\r\n    Outputs:\r\n      Instances:\r\n        Value: !Join [',', !GetAtt EC2Instances.Instances]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The [`AWS::EC2::Instance`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html) Resource doesn't support the `MinCount`/`MaxCount` parameters of the underlying [`RunInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html) API, so it's not possible to create a variable number of EC2 instances by passing Parameters to a single copy of this Resource. ", "keywords": ["instance"]}, {"source": "Text", "text": "To create a variable number of EC2 instance resources in CloudFormation template according to a template Parameter, and without deploying an Auto Scaling Group instead, there are two options: #1. ", "keywords": ["instance"]}, {"source": "Text", "text": "You can use [`Conditions`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html) to create a variable number of `AWS::EC2::Instance` ", "keywords": ["instance"]}, {"source": "Text", "text": "Here's a working example that allows the user to specify up to a maximum of **5** instances: [![Launch Stack](https://cdn.rawgit.com/buildkite/cloudformation-launch-stack-button-svg/master/launch-stack.svg)](https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=ec2-instances&templateURL=https://s3.amazonaws.com/wjordan-cf-templates/ec2-instances-5251934-out.yml) Description: Create a variable number of EC2 instance resources. ", "keywords": ["instance"]}, {"source": "Text", "text": "Type: AWS::EC2::Image::Id # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2 Default: ami-9be6f38c InstanceType: Description: Instance type to launch EC2 instances. Type: String Default: m3.medium AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ] Conditions: Launch1: !Equals [1, 1] Launch2: !Not [!Equals [1, !Ref InstanceCount]] Launch3: !And - !Not [!Equals [1, !Ref InstanceCount]] - !Not [!Equals [2, !Ref InstanceCount]] Launch4: !Or - !Equals [4, !Ref InstanceCount] - !Equals [5, !Ref InstanceCount] Launch5: !Equals [5, !Ref InstanceCount] Resources: Instance1: Condition: Launch1 Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType Instance2: Condition: Launch2 Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType Instance3: Condition: Launch3 Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType Instance4: Condition: Launch4 Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType Instance5: Condition: Launch5 Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType ##1a. ", "keywords": ["instance"]}, {"source": "Text", "text": "As a variation on the above, you can use a template preprocessor like Ruby's [Erb](http://www.stuartellis.name/articles/erb/) to generate the above template based on a specified maximum, making your source code more compact and eliminating duplication: <%max = 10-%> Description: Create a variable number of EC2 instance resources. ", "keywords": ["instance"]}, {"source": "Text", "text": "ImageId: Description: Image ID to launch EC2 instances. Type: AWS::EC2::Image::Id # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2 Default: ami-9be6f38c InstanceType: Description: Instance type to launch EC2 instances. ", "keywords": ["instance"]}, {"source": "Text", "text": "Type: String Default: m3.medium AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ] Conditions: Launch1: !Equals [1, 1] Launch2: !Not [!Equals [1, !Ref InstanceCount]] <%(3..max-1).each do |x| low = (max-1)/(x-1) <= 1-%> Launch<%=x%>: !<%=low ? 'Or' : 'And'%> <% (1..max).each do |i| if low && i >= x-%> - !Equals [<%=i%>, !Ref InstanceCount] <% elsif !low && i < x-%> - !Not [!Equals [<%=i%>, !Ref InstanceCount]] <% end end end-%> Launch<%=max%>: !Equals [<%=max%>, !Ref InstanceCount] Resources: <%(1..max).each do |x|-%> Instance<%=x%>: Condition: Launch<%=x%> Type: AWS::EC2::Instance Properties: ImageId: !Ref ImageId InstanceType: !Ref InstanceType <%end-%> To process the above source into a CloudFormation-compatible template, run: ruby -rerb -e \"puts ERB.new(ARGF.read, nil, '-').result\" < template.yml > template-out.yml For convenience, here is a gist with the generated output YAML for [10 variable EC2 instances](https://gist.github.com/wjordan/105da42b33667fdf3007f6dc4833208c). ", "keywords": ["instance"]}, {"source": "Text", "text": "Custom Resource An alternate approach is to implement a [Custom Resource](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html) that calls the [`RunInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html)/[`TerminateInstances`](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TerminateInstances.html) APIs directly: [![Launch Stack](https://cdn.rawgit.com/buildkite/cloudformation-launch-stack-button-svg/master/launch-stack.svg)](https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=ec2-instances&templateURL=https://s3.amazonaws.com/wjordan-cf-templates/ec2-instances-5251934-b.yml) Description: Create a variable number of EC2 instance resources. ", "keywords": ["instance"]}, {"source": "Text", "text": "Type: Number Default: 1 MinValue: 1 MaxValue: 10 ConstraintDescription: Must be a number between 1 and 10. ImageId: Description: Image ID to launch EC2 instances. Type: AWS::EC2::Image::Id # amzn-ami-hvm-2016.09.1.20161221-x86_64-gp2 Default: ami-9be6f38c InstanceType: Description: Instance type to launch EC2 instances. Type: String Default: m3.medium AllowedValues: [ m3.medium, m3.large, m3.xlarge, m3.2xlarge ] Resources: EC2Instances: Type: Custom::EC2Instances Properties: ServiceToken: !GetAtt EC2InstancesFunction.Arn ImageId: !Ref ImageId InstanceType: !Ref InstanceType MinCount: !Ref InstanceCount MaxCount: !Ref InstanceCount EC2InstancesFunction: Type: AWS::Lambda::Function Properties: Handler: index.handler Role: !GetAtt LambdaExecutionRole.Arn Code: ZipFile: !Sub | var response = require('cfn-response'); var AWS = require('aws-sdk'); exports.handler = function(event, context) { var physicalId = event.PhysicalResourceId || 'none'; function success(data) { return response.send(event, context, response.SUCCESS, data, physicalId); } function failed(e) { return response.send(event, context, response.FAILED, e, physicalId); } var ec2 = new AWS.EC2(); var instances; if (event.RequestType == 'Create') { var launchParams = event.ResourceProperties; delete launchParams.ServiceToken; ec2.runInstances(launchParams).promise().then((data)=> { instances = data.Instances.map((data)=> data.InstanceId); physicalId = instances.join(':'); return ec2.waitFor('instanceRunning', {InstanceIds: instances}).promise(); }).then((data)=> success({Instances: instances}) ).catch((e)=> failed(e)); } else if (event.RequestType == 'Delete') { if (physicalId == 'none') {return success({});} var deleteParams = {InstanceIds: physicalId.split(':')}; ec2.terminateInstances(deleteParams).promise().then((data)=> ec2.waitFor('instanceTerminated', deleteParams).promise() ).then((data)=>success({}) ).catch((e)=>failed(e)); } else { return failed({Error: \"In-place updates not supported.\"}); } }; Runtime: nodejs4.3 Timeout: 300 LambdaExecutionRole: Type: AWS::IAM::Role Properties: AssumeRolePolicyDocument: Version: '2012-10-17' Statement: - Effect: Allow Principal: {Service: [lambda.amazonaws.com]} Action: ['sts:AssumeRole'] Path: / ManagedPolicyArns: - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole Policies: - PolicyName: EC2Policy PolicyDocument: Version: '2012-10-17' Statement: - Effect: Allow Action: - 'ec2:RunInstances' - 'ec2:DescribeInstances' - 'ec2:DescribeInstanceStatus' - 'ec2:TerminateInstances' Resource: ['*'] Outputs: Instances: Value: !Join [',', !GetAtt EC2Instances.Instances]", "keywords": ["instance", "policy"]}]}], "filtered-sentences": [{"source": "Body", "text": "The AWS::EC2::Instance Resource doesn't support the MinCount/MaxCount parameters of the underlying RunInstances API, so it's not possible to create a variable number of EC2 instances by passing Parameters to a single copy of this Resource. ", "keywords": ["instance"]}, {"source": "Body", "text": "To create a variable number of EC2 instance resources in CloudFormation template according to a template Parameter, and without deploying an Auto Scaling Group instead, there are two options: 1. ", "keywords": ["instance"]}, {"source": "Body", "text": "You can use Conditions to create a variable number of AWS::EC2::Instance Resources depending on the Parameter. ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "How to create variable number of EC2 instance resources in Cloudformation template?", "keywords": ["instance"]}, {"source": "Body", "text": "How to create variable number of EC2 instance resources in Cloudformation template, according to a template parameter? ", "keywords": ["instance"]}]}