{"Id": "48135471", "PostTypeId": "1", "AcceptedAnswerId": "48168516", "CreationDate": "2018-01-07T08:17:54.610", "Score": "41", "ViewCount": "32544", "Body": "<p>I have a Network Load Balancer and an associated Target Group that is configured to do health checks on the EC2 instances. The problem is that I am seeing a very high number of health check requests; multiple every second.</p>\n\n<p>The <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/network/target-group-health-checks.html\" rel=\"noreferrer\">default interval</a> between checks is supposed to be 30 seconds, but they are coming about 100x more frequently than they should.</p>\n\n<p>My stack is built in CloudFormation, and I've tried overriding <code>HealthCheckIntervalSeconds</code>, which has no effect. Interestingly, when I tried to manually change the interval in the console, I found those values greyed out:</p>\n\n<p><a href=\"https://i.stack.imgur.com/wpzoO.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/wpzoO.png\" alt=\"Edit Healthcheck Settings\"></a></p>\n\n<p>Here is the relevant part of the template, with my attempt at changing the interval commented out:</p>\n\n<pre><code>NLB:\n  Type: \"AWS::ElasticLoadBalancingV2::LoadBalancer\"\n  Properties:\n    Type: network\n    Name: api-load-balancer\n    Scheme: internal\n    Subnets: \n      - Fn::ImportValue: PrivateSubnetA\n      - Fn::ImportValue: PrivateSubnetB\n      - Fn::ImportValue: PrivateSubnetC\n\nNLBListener:\n  Type : AWS::ElasticLoadBalancingV2::Listener\n  Properties:\n    DefaultActions:\n      - Type: forward\n        TargetGroupArn: !Ref NLBTargetGroup\n    LoadBalancerArn: !Ref NLB\n    Port: 80\n    Protocol: TCP\n\nNLBTargetGroup:\n  Type: AWS::ElasticLoadBalancingV2::TargetGroup\n  Properties:\n    # HealthCheckIntervalSeconds: 30\n    HealthCheckPath: /healthcheck\n    HealthCheckProtocol: HTTP\n    # HealthyThresholdCount: 2\n    # UnhealthyThresholdCount: 5\n    # Matcher:\n    #   HttpCode: 200-399\n    Name: api-nlb-http-target-group\n    Port: 80\n    Protocol: TCP \n    VpcId: !ImportValue PublicVPC\n</code></pre>\n\n<p>My EC2 instances are in private subnets with no access from the outside world. The NLB is internal, so there's no way of accessing them without going through API Gateway. API Gateway has no <code>/healthcheck</code> endpoint configured, so that rules out any activity coming from outside of the AWS network, like people manually pinging the endpoint.</p>\n\n<p>This is a sample of my app's log taken from CloudWatch, while the app should be idle:</p>\n\n<pre><code>07:45:33 {\"label\":\"Received request URL\",\"value\":\"/healthcheck\",\"type\":\"trace\"}\n07:45:33 {\"label\":\"Received request URL\",\"value\":\"/healthcheck\",\"type\":\"trace\"}\n07:45:33 {\"label\":\"Received request URL\",\"value\":\"/healthcheck\",\"type\":\"trace\"}\n07:45:33 {\"label\":\"Received request URL\",\"value\":\"/healthcheck\",\"type\":\"trace\"}\n07:45:34 {\"label\":\"Received request URL\",\"value\":\"/healthcheck\",\"type\":\"trace\"}\n07:45:34 {\"label\":\"Received request URL\",\"value\":\"/healthcheck\",\"type\":\"trace\"}\n07:45:34 {\"label\":\"Received request URL\",\"value\":\"/healthcheck\",\"type\":\"trace\"}\n07:45:35 {\"label\":\"Received request URL\",\"value\":\"/healthcheck\",\"type\":\"trace\"}\n07:45:35 {\"label\":\"Received request URL\",\"value\":\"/healthcheck\",\"type\":\"trace\"}\n07:45:35 {\"label\":\"Received request URL\",\"value\":\"/healthcheck\",\"type\":\"trace\"}\n</code></pre>\n\n<p>I'm getting usually 3 to 6 requests every second, so I'm wondering if this is just the way the Network Load Balancers work, and AWS still haven't documented that (or I haven't found it), or otherwise how I might fix this issue.</p>\n", "OwnerUserId": "4206678", "LastActivityDate": "2021-09-09T18:12:21.320", "Title": "NLB Target Group health checks are out of control", "Tags": "|amazon-web-services|amazon-ec2|aws-cloudformation|amazon-elb|", "AnswerCount": "3", "CommentCount": "6", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "83248354", "PostId": "48135471", "Score": "0", "Text": "How many EC2 target instances you got? Are they writing logs to the same cloudwatch stream?", "CreationDate": "2018-01-07T08:40:56.483", "UserId": "1400204", "filtered-sentences": []}, {"Id": "83249317", "PostId": "48135471", "Score": "0", "Text": "Just one instance right now, but they are also configured to write to a log identified by the instance id.", "CreationDate": "2018-01-07T09:54:11.270", "UserId": "4206678", "filtered-sentences": [{"source": "Text", "text": "Just one instance right now, but they are also configured to write to a log identified by the instance id.", "keywords": ["instance"]}]}, {"Id": "83258554", "PostId": "48135471", "Score": "0", "Text": "You need to log the source IP address of the incoming health check requests.  What does that show you?  Is your service being detected as healthy by the balancer?", "CreationDate": "2018-01-07T18:46:27.670", "UserId": "1695906", "filtered-sentences": []}, {"Id": "83277549", "PostId": "48135471", "Score": "1", "Text": "Thanks @Michael-sqlbot, the service is healthy. There's no way any services can access this endpoint outside of the private subnets. This is the only instance in the private subnets, and the instance doesn't have a public IP address. There's no Internet gateway, so no way in except via the API Gateway VPC link, which has no healthcheck endpoint. What I did try, was to change the Target Group healthcheck endpoint to something invalid, and the instance immediately stopped logging requests to /healthcheck, proving that they are all coming from the Target Group checks and nothing else.", "CreationDate": "2018-01-08T11:48:32.480", "UserId": "4206678", "filtered-sentences": [{"source": "Text", "text": "This is the only instance in the private subnets, and the instance doesn't have a public IP address. ", "keywords": ["instance"]}, {"source": "Text", "text": "What I did try, was to change the Target Group healthcheck endpoint to something invalid, and the instance immediately stopped logging requests to /healthcheck, proving that they are all coming from the Target Group checks and nothing else.", "keywords": ["logging", "instance", "change"]}]}, {"Id": "83277808", "PostId": "48135471", "Score": "1", "Text": "I get what you are saying, but still suggest that you need to log the source IP.  Log the peer source port as well.  Without these, you are still technically speculating about the impossibility of it being anything else.", "CreationDate": "2018-01-08T11:56:56.617", "UserId": "1695906", "filtered-sentences": []}, {"Id": "104406940", "PostId": "48135471", "Score": "0", "Text": "As a side note, the behaviour seems to be much more reasonable and in line with the documentation for ALBs (application load balancers).", "CreationDate": "2019-11-28T09:34:07.493", "UserId": "3527464", "filtered-sentences": []}], "history": [{"Id": "164158691", "PostHistoryTypeId": "2", "PostId": "48135471", "RevisionGUID": "540fd57e-4b6a-4c79-ad5d-9ee60eb80b76", "CreationDate": "2018-01-07T08:17:54.610", "UserId": "4206678", "Text": "I have a Network Load Balancer and an associated Target Group that is configured to do health checks on the EC2 instances. The problem is that I am seeing a very high number of health check requests; multiple every second.\r\n\r\nThe [default interval][1] between checks is supposed to be 30 seconds, but they are coming about 100x more frequently than they should.\r\n\r\nMy stack is built in CloudFormation, and I've tried overriding `HealthCheckIntervalSeconds`, which has no effect. Interestingly, when I tried to manually change the interval in the console, I found those values greyed out:\r\n\r\n[![Edit Healthcheck Settings][2]][2]\r\n\r\nHere is the relevant part of the template, with my attempt at changing the interval commented out:\r\n\r\n    NLB:\r\n      Type: \"AWS::ElasticLoadBalancingV2::LoadBalancer\"\r\n      Properties:\r\n        Type: network\r\n        Name: api-load-balancer\r\n        Scheme: internal\r\n        Subnets: \r\n          - Fn::ImportValue: PrivateSubnetA\r\n          - Fn::ImportValue: PrivateSubnetB\r\n          - Fn::ImportValue: PrivateSubnetC\r\n\r\n    NLBListener:\r\n      Type : AWS::ElasticLoadBalancingV2::Listener\r\n      Properties:\r\n        DefaultActions:\r\n          - Type: forward\r\n            TargetGroupArn: !Ref NLBTargetGroup\r\n        LoadBalancerArn: !Ref NLB\r\n        Port: 80\r\n        Protocol: TCP\r\n\r\n    NLBTargetGroup:\r\n      Type: AWS::ElasticLoadBalancingV2::TargetGroup\r\n      Properties:\r\n        # HealthCheckIntervalSeconds: 30\r\n        HealthCheckPath: /healthcheck\r\n        HealthCheckProtocol: HTTP\r\n        # HealthyThresholdCount: 2\r\n        # UnhealthyThresholdCount: 5\r\n        # Matcher:\r\n        #   HttpCode: 200-399\r\n        Name: api-nlb-http-target-group\r\n        Port: 80\r\n        Protocol: TCP \r\n        VpcId: !ImportValue PublicVPC\r\n\r\nMy EC2 instances are in private subnets with no access from the outside world. The NLB is internal, so there's no way of accessing them without going through API Gateway. API Gateway has no `/healthcheck` endpoint configured, so that rules out any activity coming from outside of the AWS network, like people manually pinging the endpoint.\r\n\r\nThis is a sample of my app's log taken from CloudWatch, while the app should be idle:\r\n\r\n 07:45:33 {\"label\":\"Received request URL\",\"value\":\"/healthcheck\",\"type\":\"trace\"}\r\n 07:45:33 {\"label\":\"Received request URL\",\"value\":\"/healthcheck\",\"type\":\"trace\"}\r\n 07:45:33 {\"label\":\"Received request URL\",\"value\":\"/healthcheck\",\"type\":\"trace\"}\r\n 07:45:33 {\"label\":\"Received request URL\",\"value\":\"/healthcheck\",\"type\":\"trace\"}\r\n 07:45:34 {\"label\":\"Received request URL\",\"value\":\"/healthcheck\",\"type\":\"trace\"}\r\n 07:45:34 {\"label\":\"Received request URL\",\"value\":\"/healthcheck\",\"type\":\"trace\"}\r\n 07:45:34 {\"label\":\"Received request URL\",\"value\":\"/healthcheck\",\"type\":\"trace\"}\r\n 07:45:35 {\"label\":\"Received request URL\",\"value\":\"/healthcheck\",\"type\":\"trace\"}\r\n 07:45:35 {\"label\":\"Received request URL\",\"value\":\"/healthcheck\",\"type\":\"trace\"}\r\n 07:45:35 {\"label\":\"Received request URL\",\"value\":\"/healthcheck\",\"type\":\"trace\"}\r\n\r\nI'm getting usually 3 to 6 requests every second, so I'm wondering if this is just the way the Network Load Balancers work, and AWS still haven't documented that (or I haven't found it), or otherwise how I might fix this issue.\r\n\r\n  [1]: https://docs.aws.amazon.com/elasticloadbalancing/latest/network/target-group-health-checks.html\r\n  [2]: https://i.stack.imgur.com/wpzoO.png", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Interestingly, when I tried to manually change the interval in the console, I found those values greyed out: [![Edit Healthcheck Settings][2]][2] ", "keywords": ["change"]}, {"source": "Text", "text": "Here is the relevant part of the template, with my attempt at changing the interval commented out: NLB: Type: \"AWS::ElasticLoadBalancingV2::LoadBalancer\" Properties: Type: network Name: api-load-balancer Scheme: internal Subnets: - Fn::ImportValue: PrivateSubnetA - Fn::ImportValue: PrivateSubnetB - Fn::ImportValue: PrivateSubnetC NLBListener: Type : AWS::ElasticLoadBalancingV2::Listener Properties: DefaultActions: - Type: forward TargetGroupArn: !Ref NLBTargetGroup LoadBalancerArn: !Ref NLB Port: 80 Protocol: TCP NLBTargetGroup: Type: AWS::ElasticLoadBalancingV2::TargetGroup Properties: # HealthCheckIntervalSeconds: 30 HealthCheckPath: /healthcheck HealthCheckProtocol: HTTP # HealthyThresholdCount: 2 # UnhealthyThresholdCount: 5 # Matcher: # HttpCode: 200-399 Name: api-nlb-http-target-group Port: 80 Protocol: TCP VpcId: !ImportValue PublicVPC My EC2 instances are in private subnets with no access from the outside world. ", "keywords": ["change"]}]}, {"Id": "164158692", "PostHistoryTypeId": "1", "PostId": "48135471", "RevisionGUID": "540fd57e-4b6a-4c79-ad5d-9ee60eb80b76", "CreationDate": "2018-01-07T08:17:54.610", "UserId": "4206678", "Text": "NLB Target Group health checks are out of control", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "164158693", "PostHistoryTypeId": "3", "PostId": "48135471", "RevisionGUID": "540fd57e-4b6a-4c79-ad5d-9ee60eb80b76", "CreationDate": "2018-01-07T08:17:54.610", "UserId": "4206678", "Text": "|amazon-web-services|amazon-ec2|aws-cloudformation|amazon-elb|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "48168516", "PostTypeId": "2", "ParentId": "48135471", "CreationDate": "2018-01-09T12:44:46.663", "Score": "38", "Body": "<p>Update: this has been answered on the related <a href=\"https://forums.aws.amazon.com/message.jspa?messageID=823536\" rel=\"noreferrer\">aws forum post</a> which confirms that it's normal behaviour for network load balancers and cites their distributed nature as the reason. There is no way to configure a custom interval. At this moment, the docs are still out of date and specify otherwise.</p>\n\n<hr>\n\n<p>This is either a bug in NLB Target Groups, or normal behaviour with incorrect <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/network/target-group-health-checks.html\" rel=\"noreferrer\">documentation</a>. I've come to this conclusion because:</p>\n\n<ul>\n<li>I verified that the health checks are coming from the NLB</li>\n<li>The configuration options are greyed out on the console\n\n<ul>\n<li>inferring that AWS know about or imposed this limitation</li>\n</ul></li>\n<li>The same results are being observed by <a href=\"https://stackoverflow.com/questions/46909388/aws-nlb-ignores-interval-setting\">others</a></li>\n<li>The documentation is specifically for Network Load Balancers</li>\n<li>AWS docs commonly lead you on a wild goose chase</li>\n</ul>\n\n<p>In this case I think it might be normal behaviour that's been documented incorrectly, but there's no way of verifying that unless someone from AWS can, and it's almost impossible to get an answer for an <a href=\"https://forums.aws.amazon.com/message.jspa?messageID=823536\" rel=\"noreferrer\">issue like this</a> on the aws forum.</p>\n\n<p>It would be useful to be able to configure the setting, or at least have the docs updated.</p>\n", "OwnerUserId": "4206678", "LastEditorUserId": "4206678", "LastEditDate": "2018-02-08T13:06:09.030", "LastActivityDate": "2018-02-08T13:06:09.030", "CommentCount": "4", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "98085585", "PostId": "48168516", "Score": "0", "Text": "how were you able to overcome this issue?\nMove the private services to a public subnet and protect it via security groups?", "CreationDate": "2019-04-16T06:55:45.060", "UserId": "2849525", "filtered-sentences": []}, {"Id": "98085907", "PostId": "48168516", "Score": "2", "Text": "It seems that the more listeners you add to an NLB the more hammering the health checks gets.\nIf you only use 1 listener you won't have this ddos behaviour", "CreationDate": "2019-04-16T07:07:22.117", "UserId": "2849525", "filtered-sentences": []}, {"Id": "101110869", "PostId": "48168516", "Score": "3", "Text": "Fwiw I only have 1 listener and still get this behaviour", "CreationDate": "2019-08-01T12:40:43.930", "UserId": "99213", "filtered-sentences": []}, {"Id": "117459192", "PostId": "48168516", "Score": "0", "Text": "for anyone else landing here as confused as i was, this it the answer. I have 3 listeners pointing at a fargate container, each healthchecked at 30s. I see 1k healthchecks per minute, 170 of them from a single nlb source ip. i've spit them off from my application code to better manage them.", "CreationDate": "2021-03-02T14:17:30.773", "UserId": "871188", "filtered-sentences": []}], "history": [{"Id": "164295611", "PostHistoryTypeId": "2", "PostId": "48168516", "RevisionGUID": "d951bd41-5d9c-4f7e-bef3-6e5bfadbe79e", "CreationDate": "2018-01-09T12:44:46.663", "UserId": "4206678", "Text": "This is either a bug in NLB Target Groups, or normal behaviour with incorrect [documentation][1]. I've come to this conclusion because:\r\n\r\n - I verified that the health checks are coming from the NLB\r\n - The configuration options are greyed out on the console\r\n    * inferring that AWS know about or imposed this limitation\r\n - The same results are being observed by [others][2]\r\n - The documentation is specifically for Network Load Balancers\r\n - AWS docs commonly lead you on a wild goose chase\r\n\r\nIn this case I think it might be normal behaviour that's been documented incorrectly, but there's no way of verifying that unless someone from AWS can, and it's almost impossible to get an answer for an [issue like this][3] on the aws forum.\r\n\r\nIt would be useful to be able to configure the setting, or at least have the docs updated.\r\n\r\n  [1]: https://docs.aws.amazon.com/elasticloadbalancing/latest/network/target-group-health-checks.html\r\n  [2]: https://stackoverflow.com/questions/46909388/aws-nlb-ignores-interval-setting\r\n  [3]: https://forums.aws.amazon.com/message.jspa?messageID=823536", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "166449760", "PostHistoryTypeId": "5", "PostId": "48168516", "RevisionGUID": "bc100ebf-278c-42f8-b5a9-e0ef6001ca7c", "CreationDate": "2018-02-08T13:06:09.030", "UserId": "4206678", "Comment": "added 313 characters in body", "Text": "Update: this has been answered on the related [aws forum post][3] which confirms that it's normal behaviour for network load balancers and cites their distributed nature as the reason. There is no way to configure a custom interval. At this moment, the docs are still out of date and specify otherwise.\r\n\r\n---\r\n\r\nThis is either a bug in NLB Target Groups, or normal behaviour with incorrect [documentation][1]. I've come to this conclusion because:\r\n\r\n - I verified that the health checks are coming from the NLB\r\n - The configuration options are greyed out on the console\r\n    * inferring that AWS know about or imposed this limitation\r\n - The same results are being observed by [others][2]\r\n - The documentation is specifically for Network Load Balancers\r\n - AWS docs commonly lead you on a wild goose chase\r\n\r\nIn this case I think it might be normal behaviour that's been documented incorrectly, but there's no way of verifying that unless someone from AWS can, and it's almost impossible to get an answer for an [issue like this][3] on the aws forum.\r\n\r\nIt would be useful to be able to configure the setting, or at least have the docs updated.\r\n\r\n  [1]: https://docs.aws.amazon.com/elasticloadbalancing/latest/network/target-group-health-checks.html\r\n  [2]: https://stackoverflow.com/questions/46909388/aws-nlb-ignores-interval-setting\r\n  [3]: https://forums.aws.amazon.com/message.jspa?messageID=823536", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "55798133", "PostTypeId": "2", "ParentId": "48135471", "CreationDate": "2019-04-22T17:06:26.970", "Score": "20", "Body": "<p><strong>Edit:</strong> Just wanted to share an update on this now in Sept 2021. If you are using an NLB you may get an email similar to this:</p>\n<blockquote>\n<p>We are contacting you regarding an upcoming change to your Network\nLoad Balancer(s). Starting on September 9, 2021, we will upgrade NLB's\ntarget health checking system. The upgraded system offers faster\nfailure identification, improves target health state accuracy, and\nallows ELB to weight out of impacted Availability Zones during partial\nfailure scenarios.</p>\n<p>As a part of this update, you may notice that there is less health\ncheck traffic to backend targets, reducing the targets NetworkIn/Out\nmetrics, as we have removed redundant health checks.</p>\n</blockquote>\n<p>I expect this should resolve the issues with targets receiving many healthchecks when using NLB.</p>\n<p><strong>Previous answer:</strong></p>\n<p>AWS employee here. To elaborate a bit on the accepted answer, the reason you may see bursts of health check requests is that NLB uses multiple distributed health checkers to evaluate target health. Each of these health checkers will make a request the target at the interval you specify, but all of them are going to make a request to it at that interval, so you will see one request from each of the distributed probes. The target health is then evaluated based on how many of the probes were successful.</p>\n<p>You can read a very detailed explanation written here by another AWS employee, under &quot;A look at Route 53 health checks&quot;: <a href=\"https://medium.com/@adhorn/patterns-for-resilient-architecture-part-3-16e8601c488e\" rel=\"noreferrer\">https://medium.com/@adhorn/patterns-for-resilient-architecture-part-3-16e8601c488e</a></p>\n<p>My recommendation for healthchecks is to code healthchecks to be very light. A lot of people make the mistake of overloading their healthcheck to also do things like check the backend database, or run other checks. Ideally a healthcheck for your load balancer is doing nothing but returning a short string like &quot;OK&quot;. In this case it should take less than a millisecond for your code to serve the healthcheck request. If you follow this pattern then occasional bursts of 6-8 healthcheck requests should not overload your process.</p>\n", "OwnerUserId": "3517132", "LastEditorUserId": "3517132", "LastEditDate": "2021-09-09T18:12:21.320", "LastActivityDate": "2021-09-09T18:12:21.320", "CommentCount": "9", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "99214643", "PostId": "55798133", "Score": "3", "Text": "A very light health check is less useful though, I'm not sure it's a \"mistake\" to include more than just checking the process is running and accepting connections. As well as database connectivity, disk space check is another useful one.", "CreationDate": "2019-05-25T03:30:57.047", "UserId": "5473824", "filtered-sentences": []}, {"Id": "102159486", "PostId": "55798133", "Score": "6", "Text": "\"occasional bursts of 6-8 healthcheck requests\" -> seems to have gotten worse, continuously 6-8 requests per second, with regular bursts approaching 20 requests/second. Even light healthchecks significantly impact CPU consumption on smaller instance types at such an unnecessarily high rate.", "CreationDate": "2019-09-10T08:50:33.223", "UserId": "3527464", "filtered-sentences": [{"source": "Text", "text": "Even light healthchecks significantly impact CPU consumption on smaller instance types at such an unnecessarily high rate.", "keywords": ["instance", "cpu"]}]}, {"Id": "113031576", "PostId": "55798133", "Score": "4", "Text": "The issue I'm having is that the service I'm trying to load balance has very verbose logging, with no way to reduce it. The constant healchecks (around 5 per second) are very quickly filling my logs. This is very frustrating, and has left me trying to find some hacky alternative to avoid using a NLB. Why does it need to work like this??? It should not need to spam my service like this to determine if it's healthy.", "CreationDate": "2020-09-16T12:59:34.697", "UserId": "1751825", "filtered-sentences": [{"source": "Text", "text": "The issue I'm having is that the service I'm trying to load balance has very verbose logging, with no way to reduce it. ", "keywords": ["logging"]}]}, {"Id": "114967721", "PostId": "55798133", "Score": "1", "Text": "\"make the mistake [...] do things like check the backend database \" ... this is exactly the point of a healthcheck. it's not a mistake.  what you should do is cache the healthcheck result for ~30s or w/e. that way you get a real healthcheck but can get hammered and it's ok.", "CreationDate": "2020-11-26T22:31:12.163", "UserId": "670023", "filtered-sentences": []}, {"Id": "116409036", "PostId": "55798133", "Score": "0", "Text": "I think this is a kind of DDOS or load test to my instances :(", "CreationDate": "2021-01-22T04:54:52.873", "UserId": "2078177", "filtered-sentences": [{"source": "Text", "text": "I think this is a kind of DDOS or load test to my instances :(", "keywords": ["test"]}]}, {"Id": "116621381", "PostId": "55798133", "Score": "0", "Text": "This is not acceptable in a sense that people are expecting one or a couple health check calls that is matching the target group \"health check\" configuration. AWS should either reverse engineer the health check setting for the probes to make sure frequency matches or introduce new settings that help users understand what's going on. \n\nAnd like @Pyves mentioned, this is getting worse. It's definitely not accepted for an load balancer to ddos our services.", "CreationDate": "2021-01-29T17:57:14.950", "UserId": "6296060", "filtered-sentences": []}, {"Id": "117459405", "PostId": "55798133", "Score": "0", "Text": "Thanks for the insight, it is helpful to understand how the healthchecks work, but I have 3 NLB listeners pointing at a fargate container, each listener healthchecked at 30s. I see 1k healthchecks per minute, and about 170 of those are from a single source ip, and this is sustained well beyond the initial startup checks, it's constant load. it's far beyond 6-8 healthchecks, i think somethings wrong.", "CreationDate": "2021-03-02T14:24:26.423", "UserId": "871188", "filtered-sentences": []}, {"Id": "118976198", "PostId": "55798133", "Score": "1", "Text": "While I do agree that the AWS NLB health check rate is pretty extreme, there is no reason you need to decide between doing a proper health check and handling the high rate of requests. Just have your instance check its health every N seconds and store its health state, and return the stored value every time AWS asks.", "CreationDate": "2021-04-29T04:05:59.860", "UserId": "1174521", "filtered-sentences": [{"source": "Text", "text": "Just have your instance check its health every N seconds and store its health state, and return the stored value every time AWS asks.", "keywords": ["instance"]}]}, {"Id": "130160349", "PostId": "55798133", "Score": "0", "Text": "@jbg Exactly. We should not conflate the actions \"trigger health checks\" with \"report last health check status\". If we treat them as two independent actions, there's no problem.", "CreationDate": "2022-09-13T21:35:03.813", "UserId": "133875", "filtered-sentences": []}], "history": [{"Id": "196299313", "PostHistoryTypeId": "2", "PostId": "55798133", "RevisionGUID": "317022cd-d67f-4514-9f4a-86668054b453", "CreationDate": "2019-04-22T17:06:26.970", "UserId": "3517132", "Text": "AWS employee here. To elaborate a bit on the accepted answer, the reason you may see bursts of health check requests is that NLB uses multiple distributed health checkers to evaluate target health. Each of these health checkers will make a request the target at the interval you specify, but all of them are going to make a request to it at that interval, so you will see one request from each of the distributed probes. The target health is then evaluated based on how many of the probes were successful.\r\n\r\nYou can read a very detailed explanation written here by another AWS employee, under \"A look at Route 53 health checks\": https://medium.com/@adhorn/patterns-for-resilient-architecture-part-3-16e8601c488e\r\n\r\nMy recommendation for healthchecks is to code healthchecks to be very light. A lot of people make the mistake of overloading their healthcheck to also do things like check the backend database, or run other checks. Ideally a healthcheck for your load balancer is doing nothing but returning a short string like \"OK\". In this case it should take less than a millisecond for your code to serve the healthcheck request. If you follow this pattern then occasional bursts of 6-8 healthcheck requests should not overload your process.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "253123412", "PostHistoryTypeId": "5", "PostId": "55798133", "RevisionGUID": "0f11b840-eca6-470b-aa87-3a63ba81d9ac", "CreationDate": "2021-09-03T15:18:02.587", "UserId": "3517132", "Comment": "Updates about changes to how NLB works on the AWS side", "Text": "**Edit:** Just wanted to share an update on this now in Sept 2021. If you are using an NLB you should get an email similar to this: \r\n\r\n> We are contacting you regarding an upcoming change to your Network\r\n> Load Balancer(s). Starting on September 9, 2021, we will upgrade NLB's\r\n> target health checking system. The upgraded system offers faster\r\n> failure identification, improves target health state accuracy, and\r\n> allows ELB to weight out of impacted Availability Zones during partial\r\n> failure scenarios.\r\n> \r\n> As a part of this update, you may notice that there is less health\r\n> check traffic to backend targets, reducing the targets NetworkIn/Out\r\n> metrics, as we have removed redundant health checks.\r\n\r\nI expect this should resolve the issues with targets receiving many healthchecks when using NLB.\r\n\r\n**Previous answer:**\r\n\r\nAWS employee here. To elaborate a bit on the accepted answer, the reason you may see bursts of health check requests is that NLB uses multiple distributed health checkers to evaluate target health. Each of these health checkers will make a request the target at the interval you specify, but all of them are going to make a request to it at that interval, so you will see one request from each of the distributed probes. The target health is then evaluated based on how many of the probes were successful.\r\n\r\nYou can read a very detailed explanation written here by another AWS employee, under \"A look at Route 53 health checks\": https://medium.com/@adhorn/patterns-for-resilient-architecture-part-3-16e8601c488e\r\n\r\nMy recommendation for healthchecks is to code healthchecks to be very light. A lot of people make the mistake of overloading their healthcheck to also do things like check the backend database, or run other checks. Ideally a healthcheck for your load balancer is doing nothing but returning a short string like \"OK\". In this case it should take less than a millisecond for your code to serve the healthcheck request. If you follow this pattern then occasional bursts of 6-8 healthcheck requests should not overload your process.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "If you are using an NLB you should get an email similar to this: > We are contacting you regarding an upcoming change to your Network > Load Balancer(s). ", "keywords": ["change"]}, {"source": "Comment", "text": "Updates about changes to how NLB works on the AWS side", "keywords": ["change"]}]}, {"Id": "253455392", "PostHistoryTypeId": "5", "PostId": "55798133", "RevisionGUID": "5abc6169-8b09-4c22-bb73-91a8a91d1d7d", "CreationDate": "2021-09-09T18:12:21.320", "UserId": "3517132", "Comment": "deleted 3 characters in body", "Text": "**Edit:** Just wanted to share an update on this now in Sept 2021. If you are using an NLB you may get an email similar to this: \r\n\r\n> We are contacting you regarding an upcoming change to your Network\r\n> Load Balancer(s). Starting on September 9, 2021, we will upgrade NLB's\r\n> target health checking system. The upgraded system offers faster\r\n> failure identification, improves target health state accuracy, and\r\n> allows ELB to weight out of impacted Availability Zones during partial\r\n> failure scenarios.\r\n> \r\n> As a part of this update, you may notice that there is less health\r\n> check traffic to backend targets, reducing the targets NetworkIn/Out\r\n> metrics, as we have removed redundant health checks.\r\n\r\nI expect this should resolve the issues with targets receiving many healthchecks when using NLB.\r\n\r\n**Previous answer:**\r\n\r\nAWS employee here. To elaborate a bit on the accepted answer, the reason you may see bursts of health check requests is that NLB uses multiple distributed health checkers to evaluate target health. Each of these health checkers will make a request the target at the interval you specify, but all of them are going to make a request to it at that interval, so you will see one request from each of the distributed probes. The target health is then evaluated based on how many of the probes were successful.\r\n\r\nYou can read a very detailed explanation written here by another AWS employee, under \"A look at Route 53 health checks\": https://medium.com/@adhorn/patterns-for-resilient-architecture-part-3-16e8601c488e\r\n\r\nMy recommendation for healthchecks is to code healthchecks to be very light. A lot of people make the mistake of overloading their healthcheck to also do things like check the backend database, or run other checks. Ideally a healthcheck for your load balancer is doing nothing but returning a short string like \"OK\". In this case it should take less than a millisecond for your code to serve the healthcheck request. If you follow this pattern then occasional bursts of 6-8 healthcheck requests should not overload your process.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "If you are using an NLB you may get an email similar to this: > We are contacting you regarding an upcoming change to your Network > Load Balancer(s). ", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "We are contacting you regarding an upcoming change to your Network Load Balancer(s). ", "keywords": ["change"]}]}, {"Id": "55642854", "PostTypeId": "2", "ParentId": "48135471", "CreationDate": "2019-04-12T00:25:30.087", "Score": "1", "Body": "<p>A bit late to the party on this. But something what works for me is to have my (C++) service spin up a thread dedicated to the health checks coming from ELB.  The thread waits for a socket connection and then waits to read from the socket; or encounter an error.  It then closes the socket and goes back to waiting for the next health check ping.  This is WAY less expensive than having ELB hit up my traffic port all the time.  Not only does it make my code think its being attacked, it also spins up all the logistics and such needed to service a real client.</p>\n", "OwnerUserId": "11348947", "LastActivityDate": "2019-04-12T00:25:30.087", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "97976372", "PostId": "55642854", "Score": "0", "Text": "Please elaborate on how to do this.", "CreationDate": "2019-04-12T01:17:58.433", "UserId": "3367799", "filtered-sentences": []}], "history": [{"Id": "195631853", "PostHistoryTypeId": "2", "PostId": "55642854", "RevisionGUID": "007fdb42-cfad-48fd-8842-67ecb8764000", "CreationDate": "2019-04-12T00:25:30.087", "UserId": "11348947", "Text": "A bit late to the party on this. But something what works for me is to have my (C++) service spin up a thread dedicated to the health checks coming from ELB.  The thread waits for a socket connection and then waits to read from the socket; or encounter an error.  It then closes the socket and goes back to waiting for the next health check ping.  This is WAY less expensive than having ELB hit up my traffic port all the time.  Not only does it make my code think its being attacked, it also spins up all the logistics and such needed to service a real client.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "This is WAY less expensive than having ELB hit up my traffic port all the time. ", "keywords": ["expense"]}]}], "filtered-sentences": [{"source": "Body", "text": "This is WAY less expensive than having ELB hit up my traffic port all the time. ", "keywords": ["expense"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "Interestingly, when I tried to manually change the interval in the console, I found those values greyed out: Here is the relevant part of the template, with my attempt at changing the interval commented out: My EC2 instances are in private subnets with no access from the outside world. ", "keywords": ["change"]}]}