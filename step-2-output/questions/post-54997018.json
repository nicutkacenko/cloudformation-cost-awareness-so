{"Id": "54997018", "PostTypeId": "1", "AcceptedAnswerId": "55004559", "CreationDate": "2019-03-05T06:55:37.857", "Score": "4", "ViewCount": "261", "Body": "<p>I've started to write some simple Cloudformation scripts to provision infrastructure. It's waking up 4 nodes (1 Ansible Headnode - 3 Slave). All of the nodes images are free tier RHEL images on AWS. The problem is the Image ID of RHEL image is changing all the time on AWS. So if I would like to run my script next week for any reason, I have to edit the Image ID. One more option is I can set the script to wait for user to write the Image ID but this is not a solution for me. </p>\n\n<p>Is there any way that I can parse Image ID of free tier RHEL AMI dynamically on AWS for cloudformation?</p>\n", "OwnerUserId": "8784325", "LastActivityDate": "2019-03-05T14:00:28.880", "Title": "How to parse free tier RHEL AMI ID on AWS with Cloudformation?", "Tags": "|amazon-web-services|amazon-ec2|aws-cloudformation|boto3|aws-cli|", "AnswerCount": "1", "CommentCount": "0", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "192921280", "PostHistoryTypeId": "2", "PostId": "54997018", "RevisionGUID": "ff305011-ef29-434d-a01b-7e423cd29a8f", "CreationDate": "2019-03-05T06:55:37.857", "UserId": "8784325", "Text": "I've started to write some simple Cloudformation scripts to provision infrastructure. It's waking up 4 nodes (1 Ansible Headnode - 3 Slave). All of the nodes images are free tier RHEL images on AWS. The problem is the Image ID of RHEL image is changing all the time on AWS. So if I would like to run my script next week for any reason, I have to edit the Image ID. One more option is I can set the script to wait for user to write the Image ID but this is not a solution for me. \r\n\r\nIs there any way that I can parse Image ID of free tier RHEL AMI dynamically on AWS for cloudformation?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The problem is the Image ID of RHEL image is changing all the time on AWS. ", "keywords": ["change"]}]}, {"Id": "192921281", "PostHistoryTypeId": "1", "PostId": "54997018", "RevisionGUID": "ff305011-ef29-434d-a01b-7e423cd29a8f", "CreationDate": "2019-03-05T06:55:37.857", "UserId": "8784325", "Text": "How to parse free tier RHEL AMI ID on AWS with Cloudformation?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "192921282", "PostHistoryTypeId": "3", "PostId": "54997018", "RevisionGUID": "ff305011-ef29-434d-a01b-7e423cd29a8f", "CreationDate": "2019-03-05T06:55:37.857", "UserId": "8784325", "Text": "|amazon-web-services|amazon-ec2|aws-cloudformation|boto3|aws-cli|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "55004559", "PostTypeId": "2", "ParentId": "54997018", "CreationDate": "2019-03-05T14:00:28.880", "Score": "1", "Body": "<p><strong>TL;DR</strong> This <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-custom-resources-lambda-lookup-amiids.html\" rel=\"nofollow noreferrer\">walkthrough</a> provides all the information you need: </p>\n\n<p>The method I've used from the reference is:</p>\n\n<ol>\n<li>Create a Lambda to look up the latest AMI matching your desired pattern.</li>\n<li>Store the code for the Lambda in S3.</li>\n<li>Call that Lambda from within CloudFormation and use the information retrieved from the Lambda to create the EC2 instance with the latest AMI.</li>\n</ol>\n\n<p>This is the example Lambda from the reference:</p>\n\n<pre><code>/**\n* A sample Lambda function that looks up the latest AMI ID for a given region and architecture.\n**/\n\n// Map instance architectures to an AMI name pattern\nvar archToAMINamePattern = {\n    \"PV64\": \"amzn-ami-pv*x86_64-ebs\",\n    \"HVM64\": \"amzn-ami-hvm*x86_64-gp2\",\n    \"HVMG2\": \"amzn-ami-graphics-hvm*x86_64-ebs*\"\n};\nvar aws = require(\"aws-sdk\");\n\nexports.handler = function(event, context) {\n\n    console.log(\"REQUEST RECEIVED:\\n\" + JSON.stringify(event));\n\n    // For Delete requests, immediately send a SUCCESS response.\n    if (event.RequestType == \"Delete\") {\n        sendResponse(event, context, \"SUCCESS\");\n        return;\n    }\n\n    var responseStatus = \"FAILED\";\n    var responseData = {};\n\n    var ec2 = new aws.EC2({region: event.ResourceProperties.Region});\n    var describeImagesParams = {\n        Filters: [{ Name: \"name\", Values: [archToAMINamePattern[event.ResourceProperties.Architecture]]}],\n        Owners: [event.ResourceProperties.Architecture == \"HVMG2\" ? \"679593333241\" : \"amazon\"]\n    };\n\n    // Get AMI IDs with the specified name pattern and owner\n    ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {\n        if (err) {\n            responseData = {Error: \"DescribeImages call failed\"};\n            console.log(responseData.Error + \":\\n\", err);\n        }\n        else {\n            var images = describeImagesResult.Images;\n            // Sort images by name in decscending order. The names contain the AMI version, formatted as YYYY.MM.Ver.\n            images.sort(function(x, y) { return y.Name.localeCompare(x.Name); });\n            for (var j = 0; j &lt; images.length; j++) {\n                if (isBeta(images[j].Name)) continue;\n                responseStatus = \"SUCCESS\";\n                responseData[\"Id\"] = images[j].ImageId;\n                break;\n            }\n        }\n        sendResponse(event, context, responseStatus, responseData);\n    });\n};\n\n// Check if the image is a beta or rc image. The Lambda function won't return any of those images.\nfunction isBeta(imageName) {\n    return imageName.toLowerCase().indexOf(\"beta\") &gt; -1 || imageName.toLowerCase().indexOf(\".rc\") &gt; -1;\n}\n\n\n// Send response to the pre-signed S3 URL \nfunction sendResponse(event, context, responseStatus, responseData) {\n\n    var responseBody = JSON.stringify({\n        Status: responseStatus,\n        Reason: \"See the details in CloudWatch Log Stream: \" + context.logStreamName,\n        PhysicalResourceId: context.logStreamName,\n        StackId: event.StackId,\n        RequestId: event.RequestId,\n        LogicalResourceId: event.LogicalResourceId,\n        Data: responseData\n    });\n\n    console.log(\"RESPONSE BODY:\\n\", responseBody);\n\n    var https = require(\"https\");\n    var url = require(\"url\");\n\n    var parsedUrl = url.parse(event.ResponseURL);\n    var options = {\n        hostname: parsedUrl.hostname,\n        port: 443,\n        path: parsedUrl.path,\n        method: \"PUT\",\n        headers: {\n            \"content-type\": \"\",\n            \"content-length\": responseBody.length\n        }\n    };\n\n    console.log(\"SENDING RESPONSE...\\n\");\n\n    var request = https.request(options, function(response) {\n        console.log(\"STATUS: \" + response.statusCode);\n        console.log(\"HEADERS: \" + JSON.stringify(response.headers));\n        // Tell AWS Lambda that the function execution is done  \n        context.done();\n    });\n\n    request.on(\"error\", function(error) {\n        console.log(\"sendResponse Error:\" + error);\n        // Tell AWS Lambda that the function execution is done  \n        context.done();\n    });\n\n    // write data to request body\n    request.write(responseBody);\n    request.end();\n}\n</code></pre>\n\n<p>This is the CloudFormation template from the resource:</p>\n\n<pre><code>{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n\n  \"Description\" : \"AWS CloudFormation AMI Look Up Sample Template: Demonstrates how to dynamically specify an AMI ID. This template provisions an EC2 instance with an AMI ID that is based on the instance's type and region. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.\",\n\n  \"Parameters\": {\n    \"InstanceType\" : {\n      \"Description\" : \"EC2 instance type\",\n      \"Type\" : \"String\",\n      \"Default\" : \"m1.small\",\n      \"AllowedValues\" : [ \"t1.micro\", \"t2.micro\", \"t2.small\", \"t2.medium\", \"m1.small\", \"m1.medium\", \"m1.large\", \"m1.xlarge\", \"m2.xlarge\", \"m2.2xlarge\", \"m2.4xlarge\", \"m3.medium\", \"m3.large\", \"m3.xlarge\", \"m3.2xlarge\", \"c1.medium\", \"c1.xlarge\", \"c3.large\", \"c3.xlarge\", \"c3.2xlarge\", \"c3.4xlarge\", \"c3.8xlarge\", \"c4.large\", \"c4.xlarge\", \"c4.2xlarge\", \"c4.4xlarge\", \"c4.8xlarge\", \"g2.2xlarge\", \"r3.large\", \"r3.xlarge\", \"r3.2xlarge\", \"r3.4xlarge\", \"r3.8xlarge\", \"i2.xlarge\", \"i2.2xlarge\", \"i2.4xlarge\", \"i2.8xlarge\", \"d2.xlarge\", \"d2.2xlarge\", \"d2.4xlarge\", \"d2.8xlarge\", \"hi1.4xlarge\", \"hs1.8xlarge\", \"cr1.8xlarge\", \"cc2.8xlarge\", \"cg1.4xlarge\"],\n      \"ConstraintDescription\" : \"Must be a valid EC2 instance type.\"\n    },\n    \"ModuleName\" : {\n      \"Description\" : \"The name of the JavaScript file\",\n      \"Type\" : \"String\",\n      \"Default\" : \"amilookup\"\n    },\n    \"S3Bucket\" : {\n      \"Description\" : \"The name of the bucket that contains your packaged source\",\n      \"Type\" : \"String\"\n    },\n    \"S3Key\" : {\n      \"Description\" : \"The name of the ZIP package\",\n      \"Type\" : \"String\",\n      \"Default\" : \"amilookup.zip\"\n    }\n  },\n\n  \"Mappings\" : {\n    \"AWSInstanceType2Arch\" : {\n      \"t1.micro\"    : { \"Arch\" : \"PV64\"   },\n      \"t2.micro\"    : { \"Arch\" : \"HVM64\"  },\n      \"t2.small\"    : { \"Arch\" : \"HVM64\"  },\n      \"t2.medium\"   : { \"Arch\" : \"HVM64\"  },\n      \"m1.small\"    : { \"Arch\" : \"PV64\"   },\n      \"m1.medium\"   : { \"Arch\" : \"PV64\"   },\n      \"m1.large\"    : { \"Arch\" : \"PV64\"   },\n      \"m1.xlarge\"   : { \"Arch\" : \"PV64\"   },\n      \"m2.xlarge\"   : { \"Arch\" : \"PV64\"   },\n      \"m2.2xlarge\"  : { \"Arch\" : \"PV64\"   },\n      \"m2.4xlarge\"  : { \"Arch\" : \"PV64\"   },\n      \"m3.medium\"   : { \"Arch\" : \"HVM64\"  },\n      \"m3.large\"    : { \"Arch\" : \"HVM64\"  },\n      \"m3.xlarge\"   : { \"Arch\" : \"HVM64\"  },\n      \"m3.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\n      \"c1.medium\"   : { \"Arch\" : \"PV64\"   },\n      \"c1.xlarge\"   : { \"Arch\" : \"PV64\"   },\n      \"c3.large\"    : { \"Arch\" : \"HVM64\"  },\n      \"c3.xlarge\"   : { \"Arch\" : \"HVM64\"  },\n      \"c3.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\n      \"c3.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\n      \"c3.8xlarge\"  : { \"Arch\" : \"HVM64\"  },\n      \"c4.large\"    : { \"Arch\" : \"HVM64\"  },\n      \"c4.xlarge\"   : { \"Arch\" : \"HVM64\"  },\n      \"c4.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\n      \"c4.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\n      \"c4.8xlarge\"  : { \"Arch\" : \"HVM64\"  },\n      \"g2.2xlarge\"  : { \"Arch\" : \"HVMG2\"  },\n      \"r3.large\"    : { \"Arch\" : \"HVM64\"  },\n      \"r3.xlarge\"   : { \"Arch\" : \"HVM64\"  },\n      \"r3.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\n      \"r3.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\n      \"r3.8xlarge\"  : { \"Arch\" : \"HVM64\"  },\n      \"i2.xlarge\"   : { \"Arch\" : \"HVM64\"  },\n      \"i2.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\n      \"i2.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\n      \"i2.8xlarge\"  : { \"Arch\" : \"HVM64\"  },\n      \"d2.xlarge\"   : { \"Arch\" : \"HVM64\"  },\n      \"d2.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\n      \"d2.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\n      \"d2.8xlarge\"  : { \"Arch\" : \"HVM64\"  },\n      \"hi1.4xlarge\" : { \"Arch\" : \"HVM64\"  },\n      \"hs1.8xlarge\" : { \"Arch\" : \"HVM64\"  },\n      \"cr1.8xlarge\" : { \"Arch\" : \"HVM64\"  },\n      \"cc2.8xlarge\" : { \"Arch\" : \"HVM64\"  }\n    }\n  },\n\n  \"Resources\" : {\n    \"SampleInstance\": {  \n      \"Type\": \"AWS::EC2::Instance\",\n      \"Properties\": {\n        \"InstanceType\"   : { \"Ref\" : \"InstanceType\" },\n        \"ImageId\": { \"Fn::GetAtt\": [ \"AMIInfo\", \"Id\" ] }\n      }\n    },\n\n    \"AMIInfo\": {\n      \"Type\": \"Custom::AMIInfo\",\n      \"Properties\": {\n        \"ServiceToken\": { \"Fn::GetAtt\" : [\"AMIInfoFunction\", \"Arn\"] },\n        \"Region\": { \"Ref\": \"AWS::Region\" },\n        \"Architecture\": { \"Fn::FindInMap\" : [ \"AWSInstanceType2Arch\", { \"Ref\" : \"InstanceType\" }, \"Arch\" ] }\n      }\n    },\n\n    \"AMIInfoFunction\": {\n      \"Type\": \"AWS::Lambda::Function\",\n      \"Properties\": {\n        \"Code\": {\n            \"S3Bucket\": { \"Ref\": \"S3Bucket\" },\n            \"S3Key\": { \"Ref\": \"S3Key\" }\n        },\n        \"Handler\": { \"Fn::Join\" : [ \"\", [{ \"Ref\": \"ModuleName\" },\".handler\"] ] },\n        \"Role\": { \"Fn::GetAtt\" : [\"LambdaExecutionRole\", \"Arn\"] },        \n        \"Runtime\": \"nodejs4.3\",\n        \"Timeout\": \"30\"\n      }\n    },\n\n    \"LambdaExecutionRole\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [{\n              \"Effect\": \"Allow\",\n              \"Principal\": {\"Service\": [\"lambda.amazonaws.com\"]},\n              \"Action\": [\"sts:AssumeRole\"]\n          }]\n        },\n        \"Path\": \"/\",\n        \"Policies\": [{\n          \"PolicyName\": \"root\",\n          \"PolicyDocument\": {\n            \"Version\": \"2012-10-17\",\n            \"Statement\": [{\n                \"Effect\": \"Allow\",\n                \"Action\": [\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\"],\n                \"Resource\": \"arn:aws:logs:*:*:*\"\n            },\n            {\n                \"Effect\": \"Allow\",\n                \"Action\": [\"ec2:DescribeImages\"],\n                \"Resource\": \"*\"\n            }]\n          }\n        }]\n      }\n    }    \n  },\n\n  \"Outputs\" : {\n    \"AMIID\" : {\n      \"Description\": \"The Amazon EC2 instance AMI ID.\",\n      \"Value\" : { \"Fn::GetAtt\": [ \"AMIInfo\", \"Id\" ] }\n    }\n  }  \n}\n</code></pre>\n\n<p><strong>Reference</strong></p>\n\n<p><a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-custom-resources-lambda-lookup-amiids.html\" rel=\"nofollow noreferrer\">https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-custom-resources-lambda-lookup-amiids.html</a></p>\n", "OwnerUserId": "1723857", "LastActivityDate": "2019-03-05T14:00:28.880", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "192951350", "PostHistoryTypeId": "2", "PostId": "55004559", "RevisionGUID": "962cae52-2064-4f53-b6ac-eb1619fdc1c8", "CreationDate": "2019-03-05T14:00:28.880", "UserId": "1723857", "Text": "**TL;DR** This [walkthrough][1] provides all the information you need: \r\n\r\nThe method I've used from the reference is:\r\n\r\n 1. Create a Lambda to look up the latest AMI matching your desired pattern.\r\n 2. Store the code for the Lambda in S3.\r\n 3. Call that Lambda from within CloudFormation and use the information retrieved from the Lambda to create the EC2 instance with the latest AMI.\r\n\r\nThis is the example Lambda from the reference:\r\n\r\n    /**\r\n    * A sample Lambda function that looks up the latest AMI ID for a given region and architecture.\r\n    **/\r\n    \r\n    // Map instance architectures to an AMI name pattern\r\n    var archToAMINamePattern = {\r\n        \"PV64\": \"amzn-ami-pv*x86_64-ebs\",\r\n        \"HVM64\": \"amzn-ami-hvm*x86_64-gp2\",\r\n        \"HVMG2\": \"amzn-ami-graphics-hvm*x86_64-ebs*\"\r\n    };\r\n    var aws = require(\"aws-sdk\");\r\n     \r\n    exports.handler = function(event, context) {\r\n     \r\n        console.log(\"REQUEST RECEIVED:\\n\" + JSON.stringify(event));\r\n        \r\n        // For Delete requests, immediately send a SUCCESS response.\r\n        if (event.RequestType == \"Delete\") {\r\n            sendResponse(event, context, \"SUCCESS\");\r\n            return;\r\n        }\r\n     \r\n        var responseStatus = \"FAILED\";\r\n        var responseData = {};\r\n     \r\n        var ec2 = new aws.EC2({region: event.ResourceProperties.Region});\r\n        var describeImagesParams = {\r\n            Filters: [{ Name: \"name\", Values: [archToAMINamePattern[event.ResourceProperties.Architecture]]}],\r\n            Owners: [event.ResourceProperties.Architecture == \"HVMG2\" ? \"679593333241\" : \"amazon\"]\r\n        };\r\n     \r\n        // Get AMI IDs with the specified name pattern and owner\r\n        ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {\r\n            if (err) {\r\n                responseData = {Error: \"DescribeImages call failed\"};\r\n                console.log(responseData.Error + \":\\n\", err);\r\n            }\r\n            else {\r\n                var images = describeImagesResult.Images;\r\n                // Sort images by name in decscending order. The names contain the AMI version, formatted as YYYY.MM.Ver.\r\n                images.sort(function(x, y) { return y.Name.localeCompare(x.Name); });\r\n                for (var j = 0; j < images.length; j++) {\r\n                    if (isBeta(images[j].Name)) continue;\r\n                    responseStatus = \"SUCCESS\";\r\n                    responseData[\"Id\"] = images[j].ImageId;\r\n                    break;\r\n                }\r\n            }\r\n            sendResponse(event, context, responseStatus, responseData);\r\n        });\r\n    };\r\n    \r\n    // Check if the image is a beta or rc image. The Lambda function won't return any of those images.\r\n    function isBeta(imageName) {\r\n        return imageName.toLowerCase().indexOf(\"beta\") > -1 || imageName.toLowerCase().indexOf(\".rc\") > -1;\r\n    }\r\n    \r\n    \r\n    // Send response to the pre-signed S3 URL \r\n    function sendResponse(event, context, responseStatus, responseData) {\r\n     \r\n        var responseBody = JSON.stringify({\r\n            Status: responseStatus,\r\n            Reason: \"See the details in CloudWatch Log Stream: \" + context.logStreamName,\r\n            PhysicalResourceId: context.logStreamName,\r\n            StackId: event.StackId,\r\n            RequestId: event.RequestId,\r\n            LogicalResourceId: event.LogicalResourceId,\r\n            Data: responseData\r\n        });\r\n     \r\n        console.log(\"RESPONSE BODY:\\n\", responseBody);\r\n     \r\n        var https = require(\"https\");\r\n        var url = require(\"url\");\r\n     \r\n        var parsedUrl = url.parse(event.ResponseURL);\r\n        var options = {\r\n            hostname: parsedUrl.hostname,\r\n            port: 443,\r\n            path: parsedUrl.path,\r\n            method: \"PUT\",\r\n            headers: {\r\n                \"content-type\": \"\",\r\n                \"content-length\": responseBody.length\r\n            }\r\n        };\r\n     \r\n        console.log(\"SENDING RESPONSE...\\n\");\r\n     \r\n        var request = https.request(options, function(response) {\r\n            console.log(\"STATUS: \" + response.statusCode);\r\n            console.log(\"HEADERS: \" + JSON.stringify(response.headers));\r\n            // Tell AWS Lambda that the function execution is done  \r\n            context.done();\r\n        });\r\n     \r\n        request.on(\"error\", function(error) {\r\n            console.log(\"sendResponse Error:\" + error);\r\n            // Tell AWS Lambda that the function execution is done  \r\n            context.done();\r\n        });\r\n      \r\n        // write data to request body\r\n        request.write(responseBody);\r\n        request.end();\r\n    }\r\n\r\nThis is the CloudFormation template from the resource:\r\n\r\n    {\r\n      \"AWSTemplateFormatVersion\" : \"2010-09-09\",\r\n     \r\n      \"Description\" : \"AWS CloudFormation AMI Look Up Sample Template: Demonstrates how to dynamically specify an AMI ID. This template provisions an EC2 instance with an AMI ID that is based on the instance's type and region. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.\",\r\n     \r\n      \"Parameters\": {\r\n        \"InstanceType\" : {\r\n          \"Description\" : \"EC2 instance type\",\r\n          \"Type\" : \"String\",\r\n          \"Default\" : \"m1.small\",\r\n          \"AllowedValues\" : [ \"t1.micro\", \"t2.micro\", \"t2.small\", \"t2.medium\", \"m1.small\", \"m1.medium\", \"m1.large\", \"m1.xlarge\", \"m2.xlarge\", \"m2.2xlarge\", \"m2.4xlarge\", \"m3.medium\", \"m3.large\", \"m3.xlarge\", \"m3.2xlarge\", \"c1.medium\", \"c1.xlarge\", \"c3.large\", \"c3.xlarge\", \"c3.2xlarge\", \"c3.4xlarge\", \"c3.8xlarge\", \"c4.large\", \"c4.xlarge\", \"c4.2xlarge\", \"c4.4xlarge\", \"c4.8xlarge\", \"g2.2xlarge\", \"r3.large\", \"r3.xlarge\", \"r3.2xlarge\", \"r3.4xlarge\", \"r3.8xlarge\", \"i2.xlarge\", \"i2.2xlarge\", \"i2.4xlarge\", \"i2.8xlarge\", \"d2.xlarge\", \"d2.2xlarge\", \"d2.4xlarge\", \"d2.8xlarge\", \"hi1.4xlarge\", \"hs1.8xlarge\", \"cr1.8xlarge\", \"cc2.8xlarge\", \"cg1.4xlarge\"],\r\n          \"ConstraintDescription\" : \"Must be a valid EC2 instance type.\"\r\n        },\r\n        \"ModuleName\" : {\r\n          \"Description\" : \"The name of the JavaScript file\",\r\n          \"Type\" : \"String\",\r\n          \"Default\" : \"amilookup\"\r\n        },\r\n        \"S3Bucket\" : {\r\n          \"Description\" : \"The name of the bucket that contains your packaged source\",\r\n          \"Type\" : \"String\"\r\n        },\r\n        \"S3Key\" : {\r\n          \"Description\" : \"The name of the ZIP package\",\r\n          \"Type\" : \"String\",\r\n          \"Default\" : \"amilookup.zip\"\r\n        }\r\n      },\r\n     \r\n      \"Mappings\" : {\r\n        \"AWSInstanceType2Arch\" : {\r\n          \"t1.micro\"    : { \"Arch\" : \"PV64\"   },\r\n          \"t2.micro\"    : { \"Arch\" : \"HVM64\"  },\r\n          \"t2.small\"    : { \"Arch\" : \"HVM64\"  },\r\n          \"t2.medium\"   : { \"Arch\" : \"HVM64\"  },\r\n          \"m1.small\"    : { \"Arch\" : \"PV64\"   },\r\n          \"m1.medium\"   : { \"Arch\" : \"PV64\"   },\r\n          \"m1.large\"    : { \"Arch\" : \"PV64\"   },\r\n          \"m1.xlarge\"   : { \"Arch\" : \"PV64\"   },\r\n          \"m2.xlarge\"   : { \"Arch\" : \"PV64\"   },\r\n          \"m2.2xlarge\"  : { \"Arch\" : \"PV64\"   },\r\n          \"m2.4xlarge\"  : { \"Arch\" : \"PV64\"   },\r\n          \"m3.medium\"   : { \"Arch\" : \"HVM64\"  },\r\n          \"m3.large\"    : { \"Arch\" : \"HVM64\"  },\r\n          \"m3.xlarge\"   : { \"Arch\" : \"HVM64\"  },\r\n          \"m3.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n          \"c1.medium\"   : { \"Arch\" : \"PV64\"   },\r\n          \"c1.xlarge\"   : { \"Arch\" : \"PV64\"   },\r\n          \"c3.large\"    : { \"Arch\" : \"HVM64\"  },\r\n          \"c3.xlarge\"   : { \"Arch\" : \"HVM64\"  },\r\n          \"c3.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n          \"c3.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n          \"c3.8xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n          \"c4.large\"    : { \"Arch\" : \"HVM64\"  },\r\n          \"c4.xlarge\"   : { \"Arch\" : \"HVM64\"  },\r\n          \"c4.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n          \"c4.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n          \"c4.8xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n          \"g2.2xlarge\"  : { \"Arch\" : \"HVMG2\"  },\r\n          \"r3.large\"    : { \"Arch\" : \"HVM64\"  },\r\n          \"r3.xlarge\"   : { \"Arch\" : \"HVM64\"  },\r\n          \"r3.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n          \"r3.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n          \"r3.8xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n          \"i2.xlarge\"   : { \"Arch\" : \"HVM64\"  },\r\n          \"i2.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n          \"i2.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n          \"i2.8xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n          \"d2.xlarge\"   : { \"Arch\" : \"HVM64\"  },\r\n          \"d2.2xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n          \"d2.4xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n          \"d2.8xlarge\"  : { \"Arch\" : \"HVM64\"  },\r\n          \"hi1.4xlarge\" : { \"Arch\" : \"HVM64\"  },\r\n          \"hs1.8xlarge\" : { \"Arch\" : \"HVM64\"  },\r\n          \"cr1.8xlarge\" : { \"Arch\" : \"HVM64\"  },\r\n          \"cc2.8xlarge\" : { \"Arch\" : \"HVM64\"  }\r\n        }\r\n      },\r\n     \r\n      \"Resources\" : {\r\n        \"SampleInstance\": {  \r\n          \"Type\": \"AWS::EC2::Instance\",\r\n          \"Properties\": {\r\n            \"InstanceType\"   : { \"Ref\" : \"InstanceType\" },\r\n            \"ImageId\": { \"Fn::GetAtt\": [ \"AMIInfo\", \"Id\" ] }\r\n          }\r\n        },\r\n     \r\n        \"AMIInfo\": {\r\n          \"Type\": \"Custom::AMIInfo\",\r\n          \"Properties\": {\r\n            \"ServiceToken\": { \"Fn::GetAtt\" : [\"AMIInfoFunction\", \"Arn\"] },\r\n            \"Region\": { \"Ref\": \"AWS::Region\" },\r\n            \"Architecture\": { \"Fn::FindInMap\" : [ \"AWSInstanceType2Arch\", { \"Ref\" : \"InstanceType\" }, \"Arch\" ] }\r\n          }\r\n        },\r\n     \r\n        \"AMIInfoFunction\": {\r\n          \"Type\": \"AWS::Lambda::Function\",\r\n          \"Properties\": {\r\n            \"Code\": {\r\n                \"S3Bucket\": { \"Ref\": \"S3Bucket\" },\r\n                \"S3Key\": { \"Ref\": \"S3Key\" }\r\n            },\r\n            \"Handler\": { \"Fn::Join\" : [ \"\", [{ \"Ref\": \"ModuleName\" },\".handler\"] ] },\r\n            \"Role\": { \"Fn::GetAtt\" : [\"LambdaExecutionRole\", \"Arn\"] },        \r\n            \"Runtime\": \"nodejs4.3\",\r\n            \"Timeout\": \"30\"\r\n          }\r\n        },\r\n     \r\n        \"LambdaExecutionRole\": {\r\n          \"Type\": \"AWS::IAM::Role\",\r\n          \"Properties\": {\r\n            \"AssumeRolePolicyDocument\": {\r\n              \"Version\": \"2012-10-17\",\r\n              \"Statement\": [{\r\n                  \"Effect\": \"Allow\",\r\n                  \"Principal\": {\"Service\": [\"lambda.amazonaws.com\"]},\r\n                  \"Action\": [\"sts:AssumeRole\"]\r\n              }]\r\n            },\r\n            \"Path\": \"/\",\r\n            \"Policies\": [{\r\n              \"PolicyName\": \"root\",\r\n              \"PolicyDocument\": {\r\n                \"Version\": \"2012-10-17\",\r\n                \"Statement\": [{\r\n                    \"Effect\": \"Allow\",\r\n                    \"Action\": [\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\"],\r\n                    \"Resource\": \"arn:aws:logs:*:*:*\"\r\n                },\r\n                {\r\n                    \"Effect\": \"Allow\",\r\n                    \"Action\": [\"ec2:DescribeImages\"],\r\n                    \"Resource\": \"*\"\r\n                }]\r\n              }\r\n            }]\r\n          }\r\n        }    \r\n      },\r\n     \r\n      \"Outputs\" : {\r\n        \"AMIID\" : {\r\n          \"Description\": \"The Amazon EC2 instance AMI ID.\",\r\n          \"Value\" : { \"Fn::GetAtt\": [ \"AMIInfo\", \"Id\" ] }\r\n        }\r\n      }  \r\n    }\r\n\r\n**Reference**\r\n\r\n[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-custom-resources-lambda-lookup-amiids.html][1]\r\n\r\n\r\n  [1]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-custom-resources-lambda-lookup-amiids.html\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Call that Lambda from within CloudFormation and use the information retrieved from the Lambda to create the EC2 instance with the latest AMI. ", "keywords": ["instance"]}, {"source": "Text", "text": "**/ // Map instance architectures to an AMI name pattern var archToAMINamePattern = { \"PV64\": \"amzn-ami-pv*x86_64-ebs\", \"HVM64\": \"amzn-ami-hvm*x86_64-gp2\", \"HVMG2\": \"amzn-ami-graphics-hvm*x86_64-ebs*\" }; var aws = require(\"aws-sdk\"); exports.handler = function(event, context) { console.log(\"REQUEST RECEIVED:\\n\" + JSON.stringify(event)); // For Delete requests, immediately send a SUCCESS response. if (event.RequestType == \"Delete\") { sendResponse(event, context, \"SUCCESS\"); return; } var responseStatus = \"FAILED\"; var responseData = {}; var ec2 = new aws.EC2({region: event.ResourceProperties.Region}); var describeImagesParams = { Filters: [{ Name: \"name\", Values: [archToAMINamePattern[event.ResourceProperties.Architecture]]}], Owners: [event.ResourceProperties.Architecture == \"HVMG2\" ? \"679593333241\" : \"amazon\"] }; // Get AMI IDs with the specified name pattern and owner ec2.describeImages(describeImagesParams, function(err, describeImagesResult) { if (err) { responseData = {Error: \"DescribeImages call failed\"}; console.log(responseData.Error + \":\\n\", err); } else { var images = describeImagesResult.Images; // Sort images by name in decscending order. ", "keywords": ["instance"]}, {"source": "Text", "text": "This template provisions an EC2 instance with an AMI ID that is based on the instance's type and region. ", "keywords": ["instance"]}, {"source": "Text", "text": "This template creates an Amazon EC2 instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "You will be billed for the AWS resources used if you create a stack from this template.\", \"Parameters\": { \"InstanceType\" : { \"Description\" : \"EC2 instance type\", \"Type\" : \"String\", \"Default\" : \"m1.small\", \"AllowedValues\" : [ \"t1.micro\", \"t2.micro\", \"t2.small\", \"t2.medium\", \"m1.small\", \"m1.medium\", \"m1.large\", \"m1.xlarge\", \"m2.xlarge\", \"m2.2xlarge\", \"m2.4xlarge\", \"m3.medium\", \"m3.large\", \"m3.xlarge\", \"m3.2xlarge\", \"c1.medium\", \"c1.xlarge\", \"c3.large\", \"c3.xlarge\", \"c3.2xlarge\", \"c3.4xlarge\", \"c3.8xlarge\", \"c4.large\", \"c4.xlarge\", \"c4.2xlarge\", \"c4.4xlarge\", \"c4.8xlarge\", \"g2.2xlarge\", \"r3.large\", \"r3.xlarge\", \"r3.2xlarge\", \"r3.4xlarge\", \"r3.8xlarge\", \"i2.xlarge\", \"i2.2xlarge\", \"i2.4xlarge\", \"i2.8xlarge\", \"d2.xlarge\", \"d2.2xlarge\", \"d2.4xlarge\", \"d2.8xlarge\", \"hi1.4xlarge\", \"hs1.8xlarge\", \"cr1.8xlarge\", \"cc2.8xlarge\", \"cg1.4xlarge\"], \"ConstraintDescription\" : \"Must be a valid EC2 instance type.\" }, \"ModuleName\" : { \"Description\" : \"The name of the JavaScript file\", \"Type\" : \"String\", \"Default\" : \"amilookup\" ", "keywords": ["bill", "instance"]}, {"source": "Text", "text": "} } }, \"Resources\" : { \"SampleInstance\": { \"Type\": \"AWS::EC2::Instance\", \"Properties\": { \"InstanceType\" : { \"Ref\" : \"InstanceType\" ", "keywords": ["instance"]}, {"source": "Text", "text": "}] } } }, \"Outputs\" : { \"AMIID\" : { \"Description\": \"The Amazon EC2 instance AMI ID.\", \"Value\" : { \"Fn::GetAtt\": [ \"AMIInfo\", \"Id\" ] } } } } **Reference** [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-custom-resources-lambda-lookup-amiids.html][1] [1]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/walkthrough-custom-resources-lambda-lookup-amiids.html", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "Call that Lambda from within CloudFormation and use the information retrieved from the Lambda to create the EC2 instance with the latest AMI. ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "The problem is the Image ID of RHEL image is changing all the time on AWS. ", "keywords": ["change"]}]}