{"Id": "55026973", "PostTypeId": "1", "CreationDate": "2019-03-06T15:43:53.047", "Score": "1", "ViewCount": "932", "Body": "<p>Our problem seems very basic and I would expect common.</p>\n\n<p>We have tags that must always be applied (for billing).  However, the tag values are only known at the time the stack is deployed...  We don't know what the tag values will be when developing the stack, or when creating the product in the Service Catalog...  </p>\n\n<p>We don't want to wait until AFTER the resource is deployed to discover the tag is missing, so as cool as AWS config may be, we don't want to rely on its rules if we don't have to.</p>\n\n<p>So things like Tag Options don't work, because it appears that they expect we know the tag value months prior to some deployment (which isn't the case.)</p>\n\n<p>Is there any way to mandate tags be used for a cloudformation template when it is deployed?  Better yet, can we have service catalog query for a tag value when deploying?  Tags like \"system\" or \"project\", for instance, come and go over time and are not known up-front for many types of cloudformation templates we develop.</p>\n\n<p>Isn't this a common scenario?  </p>\n\n<p>I am worried that I am missing something very, very simple and basic which mandates tags be used up-front, but I can't seem to figure out what.  Thank you in advance.  I really did Google a lot before asking, without finding a satisfying answer.</p>\n", "OwnerUserId": "10480074", "LastActivityDate": "2019-03-06T21:56:47.547", "Title": "AWS CloudFormation & Service Catalog - Can I require tags with user values?", "Tags": "|amazon-web-services|aws-cloudformation|aws-service-catalog|", "AnswerCount": "1", "CommentCount": "0", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "193042224", "PostHistoryTypeId": "2", "PostId": "55026973", "RevisionGUID": "1e53afbd-f42e-4a92-81d2-2622f67b04d7", "CreationDate": "2019-03-06T15:43:53.047", "UserId": "10480074", "Text": "Our problem seems very basic and I would expect common.\r\n\r\nWe have tags that must always be applied (for billing).  However, the tag values are only known at the time the stack is deployed...  We don't know what the tag values will be when developing the stack, or when creating the product in the Service Catalog...  \r\n\r\nWe don't want to wait until AFTER the resource is deployed to discover the tag is missing, so as cool as AWS config may be, we don't want to rely on its rules if we don't have to.\r\n\r\nSo things like Tag Options don't work, because it appears that they expect we know the tag value months prior to some deployment (which isn't the case.)\r\n\r\nIs there any way to mandate tags be used for a cloudformation template when it is deployed?  Better yet, can we have service catalog query for a tag value when deploying?  Tags like \"system\" or \"project\", for instance, come and go over time and are not known up-front for many types of cloudformation templates we develop.\r\n\r\nIsn't this a common scenario?  \r\n\r\nI am worried that I am missing something very, very simple and basic which mandates tags be used up-front, but I can't seem to figure out what.  Thank you in advance.  I really did Google a lot before asking, without finding a satisfying answer.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "We have tags that must always be applied (for billing). ", "keywords": ["bill"]}, {"source": "Text", "text": "Tags like \"system\" or \"project\", for instance, come and go over time and are not known up-front for many types of cloudformation templates we develop. ", "keywords": ["instance"]}]}, {"Id": "193042225", "PostHistoryTypeId": "1", "PostId": "55026973", "RevisionGUID": "1e53afbd-f42e-4a92-81d2-2622f67b04d7", "CreationDate": "2019-03-06T15:43:53.047", "UserId": "10480074", "Text": "AWS CloudFormation & Service Catalog - Can I require tags with user values?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "193042226", "PostHistoryTypeId": "3", "PostId": "55026973", "RevisionGUID": "1e53afbd-f42e-4a92-81d2-2622f67b04d7", "CreationDate": "2019-03-06T15:43:53.047", "UserId": "10480074", "Text": "|amazon-web-services|aws-cloudformation|aws-service-catalog|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "55028954", "PostTypeId": "2", "ParentId": "55026973", "CreationDate": "2019-03-06T17:28:32.567", "Score": "0", "Body": "<p>I don't know anything about service catalog but you can create <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html\" rel=\"nofollow noreferrer\">Conditions</a> and then use it to conditionally create (or even fail) your resource creation. <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-conditions.html\" rel=\"nofollow noreferrer\">Conditional Resource Creation</a> e.g.</p>\n\n<pre><code>Parameters:\n  ResourceTag:\n    Type: String\n    Default: ''\nConditions:\n  isTagEmpty:\n    !Equals [!Ref ResourceTag, '']\nResources:\n  DBInstance:\n    Type: AWS::RDS::DBInstance\n    Condition: isTagEmpty\n    Properties:\n      DBInstanceClass: &lt;DB Instance Type&gt;\n</code></pre>\n\n<p>Here RDS DB instance will only be created if tag is non-empty. But cloudformation will still return success.</p>\n\n<p>Alternatively, you can try &amp; fail the resource creation.</p>\n\n<pre><code>Resources:\n  DBInstance:\n    Type: AWS::RDS::DBInstance\n    Properties:\n      DBInstanceClass: !If [isTagEmpty, !Ref \"AWS::NoValue\", &lt;DB instance type&gt;]\n</code></pre>\n\n<p>I haven't tried this but it should fail as DB instance type will be invalid if tag is null.</p>\n\n<p>Edit: You can also create your stack using the <code>createStack</code> CFN API. Write some code to read &amp; validate the input (e.g. read from service catalog) &amp; call the <code>createStack</code> API. I am doing the same from <code>Lambda</code> (nodejs) reading some input from <code>Parameter Store</code>. Sample code -</p>\n\n<pre><code>module.exports.create = async (event, context, callback) =&gt; {\n\n let request = JSON.parse(event.body);\n\n let subnetids = await ssm.getParameter({\n     Name: '/vpc/public-subnets'\n }).promise();\n\n let securitygroups = await ssm.getParameter({\n     Name: '/vpc/lambda-security-group'\n }).promise();\n\n let params = {\n    StackName: request.customerName, /* required */\n    Capabilities: [\n        'CAPABILITY_IAM',\n        'CAPABILITY_NAMED_IAM',\n        'CAPABILITY_AUTO_EXPAND',\n        /* more items */\n    ],\n    ClientRequestToken: 'qwdfghjk3912',\n    EnableTerminationProtection: false,\n    OnFailure: request.onfailure,\n    Parameters: [\n        {\n            ParameterKey: \"SubnetIds\",\n            ParameterValue: subnetids.Parameter.Value,\n        },\n        {\n            ParameterKey: 'SecurityGroupIds',\n            ParameterValue: securitygroups.Parameter.Value,\n        },\n        {\n            ParameterKey: 'OpsPoolArnList',\n            ParameterValue: request.userPoolList,\n        },\n        /* more items */\n    ],\n    TemplateURL: request.templateUrl,\n };\n\n cfn.config.region = request.region;\n\n let result = await cfn.createStack(params).promise();\n\n console.log(result);\n}\n</code></pre>\n\n<p><strong>Another option</strong>: add a <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html\" rel=\"nofollow noreferrer\">AWS Custom Resource</a> backed by Lambda. Check for tags in this section &amp; return failure if it doesn't satisfy the constraints. Make all other resource creation <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html\" rel=\"nofollow noreferrer\">depend on</a> this resource (so that they all create if your checks pass). Link also contains example. You will also have to add handling for stack update &amp; deletion (like a default success). I think this is your best bet as of now.</p>\n", "OwnerUserId": "8502552", "LastEditorUserId": "8502552", "LastEditDate": "2019-03-06T21:56:47.547", "LastActivityDate": "2019-03-06T21:56:47.547", "CommentCount": "3", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "96817611", "PostId": "55028954", "Score": "0", "Text": "That seems somewhat convoluted (I do like your try and fail option, btw) This seems convoluted, since I want no resources to attempt to be created unless the stack itself has been passed the proper tags.  I still think this should be simpler.  If an organization has a tagging standard, then we should be able to develop CloudFormation templates that require the tags (especially from AWS Service Catalog...)  Something seems strange given how important tags are to AWS resource groups, maintenance, management, control, billing, etc...  I am missing something here.", "CreationDate": "2019-03-06T21:36:35.423", "UserId": "10480074", "filtered-sentences": [{"source": "Text", "text": "Something seems strange given how important tags are to AWS resource groups, maintenance, management, control, billing, etc... ", "keywords": ["bill"]}]}, {"Id": "96818173", "PostId": "55028954", "Score": "0", "Text": "Added another option of `Cloudformation Custom Resource` to the answer.", "CreationDate": "2019-03-06T21:57:57.873", "UserId": "8502552", "filtered-sentences": []}, {"Id": "96819981", "PostId": "55028954", "Score": "0", "Text": "Unless I get a better answer, I will concur with you and utilize an AWS Custom Resource backed by Lambda.  I may wait a day and see if anyone else has an answer.  It seems like punishing someone who is trying to deploy the stack but \"forgot\" to enter tags that we only asked for in documentation.  If CloudFormation / Service Catalog never prompted for the tags, then it seems like \"entrapment\" for doing something wrong, instead of enabling them to do it right...  I know it is still not that hard to check and fail the deployments until the tags are added, but it is the principle of the matter.", "CreationDate": "2019-03-06T23:20:48.053", "UserId": "10480074", "filtered-sentences": []}], "history": [{"Id": "193065666", "PostHistoryTypeId": "5", "PostId": "55028954", "RevisionGUID": "e22f0a75-277c-4689-a4ac-e3df352101d2", "CreationDate": "2019-03-06T21:56:47.547", "UserId": "8502552", "Comment": "added 630 characters in body", "Text": "I don't know anything about service catalog but you can create [Conditions][1] and then use it to conditionally create (or even fail) your resource creation. [Conditional Resource Creation][2] e.g.\r\n\r\n    Parameters:\r\n      ResourceTag:\r\n        Type: String\r\n        Default: ''\r\n    Conditions:\r\n      isTagEmpty:\r\n        !Equals [!Ref ResourceTag, '']\r\n    Resources:\r\n      DBInstance:\r\n        Type: AWS::RDS::DBInstance\r\n        Condition: isTagEmpty\r\n        Properties:\r\n          DBInstanceClass: <DB Instance Type>\r\n\r\nHere RDS DB instance will only be created if tag is non-empty. But cloudformation will still return success.\r\n\r\nAlternatively, you can try & fail the resource creation.\r\n\r\n    Resources:\r\n      DBInstance:\r\n        Type: AWS::RDS::DBInstance\r\n        Properties:\r\n          DBInstanceClass: !If [isTagEmpty, !Ref \"AWS::NoValue\", <DB instance type>]\r\n\r\nI haven't tried this but it should fail as DB instance type will be invalid if tag is null.\r\n\r\nEdit: You can also create your stack using the `createStack` CFN API. Write some code to read & validate the input (e.g. read from service catalog) & call the `createStack` API. I am doing the same from `Lambda` (nodejs) reading some input from `Parameter Store`. Sample code -\r\n\r\n    module.exports.create = async (event, context, callback) => {\r\n\r\n     let request = JSON.parse(event.body);\r\n\r\n     let subnetids = await ssm.getParameter({\r\n         Name: '/vpc/public-subnets'\r\n     }).promise();\r\n\r\n     let securitygroups = await ssm.getParameter({\r\n         Name: '/vpc/lambda-security-group'\r\n     }).promise();\r\n\r\n     let params = {\r\n        StackName: request.customerName, /* required */\r\n        Capabilities: [\r\n            'CAPABILITY_IAM',\r\n            'CAPABILITY_NAMED_IAM',\r\n            'CAPABILITY_AUTO_EXPAND',\r\n            /* more items */\r\n        ],\r\n        ClientRequestToken: 'qwdfghjk3912',\r\n        EnableTerminationProtection: false,\r\n        OnFailure: request.onfailure,\r\n        Parameters: [\r\n            {\r\n                ParameterKey: \"SubnetIds\",\r\n                ParameterValue: subnetids.Parameter.Value,\r\n            },\r\n            {\r\n                ParameterKey: 'SecurityGroupIds',\r\n                ParameterValue: securitygroups.Parameter.Value,\r\n            },\r\n            {\r\n                ParameterKey: 'OpsPoolArnList',\r\n                ParameterValue: request.userPoolList,\r\n            },\r\n            /* more items */\r\n        ],\r\n        TemplateURL: request.templateUrl,\r\n     };\r\n\r\n     cfn.config.region = request.region;\r\n\r\n     let result = await cfn.createStack(params).promise();\r\n\r\n     console.log(result);\r\n    }\r\n\r\n**Another option**: add a [AWS Custom Resource][3] backed by Lambda. Check for tags in this section & return failure if it doesn't satisfy the constraints. Make all other resource creation [depend on][4] this resource (so that they all create if your checks pass). Link also contains example. You will also have to add handling for stack update & deletion (like a default success). I think this is your best bet as of now.\r\n\r\n\r\n  [1]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html\r\n  [2]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-conditions.html\r\n  [3]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html\r\n  [4]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I don't know anything about service catalog but you can create [Conditions][1] and then use it to conditionally create (or even fail) your resource creation. [Conditional Resource Creation][2] e.g. Parameters: ResourceTag: Type: String Default: '' Conditions: isTagEmpty: !Equals [!Ref ResourceTag, ''] Resources: DBInstance: Type: AWS::RDS::DBInstance Condition: isTagEmpty Properties: DBInstanceClass: Here RDS DB instance will only be created if tag is non-empty. ", "keywords": ["instance"]}, {"source": "Text", "text": "Resources: DBInstance: Type: AWS::RDS::DBInstance Properties: DBInstanceClass: !If [isTagEmpty, !Ref \"AWS::NoValue\", ] I haven't tried this but it should fail as DB instance type will be invalid if tag is null. ", "keywords": ["instance"]}]}, {"Id": "193050086", "PostHistoryTypeId": "2", "PostId": "55028954", "RevisionGUID": "16398f10-0abf-452a-bb95-0fb5d24f7a3c", "CreationDate": "2019-03-06T17:28:32.567", "UserId": "8502552", "Text": "You can create [Conditions][1] and then use it to conditionally create (or even fail) your resource creation. [Conditional Resource Creation][2] e.g.\r\n\r\n    Parameters:\r\n      ResourceTag:\r\n        Type: String\r\n        Default: ''\r\n    Conditions:\r\n      isTagEmpty:\r\n        !Equals [!Ref ResourceTag, '']\r\n    Resources:\r\n      DBInstance:\r\n        Type: AWS::RDS::DBInstance\r\n        Condition: isTagEmpty\r\n        Properties:\r\n          DBInstanceClass: <DB Instance Type>\r\n\r\nHere RDS DB instance will only be created if tag is non-empty. But cloudformation will still return success.\r\n\r\nAlternatively, you can try & fail the resource creation.\r\n\r\n    Resources:\r\n      DBInstance:\r\n        Type: AWS::RDS::DBInstance\r\n        Properties:\r\n          DBInstanceClass: !If [isTagEmpty, !Ref \"AWS::NoValue\", <DB instance type>]\r\n\r\nI haven't tried this but it should fail as DB instance type will be invalid if tag is null.\r\n\r\n  [1]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html\r\n  [2]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-conditions.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You can create [Conditions][1] and then use it to conditionally create (or even fail) your resource creation. [Conditional Resource Creation][2] e.g. Parameters: ResourceTag: Type: String Default: '' Conditions: isTagEmpty: !Equals [!Ref ResourceTag, ''] Resources: DBInstance: Type: AWS::RDS::DBInstance Condition: isTagEmpty Properties: DBInstanceClass: Here RDS DB instance will only be created if tag is non-empty. ", "keywords": ["instance"]}, {"source": "Text", "text": "Resources: DBInstance: Type: AWS::RDS::DBInstance Properties: DBInstanceClass: !If [isTagEmpty, !Ref \"AWS::NoValue\", ] I haven't tried this but it should fail as DB instance type will be invalid if tag is null. [1]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html [2]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-conditions.html", "keywords": ["instance"]}]}, {"Id": "193050619", "PostHistoryTypeId": "5", "PostId": "55028954", "RevisionGUID": "cb318344-1735-4f19-b131-ff3ef0415dd7", "CreationDate": "2019-03-06T17:35:51.380", "UserId": "8502552", "Comment": "added 1880 characters in body", "Text": "I don't know anything about service catalog but you can create [Conditions][1] and then use it to conditionally create (or even fail) your resource creation. [Conditional Resource Creation][2] e.g.\r\n\r\n    Parameters:\r\n      ResourceTag:\r\n        Type: String\r\n        Default: ''\r\n    Conditions:\r\n      isTagEmpty:\r\n        !Equals [!Ref ResourceTag, '']\r\n    Resources:\r\n      DBInstance:\r\n        Type: AWS::RDS::DBInstance\r\n        Condition: isTagEmpty\r\n        Properties:\r\n          DBInstanceClass: <DB Instance Type>\r\n\r\nHere RDS DB instance will only be created if tag is non-empty. But cloudformation will still return success.\r\n\r\nAlternatively, you can try & fail the resource creation.\r\n\r\n    Resources:\r\n      DBInstance:\r\n        Type: AWS::RDS::DBInstance\r\n        Properties:\r\n          DBInstanceClass: !If [isTagEmpty, !Ref \"AWS::NoValue\", <DB instance type>]\r\n\r\nI haven't tried this but it should fail as DB instance type will be invalid if tag is null.\r\n\r\nEdit: You can also create your stack using the `createStack` CFN API. Write some code to read & validate the input (e.g. read from service catalog) & call the `createStack` API. I am doing the same from `Lambda` (nodejs) reading some input from `Parameter Store`. Sample code -\r\n\r\n    module.exports.create = async (event, context, callback) => {\r\n\r\n     let request = JSON.parse(event.body);\r\n\r\n     let subnetids = await ssm.getParameter({\r\n         Name: '/vpc/public-subnets'\r\n     }).promise();\r\n\r\n     let securitygroups = await ssm.getParameter({\r\n         Name: '/vpc/lambda-security-group'\r\n     }).promise();\r\n\r\n     let params = {\r\n        StackName: request.customerName, /* required */\r\n        Capabilities: [\r\n            'CAPABILITY_IAM',\r\n            'CAPABILITY_NAMED_IAM',\r\n            'CAPABILITY_AUTO_EXPAND',\r\n            /* more items */\r\n        ],\r\n        ClientRequestToken: 'qwdfghjk3912',\r\n        EnableTerminationProtection: false,\r\n        OnFailure: request.onfailure,\r\n        Parameters: [\r\n            {\r\n                ParameterKey: \"SubnetIds\",\r\n                ParameterValue: subnetids.Parameter.Value,\r\n            },\r\n            {\r\n                ParameterKey: 'SecurityGroupIds',\r\n                ParameterValue: securitygroups.Parameter.Value,\r\n            },\r\n            {\r\n                ParameterKey: 'OpsPoolArnList',\r\n                ParameterValue: request.userPoolList,\r\n            },\r\n            /* more items */\r\n        ],\r\n        TemplateURL: request.templateUrl,\r\n     };\r\n\r\n     cfn.config.region = request.region;\r\n\r\n     let result = await cfn.createStack(params).promise();\r\n\r\n     console.log(result);\r\n    }\r\n\r\n  [1]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/conditions-section-structure.html\r\n  [2]: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-conditions.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I don't know anything about service catalog but you can create [Conditions][1] and then use it to conditionally create (or even fail) your resource creation. [Conditional Resource Creation][2] e.g. Parameters: ResourceTag: Type: String Default: '' Conditions: isTagEmpty: !Equals [!Ref ResourceTag, ''] Resources: DBInstance: Type: AWS::RDS::DBInstance Condition: isTagEmpty Properties: DBInstanceClass: Here RDS DB instance will only be created if tag is non-empty. ", "keywords": ["instance"]}, {"source": "Text", "text": "Resources: DBInstance: Type: AWS::RDS::DBInstance Properties: DBInstanceClass: !If [isTagEmpty, !Ref \"AWS::NoValue\", ] I haven't tried this but it should fail as DB instance type will be invalid if tag is null. ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "Conditional Resource Creation e.g. Here RDS DB instance will only be created if tag is non-empty. ", "keywords": ["instance"]}, {"source": "Body", "text": "I haven't tried this but it should fail as DB instance type will be invalid if tag is null. ", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "We have tags that must always be applied (for billing). ", "keywords": ["bill"]}, {"source": "Body", "text": "Tags like \"system\" or \"project\", for instance, come and go over time and are not known up-front for many types of cloudformation templates we develop. ", "keywords": ["instance"]}]}