{"Id": "11854772", "PostTypeId": "1", "AcceptedAnswerId": "12231747", "CreationDate": "2012-08-07T22:04:46.523", "Score": "110", "ViewCount": "72432", "Body": "<p>CloudFormation is a powerful AWS offering that allows the programmatic creation of AWS resource stacks, such as the <a href=\"https://s3.amazonaws.com/cloudformation-templates-us-east-1/vpc_multiple_subnets.template\" rel=\"noreferrer\">web tier of an application,</a> a <a href=\"https://s3.amazonaws.com/cloudformation-templates-us-east-1/cc2-spot-cluster.template\" rel=\"noreferrer\">high performance computing cluster,</a> or <a href=\"https://s3.amazonaws.com/cloudformation-templates-us-east-1/Rails_Multi_AZ.template\" rel=\"noreferrer\">an entire application stack,</a> with a single API call. It is immensely powerful. Using it is surely considered a good AWS practice, especially when it's combined with <a href=\"http://www.opscode.com/chef/\" rel=\"noreferrer\">Chef,</a> <a href=\"http://puppetlabs.com/\" rel=\"noreferrer\">Puppet,</a> or <a href=\"https://help.ubuntu.com/community/CloudInit\" rel=\"noreferrer\">cloud-init.</a> Debugging it drives me to vice.</p>\n\n<p>Take a production example: The stock <a href=\"https://mongodb-documentation.readthedocs.io/en/latest/ecosystem/tutorial/automate-deployment-with-cloudformation.html\" rel=\"noreferrer\">mongodb cluster templates</a> won't work for me. I don't particularly know why. I'm sure it's something simple as it almost always is. My problem isn't that I can't figure out what's wrong. It's that it takes the stack between 20 and 30 minutes to fail, and then another three or four minutes to delete, assuming it deletes the resources properly at all.</p>\n\n<p>What am I missing? I know about the <code>--disable-rollback</code> flag and use it like oxygen. I learned long ago to wrap exit messages with <code>cfn-signal</code> and to throw them like ballast off a sinking ship. How can I make the template debugging process faster, or am I stuck forever noticing my mistakes half an hour after I make them?</p>\n", "OwnerUserId": "877115", "LastEditorUserId": "880772", "LastEditDate": "2017-01-02T04:28:35.250", "LastActivityDate": "2024-04-03T04:39:31.783", "Title": "How can I quickly and effectively debug CloudFormation templates?", "Tags": "|amazon-web-services|aws-cloudformation|", "AnswerCount": "14", "CommentCount": "5", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "15768472", "PostId": "11854772", "Score": "4", "Text": "Even typos in the JSON sometimes don't get caught until 10+ minutes into the build process as it doesn't notice that a particular resource type doesn't have a particular attribute name until it tries to start that resource.", "CreationDate": "2012-08-07T22:28:39.120", "UserId": "111286", "filtered-sentences": []}, {"Id": "15781985", "PostId": "11854772", "Score": "1", "Text": "My favorites in no particular order: when you [switch resource contexts and encounter almost-but-not-quite-identical attributes,](http://stackoverflow.com/a/11838911/877115) forgetting to add an escaped quotation mark inside a user script declaration, and anything to do with VolumeAttachments, since they occasionally fail for no reason at all.", "CreationDate": "2012-08-08T12:07:46.477", "UserId": "877115", "filtered-sentences": []}, {"Id": "62892052", "PostId": "11854772", "Score": "3", "Text": "+1 for mentioning \"disabling auto-rollback\"--this was awesome for getting better error messages for substacks", "CreationDate": "2016-06-08T17:23:08.760", "UserId": "1750195", "filtered-sentences": []}, {"Id": "70407617", "PostId": "11854772", "Score": "1", "Text": "I've found that mistakes in policy segments will cause things like BucketPolicy to get stuck in CREATE stage forever - if something is stuck in CREATE start there.", "CreationDate": "2017-01-11T23:20:48.107", "UserId": "2639817", "filtered-sentences": [{"source": "Text", "text": "I've found that mistakes in policy segments will cause things like BucketPolicy to get stuck in CREATE stage forever - if something is stuck in CREATE start there.", "keywords": ["policy"]}]}, {"Id": "126666717", "PostId": "11854772", "Score": "0", "Text": "@Christopher could you please clarify your question by editing it to briefly explain the benefit of using `--disable-rollback` and `cfn-signal`?", "CreationDate": "2022-03-30T05:10:47.830", "UserId": "1549918", "filtered-sentences": []}], "history": [{"Id": "27713023", "PostHistoryTypeId": "2", "PostId": "11854772", "RevisionGUID": "9bb9a9d7-c363-4cb3-9b90-6a6a9a0571bd", "CreationDate": "2012-08-07T22:04:46.523", "UserId": "877115", "Text": "CloudFormation is a powerful AWS offering that allows the programmatic creation of AWS resource stacks, such as the [web tier of an application,](https://s3.amazonaws.com/cloudformation-templates-us-east-1/vpc_multiple_subnets.template) a [high performance computing cluster,](https://s3.amazonaws.com/cloudformation-templates-us-east-1/cc2-spot-cluster.template) or [an entire application stack,](https://s3.amazonaws.com/cloudformation-templates-us-east-1/Rails_Multi_AZ.template) with a single API call. It is immensely powerful. Using it is surely considered a good AWS practice, especially when it's combined with [Chef,](http://www.opscode.com/chef/) [Puppet,](http://puppetlabs.com/) or [cloud-init.](https://help.ubuntu.com/community/CloudInit) Debugging it drives me to vice.\r\n\r\nTake a production example: The stock [mongodb cluster templates](http://www.mongodb.org/display/DOCS/Automating+Deployment+with+CloudFormation) won't work for me. I don't particularly know why. I'm sure it's something simple as it almost always is. My problem isn't that I can't figure out what's wrong. It's that it takes the stack between 20 and 30 minutes to fail, and then another three or four minutes to delete, assuming it deletes the resources properly at all.\r\n\r\nWhat am I missing? I know about the `--disable-rollback` flag and use it like oxygen. I learned long ago to wrap exit messages with `cfn-signal` and to throw them like ballast off a sinking ship. How can I make the template debugging process faster, or am I stuck forever noticing my mistakes half an hour after I make them?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "CloudFormation is a powerful AWS offering that allows the programmatic creation of AWS resource stacks, such as the [web tier of an application,](https://s3.amazonaws.com/cloudformation-templates-us-east-1/vpc_multiple_subnets.template) a [high performance computing cluster,](https://s3.amazonaws.com/cloudformation-templates-us-east-1/cc2-spot-cluster.template) or [an entire application stack,](https://s3.amazonaws.com/cloudformation-templates-us-east-1/Rails_Multi_AZ.template) with a single API call. ", "keywords": ["cluster"]}, {"source": "Text", "text": "Take a production example: The stock [mongodb cluster templates](http://www.mongodb.org/display/DOCS/Automating+Deployment+with+CloudFormation) won't work for me. ", "keywords": ["cluster"]}]}, {"Id": "27713024", "PostHistoryTypeId": "1", "PostId": "11854772", "RevisionGUID": "9bb9a9d7-c363-4cb3-9b90-6a6a9a0571bd", "CreationDate": "2012-08-07T22:04:46.523", "UserId": "877115", "Text": "How can I quickly and effectively debug CloudFormation templates?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "27713025", "PostHistoryTypeId": "3", "PostId": "11854772", "RevisionGUID": "9bb9a9d7-c363-4cb3-9b90-6a6a9a0571bd", "CreationDate": "2012-08-07T22:04:46.523", "UserId": "877115", "Text": "|amazon-web-services|aws-cloudformation|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "135026915", "PostHistoryTypeId": "5", "PostId": "11854772", "RevisionGUID": "5ee53028-c149-4093-a0c7-7d5cd31ebfa8", "CreationDate": "2017-01-02T04:28:35.250", "UserId": "2518355", "Comment": "Update dead link using web.archive.org copy (using closest snapshot to date of original question)", "Text": "CloudFormation is a powerful AWS offering that allows the programmatic creation of AWS resource stacks, such as the [web tier of an application,](https://s3.amazonaws.com/cloudformation-templates-us-east-1/vpc_multiple_subnets.template) a [high performance computing cluster,](https://s3.amazonaws.com/cloudformation-templates-us-east-1/cc2-spot-cluster.template) or [an entire application stack,](https://s3.amazonaws.com/cloudformation-templates-us-east-1/Rails_Multi_AZ.template) with a single API call. It is immensely powerful. Using it is surely considered a good AWS practice, especially when it's combined with [Chef,](http://www.opscode.com/chef/) [Puppet,](http://puppetlabs.com/) or [cloud-init.](https://help.ubuntu.com/community/CloudInit) Debugging it drives me to vice.\r\n\r\nTake a production example: The stock [mongodb cluster templates](http://web.archive.org/web/20120805083244/http://www.mongodb.org/display/DOCS/Automating+Deployment+with+CloudFormation) won't work for me. I don't particularly know why. I'm sure it's something simple as it almost always is. My problem isn't that I can't figure out what's wrong. It's that it takes the stack between 20 and 30 minutes to fail, and then another three or four minutes to delete, assuming it deletes the resources properly at all.\r\n\r\nWhat am I missing? I know about the `--disable-rollback` flag and use it like oxygen. I learned long ago to wrap exit messages with `cfn-signal` and to throw them like ballast off a sinking ship. How can I make the template debugging process faster, or am I stuck forever noticing my mistakes half an hour after I make them?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "CloudFormation is a powerful AWS offering that allows the programmatic creation of AWS resource stacks, such as the [web tier of an application,](https://s3.amazonaws.com/cloudformation-templates-us-east-1/vpc_multiple_subnets.template) a [high performance computing cluster,](https://s3.amazonaws.com/cloudformation-templates-us-east-1/cc2-spot-cluster.template) or [an entire application stack,](https://s3.amazonaws.com/cloudformation-templates-us-east-1/Rails_Multi_AZ.template) with a single API call. ", "keywords": ["cluster"]}, {"source": "Text", "text": "Take a production example: The stock [mongodb cluster templates](http://web.archive.org/web/20120805083244/http://www.mongodb.org/display/DOCS/Automating+Deployment+with+CloudFormation) won't work for me. ", "keywords": ["cluster"]}]}, {"Id": "135026916", "PostHistoryTypeId": "24", "PostId": "11854772", "RevisionGUID": "5ee53028-c149-4093-a0c7-7d5cd31ebfa8", "CreationDate": "2017-01-02T04:28:35.250", "Comment": "Proposed by 2518355 approved by 5898312, -1 edit id of 2901088", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "135026917", "PostHistoryTypeId": "5", "PostId": "11854772", "RevisionGUID": "170a2480-6a60-445b-9264-b3c06bc47d97", "CreationDate": "2017-01-02T04:28:35.250", "UserId": "880772", "Comment": "Update link to current MongoDB docs", "Text": "CloudFormation is a powerful AWS offering that allows the programmatic creation of AWS resource stacks, such as the [web tier of an application,](https://s3.amazonaws.com/cloudformation-templates-us-east-1/vpc_multiple_subnets.template) a [high performance computing cluster,](https://s3.amazonaws.com/cloudformation-templates-us-east-1/cc2-spot-cluster.template) or [an entire application stack,](https://s3.amazonaws.com/cloudformation-templates-us-east-1/Rails_Multi_AZ.template) with a single API call. It is immensely powerful. Using it is surely considered a good AWS practice, especially when it's combined with [Chef,](http://www.opscode.com/chef/) [Puppet,](http://puppetlabs.com/) or [cloud-init.](https://help.ubuntu.com/community/CloudInit) Debugging it drives me to vice.\r\n\r\nTake a production example: The stock [mongodb cluster templates](https://mongodb-documentation.readthedocs.io/en/latest/ecosystem/tutorial/automate-deployment-with-cloudformation.html) won't work for me. I don't particularly know why. I'm sure it's something simple as it almost always is. My problem isn't that I can't figure out what's wrong. It's that it takes the stack between 20 and 30 minutes to fail, and then another three or four minutes to delete, assuming it deletes the resources properly at all.\r\n\r\nWhat am I missing? I know about the `--disable-rollback` flag and use it like oxygen. I learned long ago to wrap exit messages with `cfn-signal` and to throw them like ballast off a sinking ship. How can I make the template debugging process faster, or am I stuck forever noticing my mistakes half an hour after I make them?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "CloudFormation is a powerful AWS offering that allows the programmatic creation of AWS resource stacks, such as the [web tier of an application,](https://s3.amazonaws.com/cloudformation-templates-us-east-1/vpc_multiple_subnets.template) a [high performance computing cluster,](https://s3.amazonaws.com/cloudformation-templates-us-east-1/cc2-spot-cluster.template) or [an entire application stack,](https://s3.amazonaws.com/cloudformation-templates-us-east-1/Rails_Multi_AZ.template) with a single API call. ", "keywords": ["cluster"]}, {"source": "Text", "text": "Take a production example: The stock [mongodb cluster templates](https://mongodb-documentation.readthedocs.io/en/latest/ecosystem/tutorial/automate-deployment-with-cloudformation.html) won't work for me. ", "keywords": ["cluster"]}]}, {"Id": "211810890", "PostHistoryTypeId": "19", "PostId": "11854772", "RevisionGUID": "bbd81d70-562e-4346-bdc9-8385977fcc5e", "CreationDate": "2019-12-24T23:07:54.297", "UserId": "-1", "Text": "{\"Voters\":[{\"Id\":-1,\"DisplayName\":\"Community\"}]}", "filtered-sentences": []}], "answers": [{"Id": "44814051", "PostTypeId": "2", "ParentId": "11854772", "CreationDate": "2017-06-28T23:24:39.230", "Score": "4", "Body": "<p>For JetBrains IDEs (IntelliJ IDEA  PhpStorm  WebStorm  PyCharm  RubyMine  AppCode  CLion  Gogland  DataGrip  Rider Android Studio\n), there is at <a href=\"https://plugins.jetbrains.com/plugin/7371-aws-cloudformation\" rel=\"nofollow noreferrer\">AWS CloudFormation</a> plugin that supports deep checking of JSON and YAML CFN templates</p>\n", "OwnerUserId": "358224", "LastActivityDate": "2017-06-28T23:24:39.230", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "150429619", "PostHistoryTypeId": "2", "PostId": "44814051", "RevisionGUID": "03ed220e-3fc9-42f0-a721-b2026a7e1e56", "CreationDate": "2017-06-28T23:24:39.230", "UserId": "358224", "Text": "For JetBrains IDEs (IntelliJ IDEA  PhpStorm  WebStorm  PyCharm  RubyMine  AppCode  CLion  Gogland  DataGrip  Rider Android Studio\r\n), there is at [AWS CloudFormation][1] plugin that supports deep checking of JSON and YAML CFN templates\r\n\r\n\r\n  [1]: https://plugins.jetbrains.com/plugin/7371-aws-cloudformation", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "56536112", "PostTypeId": "2", "ParentId": "11854772", "CreationDate": "2019-06-11T03:36:15.950", "Score": "8", "Body": "<p><a href=\"https://github.com/aws-cloudformation/cfn-python-lint\" rel=\"nofollow noreferrer\">AWS CloudFormation linter</a> provides additional static analysis beyond <code>aws cloudformation validate-template</code></p>\n<p>It informs which resource types and instance types are unavailable in certain regions, validates property values against allowed values, catches circular resource dependencies, syntax errors, template limits, and much more</p>\n<p>Beyond the CLI, a popular mechanism to run the linter is installing an editor plugin like the <a href=\"https://marketplace.visualstudio.com/items?itemName=kddejong.vscode-cfn-lint\" rel=\"nofollow noreferrer\">Visual Studio Code extension</a> which runs every file save</p>\n<p>Other mechanisms like <a href=\"https://aws.amazon.com/blogs/mt/git-pre-commit-validation-of-aws-cloudformation-templates-with-cfn-lint/\" rel=\"nofollow noreferrer\">pre-commit Git hooks are described here</a></p>\n<p><a href=\"https://i.stack.imgur.com/Vf1Ju.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/Vf1Ju.png\" alt=\"Visual Studio Code extension example screenshot\" /></a></p>\n", "OwnerUserId": "4122849", "LastEditorUserId": "4122849", "LastEditDate": "2024-03-22T15:37:17.760", "LastActivityDate": "2024-03-22T15:37:17.760", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "199421359", "PostHistoryTypeId": "2", "PostId": "56536112", "RevisionGUID": "13cdc241-ce94-4b32-9e37-3948ce9444c0", "CreationDate": "2019-06-11T03:36:15.950", "UserId": "4122849", "Text": "The AWS CloudFormation linter, `cfn-python-lint`, provides additional static analysis beyond `aws cloudformation validate-template`:\r\n\r\nhttps://github.com/aws-cloudformation/cfn-python-lint/\r\n\r\nhttps://aws.amazon.com/blogs/mt/git-pre-commit-validation-of-aws-cloudformation-templates-with-cfn-lint/", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "207166143", "PostHistoryTypeId": "5", "PostId": "56536112", "RevisionGUID": "81d0df2d-90b4-44e9-b2fb-640c4839ed8c", "CreationDate": "2019-10-13T20:24:24.853", "UserId": "4122849", "Comment": "deleted 8 characters in body", "Text": "The AWS CloudFormation linter, [`cfn-lint`](https://github.com/aws-cloudformation/cfn-python-lint), provides additional static analysis beyond `aws cloudformation validate-template`:\r\n\r\nhttps://aws.amazon.com/blogs/mt/git-pre-commit-validation-of-aws-cloudformation-templates-with-cfn-lint/", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "207452046", "PostHistoryTypeId": "5", "PostId": "56536112", "RevisionGUID": "10bbaf38-6d22-4483-bbd5-02f34b29c866", "CreationDate": "2019-10-17T18:27:51.807", "UserId": "4122849", "Comment": "more details", "Text": "The [AWS CloudFormation linter](https://github.com/aws-cloudformation/cfn-python-lint) provides additional static analysis beyond `aws cloudformation validate-template`\r\n\r\nIt will inform you which resource types and instance types are unavailable in certain regions, validate property values against allowed values, catch circular resource dependencies, syntax errors, and much more\r\n\r\nIn addition to the CLI, one of the most popular mechanisms to remember to run the linter is installing an editor plugin like the [Visual Studio Code extension](https://marketplace.visualstudio.com/items?itemName=kddejong.vscode-cfn-lint) which runs on every file save\r\n\r\nOther mechanisms like [pre-commit Git hooks are described here](https://aws.amazon.com/blogs/mt/git-pre-commit-validation-of-aws-cloudformation-templates-with-cfn-lint/)\r\n\r\n[![Visual Studio Code extension example screenshot][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/Vf1Ju.png\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "It will inform you which resource types and instance types are unavailable in certain regions, validate property values against allowed values, catch circular resource dependencies, syntax errors, and much more ", "keywords": ["instance"]}]}, {"Id": "220975582", "PostHistoryTypeId": "5", "PostId": "56536112", "RevisionGUID": "3a3ef020-f69f-4fda-b426-91c8e91460ff", "CreationDate": "2020-05-06T15:40:01.003", "UserId": "4122849", "Comment": "adding information", "Text": "The [AWS CloudFormation linter](https://github.com/aws-cloudformation/cfn-python-lint) provides additional static analysis beyond `aws cloudformation validate-template`\r\n\r\nIt will inform you which resource types and instance types are unavailable in certain regions, validate property values against allowed values, catch circular resource dependencies, syntax errors, template limits, and much more\r\n\r\nIn addition to the CLI, one of the most popular mechanisms to remember to run the linter is installing an editor plugin like the [Visual Studio Code extension](https://marketplace.visualstudio.com/items?itemName=kddejong.vscode-cfn-lint) which runs on every file save\r\n\r\nOther mechanisms like [pre-commit Git hooks are described here](https://aws.amazon.com/blogs/mt/git-pre-commit-validation-of-aws-cloudformation-templates-with-cfn-lint/)\r\n\r\n[![Visual Studio Code extension example screenshot][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/Vf1Ju.png\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "It will inform you which resource types and instance types are unavailable in certain regions, validate property values against allowed values, catch circular resource dependencies, syntax errors, template limits, and much more ", "keywords": ["instance"]}]}, {"Id": "304589458", "PostHistoryTypeId": "5", "PostId": "56536112", "RevisionGUID": "1a709470-728d-4f5c-85ac-61d9a42ce345", "CreationDate": "2024-03-22T15:37:17.760", "UserId": "4122849", "Comment": "formatting", "Text": "[AWS CloudFormation linter](https://github.com/aws-cloudformation/cfn-python-lint) provides additional static analysis beyond `aws cloudformation validate-template`\r\n\r\nIt informs which resource types and instance types are unavailable in certain regions, validates property values against allowed values, catches circular resource dependencies, syntax errors, template limits, and much more\r\n\r\nBeyond the CLI, a popular mechanism to run the linter is installing an editor plugin like the [Visual Studio Code extension](https://marketplace.visualstudio.com/items?itemName=kddejong.vscode-cfn-lint) which runs every file save\r\n\r\nOther mechanisms like [pre-commit Git hooks are described here](https://aws.amazon.com/blogs/mt/git-pre-commit-validation-of-aws-cloudformation-templates-with-cfn-lint/)\r\n\r\n[![Visual Studio Code extension example screenshot][1]][1]\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/Vf1Ju.png\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "It informs which resource types and instance types are unavailable in certain regions, validates property values against allowed values, catches circular resource dependencies, syntax errors, template limits, and much more Beyond the CLI, a popular mechanism to run the linter is installing an editor plugin like the [Visual Studio Code extension](https://marketplace.visualstudio.com/items?itemName=kddejong.vscode-cfn-lint) which runs every file save Other mechanisms like [pre-commit Git hooks are described here](https://aws.amazon.com/blogs/mt/git-pre-commit-validation-of-aws-cloudformation-templates-with-cfn-lint/) [![Visual Studio Code extension example screenshot][1]][1] [1]: https://i.stack.imgur.com/Vf1Ju.png", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "It informs which resource types and instance types are unavailable in certain regions, validates property values against allowed values, catches circular resource dependencies, syntax errors, template limits, and much more Beyond the CLI, a popular mechanism to run the linter is installing an editor plugin like the Visual Studio Code extension which runs every file save Other mechanisms like pre-commit Git hooks are described here", "keywords": ["instance"]}]}, {"Id": "17595499", "PostTypeId": "2", "ParentId": "11854772", "CreationDate": "2013-07-11T14:02:39.097", "Score": "5", "Body": "<p>Late to the party but I might also add that it is worthwhile spending a bit of time configuring and learning your editor. I know that sounds laughably basic as an answer but try it.</p>\n\n<p>In my case, with vim, I performed much better once I took some time installing json syntax plugins, and also (finally) understood folding techniques to navigate large CF files easily. Mine now suggests typos (commas where they shouldn't be etc) and the color highlighting saves a lot of time giving clear visual clues.</p>\n\n<p>This might help mitigate syntax errors, but in-template logical errors are better fixed by other tools. Hopefully one day there will be a \"preview\" mode on CF.</p>\n", "OwnerUserId": "610498", "LastActivityDate": "2013-07-11T14:02:39.097", "CommentCount": "2", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "25621593", "PostId": "17595499", "Score": "2", "Text": "Not a laughable suggestion at all. I'm not sure I could code without syntax highlighting.", "CreationDate": "2013-07-11T21:19:35.430", "UserId": "877115", "filtered-sentences": []}, {"Id": "28421710", "PostId": "17595499", "Score": "2", "Text": "there is a preview for CFN that shows all resources you're about to create, and it will also tell you how much your stack will cost. I'm using the Java API, so I'm not sure that it's available on the CLI, but try this: [link](http://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_EstimateTemplateCost.html)", "CreationDate": "2013-10-06T08:06:57.827", "UserId": "1499142", "filtered-sentences": [{"source": "Text", "text": "there is a preview for CFN that shows all resources you're about to create, and it will also tell you how much your stack will cost. ", "keywords": ["cost"]}]}], "history": [{"Id": "43524912", "PostHistoryTypeId": "2", "PostId": "17595499", "RevisionGUID": "4dcc0db6-322c-4424-8fd9-574be88f82c8", "CreationDate": "2013-07-11T14:02:39.097", "UserId": "610498", "Text": "Late to the party but I might also add that it is worthwhile spending a bit of time configuring and learning your editor. I know that sounds laughably basic as an answer but try it.\r\n\r\nIn my case, with vim, I performed much better once I took some time installing json syntax plugins, and also (finally) understood folding techniques to navigate large CF files easily. Mine now suggests typos (commas where they shouldn't be etc) and the color highlighting saves a lot of time giving clear visual clues.\r\n\r\nThis might help mitigate syntax errors, but in-template logical errors are better fixed by other tools. Hopefully one day there will be a \"preview\" mode on CF.\r\n\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Hopefully one day there will be a \"preview\" mode on CF.", "keywords": ["billing mode"]}]}], "filtered-sentences": [{"source": "Body", "text": "Hopefully one day there will be a \"preview\" mode on CF.", "keywords": ["billing mode"]}]}, {"Id": "51758397", "PostTypeId": "2", "ParentId": "11854772", "CreationDate": "2018-08-09T03:29:42.930", "Score": "1", "Body": "<p>Please checkout my cloudformation validator at <a href=\"https://pypi.org/project/cloudformation-validator/\" rel=\"nofollow noreferrer\">https://pypi.org/project/cloudformation-validator/</a></p>\n\n<p>This will validate the schema and then validate again a list of rules, and allow for custom rules.  I also allows for easy integration with deployment tools.</p>\n", "OwnerUserId": "2658246", "LastActivityDate": "2018-08-09T03:29:42.930", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "179385154", "PostHistoryTypeId": "2", "PostId": "51758397", "RevisionGUID": "c8467b2e-2b80-4845-88d6-e5c8e672e6fc", "CreationDate": "2018-08-09T03:29:42.930", "UserId": "2658246", "Text": "Please checkout my cloudformation validator at https://pypi.org/project/cloudformation-validator/\r\n\r\nThis will validate the schema and then validate again a list of rules, and allow for custom rules.  I also allows for easy integration with deployment tools.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "33788922", "PostTypeId": "2", "ParentId": "11854772", "CreationDate": "2015-11-18T19:41:43.793", "Score": "0", "Body": "<p>You can also make use of the CloudFormation Designer available from amazon here: <a href=\"https://console.aws.amazon.com/cloudformation/designer/home?region=us-east-1\" rel=\"nofollow\">https://console.aws.amazon.com/cloudformation/designer/home?region=us-east-1</a></p>\n\n<p>Simply paste your template (JSON) on the \"Template\" pane and then click on the tick symbol to validate your template. Any errors will show up in the \"Error\" pane.</p>\n\n<p>Hope this helps.</p>\n", "OwnerUserId": "5578231", "LastActivityDate": "2015-11-18T19:41:43.793", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "104431988", "PostHistoryTypeId": "2", "PostId": "33788922", "RevisionGUID": "8dec77e1-669e-48bf-b3c0-9e1bde9a74b6", "CreationDate": "2015-11-18T19:41:43.793", "UserId": "5578231", "Text": "You can also make use of the CloudFormation Designer available from amazon here: https://console.aws.amazon.com/cloudformation/designer/home?region=us-east-1\r\n\r\nSimply paste your template (JSON) on the \"Template\" pane and then click on the tick symbol to validate your template. Any errors will show up in the \"Error\" pane.\r\n\r\nHope this helps.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "75386422", "PostTypeId": "2", "ParentId": "11854772", "CreationDate": "2023-02-08T13:22:14.257", "Score": "0", "Body": "<p>If you want a quick and easy way to validate multiple templates at once within a given path. Just use this python script I wrote :).</p>\n<p>Example use: <code>python cf-validator.py --templates_path=../../environment-stack/</code></p>\n<pre><code>import boto3\nimport botocore\nimport argparse\nimport sys\nimport glob, os\n\ndef cli_parms_setup(arguments):\n    &quot;&quot;&quot;Setups inputs for parms&quot;&quot;&quot;\n    parser = argparse.ArgumentParser(\n        description=__doc__,\n        formatter_class=argparse.RawDescriptionHelpFormatter)\n    parser.add_argument('--templates_path', required=True, dest='templates_path')\n    return parser.parse_args(arguments)\n\n\ndef get_template_file_names(templates_path):\n    &quot;&quot;&quot;Finds all yaml template within given path&quot;&quot;&quot;\n    template_file_names = []\n    for file in glob.glob(templates_path + &quot;/**/*.yaml&quot;, recursive=True):\n        template_file_names.append(file)\n    print(template_file_names)\n    return template_file_names\n\ndef cfn_validator(path, templates_to_vaildate):\n    &quot;&quot;&quot;Takes in list of templates to validate&quot;&quot;&quot;\n    client = boto3.client('cloudformation')\n    for yaml_template in templates_to_vaildate:\n        cwd = os.getcwd()\n        cf_template = open(cwd + path + yaml_template).read()\n        try:\n            client.validate_template(\n                TemplateBody=cf_template\n            )\n        except botocore.exceptions.ClientError as e:\n            print(&quot;botocore.exceptions.ClientError has occurred with template &quot; + yaml_template)\n            raise e\n\nif __name__ == '__main__':\n    cli_parms = cli_parms_setup(sys.argv[1:])\n    template_file_names = get_template_file_names(cli_parms.templates_path)\n    cfn_validator(cli_parms.templates_path,template_file_names)\n</code></pre>\n", "OwnerUserId": "10300327", "LastActivityDate": "2023-02-08T13:22:14.257", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "287685397", "PostHistoryTypeId": "2", "PostId": "75386422", "RevisionGUID": "26bef127-031f-43ea-9439-a74c89b5a6a4", "CreationDate": "2023-02-08T13:22:14.257", "UserId": "10300327", "Text": "If you want a quick and easy way to validate multiple templates at once within a given path. Just use this python script I wrote :).\r\n\r\nExample use: `python cf-validator.py --templates_path=../../environment-stack/`\r\n\r\n    import boto3\r\n    import botocore\r\n    import argparse\r\n    import sys\r\n    import glob, os\r\n    \r\n    def cli_parms_setup(arguments):\r\n        \"\"\"Setups inputs for parms\"\"\"\r\n        parser = argparse.ArgumentParser(\r\n            description=__doc__,\r\n            formatter_class=argparse.RawDescriptionHelpFormatter)\r\n        parser.add_argument('--templates_path', required=True, dest='templates_path')\r\n        return parser.parse_args(arguments)\r\n    \r\n    \r\n    def get_template_file_names(templates_path):\r\n        \"\"\"Finds all yaml template within given path\"\"\"\r\n        template_file_names = []\r\n        for file in glob.glob(templates_path + \"/**/*.yaml\", recursive=True):\r\n            template_file_names.append(file)\r\n        print(template_file_names)\r\n        return template_file_names\r\n    \r\n    def cfn_validator(path, templates_to_vaildate):\r\n        \"\"\"Takes in list of templates to validate\"\"\"\r\n        client = boto3.client('cloudformation')\r\n        for yaml_template in templates_to_vaildate:\r\n            cwd = os.getcwd()\r\n            cf_template = open(cwd + path + yaml_template).read()\r\n            try:\r\n                client.validate_template(\r\n                    TemplateBody=cf_template\r\n                )\r\n            except botocore.exceptions.ClientError as e:\r\n                print(\"botocore.exceptions.ClientError has occurred with template \" + yaml_template)\r\n                raise e\r\n    \r\n    if __name__ == '__main__':\r\n        cli_parms = cli_parms_setup(sys.argv[1:])\r\n        template_file_names = get_template_file_names(cli_parms.templates_path)\r\n        cfn_validator(cli_parms.templates_path,template_file_names)", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "12231747", "PostTypeId": "2", "ParentId": "11854772", "CreationDate": "2012-09-01T21:56:06.617", "Score": "54", "Body": "<p>Use the <a href=\"http://docs.aws.amazon.com/cli/latest/reference/cloudformation/validate-template.html\" rel=\"nofollow noreferrer\"><code>aws cloudformation validate-template</code></a> command in the AWS CLI tool.</p>\n", "OwnerUserId": "1506995", "LastEditorUserId": "126855", "LastEditDate": "2024-02-07T19:55:02.837", "LastActivityDate": "2024-02-07T19:55:02.837", "CommentCount": "8", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "29675385", "PostId": "12231747", "Score": "1", "Text": "This is also available in the unified cli http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-validate-template.html", "CreationDate": "2013-11-12T21:22:40.953", "UserId": "231760", "filtered-sentences": []}, {"Id": "43676784", "PostId": "12231747", "Score": "7", "Text": "By the way this is `aws cloudformation validate-template` in the new AWS CLI tools.", "CreationDate": "2014-12-23T21:07:25.077", "UserId": "877115", "filtered-sentences": []}, {"Id": "74622006", "PostId": "12231747", "Score": "9", "Text": "For anyone coming across this question in 2017+, this is now `aws cloudformation validate-template`, and it only validates whether your template is valid JSON or YAML, not whether your keys and values are correct (for example doesn't check for typos in keys).", "CreationDate": "2017-05-04T18:55:58.360", "UserId": "755934", "filtered-sentences": []}, {"Id": "101979357", "PostId": "12231747", "Score": "1", "Text": "For some reason it seems to ignore the line-length, e.g. `Property validation failure: [Length of value {XYZ} for property {/RepositoryDescription} is greater than maximum allowed length {100}]`. According the `validate-template` command this was not an issue, but the UI returns this error.", "CreationDate": "2019-09-03T12:52:53.537", "UserId": "2777965", "filtered-sentences": []}, {"Id": "104636041", "PostId": "12231747", "Score": "3", "Text": "If this tool does only file format validation isn't; [jsonlint](https://jsonlint.com/) or [yamllint](http://www.yamllint.com/) sufficient enough? As well this tool has the limitation of file size of 51,200 bytes.", "CreationDate": "2019-12-06T08:44:51.423", "UserId": "384342", "filtered-sentences": []}, {"Id": "124353270", "PostId": "12231747", "Score": "0", "Text": "Didn't realise you needed valid credentials to use this command... Any alternatives?", "CreationDate": "2021-12-14T10:48:43.823", "UserId": "4400812", "filtered-sentences": []}, {"Id": "128751097", "PostId": "12231747", "Score": "0", "Text": "If using this dont forget to format your file path correctly as ` --template-body file://`.", "CreationDate": "2022-07-07T08:32:14.207", "UserId": "6390368", "filtered-sentences": []}, {"Id": "137434694", "PostId": "12231747", "Score": "0", "Text": "As of February 2024, it is no longer true that this command \"only checks for valid JSON\" - it does actual verification.", "CreationDate": "2024-02-07T19:55:09.657", "UserId": "126855", "filtered-sentences": []}], "history": [{"Id": "28706315", "PostHistoryTypeId": "2", "PostId": "12231747", "RevisionGUID": "c257e881-bfe3-4ee3-baf5-38706853877b", "CreationDate": "2012-09-01T21:56:06.617", "UserId": "1506995", "Text": "Try AWS cloudformation CLI tool http://aws.amazon.com/developertools/2555753788650372 .\r\n\r\nI use cfn-validate-template and it saves me a lot of time.\r\n\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "150475391", "PostHistoryTypeId": "5", "PostId": "12231747", "RevisionGUID": "57e8b6b4-3569-40c8-87ac-f4f8e84259a3", "CreationDate": "2017-06-29T12:57:55.110", "UserId": "358224", "Comment": "Rewrite to current state of the AWS CLI tool. Old reference and link doesn't make sense now.", "Text": "Use the [`aws cloudformation validate-template`][1] command in the AWS CLI tool\r\n\r\n\r\n  [1]: http://docs.aws.amazon.com/cli/latest/reference/cloudformation/validate-template.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "150475392", "PostHistoryTypeId": "24", "PostId": "12231747", "RevisionGUID": "57e8b6b4-3569-40c8-87ac-f4f8e84259a3", "CreationDate": "2017-06-29T12:57:55.110", "Comment": "Proposed by 358224 approved by 2796058, 796103 edit id of 3161463", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "192487232", "PostHistoryTypeId": "5", "PostId": "12231747", "RevisionGUID": "7f6f48be-54ec-4dc7-95e9-ce9ec6a84fbb", "CreationDate": "2019-02-26T20:50:51.613", "UserId": "-1", "Comment": "JSON or YAML validation only", "Text": "Use the [`aws cloudformation validate-template`][1] command in the AWS CLI tool. It only validates whether your template is valid JSON or YAML, not whether your keys and values are correct (for example doesn't check for typos in keys)\r\n\r\n\r\n  [1]: http://docs.aws.amazon.com/cli/latest/reference/cloudformation/validate-template.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "192487233", "PostHistoryTypeId": "24", "PostId": "12231747", "RevisionGUID": "7f6f48be-54ec-4dc7-95e9-ce9ec6a84fbb", "CreationDate": "2019-02-26T20:50:51.613", "Comment": "Proposed by anonymous approved by 1370986, 8718377 edit id of 4162670", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "303055803", "PostHistoryTypeId": "5", "PostId": "12231747", "RevisionGUID": "aba73f25-f3e3-4739-ac84-6a1522e4280f", "CreationDate": "2024-02-07T19:55:02.837", "UserId": "126855", "Comment": "as of February 2024, it is no longer true that this command \"only checks for valid JSON\" - it does actual verification", "Text": "Use the [`aws cloudformation validate-template`][1] command in the AWS CLI tool.\r\n\r\n\r\n  [1]: http://docs.aws.amazon.com/cli/latest/reference/cloudformation/validate-template.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "17598174", "PostTypeId": "2", "ParentId": "11854772", "CreationDate": "2013-07-11T15:59:45.130", "Score": "10", "Body": "<p>Have you looked at the AWS CloudFormation Template Editor that is included in the  <a href=\"https://aws.amazon.com/eclipse\">AWS Toolkit for Eclipse</a>? It has syntax highlighting, statement completion, and deployment to AWS CloudFormation.</p>\n", "OwnerUserId": "645112", "LastActivityDate": "2013-07-11T15:59:45.130", "CommentCount": "1", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "33053829", "PostId": "17598174", "Score": "7", "Text": "\"AWS Toolkit for Visual Studio\" has been indispensable for me.", "CreationDate": "2014-02-17T19:32:21.600", "UserId": "156140", "filtered-sentences": []}], "history": [{"Id": "43532184", "PostHistoryTypeId": "2", "PostId": "17598174", "RevisionGUID": "698f7d2d-8c78-4166-a387-7ba245c34f64", "CreationDate": "2013-07-11T15:59:45.130", "UserId": "645112", "Text": "Have you looked at the AWS CloudFormation Template Editor that is included in the  [AWS Toolkit for Eclipse][1]? It has syntax highlighting, statement completion, and deployment to AWS CloudFormation.\r\n\r\n\r\n  [1]: https://aws.amazon.com/eclipse", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "17604186", "PostTypeId": "2", "ParentId": "11854772", "CreationDate": "2013-07-11T21:54:54.457", "Score": "25", "Body": "<p>Another option, a year later, is to abstract these templates to a 3rd party library, such as <a href=\"https://github.com/cloudtools/troposphere\" rel=\"noreferrer\">troposphere</a>. That library constructs the JSON payload for you, and does a lot of validation along the way. This also solves the <em>\"Wow managing a 1000-line JSON file sure is sad\"</em> problem.</p>\n", "OwnerUserId": "877115", "LastActivityDate": "2013-07-11T21:54:54.457", "CommentCount": "1", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "35290282", "PostId": "17604186", "Score": "3", "Text": "\"Wow managing a 1000-line JSON file sure is sad\" - surely this is why nested stacks was created? ;-) Although I do concur - Troposphere is aws-some!", "CreationDate": "2014-04-15T16:30:02.160", "UserId": "1587675", "filtered-sentences": []}], "history": [{"Id": "43548818", "PostHistoryTypeId": "2", "PostId": "17604186", "RevisionGUID": "4f6cdd67-560f-4dca-8e65-dd98745a9c41", "CreationDate": "2013-07-11T21:54:54.457", "UserId": "877115", "Text": "Another option, a year later, is to abstract these templates to a 3rd party library, such as [troposphere](https://github.com/cloudtools/troposphere). That library constructs the JSON payload for you, and does a lot of validation along the way. This also solves the *\"Wow managing a 1000-line JSON file sure is sad\"* problem.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "44814027", "PostTypeId": "2", "ParentId": "11854772", "CreationDate": "2017-06-28T23:21:32.543", "Score": "2", "Body": "<p>In addition to the AWS CLI <a href=\"http://docs.aws.amazon.com/cli/latest/reference/cloudformation/validate-template.html\" rel=\"nofollow noreferrer\"><code>aws cloudformation validate-template</code></a> command there is a node-based <a href=\"https://github.com/Versent/cfn-check\" rel=\"nofollow noreferrer\">cfn-check</a> tool that does deeper validation.</p>\n", "OwnerUserId": "358224", "LastActivityDate": "2017-06-28T23:21:32.543", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "150429511", "PostHistoryTypeId": "2", "PostId": "44814027", "RevisionGUID": "0117c70f-ca2a-4384-89a9-c440a3acec75", "CreationDate": "2017-06-28T23:21:32.543", "UserId": "358224", "Text": "In addition to the AWS CLI [`aws cloudformation validate-template`][1] command there is a node-based [cfn-check][2] tool that does deeper validation.\r\n\r\n\r\n  [1]: http://docs.aws.amazon.com/cli/latest/reference/cloudformation/validate-template.html\r\n  [2]: https://github.com/Versent/cfn-check", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "41421184", "PostTypeId": "2", "ParentId": "11854772", "CreationDate": "2017-01-02T03:58:35.140", "Score": "14", "Body": "<blockquote>\n  <p>How can I make the template debugging process faster, or am I stuck forever noticing my mistakes half an hour after I make them?</p>\n</blockquote>\n\n<p>Here are a few best-practice suggestions, focusing specifically on improving the iteration speed of complex CloudFormation-template development:</p>\n\n<h3>Use CloudFormation tools to validate templates and stack updates</h3>\n\n<p>AWS has already outlined these in its own <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html\" rel=\"noreferrer\">Best Practices</a> document, so I won't repeat them:</p>\n\n<ul>\n<li><a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html#validate\" rel=\"noreferrer\">Validate Templates Before Using Them</a></li>\n<li><a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html#cfn-best-practices-changesets\" rel=\"noreferrer\">Create Change Sets Before Updating Your Stacks</a></li>\n</ul>\n\n<p>The point of this step is to catch obvious syntax or logical errors before actually performing a Stack creation/update.</p>\n\n<h3>Test Resources in isolation</h3>\n\n<p>Before using any individual CloudFormation Resource in a complex Stack, make sure you thoroughly understand the full extent of that Resource's creation/update/delete behavior, including any limits on usage and typical startup/teardown times, by testing their behavior in smaller, standalone Stacks first.</p>\n\n<ul>\n<li>If you are developing or using any third-party Custom Resources, write unit tests using appropriate libraries for the language platform, to make sure the application logic behaves as expected across all use-cases.</li>\n<li>Be aware that the amount of time for an individual Resource to create/update/delete can vary widely between Resource Types, depending on the behavior of the underlying API calls. For example, a complex <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution.html\" rel=\"noreferrer\"><code>AWS::CloudFront::Distribution</code></a> resource can sometimes take <strong>30-60 minutes</strong> to create/update/delete, while an <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html\" rel=\"noreferrer\"><code>AWS::EC2::SecurityGroup</code></a> updates in seconds.</li>\n<li>Individual Resources may have bugs/issues/limitations in their implementation, which are much easier to debug and develop workarounds for when tested in isolation, rather than within a much larger Stack. Keep in mind limitations such as <a href=\"http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\" rel=\"noreferrer\">AWS Service Limits</a> depending on your individual AWS Account settings, or <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/\" rel=\"noreferrer\">Region Availability of services</a> depending on the Region within which you create your Stack.</li>\n</ul>\n\n<h3>Build complicated stacks in small increments</h3>\n\n<p>When performing a Stack creation/update, a failure in any single Resource will cause the Stack to rollback the entire set of Resource changes, which can unnecessarily destroy other successfully-created Resources and take a very long time when building a complicated stack with a long dependency-graph of associated Resources.</p>\n\n<p>The solution to this is to build your Stack incrementally in smaller Update batches, adding Resources one (or a few) at a time. This way, if/when a failure occurs in a resource creation/update, the rollback doesn't cause your entire Stack's resources to be destroyed, just the set of Resources changed in the latest Update.</p>\n\n<h3>Monitor the progress of stack updates</h3>\n\n<p>Be sure to <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-monitor-stack.html\" rel=\"noreferrer\">Monitor the Progress of your Stack Update</a> by viewing the stack's events while a creation/update is performed. This will be the starting-point for debugging further issues with individual resources.</p>\n", "OwnerUserId": "2518355", "LastActivityDate": "2017-01-02T03:58:35.140", "CommentCount": "1", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "85514814", "PostId": "41421184", "Score": "0", "Text": "About CloudFront and how long it takes, are you aware of anyway to have the stack be in completed state, without waiting, i want to get the outputs, but dont need to wait for the distribution to be deployed in my case", "CreationDate": "2018-03-13T12:15:29.800", "UserId": "859027", "filtered-sentences": []}], "history": [{"Id": "135026208", "PostHistoryTypeId": "2", "PostId": "41421184", "RevisionGUID": "5ac480f2-a3c5-4f59-84b1-de040049b8c5", "CreationDate": "2017-01-02T03:58:35.140", "UserId": "2518355", "Text": "> How can I make the template debugging process faster, or am I stuck forever noticing my mistakes half an hour after I make them?\r\n\r\nHere are a few best-practice suggestions, focusing specifically on improving the iteration speed of complex CloudFormation-template development:\r\n\r\n### Use CloudFormation tools to validate templates and stack updates\r\n\r\nAWS has already outlined these in its own [Best Practices](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html) document, so I won't repeat them:\r\n\r\n- [Validate Templates Before Using Them](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html#validate)\r\n- [Create Change Sets Before Updating Your Stacks](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html#cfn-best-practices-changesets)\r\n\r\nThe point of this step is to catch obvious syntax or logical errors before actually performing a Stack creation/update.\r\n\r\n### Test Resources in isolation\r\n\r\nBefore using any individual CloudFormation Resource in a complex Stack, make sure you thoroughly understand the full extent of that Resource's creation/update/delete behavior, including any limits on usage and typical startup/teardown times, by testing their behavior in smaller, standalone Stacks first.\r\n\r\n- If you are developing or using any third-party Custom Resources, write unit tests using appropriate libraries for the language platform, to make sure the application logic behaves as expected across all use-cases.\r\n- Be aware that the amount of time for an individual Resource to create/update/delete can vary widely between Resource Types, depending on the behavior of the underlying API calls. For example, a complex [`AWS::CloudFront::Distribution`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution.html) resource can sometimes take **30-60 minutes** to create/update/delete, while an [`AWS::EC2::SecurityGroup`](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html) updates in seconds.\r\n- Individual Resources may have bugs/issues/limitations in their implementation, which are much easier to debug and develop workarounds for when tested in isolation, rather than within a much larger Stack. Keep in mind limitations such as [AWS Service Limits](http://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html) depending on your individual AWS Account settings, or [Region Availability of services](https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/) depending on the Region within which you create your Stack.\r\n\r\n### Build complicated stacks in small increments\r\n\r\nWhen performing a Stack creation/update, a failure in any single Resource will cause the Stack to rollback the entire set of Resource changes, which can unnecessarily destroy other successfully-created Resources and take a very long time when building a complicated stack with a long dependency-graph of associated Resources.\r\n\r\nThe solution to this is to build your Stack incrementally in smaller Update batches, adding Resources one (or a few) at a time. This way, if/when a failure occurs in a resource creation/update, the rollback doesn't cause your entire Stack's resources to be destroyed, just the set of Resources changed in the latest Update.\r\n\r\n### Monitor the progress of stack updates\r\n\r\nBe sure to [Monitor the Progress of your Stack Update](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-monitor-stack.html) by viewing the stack's events while a creation/update is performed. This will be the starting-point for debugging further issues with individual resources.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Here are a few best-practice suggestions, focusing specifically on improving the iteration speed of complex CloudFormation-template development: ### Use CloudFormation tools to validate templates and stack updates AWS has already outlined these in its own [Best Practices](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html) document, so I won't repeat them: - [Validate Templates Before Using Them](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html#validate) - [Create Change Sets Before Updating Your Stacks](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html#cfn-best-practices-changesets) ", "keywords": ["change"]}, {"source": "Text", "text": "The point of this step is to catch obvious syntax or logical errors before actually performing a Stack creation/update. ### Test Resources in isolation ", "keywords": ["test"]}, {"source": "Text", "text": "Before using any individual CloudFormation Resource in a complex Stack, make sure you thoroughly understand the full extent of that Resource's creation/update/delete behavior, including any limits on usage and typical startup/teardown times, by testing their behavior in smaller, standalone Stacks first. ", "keywords": ["test"]}, {"source": "Text", "text": "- If you are developing or using any third-party Custom Resources, write unit tests using appropriate libraries for the language platform, to make sure the application logic behaves as expected across all use-cases. ", "keywords": ["test"]}, {"source": "Text", "text": "- Individual Resources may have bugs/issues/limitations in their implementation, which are much easier to debug and develop workarounds for when tested in isolation, rather than within a much larger Stack. ", "keywords": ["test"]}, {"source": "Text", "text": "When performing a Stack creation/update, a failure in any single Resource will cause the Stack to rollback the entire set of Resource changes, which can unnecessarily destroy other successfully-created Resources and take a very long time when building a complicated stack with a long dependency-graph of associated Resources. ", "keywords": ["change"]}, {"source": "Text", "text": "This way, if/when a failure occurs in a resource creation/update, the rollback doesn't cause your entire Stack's resources to be destroyed, just the set of Resources changed in the latest Update. ", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "Here are a few best-practice suggestions, focusing specifically on improving the iteration speed of complex CloudFormation-template development: Use CloudFormation tools to validate templates and stack updates AWS has already outlined these in its own Best Practices document, so I won't repeat them: Validate Templates Before Using Them Create Change Sets Before Updating Your Stacks ", "keywords": ["change"]}, {"source": "Body", "text": "Test Resources in isolation ", "keywords": ["test"]}, {"source": "Body", "text": "Before using any individual CloudFormation Resource in a complex Stack, make sure you thoroughly understand the full extent of that Resource's creation/update/delete behavior, including any limits on usage and typical startup/teardown times, by testing their behavior in smaller, standalone Stacks first. ", "keywords": ["test"]}, {"source": "Body", "text": "If you are developing or using any third-party Custom Resources, write unit tests using appropriate libraries for the language platform, to make sure the application logic behaves as expected across all use-cases. ", "keywords": ["test"]}, {"source": "Body", "text": "Individual Resources may have bugs/issues/limitations in their implementation, which are much easier to debug and develop workarounds for when tested in isolation, rather than within a much larger Stack. ", "keywords": ["test"]}, {"source": "Body", "text": "When performing a Stack creation/update, a failure in any single Resource will cause the Stack to rollback the entire set of Resource changes, which can unnecessarily destroy other successfully-created Resources and take a very long time when building a complicated stack with a long dependency-graph of associated Resources. ", "keywords": ["change"]}, {"source": "Body", "text": "This way, if/when a failure occurs in a resource creation/update, the rollback doesn't cause your entire Stack's resources to be destroyed, just the set of Resources changed in the latest Update. ", "keywords": ["change"]}]}, {"Id": "29179658", "PostTypeId": "2", "ParentId": "11854772", "CreationDate": "2015-03-21T05:40:47.053", "Score": "1", "Body": "<p>A recent new feature added to Cloudformation this past December was the addition of <a href=\"https://blogs.aws.amazon.com/application-management/post/Tx3DV2UYG9SC38G/Using-the-New-CloudFormation-Parameter-Types\" rel=\"nofollow\">additional Parameter Types</a>. These new Types allow your templates to perform stronger data checking, and also can \"fail-fast\" when creating resources and nested Cloudformation stacks. You also have the ability to provide nicer human-readable custom error messages when invalid values are passed in using the new <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html\" rel=\"nofollow\">ConstraintDescription attribute</a>. </p>\n\n<p>The new types are especially helpful when dealing with various VPC resources. You can ensure that Parameters for your templates are the correct type, and are explicit about expecting a single value vs. a List. </p>\n\n<p>For example:  </p>\n\n<pre><code>\"Parameters\" : {\n  \"SingleGroup\": { \"Type\": \"AWS::EC2::SecurityGroup::Id\", ...},\n  \"GroupList\": {\"Type\": \"List&lt;AWS::EC2::SecurityGroup::Id&gt;\", ...}\n}\n</code></pre>\n", "OwnerUserId": "1305841", "LastActivityDate": "2015-03-21T05:40:47.053", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "86341619", "PostHistoryTypeId": "2", "PostId": "29179658", "RevisionGUID": "1a116e00-ccca-4c0e-8c9b-c5a433d4ceb0", "CreationDate": "2015-03-21T05:40:47.053", "UserId": "1305841", "Text": "A recent new feature added to Cloudformation this past December was the addition of [additional Parameter Types][1]. These new Types allow your templates to perform stronger data checking, and also can \"fail-fast\" when creating resources and nested Cloudformation stacks. You also have the ability to provide nicer human-readable custom error messages when invalid values are passed in using the new [ConstraintDescription attribute][2]. \r\n\r\nThe new types are especially helpful when dealing with various VPC resources. You can ensure that Parameters for your templates are the correct type, and are explicit about expecting a single value vs. a List. \r\n\r\nFor example:  \r\n\r\n    \"Parameters\" : {\r\n      \"SingleGroup\": { \"Type\": \"AWS::EC2::SecurityGroup::Id\", ...},\r\n      \"GroupList\": {\"Type\": \"List<AWS::EC2::SecurityGroup::Id>\", ...}\r\n    }\r\n\r\n\r\n  [1]: https://blogs.aws.amazon.com/application-management/post/Tx3DV2UYG9SC38G/Using-the-New-CloudFormation-Parameter-Types\r\n  [2]: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "A recent new feature added to Cloudformation this past December was the addition of [additional Parameter Types][1]. ", "keywords": ["feature"]}]}], "filtered-sentences": [{"source": "Body", "text": "A recent new feature added to Cloudformation this past December was the addition of additional Parameter Types. ", "keywords": ["feature"]}]}, {"Id": "26984802", "PostTypeId": "2", "ParentId": "11854772", "CreationDate": "2014-11-18T00:55:19.783", "Score": "2", "Body": "<p>If you are dealing with EC2 machines, then I would recommend you to login to the EC2 machine and tail the boot.log file (/var/log/boot.log in RHEL6/Centos). This file gets updated with all your shell activities (activities like: installation, downloading files, copying files etc.).</p>\n\n<p>Also, use editors like <a href=\"http://www.jsoneditoronline.org/\" rel=\"nofollow\">http://www.jsoneditoronline.org/</a> to get a TREE representation of your JSON. This helps you to check the order of JSON elements. </p>\n\n<p>And when you update files always use tools like <a href=\"http://www.git-tower.com/blog/diff-tools-mac/\" rel=\"nofollow\">http://www.git-tower.com/blog/diff-tools-mac/</a> or an actual version control system to ensure that you did not accidentally change something which might break your script.</p>\n", "OwnerUserId": "1139754", "LastActivityDate": "2014-11-18T00:55:19.783", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "77882952", "PostHistoryTypeId": "2", "PostId": "26984802", "RevisionGUID": "9493595c-7413-432d-a2b9-87e9d3fce89c", "CreationDate": "2014-11-18T00:55:19.783", "UserId": "1139754", "Text": "If you are dealing with EC2 machines, then I would recommend you to login to the EC2 machine and tail the boot.log file (/var/log/boot.log in RHEL6/Centos). This file gets updated with all your shell activities (activities like: installation, downloading files, copying files etc.).\r\n\r\nAlso, use editors like http://www.jsoneditoronline.org/ to get a TREE representation of your JSON. This helps you to check the order of JSON elements. \r\n\r\nAnd when you update files always use tools like http://www.git-tower.com/blog/diff-tools-mac/ or an actual version control system to ensure that you did not accidentally change something which might break your script.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "And when you update files always use tools like http://www.git-tower.com/blog/diff-tools-mac/ or an actual version control system to ensure that you did not accidentally change something which might break your script.", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "And when you update files always use tools like http://www.git-tower.com/blog/diff-tools-mac/ or an actual version control system to ensure that you did not accidentally change something which might break your script.", "keywords": ["change"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "CloudFormation is a powerful AWS offering that allows the programmatic creation of AWS resource stacks, such as the web tier of an application, a high performance computing cluster, or an entire application stack, with a single API call. ", "keywords": ["cluster"]}, {"source": "Body", "text": "Take a production example: The stock mongodb cluster templates won't work for me. ", "keywords": ["cluster"]}]}