{"Id": "42727967", "PostTypeId": "1", "AcceptedAnswerId": "42736183", "CreationDate": "2017-03-10T21:26:10.397", "Score": "1", "ViewCount": "785", "Body": "<p>I have a fairly straightforward CloudFormation template I've been working on, which originally only contained a cluster of load balanced EC2 web servers.  However, now I would like to be able for those web servers to send messages to a SQS message queue to then hand off work to some EC2 worker servers.</p>\n\n<p>Here's my design:</p>\n\n<p><a href=\"https://i.stack.imgur.com/aCbud.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/aCbud.jpg\" alt=\"enter image description here\"></a></p>\n\n<p>Here's my current JSON template:</p>\n\n<pre><code>{\n    \"AWSTemplateFormatVersion\": \"2010-09-09\",\n    \"Description\": \"Stack for MySite\",\n    \"Parameters\": {\n        \"KeyName\": {\n            \"Description\": \"Key Pair name\",\n            \"Type\": \"AWS::EC2::KeyPair::KeyName\",\n            \"Default\": \"mykey\"\n        },\n        \"SiteID\": {\n            \"Description\": \"A unique identifier for the site.\",\n            \"Type\": \"String\",\n            \"AllowedPattern\": \"[A-Za-z0-9\\\\-]+\",\n            \"ConstraintDescription\": \"Only letters, digits or dash allowed.\"\n        },\n        \"SiteTitle\": {\n            \"Description\": \"The title of the site.\",\n            \"Type\": \"String\",\n            \"Default\": \"MySite\"\n        },\n        \"AdminUsername\": {\n            \"Description\": \"A username for admin.\",\n            \"Type\": \"String\",\n            \"Default\": \"admin\"\n        },\n        \"AdminPassword\": {\n            \"Description\": \"A password for admin.\",\n            \"Type\": \"String\",\n            \"NoEcho\": \"true\"\n        },\n        \"AdminEMail\": {\n            \"Description\": \"The email address of the administrator.\",\n            \"Type\": \"String\"\n        }\n    },\n    \"Mappings\": {\n        \"EC2RegionMap\": {\n            \"ap-northeast-1\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-cbf90ecb\"},\n            \"ap-southeast-1\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-68d8e93a\"},\n            \"ap-southeast-2\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-fd9cecc7\"},\n            \"eu-central-1\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-a8221fb5\"},\n            \"eu-west-1\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-a10897d6\"},\n            \"sa-east-1\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-b52890a8\"},\n            \"us-east-1\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-1ecae776\"},\n            \"us-west-1\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-d114f295\"},\n            \"us-west-2\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-e7527ed7\"}\n        }\n    },\n    \"Resources\": {\n        \"VPC\": {\n            \"Type\": \"AWS::EC2::VPC\",\n            \"Properties\": {\n                \"CidrBlock\": \"172.31.0.0/16\",\n                \"EnableDnsHostnames\": \"true\"\n            }\n        },\n        \"InternetGateway\": {\n            \"Type\": \"AWS::EC2::InternetGateway\",\n            \"Properties\": {\n            }\n        },\n        \"VPCGatewayAttachment\": {\n            \"Type\": \"AWS::EC2::VPCGatewayAttachment\",\n            \"Properties\": {\n                \"VpcId\": {\"Ref\": \"VPC\"},\n                \"InternetGatewayId\": {\"Ref\": \"InternetGateway\"}\n            }\n        },\n        \"SubnetA\": {\n            \"Type\": \"AWS::EC2::Subnet\",\n            \"Properties\": {\n                \"AvailabilityZone\": {\"Fn::Select\": [\"0\", {\"Fn::GetAZs\": \"\"}]},\n                \"CidrBlock\": \"172.31.38.0/24\",\n                \"VpcId\": {\"Ref\": \"VPC\"}\n            }\n        },\n        \"SubnetB\": {\n            \"Type\": \"AWS::EC2::Subnet\",\n            \"Properties\": {\n                \"AvailabilityZone\": {\"Fn::Select\": [\"1\", {\"Fn::GetAZs\": \"\"}]},\n                \"CidrBlock\": \"172.31.37.0/24\",\n                \"VpcId\": {\"Ref\": \"VPC\"}\n            }\n        },\n        \"WebServerRouteTable\": {\n            \"Type\": \"AWS::EC2::RouteTable\",\n            \"Properties\": {\n                \"VpcId\": {\"Ref\": \"VPC\"}\n            }\n        },\n        \"RouteTableAssociationA\": {\n            \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\",\n            \"Properties\": {\n                \"SubnetId\": {\"Ref\": \"SubnetA\"},\n                \"RouteTableId\": {\"Ref\": \"WebServerRouteTable\"}\n            }\n        },\n        \"RouteTableAssociationB\": {\n            \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\",\n            \"Properties\": {\n                \"SubnetId\": {\"Ref\": \"SubnetB\"},\n                \"RouteTableId\": {\"Ref\": \"WebServerRouteTable\"}\n            }\n        },\n        \"RoutePublicNATToInternet\": {\n            \"Type\": \"AWS::EC2::Route\",\n            \"Properties\": {\n                \"RouteTableId\": {\"Ref\": \"WebServerRouteTable\"},\n                \"DestinationCidrBlock\": \"0.0.0.0/0\",\n                \"GatewayId\": {\"Ref\": \"InternetGateway\"}\n            },\n            \"DependsOn\": \"VPCGatewayAttachment\"\n        },\n        \"NetworkAcl\": {\n            \"Type\": \"AWS::EC2::NetworkAcl\",\n            \"Properties\": {\n                \"VpcId\": {\"Ref\": \"VPC\"}\n            }\n        },\n        \"SubnetNetworkAclAssociationA\": {\n            \"Type\": \"AWS::EC2::SubnetNetworkAclAssociation\",\n            \"Properties\": {\n                \"SubnetId\": {\"Ref\": \"SubnetA\"},\n                \"NetworkAclId\": {\"Ref\": \"NetworkAcl\"}\n            }\n        },\n        \"SubnetNetworkAclAssociationB\": {\n            \"Type\": \"AWS::EC2::SubnetNetworkAclAssociation\",\n            \"Properties\": {\n                \"SubnetId\": {\"Ref\": \"SubnetB\"},\n                \"NetworkAclId\": {\"Ref\": \"NetworkAcl\"}\n            }\n        },\n        \"NetworkAclEntryIngress\": {\n            \"Type\": \"AWS::EC2::NetworkAclEntry\",\n            \"Properties\": {\n                \"NetworkAclId\": {\"Ref\": \"NetworkAcl\"},\n                \"RuleNumber\": \"100\",\n                \"Protocol\": \"-1\",\n                \"RuleAction\": \"allow\",\n                \"Egress\": \"false\",\n                \"CidrBlock\": \"0.0.0.0/0\"\n            }\n        },\n        \"NetworkAclEntryEgress\": {\n            \"Type\": \"AWS::EC2::NetworkAclEntry\",\n            \"Properties\": {\n                \"NetworkAclId\": {\"Ref\": \"NetworkAcl\"},\n                \"RuleNumber\": \"100\",\n                \"Protocol\": \"-1\",\n                \"RuleAction\": \"allow\",\n                \"Egress\": \"true\",\n                \"CidrBlock\": \"0.0.0.0/0\"\n            }\n        },\n        \"LoadBalancer\": {\n            \"Type\": \"AWS::ElasticLoadBalancing::LoadBalancer\",\n            \"Properties\": {\n                \"Subnets\": [{\"Ref\": \"SubnetA\"}, {\"Ref\": \"SubnetB\"}],\n                \"LoadBalancerName\": {\"Ref\": \"SiteID\"},\n                \"Listeners\": [{\n                    \"InstancePort\": \"80\",\n                    \"InstanceProtocol\": \"HTTP\",\n                    \"LoadBalancerPort\": \"80\",\n                    \"Protocol\": \"HTTP\"\n                }],\n                \"HealthCheck\": {\n                    \"HealthyThreshold\": \"2\",\n                    \"Interval\": \"5\",\n                    \"Target\": \"TCP:80\",\n                    \"Timeout\": \"3\",\n                    \"UnhealthyThreshold\": \"2\"\n                },\n                \"SecurityGroups\": [{\"Ref\": \"LoadBalancerSecurityGroup\"}],\n                \"Scheme\": \"internet-facing\",\n                \"CrossZone\": \"true\"\n            },\n            \"DependsOn\": \"VPCGatewayAttachment\"\n        },\n        \"LoadBalancerSecurityGroup\": {\n            \"Type\": \"AWS::EC2::SecurityGroup\",\n            \"Properties\": {\n                \"GroupDescription\": \"mysite-elb-sg\",\n                \"VpcId\": {\"Ref\": \"VPC\"},\n                \"SecurityGroupIngress\": [{\n                    \"CidrIp\": \"0.0.0.0/0\",\n                    \"FromPort\": 80,\n                    \"IpProtocol\": \"tcp\",\n                    \"ToPort\": 80\n                }]\n            }\n        },\n        \"WebServerSecurityGroup\": {\n            \"Type\": \"AWS::EC2::SecurityGroup\",\n            \"Properties\": {\n                \"GroupDescription\": \"mysite-web-server-sg\",\n                \"VpcId\": {\"Ref\": \"VPC\"},\n                \"SecurityGroupIngress\": [{\n                    \"CidrIp\": \"0.0.0.0/0\",\n                    \"FromPort\": 22,\n                    \"IpProtocol\": \"tcp\",\n                    \"ToPort\": 22\n                }, {\n                    \"FromPort\": 80,\n                    \"IpProtocol\": \"tcp\",\n                    \"SourceSecurityGroupId\": {\"Ref\": \"LoadBalancerSecurityGroup\"},\n                    \"ToPort\": 80\n                }]\n            }\n        },\n        \"DatabaseSecurityGroup\": {\n            \"Type\": \"AWS::EC2::SecurityGroup\",\n            \"Properties\": {\n                \"GroupDescription\": \"mysite-db-sg\",\n                \"VpcId\": {\"Ref\": \"VPC\"},\n                \"SecurityGroupIngress\": [{\n                    \"IpProtocol\": \"tcp\",\n                    \"FromPort\": \"3306\",\n                    \"ToPort\": \"3306\",\n                    \"SourceSecurityGroupId\": {\"Ref\": \"WebServerSecurityGroup\"}\n                }]\n            }\n        },\n        \"Database\": {\n            \"Type\": \"AWS::RDS::DBInstance\",\n            \"Properties\": {\n                \"AllocatedStorage\": \"5\",\n                \"BackupRetentionPeriod\": \"0\",\n                \"DBInstanceClass\": \"db.t2.micro\",\n                \"DBInstanceIdentifier\": {\"Ref\": \"SiteID\"},\n                \"DBName\": \"quantsketch\",\n                \"Engine\": \"MySQL\",\n                \"MasterUsername\": \"mysite\",\n                \"MasterUserPassword\": \"mysite\",\n                \"VPCSecurityGroups\": [{\"Fn::GetAtt\": [\"DatabaseSecurityGroup\", \"GroupId\"]}],\n                \"DBSubnetGroupName\": {\"Ref\": \"DBSubnetGroup\"}\n            },\n            \"DependsOn\": \"VPCGatewayAttachment\"\n        },\n        \"DBSubnetGroup\" : {\n            \"Type\" : \"AWS::RDS::DBSubnetGroup\",\n            \"Properties\" : {\n                \"DBSubnetGroupDescription\" : \"DB subnet group\",\n                \"SubnetIds\": [{\"Ref\": \"SubnetA\"}, {\"Ref\": \"SubnetB\"}]\n            }\n        },\n        \"S3Bucket\": {\n            \"Type\": \"AWS::S3::Bucket\",\n            \"Properties\": {\n                \"BucketName\": {\"Ref\": \"SiteID\"},\n                \"WebsiteConfiguration\": {\n                    \"IndexDocument\": \"index.html\"\n                }\n            }\n        },\n        \"WebServerLaunchConfiguration\": {\n            \"Type\": \"AWS::AutoScaling::LaunchConfiguration\",\n            \"Metadata\": {\n                \"AWS::CloudFormation::Init\": {\n                    \"config\": {\n                        \"packages\": {\n                            \"yum\": {\n                                \"php\": [],\n                                \"php-mysql\": [],\n                                \"mysql\": [],\n                                \"httpd\": []\n                            }\n                        },\n                        \"sources\": {\n                            \"/var/www/html\": \"https://wordpress.org/wordpress-4.2.4.tar.gz\"\n                        },\n                        \"files\": {\n                            \"/tmp/config\": {\n                                \"content\": {\"Fn::Join\": [\"\", [\n                                    \"#!/bin/bash -ex\\n\",\n                                ]]},\n                                \"mode\": \"000500\",\n                                \"owner\": \"root\",\n                                \"group\": \"root\"\n                            }\n                        },\n                        \"commands\": {\n                            \"01_config\": {\n                                \"command\": \"/tmp/config\",\n                                \"cwd\": \"/var/www/html/wordpress\"\n                            }\n                        },\n                        \"services\": {\n                            \"sysvinit\": {\n                                \"httpd\": {\n                                    \"enabled\": \"true\",\n                                    \"ensureRunning\": \"true\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"Properties\": {\n                \"ImageId\": {\"Fn::FindInMap\": [\"EC2RegionMap\", {\"Ref\": \"AWS::Region\"}, \"AmazonLinuxAMIHVMEBSBacked64bit\"]},\n                \"InstanceType\": \"t2.micro\",\n                \"SecurityGroups\": [{\"Ref\": \"WebServerSecurityGroup\"}],\n                \"KeyName\": {\"Ref\": \"KeyName\"},\n                \"AssociatePublicIpAddress\": true,\n                \"UserData\": {\"Fn::Base64\": {\"Fn::Join\": [\"\", [\n                    \"#!/bin/bash -ex\\n\",\n                    \"yum update -y aws-cfn-bootstrap\\n\",\n                    \"/opt/aws/bin/cfn-init -v --stack \", {\"Ref\": \"AWS::StackName\"}, \" --resource WebServerLaunchConfiguration --region \", {\"Ref\": \"AWS::Region\"}, \"\\n\",\n                    \"/opt/aws/bin/cfn-signal -e $? --stack \", {\"Ref\": \"AWS::StackName\"}, \" --resource WebServerAutoScalingGroup --region \", {\"Ref\": \"AWS::Region\"}, \"\\n\"\n                ]]}}\n            }\n        },\n        \"WebServerAutoScalingGroup\": {\n            \"Type\": \"AWS::AutoScaling::AutoScalingGroup\",\n            \"Properties\": {\n                \"LoadBalancerNames\": [{\"Ref\": \"LoadBalancer\"}],\n                \"LaunchConfigurationName\": {\"Ref\": \"WebServerLaunchConfiguration\"},\n                \"MinSize\": \"2\",\n                \"MaxSize\": \"4\",\n                \"DesiredCapacity\": \"2\",\n                \"Cooldown\": \"60\",\n                \"HealthCheckGracePeriod\": \"120\",\n                \"HealthCheckType\": \"ELB\",\n                \"VPCZoneIdentifier\": [{\"Ref\": \"SubnetA\"}, {\"Ref\": \"SubnetB\"}],\n                \"Tags\": [{\n                    \"PropagateAtLaunch\": true,\n                    \"Value\": \"quantsketch\",\n                    \"Key\": \"Name\"\n                }]\n            },\n            \"CreationPolicy\": {\n                \"ResourceSignal\": {\n                    \"Timeout\": \"PT10M\"\n                }\n            },\n            \"DependsOn\": \"VPCGatewayAttachment\"\n        },\n        \"WebServerScalingUpPolicy\": {\n            \"Type\": \"AWS::AutoScaling::ScalingPolicy\",\n            \"Properties\": {\n                \"AdjustmentType\": \"ChangeInCapacity\",\n                \"AutoScalingGroupName\": {\"Ref\": \"WebServerAutoScalingGroup\"},\n                \"Cooldown\": \"60\",\n                \"ScalingAdjustment\": \"1\"\n            }\n        },\n        \"WebServerCPUHighAlarm\": {\n            \"Type\": \"AWS::CloudWatch::Alarm\",\n            \"Properties\": {\n                \"EvaluationPeriods\": \"1\",\n                \"Statistic\": \"Average\",\n                \"Threshold\": \"80\",\n                \"AlarmDescription\": \"Alarm if CPU load is high.\",\n                \"Period\": \"60\",\n                \"AlarmActions\": [{\"Ref\": \"WebServerScalingUpPolicy\"}],\n                \"Namespace\": \"AWS/EC2\",\n                \"Dimensions\": [{\n                    \"Name\": \"AutoScalingGroupName\",\n                    \"Value\": {\"Ref\": \"WebServerAutoScalingGroup\"}\n                }],\n                \"ComparisonOperator\": \"GreaterThanThreshold\",\n                \"MetricName\": \"CPUUtilization\"\n            }\n        },\n        \"WebServerScalingDownPolicy\": {\n            \"Type\": \"AWS::AutoScaling::ScalingPolicy\",\n            \"Properties\": {\n                \"AdjustmentType\": \"ChangeInCapacity\",\n                \"AutoScalingGroupName\": {\"Ref\": \"WebServerAutoScalingGroup\"},\n                \"Cooldown\": \"60\",\n                \"ScalingAdjustment\": \"-1\"\n            }\n        },\n        \"WebServerCPULowAlarm\": {\n            \"Type\": \"AWS::CloudWatch::Alarm\",\n            \"Properties\": {\n                \"EvaluationPeriods\": \"1\",\n                \"Statistic\": \"Average\",\n                \"Threshold\": \"25\",\n                \"AlarmDescription\": \"Alarm if CPU load is low.\",\n                \"Period\": \"60\",\n                \"AlarmActions\": [{\"Ref\": \"WebServerScalingDownPolicy\"}],\n                \"Namespace\": \"AWS/EC2\",\n                \"Dimensions\": [{\n                    \"Name\": \"AutoScalingGroupName\",\n                    \"Value\": {\"Ref\": \"WebServerAutoScalingGroup\"}\n                }],\n                \"ComparisonOperator\": \"LessThanThreshold\",\n                \"MetricName\": \"CPUUtilization\"\n            }\n        }\n    },\n    \"Outputs\": {\n        \"URL\": {\n            \"Value\": {\"Fn::Join\": [\"\", [\"http://\", {\"Fn::GetAtt\": [\"LoadBalancer\", \"DNSName\"]}, \"/quantsketch\"]]},\n            \"Description\": \"QuantSketch URL\"\n        }\n    }\n}\n</code></pre>\n\n<p>Unfortunately, I was unable to find any example templates that address this stack architecture, even though I would have expected it to be a common problem.</p>\n\n<p>How can I connect these two clusters so that the web servers can offload work onto the worker servers?  Any suggestions containing examples, tutorials, or anything else would go a long way.</p>\n", "OwnerUserId": "2870914", "LastActivityDate": "2017-03-11T14:21:15.517", "Title": "Send message from load balanced EC2 web servers to queued EC2 workers", "Tags": "|amazon-web-services|amazon-ec2|amazon-sqs|aws-cloudformation|amazon-elb|", "AnswerCount": "1", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "140353955", "PostHistoryTypeId": "2", "PostId": "42727967", "RevisionGUID": "1f077aa1-413d-4d38-b64c-8f56a93ad99e", "CreationDate": "2017-03-10T21:26:10.397", "UserId": "2870914", "Text": "I have a fairly straightforward CloudFormation template I've been working on, which originally only contained a cluster of load balanced EC2 web servers.  However, now I would like to be able for those web servers to send messages to a SQS message queue to then hand off work to some EC2 worker servers.\r\n\r\nHere's my design:\r\n\r\n[![enter image description here][1]][1]\r\n\r\nHere's my current JSON template:\r\n\r\n    {\r\n     \"AWSTemplateFormatVersion\": \"2010-09-09\",\r\n     \"Description\": \"Stack for MySite\",\r\n     \"Parameters\": {\r\n      \"KeyName\": {\r\n       \"Description\": \"Key Pair name\",\r\n       \"Type\": \"AWS::EC2::KeyPair::KeyName\",\r\n       \"Default\": \"mykey\"\r\n      },\r\n      \"SiteID\": {\r\n       \"Description\": \"A unique identifier for the site.\",\r\n       \"Type\": \"String\",\r\n       \"AllowedPattern\": \"[A-Za-z0-9\\\\-]+\",\r\n       \"ConstraintDescription\": \"Only letters, digits or dash allowed.\"\r\n      },\r\n      \"SiteTitle\": {\r\n       \"Description\": \"The title of the site.\",\r\n       \"Type\": \"String\",\r\n       \"Default\": \"MySite\"\r\n      },\r\n      \"AdminUsername\": {\r\n       \"Description\": \"A username for admin.\",\r\n       \"Type\": \"String\",\r\n       \"Default\": \"admin\"\r\n      },\r\n      \"AdminPassword\": {\r\n       \"Description\": \"A password for admin.\",\r\n       \"Type\": \"String\",\r\n       \"NoEcho\": \"true\"\r\n      },\r\n      \"AdminEMail\": {\r\n       \"Description\": \"The email address of the administrator.\",\r\n       \"Type\": \"String\"\r\n      }\r\n     },\r\n     \"Mappings\": {\r\n      \"EC2RegionMap\": {\r\n       \"ap-northeast-1\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-cbf90ecb\"},\r\n       \"ap-southeast-1\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-68d8e93a\"},\r\n       \"ap-southeast-2\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-fd9cecc7\"},\r\n       \"eu-central-1\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-a8221fb5\"},\r\n       \"eu-west-1\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-a10897d6\"},\r\n       \"sa-east-1\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-b52890a8\"},\r\n       \"us-east-1\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-1ecae776\"},\r\n       \"us-west-1\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-d114f295\"},\r\n       \"us-west-2\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-e7527ed7\"}\r\n      }\r\n     },\r\n     \"Resources\": {\r\n      \"VPC\": {\r\n       \"Type\": \"AWS::EC2::VPC\",\r\n       \"Properties\": {\r\n        \"CidrBlock\": \"172.31.0.0/16\",\r\n        \"EnableDnsHostnames\": \"true\"\r\n       }\r\n      },\r\n      \"InternetGateway\": {\r\n       \"Type\": \"AWS::EC2::InternetGateway\",\r\n       \"Properties\": {\r\n       }\r\n      },\r\n      \"VPCGatewayAttachment\": {\r\n       \"Type\": \"AWS::EC2::VPCGatewayAttachment\",\r\n       \"Properties\": {\r\n        \"VpcId\": {\"Ref\": \"VPC\"},\r\n        \"InternetGatewayId\": {\"Ref\": \"InternetGateway\"}\r\n       }\r\n      },\r\n      \"SubnetA\": {\r\n       \"Type\": \"AWS::EC2::Subnet\",\r\n       \"Properties\": {\r\n        \"AvailabilityZone\": {\"Fn::Select\": [\"0\", {\"Fn::GetAZs\": \"\"}]},\r\n        \"CidrBlock\": \"172.31.38.0/24\",\r\n        \"VpcId\": {\"Ref\": \"VPC\"}\r\n       }\r\n      },\r\n      \"SubnetB\": {\r\n       \"Type\": \"AWS::EC2::Subnet\",\r\n       \"Properties\": {\r\n        \"AvailabilityZone\": {\"Fn::Select\": [\"1\", {\"Fn::GetAZs\": \"\"}]},\r\n        \"CidrBlock\": \"172.31.37.0/24\",\r\n        \"VpcId\": {\"Ref\": \"VPC\"}\r\n       }\r\n      },\r\n      \"WebServerRouteTable\": {\r\n       \"Type\": \"AWS::EC2::RouteTable\",\r\n       \"Properties\": {\r\n        \"VpcId\": {\"Ref\": \"VPC\"}\r\n       }\r\n      },\r\n      \"RouteTableAssociationA\": {\r\n       \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\",\r\n       \"Properties\": {\r\n        \"SubnetId\": {\"Ref\": \"SubnetA\"},\r\n        \"RouteTableId\": {\"Ref\": \"WebServerRouteTable\"}\r\n       }\r\n      },\r\n      \"RouteTableAssociationB\": {\r\n       \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\",\r\n       \"Properties\": {\r\n        \"SubnetId\": {\"Ref\": \"SubnetB\"},\r\n        \"RouteTableId\": {\"Ref\": \"WebServerRouteTable\"}\r\n       }\r\n      },\r\n      \"RoutePublicNATToInternet\": {\r\n       \"Type\": \"AWS::EC2::Route\",\r\n       \"Properties\": {\r\n        \"RouteTableId\": {\"Ref\": \"WebServerRouteTable\"},\r\n        \"DestinationCidrBlock\": \"0.0.0.0/0\",\r\n        \"GatewayId\": {\"Ref\": \"InternetGateway\"}\r\n       },\r\n       \"DependsOn\": \"VPCGatewayAttachment\"\r\n      },\r\n      \"NetworkAcl\": {\r\n       \"Type\": \"AWS::EC2::NetworkAcl\",\r\n       \"Properties\": {\r\n        \"VpcId\": {\"Ref\": \"VPC\"}\r\n       }\r\n      },\r\n      \"SubnetNetworkAclAssociationA\": {\r\n       \"Type\": \"AWS::EC2::SubnetNetworkAclAssociation\",\r\n       \"Properties\": {\r\n        \"SubnetId\": {\"Ref\": \"SubnetA\"},\r\n        \"NetworkAclId\": {\"Ref\": \"NetworkAcl\"}\r\n       }\r\n      },\r\n      \"SubnetNetworkAclAssociationB\": {\r\n       \"Type\": \"AWS::EC2::SubnetNetworkAclAssociation\",\r\n       \"Properties\": {\r\n        \"SubnetId\": {\"Ref\": \"SubnetB\"},\r\n        \"NetworkAclId\": {\"Ref\": \"NetworkAcl\"}\r\n       }\r\n      },\r\n      \"NetworkAclEntryIngress\": {\r\n       \"Type\": \"AWS::EC2::NetworkAclEntry\",\r\n       \"Properties\": {\r\n        \"NetworkAclId\": {\"Ref\": \"NetworkAcl\"},\r\n        \"RuleNumber\": \"100\",\r\n        \"Protocol\": \"-1\",\r\n        \"RuleAction\": \"allow\",\r\n        \"Egress\": \"false\",\r\n        \"CidrBlock\": \"0.0.0.0/0\"\r\n       }\r\n      },\r\n      \"NetworkAclEntryEgress\": {\r\n       \"Type\": \"AWS::EC2::NetworkAclEntry\",\r\n       \"Properties\": {\r\n        \"NetworkAclId\": {\"Ref\": \"NetworkAcl\"},\r\n        \"RuleNumber\": \"100\",\r\n        \"Protocol\": \"-1\",\r\n        \"RuleAction\": \"allow\",\r\n        \"Egress\": \"true\",\r\n        \"CidrBlock\": \"0.0.0.0/0\"\r\n       }\r\n      },\r\n      \"LoadBalancer\": {\r\n       \"Type\": \"AWS::ElasticLoadBalancing::LoadBalancer\",\r\n       \"Properties\": {\r\n        \"Subnets\": [{\"Ref\": \"SubnetA\"}, {\"Ref\": \"SubnetB\"}],\r\n        \"LoadBalancerName\": {\"Ref\": \"SiteID\"},\r\n        \"Listeners\": [{\r\n         \"InstancePort\": \"80\",\r\n         \"InstanceProtocol\": \"HTTP\",\r\n         \"LoadBalancerPort\": \"80\",\r\n         \"Protocol\": \"HTTP\"\r\n        }],\r\n        \"HealthCheck\": {\r\n         \"HealthyThreshold\": \"2\",\r\n         \"Interval\": \"5\",\r\n         \"Target\": \"TCP:80\",\r\n         \"Timeout\": \"3\",\r\n         \"UnhealthyThreshold\": \"2\"\r\n        },\r\n        \"SecurityGroups\": [{\"Ref\": \"LoadBalancerSecurityGroup\"}],\r\n        \"Scheme\": \"internet-facing\",\r\n        \"CrossZone\": \"true\"\r\n       },\r\n       \"DependsOn\": \"VPCGatewayAttachment\"\r\n      },\r\n      \"LoadBalancerSecurityGroup\": {\r\n       \"Type\": \"AWS::EC2::SecurityGroup\",\r\n       \"Properties\": {\r\n        \"GroupDescription\": \"mysite-elb-sg\",\r\n        \"VpcId\": {\"Ref\": \"VPC\"},\r\n        \"SecurityGroupIngress\": [{\r\n         \"CidrIp\": \"0.0.0.0/0\",\r\n         \"FromPort\": 80,\r\n         \"IpProtocol\": \"tcp\",\r\n         \"ToPort\": 80\r\n        }]\r\n       }\r\n      },\r\n      \"WebServerSecurityGroup\": {\r\n       \"Type\": \"AWS::EC2::SecurityGroup\",\r\n       \"Properties\": {\r\n        \"GroupDescription\": \"mysite-web-server-sg\",\r\n        \"VpcId\": {\"Ref\": \"VPC\"},\r\n        \"SecurityGroupIngress\": [{\r\n         \"CidrIp\": \"0.0.0.0/0\",\r\n         \"FromPort\": 22,\r\n         \"IpProtocol\": \"tcp\",\r\n         \"ToPort\": 22\r\n        }, {\r\n         \"FromPort\": 80,\r\n         \"IpProtocol\": \"tcp\",\r\n         \"SourceSecurityGroupId\": {\"Ref\": \"LoadBalancerSecurityGroup\"},\r\n         \"ToPort\": 80\r\n        }]\r\n       }\r\n      },\r\n      \"DatabaseSecurityGroup\": {\r\n       \"Type\": \"AWS::EC2::SecurityGroup\",\r\n       \"Properties\": {\r\n        \"GroupDescription\": \"mysite-db-sg\",\r\n        \"VpcId\": {\"Ref\": \"VPC\"},\r\n        \"SecurityGroupIngress\": [{\r\n         \"IpProtocol\": \"tcp\",\r\n         \"FromPort\": \"3306\",\r\n         \"ToPort\": \"3306\",\r\n         \"SourceSecurityGroupId\": {\"Ref\": \"WebServerSecurityGroup\"}\r\n        }]\r\n       }\r\n      },\r\n      \"Database\": {\r\n       \"Type\": \"AWS::RDS::DBInstance\",\r\n       \"Properties\": {\r\n        \"AllocatedStorage\": \"5\",\r\n        \"BackupRetentionPeriod\": \"0\",\r\n        \"DBInstanceClass\": \"db.t2.micro\",\r\n        \"DBInstanceIdentifier\": {\"Ref\": \"SiteID\"},\r\n        \"DBName\": \"quantsketch\",\r\n        \"Engine\": \"MySQL\",\r\n        \"MasterUsername\": \"mysite\",\r\n        \"MasterUserPassword\": \"mysite\",\r\n        \"VPCSecurityGroups\": [{\"Fn::GetAtt\": [\"DatabaseSecurityGroup\", \"GroupId\"]}],\r\n        \"DBSubnetGroupName\": {\"Ref\": \"DBSubnetGroup\"}\r\n       },\r\n       \"DependsOn\": \"VPCGatewayAttachment\"\r\n      },\r\n      \"DBSubnetGroup\" : {\r\n       \"Type\" : \"AWS::RDS::DBSubnetGroup\",\r\n       \"Properties\" : {\r\n        \"DBSubnetGroupDescription\" : \"DB subnet group\",\r\n        \"SubnetIds\": [{\"Ref\": \"SubnetA\"}, {\"Ref\": \"SubnetB\"}]\r\n       }\r\n      },\r\n      \"S3Bucket\": {\r\n       \"Type\": \"AWS::S3::Bucket\",\r\n       \"Properties\": {\r\n        \"BucketName\": {\"Ref\": \"SiteID\"},\r\n        \"WebsiteConfiguration\": {\r\n         \"IndexDocument\": \"index.html\"\r\n        }\r\n       }\r\n      },\r\n      \"WebServerLaunchConfiguration\": {\r\n       \"Type\": \"AWS::AutoScaling::LaunchConfiguration\",\r\n       \"Metadata\": {\r\n        \"AWS::CloudFormation::Init\": {\r\n         \"config\": {\r\n          \"packages\": {\r\n           \"yum\": {\r\n            \"php\": [],\r\n            \"php-mysql\": [],\r\n            \"mysql\": [],\r\n            \"httpd\": []\r\n           }\r\n          },\r\n          \"sources\": {\r\n           \"/var/www/html\": \"https://wordpress.org/wordpress-4.2.4.tar.gz\"\r\n          },\r\n          \"files\": {\r\n           \"/tmp/config\": {\r\n            \"content\": {\"Fn::Join\": [\"\", [\r\n             \"#!/bin/bash -ex\\n\",\r\n            ]]},\r\n            \"mode\": \"000500\",\r\n            \"owner\": \"root\",\r\n            \"group\": \"root\"\r\n           }\r\n          },\r\n          \"commands\": {\r\n           \"01_config\": {\r\n            \"command\": \"/tmp/config\",\r\n            \"cwd\": \"/var/www/html/wordpress\"\r\n           }\r\n          },\r\n          \"services\": {\r\n           \"sysvinit\": {\r\n            \"httpd\": {\r\n             \"enabled\": \"true\",\r\n             \"ensureRunning\": \"true\"\r\n            }\r\n           }\r\n          }\r\n         }\r\n        }\r\n       },\r\n       \"Properties\": {\r\n        \"ImageId\": {\"Fn::FindInMap\": [\"EC2RegionMap\", {\"Ref\": \"AWS::Region\"}, \"AmazonLinuxAMIHVMEBSBacked64bit\"]},\r\n        \"InstanceType\": \"t2.micro\",\r\n        \"SecurityGroups\": [{\"Ref\": \"WebServerSecurityGroup\"}],\r\n        \"KeyName\": {\"Ref\": \"KeyName\"},\r\n        \"AssociatePublicIpAddress\": true,\r\n        \"UserData\": {\"Fn::Base64\": {\"Fn::Join\": [\"\", [\r\n         \"#!/bin/bash -ex\\n\",\r\n         \"yum update -y aws-cfn-bootstrap\\n\",\r\n         \"/opt/aws/bin/cfn-init -v --stack \", {\"Ref\": \"AWS::StackName\"}, \" --resource WebServerLaunchConfiguration --region \", {\"Ref\": \"AWS::Region\"}, \"\\n\",\r\n         \"/opt/aws/bin/cfn-signal -e $? --stack \", {\"Ref\": \"AWS::StackName\"}, \" --resource WebServerAutoScalingGroup --region \", {\"Ref\": \"AWS::Region\"}, \"\\n\"\r\n        ]]}}\r\n       }\r\n      },\r\n      \"WebServerAutoScalingGroup\": {\r\n       \"Type\": \"AWS::AutoScaling::AutoScalingGroup\",\r\n       \"Properties\": {\r\n        \"LoadBalancerNames\": [{\"Ref\": \"LoadBalancer\"}],\r\n        \"LaunchConfigurationName\": {\"Ref\": \"WebServerLaunchConfiguration\"},\r\n        \"MinSize\": \"2\",\r\n        \"MaxSize\": \"4\",\r\n        \"DesiredCapacity\": \"2\",\r\n        \"Cooldown\": \"60\",\r\n        \"HealthCheckGracePeriod\": \"120\",\r\n        \"HealthCheckType\": \"ELB\",\r\n        \"VPCZoneIdentifier\": [{\"Ref\": \"SubnetA\"}, {\"Ref\": \"SubnetB\"}],\r\n        \"Tags\": [{\r\n         \"PropagateAtLaunch\": true,\r\n         \"Value\": \"quantsketch\",\r\n         \"Key\": \"Name\"\r\n        }]\r\n       },\r\n       \"CreationPolicy\": {\r\n        \"ResourceSignal\": {\r\n         \"Timeout\": \"PT10M\"\r\n        }\r\n       },\r\n       \"DependsOn\": \"VPCGatewayAttachment\"\r\n      },\r\n      \"WebServerScalingUpPolicy\": {\r\n       \"Type\": \"AWS::AutoScaling::ScalingPolicy\",\r\n       \"Properties\": {\r\n        \"AdjustmentType\": \"ChangeInCapacity\",\r\n        \"AutoScalingGroupName\": {\"Ref\": \"WebServerAutoScalingGroup\"},\r\n        \"Cooldown\": \"60\",\r\n        \"ScalingAdjustment\": \"1\"\r\n       }\r\n      },\r\n      \"WebServerCPUHighAlarm\": {\r\n       \"Type\": \"AWS::CloudWatch::Alarm\",\r\n       \"Properties\": {\r\n        \"EvaluationPeriods\": \"1\",\r\n        \"Statistic\": \"Average\",\r\n        \"Threshold\": \"80\",\r\n        \"AlarmDescription\": \"Alarm if CPU load is high.\",\r\n        \"Period\": \"60\",\r\n        \"AlarmActions\": [{\"Ref\": \"WebServerScalingUpPolicy\"}],\r\n        \"Namespace\": \"AWS/EC2\",\r\n        \"Dimensions\": [{\r\n         \"Name\": \"AutoScalingGroupName\",\r\n         \"Value\": {\"Ref\": \"WebServerAutoScalingGroup\"}\r\n        }],\r\n        \"ComparisonOperator\": \"GreaterThanThreshold\",\r\n        \"MetricName\": \"CPUUtilization\"\r\n       }\r\n      },\r\n      \"WebServerScalingDownPolicy\": {\r\n       \"Type\": \"AWS::AutoScaling::ScalingPolicy\",\r\n       \"Properties\": {\r\n        \"AdjustmentType\": \"ChangeInCapacity\",\r\n        \"AutoScalingGroupName\": {\"Ref\": \"WebServerAutoScalingGroup\"},\r\n        \"Cooldown\": \"60\",\r\n        \"ScalingAdjustment\": \"-1\"\r\n       }\r\n      },\r\n      \"WebServerCPULowAlarm\": {\r\n       \"Type\": \"AWS::CloudWatch::Alarm\",\r\n       \"Properties\": {\r\n        \"EvaluationPeriods\": \"1\",\r\n        \"Statistic\": \"Average\",\r\n        \"Threshold\": \"25\",\r\n        \"AlarmDescription\": \"Alarm if CPU load is low.\",\r\n        \"Period\": \"60\",\r\n        \"AlarmActions\": [{\"Ref\": \"WebServerScalingDownPolicy\"}],\r\n        \"Namespace\": \"AWS/EC2\",\r\n        \"Dimensions\": [{\r\n         \"Name\": \"AutoScalingGroupName\",\r\n         \"Value\": {\"Ref\": \"WebServerAutoScalingGroup\"}\r\n        }],\r\n        \"ComparisonOperator\": \"LessThanThreshold\",\r\n        \"MetricName\": \"CPUUtilization\"\r\n       }\r\n      }\r\n     },\r\n     \"Outputs\": {\r\n      \"URL\": {\r\n       \"Value\": {\"Fn::Join\": [\"\", [\"http://\", {\"Fn::GetAtt\": [\"LoadBalancer\", \"DNSName\"]}, \"/quantsketch\"]]},\r\n       \"Description\": \"QuantSketch URL\"\r\n      }\r\n     }\r\n    }\r\n\r\n\r\nUnfortunately, I was unable to find any example templates that address this stack architecture, even though I would have expected it to be a common problem.\r\n\r\nHow can I connect these two clusters so that the web servers can offload work onto the worker servers?  Any suggestions containing examples, tutorials, or anything else would go a long way.\r\n\r\n  [1]: https://i.stack.imgur.com/aCbud.jpg", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "I have a fairly straightforward CloudFormation template I've been working on, which originally only contained a cluster of load balanced EC2 web servers. ", "keywords": ["cluster"]}, {"source": "Text", "text": "Here's my current JSON template: { \"AWSTemplateFormatVersion\": \"2010-09-09\", \"Description\": \"Stack for MySite\", \"Parameters\": { \"KeyName\": { \"Description\": \"Key Pair name\", \"Type\": \"AWS::EC2::KeyPair::KeyName\", \"Default\": \"mykey\" }, \"SiteID\": { \"Description\": \"A unique identifier for the site.\", \"Type\": \"String\", \"AllowedPattern\": \"[A-Za-z0-9\\\\-]+\", \"ConstraintDescription\": \"Only letters, digits or dash allowed.\" }, \"SiteTitle\": { \"Description\": \"The title of the site.\", \"Type\": \"String\", \"Default\": \"MySite\" }, \"AdminUsername\": { \"Description\": \"A username for admin.\", \"Type\": \"String\", \"Default\": \"admin\" }, \"AdminPassword\": { \"Description\": \"A password for admin.\", \"Type\": \"String\", \"NoEcho\": \"true\" }, \"AdminEMail\": { \"Description\": \"The email address of the administrator.\", \"Type\": \"String\" } }, \"Mappings\": { \"EC2RegionMap\": { \"ap-northeast-1\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-cbf90ecb\"}, \"ap-southeast-1\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-68d8e93a\"}, \"ap-southeast-2\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-fd9cecc7\"}, \"eu-central-1\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-a8221fb5\"}, \"eu-west-1\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-a10897d6\"}, \"sa-east-1\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-b52890a8\"}, \"us-east-1\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-1ecae776\"}, \"us-west-1\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-d114f295\"}, \"us-west-2\": {\"AmazonLinuxAMIHVMEBSBacked64bit\": \"ami-e7527ed7\"} } }, \"Resources\": { \"VPC\": { \"Type\": \"AWS::EC2::VPC\", \"Properties\": { \"CidrBlock\": \"172.31.0.0/16\", \"EnableDnsHostnames\": \"true\" } }, \"InternetGateway\": { \"Type\": \"AWS::EC2::InternetGateway\", \"Properties\": { } }, \"VPCGatewayAttachment\": { \"Type\": \"AWS::EC2::VPCGatewayAttachment\", \"Properties\": { \"VpcId\": {\"Ref\": \"VPC\"}, \"InternetGatewayId\": {\"Ref\": \"InternetGateway\"} } }, \"SubnetA\": { \"Type\": \"AWS::EC2::Subnet\", \"Properties\": { \"AvailabilityZone\": {\"Fn::Select\": [\"0\", {\"Fn::GetAZs\": \"\"}]}, \"CidrBlock\": \"172.31.38.0/24\", \"VpcId\": {\"Ref\": \"VPC\"} } }, \"SubnetB\": { \"Type\": \"AWS::EC2::Subnet\", \"Properties\": { \"AvailabilityZone\": {\"Fn::Select\": [\"1\", {\"Fn::GetAZs\": \"\"}]}, \"CidrBlock\": \"172.31.37.0/24\", \"VpcId\": {\"Ref\": \"VPC\"} } }, \"WebServerRouteTable\": { \"Type\": \"AWS::EC2::RouteTable\", \"Properties\": { \"VpcId\": {\"Ref\": \"VPC\"} } }, \"RouteTableAssociationA\": { \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\", \"Properties\": { \"SubnetId\": {\"Ref\": \"SubnetA\"}, \"RouteTableId\": {\"Ref\": \"WebServerRouteTable\"} } }, \"RouteTableAssociationB\": { \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\", \"Properties\": { \"SubnetId\": {\"Ref\": \"SubnetB\"}, \"RouteTableId\": {\"Ref\": \"WebServerRouteTable\"} } }, \"RoutePublicNATToInternet\": { \"Type\": \"AWS::EC2::Route\", \"Properties\": { \"RouteTableId\": {\"Ref\": \"WebServerRouteTable\"}, \"DestinationCidrBlock\": \"0.0.0.0/0\", \"GatewayId\": {\"Ref\": \"InternetGateway\"} }, \"DependsOn\": \"VPCGatewayAttachment\" }, \"NetworkAcl\": { \"Type\": \"AWS::EC2::NetworkAcl\", \"Properties\": { \"VpcId\": {\"Ref\": \"VPC\"} } }, \"SubnetNetworkAclAssociationA\": { \"Type\": \"AWS::EC2::SubnetNetworkAclAssociation\", \"Properties\": { \"SubnetId\": {\"Ref\": \"SubnetA\"}, \"NetworkAclId\": {\"Ref\": \"NetworkAcl\"} } }, \"SubnetNetworkAclAssociationB\": { \"Type\": \"AWS::EC2::SubnetNetworkAclAssociation\", \"Properties\": { \"SubnetId\": {\"Ref\": \"SubnetB\"}, \"NetworkAclId\": {\"Ref\": \"NetworkAcl\"} } }, \"NetworkAclEntryIngress\": { \"Type\": \"AWS::EC2::NetworkAclEntry\", \"Properties\": { \"NetworkAclId\": {\"Ref\": \"NetworkAcl\"}, \"RuleNumber\": \"100\", \"Protocol\": \"-1\", \"RuleAction\": \"allow\", \"Egress\": \"false\", \"CidrBlock\": \"0.0.0.0/0\" } }, \"NetworkAclEntryEgress\": { \"Type\": \"AWS::EC2::NetworkAclEntry\", \"Properties\": { \"NetworkAclId\": {\"Ref\": \"NetworkAcl\"}, \"RuleNumber\": \"100\", \"Protocol\": \"-1\", \"RuleAction\": \"allow\", \"Egress\": \"true\", \"CidrBlock\": \"0.0.0.0/0\" } }, \"LoadBalancer\": { \"Type\": \"AWS::ElasticLoadBalancing::LoadBalancer\", \"Properties\": { \"Subnets\": [{\"Ref\": \"SubnetA\"}, {\"Ref\": \"SubnetB\"}], \"LoadBalancerName\": {\"Ref\": \"SiteID\"}, \"Listeners\": [{ \"InstancePort\": \"80\", \"InstanceProtocol\": \"HTTP\", \"LoadBalancerPort\": \"80\", \"Protocol\": \"HTTP\" }], \"HealthCheck\": { \"HealthyThreshold\": \"2\", \"Interval\": \"5\", \"Target\": \"TCP:80\", \"Timeout\": \"3\", \"UnhealthyThreshold\": \"2\" }, \"SecurityGroups\": [{\"Ref\": \"LoadBalancerSecurityGroup\"}], \"Scheme\": \"internet-facing\", \"CrossZone\": \"true\" }, \"DependsOn\": \"VPCGatewayAttachment\" }, \"LoadBalancerSecurityGroup\": { \"Type\": \"AWS::EC2::SecurityGroup\", \"Properties\": { \"GroupDescription\": \"mysite-elb-sg\", \"VpcId\": {\"Ref\": \"VPC\"}, \"SecurityGroupIngress\": [{ \"CidrIp\": \"0.0.0.0/0\", \"FromPort\": 80, \"IpProtocol\": \"tcp\", \"ToPort\": 80 }] } }, \"WebServerSecurityGroup\": { \"Type\": \"AWS::EC2::SecurityGroup\", \"Properties\": { \"GroupDescription\": \"mysite-web-server-sg\", \"VpcId\": {\"Ref\": \"VPC\"}, \"SecurityGroupIngress\": [{ \"CidrIp\": \"0.0.0.0/0\", \"FromPort\": 22, \"IpProtocol\": \"tcp\", \"ToPort\": 22 }, { \"FromPort\": 80, \"IpProtocol\": \"tcp\", \"SourceSecurityGroupId\": {\"Ref\": \"LoadBalancerSecurityGroup\"}, \"ToPort\": 80 }] } }, \"DatabaseSecurityGroup\": { \"Type\": \"AWS::EC2::SecurityGroup\", \"Properties\": { \"GroupDescription\": \"mysite-db-sg\", \"VpcId\": {\"Ref\": \"VPC\"}, \"SecurityGroupIngress\": [{ \"IpProtocol\": \"tcp\", \"FromPort\": \"3306\", \"ToPort\": \"3306\", \"SourceSecurityGroupId\": {\"Ref\": \"WebServerSecurityGroup\"} }] } }, \"Database\": { \"Type\": \"AWS::RDS::DBInstance\", \"Properties\": { \"AllocatedStorage\": \"5\", \"BackupRetentionPeriod\": \"0\", \"DBInstanceClass\": \"db.t2.micro\", \"DBInstanceIdentifier\": {\"Ref\": \"SiteID\"}, \"DBName\": \"quantsketch\", \"Engine\": \"MySQL\", \"MasterUsername\": \"mysite\", \"MasterUserPassword\": \"mysite\", \"VPCSecurityGroups\": [{\"Fn::GetAtt\": [\"DatabaseSecurityGroup\", \"GroupId\"]}], \"DBSubnetGroupName\": {\"Ref\": \"DBSubnetGroup\"} }, \"DependsOn\": \"VPCGatewayAttachment\" }, \"DBSubnetGroup\" : { \"Type\" : \"AWS::RDS::DBSubnetGroup\", \"Properties\" : { \"DBSubnetGroupDescription\" : \"DB subnet group\", \"SubnetIds\": [{\"Ref\": \"SubnetA\"}, {\"Ref\": \"SubnetB\"}] } }, \"S3Bucket\": { \"Type\": \"AWS::S3::Bucket\", \"Properties\": { \"BucketName\": {\"Ref\": \"SiteID\"}, \"WebsiteConfiguration\": { \"IndexDocument\": \"index.html\" } } }, \"WebServerLaunchConfiguration\": { \"Type\": \"AWS::AutoScaling::LaunchConfiguration\", \"Metadata\": { \"AWS::CloudFormation::Init\": { \"config\": { \"packages\": { \"yum\": { \"php\": [], \"php-mysql\": [], \"mysql\": [], \"httpd\": [] } }, \"sources\": { \"/var/www/html\": \"https://wordpress.org/wordpress-4.2.4.tar.gz\" }, \"files\": { \"/tmp/config\": { \"content\": {\"Fn::Join\": [\"\", [ \"#!/bin/bash -ex\\n\", ]]}, \"mode\": \"000500\", \"owner\": \"root\", \"group\": \"root\" } }, \"commands\": { \"01_config\": { \"command\": \"/tmp/config\", \"cwd\": \"/var/www/html/wordpress\" } }, \"services\": { \"sysvinit\": { \"httpd\": { \"enabled\": \"true\", \"ensureRunning\": \"true\" } } } } } }, \"Properties\": { \"ImageId\": {\"Fn::FindInMap\": [\"EC2RegionMap\", {\"Ref\": \"AWS::Region\"}, \"AmazonLinuxAMIHVMEBSBacked64bit\"]}, \"InstanceType\": \"t2.micro\", \"SecurityGroups\": [{\"Ref\": \"WebServerSecurityGroup\"}], \"KeyName\": {\"Ref\": \"KeyName\"}, \"AssociatePublicIpAddress\": true, \"UserData\": {\"Fn::Base64\": {\"Fn::Join\": [\"\", [ \"#!/bin/bash -ex\\n\", \"yum update -y aws-cfn-bootstrap\\n\", \"/opt/aws/bin/cfn-init -v --stack \", {\"Ref\": \"AWS::StackName\"}, \" --resource WebServerLaunchConfiguration --region \", {\"Ref\": \"AWS::Region\"}, \"\\n\", \"/opt/aws/bin/cfn-signal -e $? --stack \", {\"Ref\": \"AWS::StackName\"}, \" --resource WebServerAutoScalingGroup --region \", {\"Ref\": \"AWS::Region\"}, \"\\n\" ]]}} } }, \"WebServerAutoScalingGroup\": { \"Type\": \"AWS::AutoScaling::AutoScalingGroup\", \"Properties\": { \"LoadBalancerNames\": [{\"Ref\": \"LoadBalancer\"}], \"LaunchConfigurationName\": {\"Ref\": \"WebServerLaunchConfiguration\"}, \"MinSize\": \"2\", \"MaxSize\": \"4\", \"DesiredCapacity\": \"2\", \"Cooldown\": \"60\", \"HealthCheckGracePeriod\": \"120\", \"HealthCheckType\": \"ELB\", \"VPCZoneIdentifier\": [{\"Ref\": \"SubnetA\"}, {\"Ref\": \"SubnetB\"}], \"Tags\": [{ \"PropagateAtLaunch\": true, \"Value\": \"quantsketch\", \"Key\": \"Name\" }] }, \"CreationPolicy\": { \"ResourceSignal\": { \"Timeout\": \"PT10M\" } }, \"DependsOn\": \"VPCGatewayAttachment\" }, \"WebServerScalingUpPolicy\": { \"Type\": \"AWS::AutoScaling::ScalingPolicy\", \"Properties\": { \"AdjustmentType\": \"ChangeInCapacity\", \"AutoScalingGroupName\": {\"Ref\": \"WebServerAutoScalingGroup\"}, \"Cooldown\": \"60\", \"ScalingAdjustment\": \"1\" } }, \"WebServerCPUHighAlarm\": { \"Type\": \"AWS::CloudWatch::Alarm\", \"Properties\": { \"EvaluationPeriods\": \"1\", \"Statistic\": \"Average\", \"Threshold\": \"80\", \"AlarmDescription\": \"Alarm if CPU load is high.\", \"Period\": \"60\", \"AlarmActions\": [{\"Ref\": \"WebServerScalingUpPolicy\"}], \"Namespace\": \"AWS/EC2\", \"Dimensions\": [{ \"Name\": \"AutoScalingGroupName\", \"Value\": {\"Ref\": \"WebServerAutoScalingGroup\"} }], \"ComparisonOperator\": \"GreaterThanThreshold\", \"MetricName\": \"CPUUtilization\" } }, \"WebServerScalingDownPolicy\": { \"Type\": \"AWS::AutoScaling::ScalingPolicy\", \"Properties\": { \"AdjustmentType\": \"ChangeInCapacity\", \"AutoScalingGroupName\": {\"Ref\": \"WebServerAutoScalingGroup\"}, \"Cooldown\": \"60\", \"ScalingAdjustment\": \"-1\" } }, \"WebServerCPULowAlarm\": { \"Type\": \"AWS::CloudWatch::Alarm\", \"Properties\": { \"EvaluationPeriods\": \"1\", \"Statistic\": \"Average\", \"Threshold\": \"25\", \"AlarmDescription\": \"Alarm if CPU load is low.\", \"Period\": \"60\", \"AlarmActions\": [{\"Ref\": \"WebServerScalingDownPolicy\"}], \"Namespace\": \"AWS/EC2\", \"Dimensions\": [{ \"Name\": \"AutoScalingGroupName\", \"Value\": {\"Ref\": \"WebServerAutoScalingGroup\"} }], \"ComparisonOperator\": \"LessThanThreshold\", \"MetricName\": \"CPUUtilization\" } } }, \"Outputs\": { \"URL\": { \"Value\": {\"Fn::Join\": [\"\", [\"http://\", {\"Fn::GetAtt\": [\"LoadBalancer\", \"DNSName\"]}, \"/quantsketch\"]]}, \"Description\": \"QuantSketch URL\" } } } Unfortunately, I was unable to find any example templates that address this stack architecture, even though I would have expected it to be a common problem", "keywords": ["cpu", "billing mode", "change"]}]}, {"Id": "140353956", "PostHistoryTypeId": "1", "PostId": "42727967", "RevisionGUID": "1f077aa1-413d-4d38-b64c-8f56a93ad99e", "CreationDate": "2017-03-10T21:26:10.397", "UserId": "2870914", "Text": "Send message from load balanced EC2 web servers to queued EC2 workers", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "140353957", "PostHistoryTypeId": "3", "PostId": "42727967", "RevisionGUID": "1f077aa1-413d-4d38-b64c-8f56a93ad99e", "CreationDate": "2017-03-10T21:26:10.397", "UserId": "2870914", "Text": "|amazon-web-services|amazon-ec2|amazon-sqs|aws-cloudformation|amazon-elb|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "42736183", "PostTypeId": "2", "ParentId": "42727967", "CreationDate": "2017-03-11T14:08:33.020", "Score": "1", "Body": "<p>You would generally achieve this by calling the AWS APIs/SDKs in the application running on your load balanced and worker machines to send and receieve messages from SQS.</p>\n\n<h2>Option A: Direct Send/Receive via SQS</h2>\n\n<ul>\n<li>Web Server prepares your message and calls <a href=\"http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessage.html\" rel=\"nofollow noreferrer\">SQS SendMessage</a> to send it to the queue.</li>\n<li>Worker calls <a href=\"http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_ReceiveMessage.html\" rel=\"nofollow noreferrer\">SQS ReceiveMessage</a> to receive a batch of up to 10 messages from the queue, and processes them.</li>\n<li>Worker calls <a href=\"http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_DeleteMessage.html\" rel=\"nofollow noreferrer\">SQS DeleteMessage</a> after processing, so that the message isn't retried.  Could also call <a href=\"http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_DeleteMessageBatch.html\" rel=\"nofollow noreferrer\">SQS DeleteMessageBatch</a> if you want to reduce calls to SQS.</li>\n</ul>\n\n<h2>Option B: Pub/Sub via SNS Publisher to SQS Subscriber</h2>\n\n<p>Another option is to first publish your message via SNS, and then subscribe to it via SQS.  This offers you the additional benefit of being able to subscribe different applications (or even humans, via SMS/email) to the message, if you have a use case for that.</p>\n\n<ul>\n<li>Web Server prepares your message and calls <a href=\"http://docs.aws.amazon.com/sns/latest/api/API_Publish.html\" rel=\"nofollow noreferrer\">SNS Publish</a> to publish your message to all subscribers of the given SNS topic.</li>\n<li>SNS publishes the message to all subscribers of the given SNS topic; your queue is one such subscriber, and as such the message ends up in your queue.</li>\n<li>Worker calls <a href=\"http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_ReceiveMessage.html\" rel=\"nofollow noreferrer\">SQS ReceiveMessage</a> to receive a batch of up to 10 messages from the queue, and processes them.</li>\n<li>Worker calls <a href=\"http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_DeleteMessage.html\" rel=\"nofollow noreferrer\">SQS DeleteMessage</a> after processing, so that the message isn't retried.  Could also call <a href=\"http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_DeleteMessageBatch.html\" rel=\"nofollow noreferrer\">SQS DeleteMessageBatch</a> if you want to reduce calls to SQS.</li>\n</ul>\n\n<h2>Discussion</h2>\n\n<p>Both your web servers and worker stacks will need to be able to communicate out of your VPC in order to reach the SNS and/or SQS service.  You can accomplish this via use of <a href=\"http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html\" rel=\"nofollow noreferrer\">NAT Gateways</a> to allow your instances to communicate out to the global internet.</p>\n\n<p>You will want to provision your SNS/SQS resources ahead of time.  You can do this via your CloudFormation template, or again via the SNS/SQS APIs.</p>\n\n<p>You didn't mention which language your applications are using; you will want to read the documentation for the specific SDK you will be using that matches the APIs I've linked to in this answer.  </p>\n\n<p>To give your applications permission to access these resources in your AWS account, I would recommend creating an <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html\" rel=\"nofollow noreferrer\">IAM instance profile</a> that has permissions to at least read and write to this SQS queue, and optionally also that SNS topic if you go with the pub/sub route. If you don't explicitly provide credentials to your application, the credential chain will fall through to the IAM instance profile and inherit it. You can create these IAM resources as part of your CloudFormation template.</p>\n\n<p>And a couple of final philosophical notes:</p>\n\n<ul>\n<li><p>Don't think about this problem as connecting your clusters; in both situations, they will only know about SNS/SQS.  The goal here is that your web servers <em>don't</em> know about your workers, and vise-versa.</p></li>\n<li><p>I think you're thinking about this problem too broadly, and that is why you've been having trouble finding resources related to it.  Break your queries into smaller units of work like \"How can I send messages to SQS?\" or \"How can I receive messages from SQS?\" and I think you'll have better luck.</p></li>\n</ul>\n\n<h2>Further Reading</h2>\n\n<ul>\n<li><a href=\"http://docs.aws.amazon.com/sns/latest/dg/SendMessageToSQS.html\" rel=\"nofollow noreferrer\">AWS Documentation - Sending Amazon SNS Messages to Amazon SQS Queues</a></li>\n<li><a href=\"http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html\" rel=\"nofollow noreferrer\">AWS Documentation - NAT Instances</a> - If NAT Gateways are too expensive for your solution, you can read here to learn how to set up an EC2 instance that performs the same function.</li>\n<li><a href=\"http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/sqs-examples-send-receive-messages.html\" rel=\"nofollow noreferrer\">AWS Documentation - Tutorial: Sending and Receiving Messages in Amazon SQS</a> - Uses Javascript SDK for both send and receive</li>\n<li><a href=\"http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-long-polling.html\" rel=\"nofollow noreferrer\">AWS Documentation - SQS Long Polling</a> - A helpful strategy to reduce empty responses from the SQS SDK by extending the message receive wait time.</li>\n</ul>\n", "OwnerUserId": "775544", "LastEditorUserId": "775544", "LastEditDate": "2017-03-11T14:21:15.517", "LastActivityDate": "2017-03-11T14:21:15.517", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "140386976", "PostHistoryTypeId": "5", "PostId": "42736183", "RevisionGUID": "d3cc4ae9-6532-490a-8a7a-93c1af81ab37", "CreationDate": "2017-03-11T14:21:15.517", "UserId": "775544", "Comment": "edited body", "Text": "You would generally achieve this by calling the AWS APIs/SDKs in the application running on your load balanced and worker machines to send and receieve messages from SQS.\r\n\r\n## Option A: Direct Send/Receive via SQS\r\n\r\n* Web Server prepares your message and calls [SQS SendMessage][1] to send it to the queue.\r\n* Worker calls [SQS ReceiveMessage][2] to receive a batch of up to 10 messages from the queue, and processes them.\r\n* Worker calls [SQS DeleteMessage][3] after processing, so that the message isn't retried.  Could also call [SQS DeleteMessageBatch][4] if you want to reduce calls to SQS.\r\n\r\n## Option B: Pub/Sub via SNS Publisher to SQS Subscriber\r\n\r\nAnother option is to first publish your message via SNS, and then subscribe to it via SQS.  This offers you the additional benefit of being able to subscribe different applications (or even humans, via SMS/email) to the message, if you have a use case for that.\r\n\r\n* Web Server prepares your message and calls [SNS Publish][5] to publish your message to all subscribers of the given SNS topic.\r\n* SNS publishes the message to all subscribers of the given SNS topic; your queue is one such subscriber, and as such the message ends up in your queue.\r\n* Worker calls [SQS ReceiveMessage][2] to receive a batch of up to 10 messages from the queue, and processes them.\r\n* Worker calls [SQS DeleteMessage][3] after processing, so that the message isn't retried.  Could also call [SQS DeleteMessageBatch][4] if you want to reduce calls to SQS.\r\n\r\n## Discussion\r\n\r\nBoth your web servers and worker stacks will need to be able to communicate out of your VPC in order to reach the SNS and/or SQS service.  You can accomplish this via use of [NAT Gateways][6] to allow your instances to communicate out to the global internet.\r\n\r\nYou will want to provision your SNS/SQS resources ahead of time.  You can do this via your CloudFormation template, or again via the SNS/SQS APIs.\r\n\r\nYou didn't mention which language your applications are using; you will want to read the documentation for the specific SDK you will be using that matches the APIs I've linked to in this answer.  \r\n\r\nTo give your applications permission to access these resources in your AWS account, I would recommend creating an [IAM instance profile][7] that has permissions to at least read and write to this SQS queue, and optionally also that SNS topic if you go with the pub/sub route. If you don't explicitly provide credentials to your application, the credential chain will fall through to the IAM instance profile and inherit it. You can create these IAM resources as part of your CloudFormation template.\r\n\r\nAnd a couple of final philosophical notes:\r\n\r\n* Don't think about this problem as connecting your clusters; in both situations, they will only know about SNS/SQS.  The goal here is that your web servers *don't* know about your workers, and vise-versa.\r\n\r\n* I think you're thinking about this problem too broadly, and that is why you've been having trouble finding resources related to it.  Break your queries into smaller units of work like \"How can I send messages to SQS?\" or \"How can I receive messages from SQS?\" and I think you'll have better luck.\r\n\r\n## Further Reading\r\n\r\n* [AWS Documentation - Sending Amazon SNS Messages to Amazon SQS Queues][8]\r\n* [AWS Documentation - NAT Instances][9] - If NAT Gateways are too expensive for your solution, you can read here to learn how to set up an EC2 instance that performs the same function.\r\n* [AWS Documentation - Tutorial: Sending and Receiving Messages in Amazon SQS][10] - Uses Javascript SDK for both send and receive\r\n* [AWS Documentation - SQS Long Polling][11] - A helpful strategy to reduce empty responses from the SQS SDK by extending the message receive wait time.\r\n\r\n\r\n  [1]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessage.html\r\n  [2]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_ReceiveMessage.html\r\n  [3]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_DeleteMessage.html\r\n  [4]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_DeleteMessageBatch.html\r\n  [5]: http://docs.aws.amazon.com/sns/latest/api/API_Publish.html\r\n  [6]: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html\r\n  [7]: http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html\r\n  [8]: http://docs.aws.amazon.com/sns/latest/dg/SendMessageToSQS.html\r\n  [9]: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html\r\n  [10]: http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/sqs-examples-send-receive-messages.html\r\n  [11]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-long-polling.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You can accomplish this via use of [NAT Gateways][6] to allow your instances to communicate out to the global internet. ", "keywords": ["nat"]}, {"source": "Text", "text": "To give your applications permission to access these resources in your AWS account, I would recommend creating an [IAM instance profile][7] that has permissions to at least read and write to this SQS queue, and optionally also that SNS topic if you go with the pub/sub route. ", "keywords": ["instance", "permissions"]}, {"source": "Text", "text": "If you don't explicitly provide credentials to your application, the credential chain will fall through to the IAM instance profile and inherit it. ", "keywords": ["instance"]}, {"source": "Text", "text": "Break your queries into smaller units of work like \"How can I send messages to SQS?\" or \"How can I receive messages from SQS?\" and I think you'll have better luck. ## Further Reading * [AWS Documentation - Sending Amazon SNS Messages to Amazon SQS Queues][8] * [AWS Documentation - NAT Instances][9] - If NAT Gateways are too expensive for your solution, you can read here to learn how to set up an EC2 instance that performs the same function. ", "keywords": ["expense", "nat", "instance"]}, {"source": "Text", "text": "* [AWS Documentation - Tutorial: Sending and Receiving Messages in Amazon SQS][10] - Uses Javascript SDK for both send and receive * [AWS Documentation - SQS Long Polling][11] - A helpful strategy to reduce empty responses from the SQS SDK by extending the message receive wait time. [1]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessage.html [2]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_ReceiveMessage.html [3]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_DeleteMessage.html [4]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_DeleteMessageBatch.html [5]: http://docs.aws.amazon.com/sns/latest/api/API_Publish.html [6]: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html [7]: http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html [8]: http://docs.aws.amazon.com/sns/latest/dg/SendMessageToSQS.html [9]: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html [10]: http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/sqs-examples-send-receive-messages.html [11]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-long-polling.html", "keywords": ["nat"]}]}, {"Id": "140386420", "PostHistoryTypeId": "2", "PostId": "42736183", "RevisionGUID": "f15b1540-aea6-4c93-a6e0-fa0b4ff33079", "CreationDate": "2017-03-11T14:08:33.020", "UserId": "775544", "Text": "You would generally achieve this by calling the AWS APIs/SDKs in the application running on your load balanced and worker machines to send and receieve messages from SQS.\r\n\r\n## Option A: Direct Send/Receive via SQS\r\n\r\n* Web Server prepares your message and calls [SQS SendMessage][1] to send it to the queue.\r\n* Worker calls [SQS ReceiveMessage][2] to receive a batch of up to 10 messages from the queue, and processes them.\r\n* Worker calls [SQS DeleteMessage][3] after processing, so that the message isn't retried.  Could also call [SQS DeleteMessageBatch][4] if you want to reduce calls to SQS.\r\n\r\n## Option B: Pub/Sub via SNS Publisher to SQS Subscriber\r\n\r\nAnother option is to first publish your message via SNS, and then subscribe to it via SQS.  This offers you the additional benefit of being able to subscribe different applications (or even humans, via SMS/email) to the message, if you have a use case for that.\r\n\r\n* Web Server prepares your message and calls [SNS Publish][5] to publish your message to all subscribers of the given SNS topic.\r\n* SNS publishes the message to all subscribers of the given SNS topic; your queue is one such subscriber, and as such the message ends up in your queue.\r\n* Worker calls [SQS ReceiveMessage][2] to receive a batch of up to 10 messages from the queue, and processes them.\r\n* Worker calls [SQS DeleteMessage][3] after processing, so that the message isn't retried.  Could also call [SQS DeleteMessageBatch][4] if you want to reduce calls to SQS.\r\n\r\n## Discussion\r\n\r\nBoth your web servers and worker stacks will need to be able to communicate out of your VPC in order to reach the SNS and/or SQS service.  You can accomplish this via use of [NAT Gateways][6] to allow your instances to communicate out to the global internet.\r\n\r\nYou will want to provision your SNS/SQS resources ahead of time.  You can do this via your CloudFormation template, or again via the SNS/SQS APIs.\r\n\r\nYou didn't mention which language your applications are using; you will want to read the documentation for the specific SDK you will be using that matches the APIs I've linked to in this answer.  \r\n\r\nTo give your applications permission to access these resources in your AWS account, I would recommend creating an [IAM instance profile][7] that has permissions to at least read and write to this SQS queue, and optionally also that SNS topic if you go with the pub/sub route. If you don't explicitly provide credentials to your application, the credential chain will fall through to the IAM instance profile and inherit it. You can create these IAM resources as part of your CloudFormation template.\r\n\r\nAnd a couple of final philosophical notes:\r\n\r\n* Don't think about this problem as connecting your clusters; in both situations, they will only know about SNS/SQS.  The goal here is that your web servers *don't* know about your workers, and vise-versa.\r\n\r\n* I think you're thinking about this problem too broadly, and that is why you've been having trouble finding resources related to it.  Break your queries into smaller units of work such \"How can I send messages to SQS?\" or \"How can I receive messages from SQS?\" and I think you'll have better luck.\r\n\r\n## Further Reading\r\n\r\n* [AWS Documentation - Sending Amazon SNS Messages to Amazon SQS Queues][8]\r\n* [AWS Documentation - NAT Instances][9] - If NAT Gateways are too expensive for your solution, you can read here to learn how to set up an EC2 instance that performs the same function.\r\n* [AWS Documentation - Tutorial: Sending and Receiving Messages in Amazon SQS][10] - Uses Javascript SDK for both send and receive\r\n\r\n\r\n  [1]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessage.html\r\n  [2]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_ReceiveMessage.html\r\n  [3]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_DeleteMessage.html\r\n  [4]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_DeleteMessageBatch.html\r\n  [5]: http://docs.aws.amazon.com/sns/latest/api/API_Publish.html\r\n  [6]: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html\r\n  [7]: http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html\r\n  [8]: http://docs.aws.amazon.com/sns/latest/dg/SendMessageToSQS.html\r\n  [9]: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html\r\n  [10]: http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/sqs-examples-send-receive-messages.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You can accomplish this via use of [NAT Gateways][6] to allow your instances to communicate out to the global internet. ", "keywords": ["nat"]}, {"source": "Text", "text": "To give your applications permission to access these resources in your AWS account, I would recommend creating an [IAM instance profile][7] that has permissions to at least read and write to this SQS queue, and optionally also that SNS topic if you go with the pub/sub route. ", "keywords": ["instance", "permissions"]}, {"source": "Text", "text": "If you don't explicitly provide credentials to your application, the credential chain will fall through to the IAM instance profile and inherit it. ", "keywords": ["instance"]}, {"source": "Text", "text": "Break your queries into smaller units of work such \"How can I send messages to SQS?\" or \"How can I receive messages from SQS?\" and I think you'll have better luck. ## Further Reading * [AWS Documentation - Sending Amazon SNS Messages to Amazon SQS Queues][8] * [AWS Documentation - NAT Instances][9] - If NAT Gateways are too expensive for your solution, you can read here to learn how to set up an EC2 instance that performs the same function. ", "keywords": ["expense", "nat", "instance"]}, {"source": "Text", "text": "* [AWS Documentation - Tutorial: Sending and Receiving Messages in Amazon SQS][10] - Uses Javascript SDK for both send and receive [1]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessage.html [2]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_ReceiveMessage.html [3]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_DeleteMessage.html [4]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_DeleteMessageBatch.html [5]: http://docs.aws.amazon.com/sns/latest/api/API_Publish.html [6]: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html [7]: http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html [8]: http://docs.aws.amazon.com/sns/latest/dg/SendMessageToSQS.html [9]: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html [10]: http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/sqs-examples-send-receive-messages.html", "keywords": ["nat"]}]}, {"Id": "140386658", "PostHistoryTypeId": "5", "PostId": "42736183", "RevisionGUID": "0d35e83b-7eb7-4679-aa4d-4bb70679cd45", "CreationDate": "2017-03-11T14:13:58.260", "UserId": "775544", "Comment": "added 259 characters in body", "Text": "You would generally achieve this by calling the AWS APIs/SDKs in the application running on your load balanced and worker machines to send and receieve messages from SQS.\r\n\r\n## Option A: Direct Send/Receive via SQS\r\n\r\n* Web Server prepares your message and calls [SQS SendMessage][1] to send it to the queue.\r\n* Worker calls [SQS ReceiveMessage][2] to receive a batch of up to 10 messages from the queue, and processes them.\r\n* Worker calls [SQS DeleteMessage][3] after processing, so that the message isn't retried.  Could also call [SQS DeleteMessageBatch][4] if you want to reduce calls to SQS.\r\n\r\n## Option B: Pub/Sub via SNS Publisher to SQS Subscriber\r\n\r\nAnother option is to first publish your message via SNS, and then subscribe to it via SQS.  This offers you the additional benefit of being able to subscribe different applications (or even humans, via SMS/email) to the message, if you have a use case for that.\r\n\r\n* Web Server prepares your message and calls [SNS Publish][5] to publish your message to all subscribers of the given SNS topic.\r\n* SNS publishes the message to all subscribers of the given SNS topic; your queue is one such subscriber, and as such the message ends up in your queue.\r\n* Worker calls [SQS ReceiveMessage][2] to receive a batch of up to 10 messages from the queue, and processes them.\r\n* Worker calls [SQS DeleteMessage][3] after processing, so that the message isn't retried.  Could also call [SQS DeleteMessageBatch][4] if you want to reduce calls to SQS.\r\n\r\n## Discussion\r\n\r\nBoth your web servers and worker stacks will need to be able to communicate out of your VPC in order to reach the SNS and/or SQS service.  You can accomplish this via use of [NAT Gateways][6] to allow your instances to communicate out to the global internet.\r\n\r\nYou will want to provision your SNS/SQS resources ahead of time.  You can do this via your CloudFormation template, or again via the SNS/SQS APIs.\r\n\r\nYou didn't mention which language your applications are using; you will want to read the documentation for the specific SDK you will be using that matches the APIs I've linked to in this answer.  \r\n\r\nTo give your applications permission to access these resources in your AWS account, I would recommend creating an [IAM instance profile][7] that has permissions to at least read and write to this SQS queue, and optionally also that SNS topic if you go with the pub/sub route. If you don't explicitly provide credentials to your application, the credential chain will fall through to the IAM instance profile and inherit it. You can create these IAM resources as part of your CloudFormation template.\r\n\r\nAnd a couple of final philosophical notes:\r\n\r\n* Don't think about this problem as connecting your clusters; in both situations, they will only know about SNS/SQS.  The goal here is that your web servers *don't* know about your workers, and vise-versa.\r\n\r\n* I think you're thinking about this problem too broadly, and that is why you've been having trouble finding resources related to it.  Break your queries into smaller units of work such \"How can I send messages to SQS?\" or \"How can I receive messages from SQS?\" and I think you'll have better luck.\r\n\r\n## Further Reading\r\n\r\n* [AWS Documentation - Sending Amazon SNS Messages to Amazon SQS Queues][8]\r\n* [AWS Documentation - NAT Instances][9] - If NAT Gateways are too expensive for your solution, you can read here to learn how to set up an EC2 instance that performs the same function.\r\n* [AWS Documentation - Tutorial: Sending and Receiving Messages in Amazon SQS][10] - Uses Javascript SDK for both send and receive\r\n* [AWS Documentation - SQS Long Polling][11] - A helpful strategy to reduce empty responses from the SQS SDK by extending the message receive wait time.\r\n\r\n\r\n  [1]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessage.html\r\n  [2]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_ReceiveMessage.html\r\n  [3]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_DeleteMessage.html\r\n  [4]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_DeleteMessageBatch.html\r\n  [5]: http://docs.aws.amazon.com/sns/latest/api/API_Publish.html\r\n  [6]: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html\r\n  [7]: http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html\r\n  [8]: http://docs.aws.amazon.com/sns/latest/dg/SendMessageToSQS.html\r\n  [9]: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html\r\n  [10]: http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/sqs-examples-send-receive-messages.html\r\n  [11]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-long-polling.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "You can accomplish this via use of [NAT Gateways][6] to allow your instances to communicate out to the global internet. ", "keywords": ["nat"]}, {"source": "Text", "text": "To give your applications permission to access these resources in your AWS account, I would recommend creating an [IAM instance profile][7] that has permissions to at least read and write to this SQS queue, and optionally also that SNS topic if you go with the pub/sub route. ", "keywords": ["instance", "permissions"]}, {"source": "Text", "text": "If you don't explicitly provide credentials to your application, the credential chain will fall through to the IAM instance profile and inherit it. ", "keywords": ["instance"]}, {"source": "Text", "text": "Break your queries into smaller units of work such \"How can I send messages to SQS?\" or \"How can I receive messages from SQS?\" and I think you'll have better luck. ## Further Reading * [AWS Documentation - Sending Amazon SNS Messages to Amazon SQS Queues][8] * [AWS Documentation - NAT Instances][9] - If NAT Gateways are too expensive for your solution, you can read here to learn how to set up an EC2 instance that performs the same function. ", "keywords": ["expense", "nat", "instance"]}, {"source": "Text", "text": "* [AWS Documentation - Tutorial: Sending and Receiving Messages in Amazon SQS][10] - Uses Javascript SDK for both send and receive * [AWS Documentation - SQS Long Polling][11] - A helpful strategy to reduce empty responses from the SQS SDK by extending the message receive wait time. [1]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessage.html [2]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_ReceiveMessage.html [3]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_DeleteMessage.html [4]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_DeleteMessageBatch.html [5]: http://docs.aws.amazon.com/sns/latest/api/API_Publish.html [6]: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html [7]: http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html [8]: http://docs.aws.amazon.com/sns/latest/dg/SendMessageToSQS.html [9]: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html [10]: http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/sqs-examples-send-receive-messages.html [11]: http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-long-polling.html", "keywords": ["nat"]}]}], "filtered-sentences": [{"source": "Body", "text": "You can accomplish this via use of NAT Gateways to allow your instances to communicate out to the global internet. ", "keywords": ["nat"]}, {"source": "Body", "text": "To give your applications permission to access these resources in your AWS account, I would recommend creating an IAM instance profile that has permissions to at least read and write to this SQS queue, and optionally also that SNS topic if you go with the pub/sub route. ", "keywords": ["instance", "permissions"]}, {"source": "Body", "text": "If you don't explicitly provide credentials to your application, the credential chain will fall through to the IAM instance profile and inherit it. ", "keywords": ["instance"]}, {"source": "Body", "text": "Further Reading AWS Documentation - Sending Amazon SNS Messages to Amazon SQS Queues AWS Documentation - NAT Instances - If NAT Gateways are too expensive for your solution, you can read here to learn how to set up an EC2 instance that performs the same function. ", "keywords": ["expense", "nat", "instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I have a fairly straightforward CloudFormation template I've been working on, which originally only contained a cluster of load balanced EC2 web servers. ", "keywords": ["cluster"]}]}