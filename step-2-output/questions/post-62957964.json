{"Id": "62957964", "PostTypeId": "1", "CreationDate": "2020-07-17T16:17:42.620", "Score": "0", "ViewCount": "58", "Body": "<p>I want to make a bot that makes other bots on Telegram platform. I want to use AWS infrastructure, look like their Lamdba functions are perfect fit, pay for them only when they are active. In my concept, each bot equal to one lambda function, and they all share the same codebase.</p>\n<p>At the starting point, I thought to make each new Lambda function programmatically, but this will bring me problems later I think, like need to attach many services programmatically via AWS SDK: Gateway API, DynamoDB. But the main problem, how I will update the codebase for these 1000+ functions later? I think that bash script is a bad idea here.</p>\n<p>So, I moved forward and found SAM (AWS Serverless Application Model) and CloudFormatting, which should help me I guess. But I can't understand the concept. I can make a stack with all the required resources, but how will I make new bots from this one stack? Or should I build a template and make new stacks for each new bot programmatically via AWS SDK from this template?</p>\n<p>Next, how to update them later? For example, I want to update all bots that have version 1.1 to version 1.2. How I will replace them? Should I make a new stack or can I update older ones? I don't see any options in UI of CloudFormatting or any related methods in AWS SDK for that.</p>\n<p>Thanks</p>\n", "OwnerUserId": "1412599", "LastActivityDate": "2020-07-18T08:12:12.680", "Title": "What is the proper way to build many Lambda functions and updated them later?", "Tags": "|amazon-web-services|aws-lambda|aws-cloudformation|telegram-bot|", "AnswerCount": "2", "CommentCount": "0", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "226849692", "PostHistoryTypeId": "2", "PostId": "62957964", "RevisionGUID": "86cc0566-671c-4930-9e7e-68e3086e1b69", "CreationDate": "2020-07-17T16:17:42.620", "UserId": "1412599", "Text": "I want to make a bot that makes other bots on Telegram platform. I want to use AWS infrastructure, look like their Lamdba functions are perfect fit, pay for them only when they are active. In my concept, each bot equal to one lambda function, and they all share the same codebase.\r\n\r\nAt the starting point, I thought to make each new Lambda function programmatically, but this will bring me problems later I think, like need to attach many services programmatically via AWS SDK: Gateway API, DynamoDB. But the main problem, how I will update the codebase for these 1000+ functions later? I think that bash script is a bad idea here.\r\n\r\nSo, I moved forward and found SAM (AWS Serverless Application Model) and CloudFormatting, which should help me I guess. But I can't understand the concept. I can make a stack with all the required resources, but how will I make new bots from this one stack? Or should I build a template and make new stacks for each new bot programmatically via AWS SDK from this template?\r\n\r\nNext, how to update them later? For example, I want to update all bots that have version 1.1 to version 1.2. How I will replace them? Should I make a new stack or can I update older ones? I don't see any options in UI of CloudFormatting or any related methods in AWS SDK for that.\r\n\r\nThanks", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I want to use AWS infrastructure, look like their Lamdba functions are perfect fit, pay for them only when they are active. ", "keywords": ["pay"]}]}, {"Id": "226849693", "PostHistoryTypeId": "1", "PostId": "62957964", "RevisionGUID": "86cc0566-671c-4930-9e7e-68e3086e1b69", "CreationDate": "2020-07-17T16:17:42.620", "UserId": "1412599", "Text": "What is the proper way to build many Lambda functions and updated them later?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "226849694", "PostHistoryTypeId": "3", "PostId": "62957964", "RevisionGUID": "86cc0566-671c-4930-9e7e-68e3086e1b69", "CreationDate": "2020-07-17T16:17:42.620", "UserId": "1412599", "Text": "|amazon-web-services|aws-lambda|aws-cloudformation|telegram-bot|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "62962196", "PostTypeId": "2", "ParentId": "62957964", "CreationDate": "2020-07-17T21:48:29.140", "Score": "0", "Body": "<blockquote>\n<p>But the main problem, how I will update the codebase for these 1000+ functions later?</p>\n</blockquote>\n<p>You don't. You use <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html\" rel=\"nofollow noreferrer\">lambda alias</a>. This allows you to fully <strong>decouple your lambda versions from your clients</strong>. This works because you are using an alias of your function in your client's code (or api gateway). The alias is fixed and does not change.</p>\n<p>However, <strong>alias is like a pointer</strong> - it can point to different versions of your lambda function. Therefore, when you publish a new lambda version you just point alias to it. Its fully transparent from your clients and their alias does not require any change.</p>\n", "OwnerUserId": "248823", "LastActivityDate": "2020-07-17T21:48:29.140", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "226866886", "PostHistoryTypeId": "2", "PostId": "62962196", "RevisionGUID": "d6445197-23ef-4dbb-8360-361f81a386b3", "CreationDate": "2020-07-17T21:48:29.140", "UserId": "248823", "Text": ">  But the main problem, how I will update the codebase for these 1000+ functions later? \r\n\r\nYou don't. You use [lambda alias](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html). This allows you to fully **decouple your lambda versions from your clients**. This works because you are using an alias of your function in your client's code (or api gateway). The alias is fixed and does not change.\r\n\r\nHowever, **alias is like a pointer** - it can point to different versions of your lambda function. Therefore, when you publish a new lambda version you just point alias to it. Its fully transparent from your clients and their alias does not require any change.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "The alias is fixed and does not change. ", "keywords": ["change"]}, {"source": "Text", "text": "Its fully transparent from your clients and their alias does not require any change.", "keywords": ["change"]}]}], "filtered-sentences": [{"source": "Body", "text": "The alias is fixed and does not change. ", "keywords": ["change"]}, {"source": "Body", "text": "Its fully transparent from your clients and their alias does not require any change.", "keywords": ["change"]}]}, {"Id": "62966218", "PostTypeId": "2", "ParentId": "62957964", "CreationDate": "2020-07-18T08:12:12.680", "Score": "0", "Body": "<p>I agree with @Marcin. Also it would be worth checking <a href=\"https://www.serverless.com\" rel=\"nofollow noreferrer\">serverless</a>? Seems like you are still experimenting so most likely you are deploying using bash scripts with AWS SDK/SAM commands. This is fine but once you start getting the gist of what your architecture looks like, I think you will appreciate what serverless can offer. You can deploy/teardown cloudformation stacks in matter of seconds. Also you can use serverless-offline so that you can have a local build of your AWS lambda architecture on your local machine.\nAll this has saved me hours of grunt work.</p>\n", "OwnerUserId": "3672166", "LastActivityDate": "2020-07-18T08:12:12.680", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "226894063", "PostHistoryTypeId": "2", "PostId": "62966218", "RevisionGUID": "5898998e-b917-4567-a731-6ee2acfca3b7", "CreationDate": "2020-07-18T08:12:12.680", "UserId": "3672166", "Text": "I agree with @Marcin. Also it would be worth checking [serverless][1]? Seems like you are still experimenting so most likely you are deploying using bash scripts with AWS SDK/SAM commands. This is fine but once you start getting the gist of what your architecture looks like, I think you will appreciate what serverless can offer. You can deploy/teardown cloudformation stacks in matter of seconds. Also you can use serverless-offline so that you can have a local build of your AWS lambda architecture on your local machine. \r\nAll this has saved me hours of grunt work.\r\n\r\n\r\n  [1]: https://www.serverless.com", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I want to use AWS infrastructure, look like their Lamdba functions are perfect fit, pay for them only when they are active. ", "keywords": ["pay"]}]}