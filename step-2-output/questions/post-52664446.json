{"Id": "52664446", "PostTypeId": "1", "CreationDate": "2018-10-05T11:18:04.870", "Score": "5", "ViewCount": "1180", "Body": "<p>On the project we use some of AWS services like AWS Lambda, EC2, AWS API Gateway, ElastiCache, etc. Also we have CloudFormation template which describes whole our infrastructure. As the project is developed we begin to use some new AWS services or change configuration of some which are already used. Also with that we should to keep our CloudFormation template up to date.</p>\n\n<p>And here we face with issue that we need to be sure that our CloudFormation template is valid, correct and that we can use it for creation of infrastructure if it will be needed. In such case we need something like continuous testing for our template. Which approaches are more appropriate for that? </p>\n\n<p>Should we configure automatic creation of stack from our CloudFormation template as part of continuous integration process and to track template changes in our repository? Or there are better solutions?</p>\n", "OwnerUserId": "1145792", "LastActivityDate": "2018-10-05T11:39:38.700", "Title": "CloudFormation templates: continuous testing for infrastructure as a code", "Tags": "|amazon-web-services|continuous-integration|aws-cloudformation|continuous-testing|infrastructure-as-code|", "AnswerCount": "2", "CommentCount": "1", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "92279431", "PostId": "52664446", "Score": "1", "Text": "Check this out https://stackoverflow.com/questions/40299413/is-there-a-way-to-unit-test-aws-cloudformation-template", "CreationDate": "2018-10-06T01:37:47.753", "UserId": "2593745", "filtered-sentences": [{"source": "Text", "text": "Check this out https://stackoverflow.com/questions/40299413/is-there-a-way-to-unit-test-aws-cloudformation-template", "keywords": ["test"]}]}], "history": [{"Id": "183151938", "PostHistoryTypeId": "2", "PostId": "52664446", "RevisionGUID": "d11ee08c-b801-4f90-8ce4-b71fdbccf384", "CreationDate": "2018-10-05T11:18:04.870", "UserId": "1145792", "Text": "On the project we use some of AWS services like AWS Lambda, EC2, AWS API Gateway, ElastiCache, etc. Also we have CloudFormation template which describes whole our infrastructure. As the project is developed we begin to use some new AWS services or change configuration of some which are already used. Also with that we should to keep our CloudFormation template up to date.\r\n\r\nAnd here we face with issue that we need to be sure that our CloudFormation template is valid, correct and that we can use it for creation of infrastructure if it will be needed. In such case we need something like continuous testing for our template. Which approaches are more appropriate for that? \r\n\r\nShould we configure automatic creation of stack from our CloudFormation template as part of continuous integration process and to track template changes in our repository? Or there are better solutions?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "As the project is developed we begin to use some new AWS services or change configuration of some which are already used. ", "keywords": ["change"]}, {"source": "Text", "text": "In such case we need something like continuous testing for our template. ", "keywords": ["test"]}, {"source": "Text", "text": "Should we configure automatic creation of stack from our CloudFormation template as part of continuous integration process and to track template changes in our repository? ", "keywords": ["change"]}]}, {"Id": "183151939", "PostHistoryTypeId": "1", "PostId": "52664446", "RevisionGUID": "d11ee08c-b801-4f90-8ce4-b71fdbccf384", "CreationDate": "2018-10-05T11:18:04.870", "UserId": "1145792", "Text": "CloudFormation templates: continuous testing for infrastructure as a code", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "CloudFormation templates: continuous testing for infrastructure as a code", "keywords": ["test"]}]}, {"Id": "183151940", "PostHistoryTypeId": "3", "PostId": "52664446", "RevisionGUID": "d11ee08c-b801-4f90-8ce4-b71fdbccf384", "CreationDate": "2018-10-05T11:18:04.870", "UserId": "1145792", "Text": "|amazon-web-services|continuous-integration|aws-cloudformation|continuous-testing|infrastructure-as-code|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "|amazon-web-services|continuous-integration|aws-cloudformation|continuous-testing|infrastructure-as-code|", "keywords": ["test"]}]}], "answers": [{"Id": "52664850", "PostTypeId": "2", "ParentId": "52664446", "CreationDate": "2018-10-05T11:39:38.700", "Score": "3", "Body": "<p>We have been using <a href=\"https://github.com/awslabs/cfn-python-lint/\" rel=\"nofollow noreferrer\">cfn-python-lint</a> as a precursor to building. Should this fail, we do not build. Rules provided in cfn-python-lint are a lot more comprehensive than <code>aws cloudformation validate-template</code> and in addition, it gives you some good practices rules and it also gives you a framework to write your own rules (which we use for governance). </p>\n\n<p>Additionally, we don't build on feature branches, we build only master. We gives devs an environment to play with where they can run the pipelines that we would normally run on master and in dev/staging/prod. This is a completely separate account where they have just about full reign. This obviously isn't fool proof as our sandbox area may not reflect what's in dev/staging/prod since people play with it, but it's helped us a lot.</p>\n", "OwnerUserId": "670388", "LastActivityDate": "2018-10-05T11:39:38.700", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "183153535", "PostHistoryTypeId": "2", "PostId": "52664850", "RevisionGUID": "51eab2e0-54f8-4c00-ab99-4d9eeec56820", "CreationDate": "2018-10-05T11:39:38.700", "UserId": "670388", "Text": "We have been using [cfn-python-lint](https://github.com/awslabs/cfn-python-lint/) as a precursor to building. Should this fail, we do not build. Rules provided in cfn-python-lint are a lot more comprehensive than `aws cloudformation validate-template` and in addition, it gives you some good practices rules and it also gives you a framework to write your own rules (which we use for governance). \r\n\r\nAdditionally, we don't build on feature branches, we build only master. We gives devs an environment to play with where they can run the pipelines that we would normally run on master and in dev/staging/prod. This is a completely separate account where they have just about full reign. This obviously isn't fool proof as our sandbox area may not reflect what's in dev/staging/prod since people play with it, but it's helped us a lot.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "Additionally, we don't build on feature branches, we build only master. ", "keywords": ["feature"]}, {"source": "Text", "text": "This obviously isn't fool proof as our sandbox area may not reflect what's in dev/staging/prod since people play with it, but it's helped us a lot.", "keywords": ["area"]}]}], "filtered-sentences": [{"source": "Body", "text": "Additionally, we don't build on feature branches, we build only master. ", "keywords": ["feature"]}, {"source": "Body", "text": "This obviously isn't fool proof as our sandbox area may not reflect what's in dev/staging/prod since people play with it, but it's helped us a lot.", "keywords": ["area"]}]}, {"Id": "52664636", "PostTypeId": "2", "ParentId": "52664446", "CreationDate": "2018-10-05T11:27:42.730", "Score": "1", "Body": "<p>You can do some simple validation of CloudFormation templates using the <code>aws cloudformation validate-template</code> <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-validate-template.html\" rel=\"nofollow noreferrer\">CLI command</a>.  This is roughly the equivalent of static code analysis for other languages: it checks things like parameter name typos and that the template is syntactically valid JSON/YAML; but is quite limited in terms of what validation it can perform.</p>\n\n<p>As that article says, the only sure-fire way to check that a CloudFormation template will create resources the way you want/expect it to is to try it, and that does indeed mean creating stacks as part of your CI and testing process.  Since this can be slow in the case of some resources and expensive in the case of others, you may want to limit the commits on which the full stack-creation testing is performed.</p>\n", "OwnerUserId": "4473685", "LastActivityDate": "2018-10-05T11:27:42.730", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "183152680", "PostHistoryTypeId": "2", "PostId": "52664636", "RevisionGUID": "809481cf-ef63-40a8-a5ed-fd076da977bc", "CreationDate": "2018-10-05T11:27:42.730", "UserId": "4473685", "Text": "You can do some simple validation of CloudFormation templates using the `aws cloudformation validate-template` [CLI command](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-validate-template.html).  This is roughly the equivalent of static code analysis for other languages: it checks things like parameter name typos and that the template is syntactically valid JSON/YAML; but is quite limited in terms of what validation it can perform.\r\n\r\nAs that article says, the only sure-fire way to check that a CloudFormation template will create resources the way you want/expect it to is to try it, and that does indeed mean creating stacks as part of your CI and testing process.  Since this can be slow in the case of some resources and expensive in the case of others, you may want to limit the commits on which the full stack-creation testing is performed.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "As that article says, the only sure-fire way to check that a CloudFormation template will create resources the way you want/expect it to is to try it, and that does indeed mean creating stacks as part of your CI and testing process. ", "keywords": ["test"]}, {"source": "Text", "text": "Since this can be slow in the case of some resources and expensive in the case of others, you may want to limit the commits on which the full stack-creation testing is performed.", "keywords": ["expense", "test"]}]}], "filtered-sentences": [{"source": "Body", "text": "As that article says, the only sure-fire way to check that a CloudFormation template will create resources the way you want/expect it to is to try it, and that does indeed mean creating stacks as part of your CI and testing process. ", "keywords": ["test"]}, {"source": "Body", "text": "Since this can be slow in the case of some resources and expensive in the case of others, you may want to limit the commits on which the full stack-creation testing is performed.", "keywords": ["expense", "test"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "CloudFormation templates: continuous testing for infrastructure as a code", "keywords": ["test"]}, {"source": "Body", "text": "As the project is developed we begin to use some new AWS services or change configuration of some which are already used. ", "keywords": ["change"]}, {"source": "Body", "text": "In such case we need something like continuous testing for our template. ", "keywords": ["test"]}, {"source": "Body", "text": "Should we configure automatic creation of stack from our CloudFormation template as part of continuous integration process and to track template changes in our repository? ", "keywords": ["change"]}]}