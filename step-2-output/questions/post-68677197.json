{"Id": "68677197", "PostTypeId": "1", "CreationDate": "2021-08-06T06:38:52.203", "Score": "2", "ViewCount": "980", "Body": "<p>I am trying to deploy the api and lambda function using SAM. But the Method Response and Integration Response are empty. I am aiming to configure the api-gateway like below picture. In this I have manually configured the api-gateway and its working but when I use the SAM to generate the api-gateway it doesn't shpes the Method Response and Integration Response.</p>\n<p>Without Sam:\n<a href=\"https://i.stack.imgur.com/YE41T.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/YE41T.png\" alt=\"enter image description here\" /></a></p>\n<p>With Sam:\n<a href=\"https://i.stack.imgur.com/SynCy.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/SynCy.png\" alt=\"enter image description here\" /></a></p>\n<pre><code>AWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\n\nGlobals:\n  Function:\n    Timeout: 500\n    MemorySize: 5000\n\nResources:\n  MyApi:\n    Type: AWS::Serverless::Api\n    Properties:\n      StageName: Prod\n      GatewayResponses:\n        DEFAULT_4xx:\n          ResponseParameters:\n            Headers:\n              Access-Control-Expose-Headers: &quot;'WWW-Authenticate'&quot;\n              Access-Control-Allow-Origin: &quot;'*'&quot;\n\n  InferenceFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      PackageType: Image\n      Events:\n        Inference:\n          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api\n          Properties:\n            Path: /zero-shot-classification\n            Method: post\n            RestApiId: !Ref MyApi\n    Metadata:\n      Dockerfile: Dockerfile\n      DockerContext: ./zero-shot-classification\n      DockerTag: zero-shot-classification\n</code></pre>\n", "OwnerDisplayName": "user16133873", "LastActivityDate": "2021-08-06T08:02:05.287", "Title": "Unable to configure Method Response and Integration Response using AWS SAM", "Tags": "|amazon-web-services|aws-lambda|aws-cloudformation|aws-api-gateway|aws-sam|", "AnswerCount": "1", "CommentCount": "3", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "121370877", "PostId": "68677197", "Score": "0", "Text": "SAM way is the way it is normally done. Why would you do it the other way? You would have to basically not to use SAM for that, and do everything from scratch.", "CreationDate": "2021-08-06T07:16:09.253", "UserId": "248823", "filtered-sentences": []}, {"Id": "121371076", "PostId": "68677197", "Score": "0", "Text": "Actually when I deploy it with SAM the endpoint are not reachable using postman, it gives `internal server error`.  Although the lambda function is working. But when I manually configure the api-gateway (simple step to configure REST Api) it works.", "CreationDate": "2021-08-06T07:27:52.850", "UserDisplayName": "user16133873", "filtered-sentences": []}, {"Id": "121371106", "PostId": "68677197", "Score": "0", "Text": "So I compared both of the api-gateway manually created one and sam created one and I found the only difference it has is this", "CreationDate": "2021-08-06T07:28:59.410", "UserDisplayName": "user16133873", "filtered-sentences": []}], "history": [{"Id": "251523798", "PostHistoryTypeId": "2", "PostId": "68677197", "RevisionGUID": "fbbec303-3a10-467c-9dbf-2f996157d1ef", "CreationDate": "2021-08-06T06:38:52.203", "UserDisplayName": "user16133873", "Text": "I am trying to deploy the api and lambda function using SAM. But the Method Response and Integration Response are empty. I am aiming to configure the api-gateway like below picture. In this I have manually configured the api-gateway and its working but when I use the SAM to generate the api-gateway it doesn't shpes the Method Response and Integration Response.\r\n\r\nWithout Sam:\r\n[![enter image description here][1]][1]\r\n\r\nWith Sam:\r\n[![enter image description here][2]][2]\r\n\r\n```\r\nAWSTemplateFormatVersion: '2010-09-09'\r\nTransform: AWS::Serverless-2016-10-31\r\n\r\nGlobals:\r\n  Function:\r\n    Timeout: 500\r\n    MemorySize: 5000\r\n\r\nResources:\r\n  MyApi:\r\n    Type: AWS::Serverless::Api\r\n    Properties:\r\n      StageName: Prod\r\n      GatewayResponses:\r\n        DEFAULT_4xx:\r\n          ResponseParameters:\r\n            Headers:\r\n              Access-Control-Expose-Headers: \"'WWW-Authenticate'\"\r\n              Access-Control-Allow-Origin: \"'*'\"\r\n\r\n  InferenceFunction:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      PackageType: Image\r\n      Events:\r\n        Inference:\r\n          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api\r\n          Properties:\r\n            Path: /zero-shot-classification\r\n            Method: post\r\n            RestApiId: !Ref MyApi\r\n    Metadata:\r\n      Dockerfile: Dockerfile\r\n      DockerContext: ./zero-shot-classification\r\n      DockerTag: zero-shot-classification\r\n```\r\n\r\n\r\n  [1]: https://i.stack.imgur.com/YE41T.png\r\n  [2]: https://i.stack.imgur.com/SynCy.png", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "251523799", "PostHistoryTypeId": "1", "PostId": "68677197", "RevisionGUID": "fbbec303-3a10-467c-9dbf-2f996157d1ef", "CreationDate": "2021-08-06T06:38:52.203", "UserDisplayName": "user16133873", "Text": "Unable to configure Method Response and Integration Response using AWS SAM", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "251523800", "PostHistoryTypeId": "3", "PostId": "68677197", "RevisionGUID": "fbbec303-3a10-467c-9dbf-2f996157d1ef", "CreationDate": "2021-08-06T06:38:52.203", "UserDisplayName": "user16133873", "Text": "|amazon-web-services|aws-lambda|aws-cloudformation|aws-api-gateway|aws-sam|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "68678185", "PostTypeId": "2", "ParentId": "68677197", "CreationDate": "2021-08-06T08:02:05.287", "Score": "3", "Body": "<p>The difference you see is the difference between how the payload is sent to the lambda and how API gateway processes the response from the lambda. Seeing as in your CloudFormation you do not specify a specification for your API endpoints, AWS SAM will construct this based on the events from your functions. However, AWS SAM will always use the LAMBDA_PROXY integration type, while you seem to be wanting to use the LAMBDA integration type.</p>\n<p>I'd suggest you take your manually created API gateway and export it to an openapi/swagger definition. This can then be used as <code>DefinitionBody</code> in you <code>MyApi</code>. That way you can specify it uses the LAMBDA integration instead of the LAMBDA_PROXY integration. Don't forget to update the swagger definition so it uses the created function in your cloudformation and not the function that existed when you exported the API.</p>\n<p>That being said, the LAMBDA_PROXY way is more widely used and also removes the need for template mappings in your API Gateway. It is also the only integration type for lambdas that is supported in the HTTP API (API Gateway v2), which is a lot cheaper than the classic REST API.</p>\n", "OwnerUserId": "907480", "LastActivityDate": "2021-08-06T08:02:05.287", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "121373088", "PostId": "68678185", "Score": "0", "Text": "When I run the sam template and use postman to hit the api endpoints I get `internal server error` that was the main reason I was thinking that I should configured the method response or integration response, do you think the error is because of this?", "CreationDate": "2021-08-06T09:05:39.550", "UserDisplayName": "user16133873", "filtered-sentences": []}, {"Id": "121373110", "PostId": "68678185", "Score": "0", "Text": "That is possible yes, the payload that is sent to lambda with a LAMBDA_PROXY integration is very different. So if you're lambda code is erroring because of this change in payload, this can result in an internal server error response in your API.", "CreationDate": "2021-08-06T09:06:44.007", "UserId": "907480", "filtered-sentences": [{"source": "Text", "text": "So if you're lambda code is erroring because of this change in payload, this can result in an internal server error response in your API.", "keywords": ["change"]}]}, {"Id": "121373130", "PostId": "68678185", "Score": "0", "Text": "So I won't be able to use SAM for api-gateway, what alternative do I have?", "CreationDate": "2021-08-06T09:07:39.593", "UserDisplayName": "user16133873", "filtered-sentences": []}, {"Id": "121373201", "PostId": "68678185", "Score": "0", "Text": "Yes you will, like I said in the answer above, you can define `DefinitionBody` in your `MyApi` and SAM will not construct the body itself.", "CreationDate": "2021-08-06T09:10:03.407", "UserId": "907480", "filtered-sentences": []}], "history": [{"Id": "251527893", "PostHistoryTypeId": "2", "PostId": "68678185", "RevisionGUID": "150509b8-9e84-45b5-b1e3-0c53a08eccf0", "CreationDate": "2021-08-06T08:02:05.287", "UserId": "907480", "Text": "The difference you see is the difference between how the payload is sent to the lambda and how API gateway processes the response from the lambda. Seeing as in your CloudFormation you do not specify a specification for your API endpoints, AWS SAM will construct this based on the events from your functions. However, AWS SAM will always use the LAMBDA_PROXY integration type, while you seem to be wanting to use the LAMBDA integration type.\r\n\r\nI'd suggest you take your manually created API gateway and export it to an openapi/swagger definition. This can then be used as `DefinitionBody` in you `MyApi`. That way you can specify it uses the LAMBDA integration instead of the LAMBDA_PROXY integration. Don't forget to update the swagger definition so it uses the created function in your cloudformation and not the function that existed when you exported the API.\r\n\r\nThat being said, the LAMBDA_PROXY way is more widely used and also removes the need for template mappings in your API Gateway. It is also the only integration type for lambdas that is supported in the HTTP API (API Gateway v2), which is a lot cheaper than the classic REST API.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "It is also the only integration type for lambdas that is supported in the HTTP API (API Gateway v2), which is a lot cheaper than the classic REST API.", "keywords": ["cheap"]}]}], "filtered-sentences": [{"source": "Body", "text": "It is also the only integration type for lambdas that is supported in the HTTP API (API Gateway v2), which is a lot cheaper than the classic REST API.", "keywords": ["cheap"]}]}], "contains-topic": true, "filtered-sentences": []}