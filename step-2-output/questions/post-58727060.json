{"Id": "58727060", "PostTypeId": "1", "AcceptedAnswerId": "58727210", "CreationDate": "2019-11-06T09:39:22.157", "Score": "2", "ViewCount": "2700", "Body": "<p>Having trouble getting the role to have access to two tables. Example YAML for template.yaml:</p>\n\n<pre><code>Resources:\n  MyFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: path/to/something\n      Handler: index.handler\n      Runtime: nodejs10.x\n      Events:\n        Get:\n          Type: Api\n          Properties:\n            RestApiId: !Ref MyApi\n            Path: /path/to/other/thing\n            Method: post\n      Policies:\n        DynamoDBCrudPolicy:\n          TableName:\n            table1\n            table2\n</code></pre>\n\n<p>I need this function to be able to read/write on table1 and table2, but this doesn't work. I tried:</p>\n\n<pre><code>- table1\n- table2\n</code></pre>\n\n<p>But that doesn't work either. Also tried:</p>\n\n<pre><code>Policies:\n  - DynamoDBCrudPolicy:\n    TableName:\n      table1\n  - DynamoDBCrudPolicy:\n    TableName:\n      table2\n</code></pre>\n\n<p>But that errors out as well. How do I do this properly?</p>\n", "OwnerUserId": "497883", "LastActivityDate": "2019-11-07T00:23:43.610", "Title": "AWS SAM YAML - Attach same policy multiple times, or multiple tables on same DynamoDB policy", "Tags": "|amazon-web-services|aws-lambda|yaml|aws-cloudformation|aws-sam|", "AnswerCount": "2", "CommentCount": "0", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "208660122", "PostHistoryTypeId": "2", "PostId": "58727060", "RevisionGUID": "e88f378e-c069-4f44-9b73-06960dc617bb", "CreationDate": "2019-11-06T09:39:22.157", "UserId": "497883", "Text": "Having trouble getting the role to have access to two tables. Example YAML for template.yaml:\r\n\r\n    Resources:\r\n      MyFunction:\r\n        Type: AWS::Serverless::Function\r\n        Properties:\r\n          CodeUri: path/to/something\r\n          Handler: index.handler\r\n          Runtime: nodejs10.x\r\n          Events:\r\n            Get:\r\n              Type: Api\r\n              Properties:\r\n                RestApiId: !Ref MyApi\r\n                Path: /path/to/other/thing\r\n                Method: post\r\n          Policies:\r\n            DynamoDBCrudPolicy:\r\n              TableName:\r\n                table1\r\n                table2\r\n\r\nI need this function to be able to read/write on table1 and table2, but this doesn't work. I tried:\r\n\r\n    - table1\r\n    - table2\r\n\r\nBut that doesn't work either. Also tried:\r\n\r\n    Policies:\r\n      - DynamoDBCrudPolicy:\r\n        TableName:\r\n          table1\r\n      - DynamoDBCrudPolicy:\r\n        TableName:\r\n          table2\r\n\r\nBut that errors out as well. How do I do this properly?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "208660123", "PostHistoryTypeId": "1", "PostId": "58727060", "RevisionGUID": "e88f378e-c069-4f44-9b73-06960dc617bb", "CreationDate": "2019-11-06T09:39:22.157", "UserId": "497883", "Text": "AWS SAM YAML - Attach same policy multiple times, or multiple tables on same DynamoDB policy", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "AWS SAM YAML - Attach same policy multiple times, or multiple tables on same DynamoDB policy", "keywords": ["policy"]}]}, {"Id": "208660124", "PostHistoryTypeId": "3", "PostId": "58727060", "RevisionGUID": "e88f378e-c069-4f44-9b73-06960dc617bb", "CreationDate": "2019-11-06T09:39:22.157", "UserId": "497883", "Text": "|amazon-web-services|aws-lambda|yaml|aws-cloudformation|aws-sam|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "58727210", "PostTypeId": "2", "ParentId": "58727060", "CreationDate": "2019-11-06T09:47:33.147", "Score": "5", "Body": "<p>What error do you have? Looks like you miss the indentation to the <code>TableName</code>, try this instead: </p>\n\n<pre><code>Policies:\n - DynamoDBCrudPolicy: \n     TableName: table1\n - DynamoDBCrudPolicy: \n     TableName: table2\n</code></pre>\n\n<p>PS: I could have write this into the comment but the code wasn't formatting properly</p>\n", "OwnerUserId": "8868419", "LastEditorUserId": "8868419", "LastEditDate": "2019-11-07T00:23:43.610", "LastActivityDate": "2019-11-07T00:23:43.610", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "103760759", "PostId": "58727210", "Score": "2", "Text": "This is what did it. I'm not a YAML expert. If you edit yours to align the first \"- DynamoDBCrudPolicy\" all the way to the left I can accept the answer. So basically, I needed to put the \"-\" under the \"P\" in \"Policies\", and then I had the \"TableName:\" rows indented 4 spaces, and that worked.", "CreationDate": "2019-11-06T17:11:11.150", "UserId": "497883", "filtered-sentences": []}], "history": [{"Id": "208661201", "PostHistoryTypeId": "5", "PostId": "58727210", "RevisionGUID": "3e7dedf2-1aa1-4d6f-b38a-3887aa6eaea6", "CreationDate": "2019-11-06T09:53:28.427", "UserId": "8868419", "Comment": "added 86 characters in body", "Text": "What error do you have? Looks like you miss the indentation to the `TableName`, try this instead: \r\n``` \r\nPolicies:\r\n - DynamoDBCrudPolicy: \r\n     TableName: table1\r\n- DynamoDBCrudPolicy: \r\n     TableName: table2\r\n ```\r\nPS: I could have write this into the comment but the code wasn't formatting properly", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "208660730", "PostHistoryTypeId": "2", "PostId": "58727210", "RevisionGUID": "4e36f936-1686-424d-8618-9116687574df", "CreationDate": "2019-11-06T09:47:33.147", "UserId": "8868419", "Text": "What error do you have? Looks like you miss the indentation to the `TableName`, try this instead: \r\n``` \r\nPolicies:\r\n - DynamoDBCrudPolicy: \r\n     TableName: table1\r\n- DynamoDBCrudPolicy: \r\n     TableName: table2\r\n ```", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "208714263", "PostHistoryTypeId": "5", "PostId": "58727210", "RevisionGUID": "25728f21-cf56-42f2-8822-a1361c38d901", "CreationDate": "2019-11-07T00:23:43.610", "UserId": "8868419", "Comment": "add space", "Text": "What error do you have? Looks like you miss the indentation to the `TableName`, try this instead: \r\n``` \r\nPolicies:\r\n - DynamoDBCrudPolicy: \r\n     TableName: table1\r\n - DynamoDBCrudPolicy: \r\n     TableName: table2\r\n ```\r\nPS: I could have write this into the comment but the code wasn't formatting properly", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "58727605", "PostTypeId": "2", "ParentId": "58727060", "CreationDate": "2019-11-06T10:07:19.353", "Score": "0", "Body": "<p>What I would do, is to create a role for your lambda function like so:</p>\n\n<pre><code>Resources:\n  MyFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: path/to/something\n      Handler: index.handler\n      Runtime: nodejs10.x\n      Events:\n        Get:\n          Type: Api\n          Properties:\n            RestApiId: !Ref MyApi\n            Path: /path/to/other/thing\n            Method: post\n      Role: !GetAtt MyDynamoDBRole.Arn\n</code></pre>\n\n<p>And then attach a policy to that role. Something like this:</p>\n\n<pre><code>  MyDynamoDBRole:    \n    Type: AWS::IAM::Role\n    Properties:\n      Path: \"/\"\n      Policies:\n        -\n          PolicyName: \"myDynamoDBPolicy\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              -\n                Effect: \"Allow\"\n                Action:\n                  - \"dynamodb:BatchGetItem\"\n                  - \"dynamodb:BatchWriteItem\"\n                  - \"dynamodb:PutItem\"\n                  - \"dynamodb:GetItem\"\n                  - \"dynamodb:Scan\"\n                  - \"dynamodb:Query\"\n                  - \"dynamodb:UpdateItem\"\n                  - \"dynamodb:UpdateTable\"\n                  - \"dynamodb:GetRecords\"\n                Resource: \"arn:aws:dynamodb:us-east-1:123456789012:table/table1\"\n      AssumeRolePolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n          -\n            Effect: Allow\n            Principal:\n              Service:\n              - dynamodb.amazonaws.com\n            Action: sts:AssumeRole\n</code></pre>\n\n<p><em>Please note:</em> that you might need to tweak specific permissions to suit your use case, the code above is just an example to illustrate the construct that I am suggesting.</p>\n", "OwnerUserId": "11078725", "LastActivityDate": "2019-11-06T10:07:19.353", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "103760249", "PostId": "58727605", "Score": "0", "Text": "That's fine if I wanted to create the role; I was just trying to do it using the predefined policies within SAM, since SAM is billed as being able to make serverless infrastructure easier to roll out. I guess I was looking for a way to do it without having to write my own policy and instead just use the \"DynamoDBCrudPolicy\" predefined policy. I just need the function to be able to access 2 tables instead of 1, so is there a way for that policy to access 2 tables, or to attach the policy twice?", "CreationDate": "2019-11-06T16:55:26.720", "UserId": "497883", "filtered-sentences": [{"source": "Text", "text": "That's fine if I wanted to create the role; I was just trying to do it using the predefined policies within SAM, since SAM is billed as being able to make serverless infrastructure easier to roll out. ", "keywords": ["bill"]}, {"source": "Text", "text": "I guess I was looking for a way to do it without having to write my own policy and instead just use the \"DynamoDBCrudPolicy\" predefined policy. ", "keywords": ["policy"]}, {"source": "Text", "text": "I just need the function to be able to access 2 tables instead of 1, so is there a way for that policy to access 2 tables, or to attach the policy twice?", "keywords": ["policy"]}]}], "history": [{"Id": "208662333", "PostHistoryTypeId": "2", "PostId": "58727605", "RevisionGUID": "27aabdb8-e153-4d61-bfc6-150cf5ce2959", "CreationDate": "2019-11-06T10:07:19.353", "UserId": "11078725", "Text": "What I would do, is to create a role for your lambda function like so:\r\n```\r\nResources:\r\n  MyFunction:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      CodeUri: path/to/something\r\n      Handler: index.handler\r\n      Runtime: nodejs10.x\r\n      Events:\r\n        Get:\r\n          Type: Api\r\n          Properties:\r\n            RestApiId: !Ref MyApi\r\n            Path: /path/to/other/thing\r\n            Method: post\r\n      Role: !GetAtt MyDynamoDBRole.Arn\r\n```\r\n\r\nAnd then attach a policy to that role. Something like this:\r\n```\r\n  MyDynamoDBRole:    \r\n    Type: AWS::IAM::Role\r\n    Properties:\r\n      Path: \"/\"\r\n      Policies:\r\n        -\r\n          PolicyName: \"myDynamoDBPolicy\"\r\n          PolicyDocument:\r\n            Version: \"2012-10-17\"\r\n            Statement:\r\n              -\r\n                Effect: \"Allow\"\r\n                Action:\r\n                  - \"dynamodb:BatchGetItem\"\r\n                  - \"dynamodb:BatchWriteItem\"\r\n                  - \"dynamodb:PutItem\"\r\n                  - \"dynamodb:GetItem\"\r\n                  - \"dynamodb:Scan\"\r\n                  - \"dynamodb:Query\"\r\n                  - \"dynamodb:UpdateItem\"\r\n                  - \"dynamodb:UpdateTable\"\r\n                  - \"dynamodb:GetRecords\"\r\n                Resource: \"arn:aws:dynamodb:us-east-1:123456789012:table/table1\"\r\n      AssumeRolePolicyDocument:\r\n          Version: '2012-10-17'\r\n          Statement:\r\n          -\r\n            Effect: Allow\r\n            Principal:\r\n              Service:\r\n              - dynamodb.amazonaws.com\r\n            Action: sts:AssumeRole\r\n```\r\n\r\n*Please note:* that you might need to tweak specific permissions to suit your use case, the code above is just an example to illustrate the construct that I am suggesting.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "What I would do, is to create a role for your lambda function like so: ``` Resources: MyFunction: Type: AWS::Serverless::Function Properties: CodeUri: path/to/something Handler: index.handler Runtime: nodejs10.x Events: Get: Type: Api Properties: RestApiId: !Ref MyApi Path: /path/to/other/thing Method: post Role: !GetAtt MyDynamoDBRole.Arn ``` And then attach a policy to that role. Something like this: ``` MyDynamoDBRole: Type: AWS::IAM::Role Properties: Path: \"/\" Policies: - PolicyName: \"myDynamoDBPolicy\" PolicyDocument: Version: \"2012-10-17\" Statement: - Effect: \"Allow\" Action: - \"dynamodb:BatchGetItem\" - \"dynamodb:BatchWriteItem\" - \"dynamodb:PutItem\" - \"dynamodb:GetItem\" - \"dynamodb:Scan\" - \"dynamodb:Query\" - \"dynamodb:UpdateItem\" - \"dynamodb:UpdateTable\" - \"dynamodb:GetRecords\" Resource: \"arn:aws:dynamodb:us-east-1:123456789012:table/table1\" AssumeRolePolicyDocument: Version: '2012-10-17' Statement: - Effect: Allow Principal: Service: - dynamodb.amazonaws.com Action: sts:AssumeRole ``` ", "keywords": ["policy"]}, {"source": "Text", "text": "*Please note:* that you might need to tweak specific permissions to suit your use case, the code above is just an example to illustrate the construct that I am suggesting.", "keywords": ["permissions"]}]}], "filtered-sentences": [{"source": "Body", "text": "What I would do, is to create a role for your lambda function like so: And then attach a policy to that role. ", "keywords": ["policy"]}, {"source": "Body", "text": "Something like this: Please note: that you might need to tweak specific permissions to suit your use case, the code above is just an example to illustrate the construct that I am suggesting.", "keywords": ["permissions"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "AWS SAM YAML - Attach same policy multiple times, or multiple tables on same DynamoDB policy", "keywords": ["policy"]}]}