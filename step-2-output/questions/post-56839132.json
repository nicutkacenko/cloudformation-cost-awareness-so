{"Id": "56839132", "PostTypeId": "1", "AcceptedAnswerId": "56840977", "CreationDate": "2019-07-01T16:25:19.600", "Score": "2", "ViewCount": "843", "Body": "<p>I'm trying to create a stack on AWS CloudFormation, with an EC2 instance and 2 S3 buckets. My script is attempting to assign a Policy to the EC2 instance that allows access to the Storage bucket, but no matter what I do the rights are not assigned. Additionally, the userdata is not executed at all.</p>\n\n<p>I tried testing thoroughly if the EC2 really does not have the rights: the CLI confirmed that it does not. I replaced the userdata with a simple script making a textfile, it really is not created. AWS Designer gives no complaints and shows the correct template structure. The stack description runs and executes with no errors, except the S3 storage bucket access and the user data don't work (no warnings).</p>\n\n<p>After a LOT of manual editing and checking very carefully with the documentation, I realised I should have done this in a higher level language. Therefore I tried to import the script in a simple python Troposphere script using the templateGenerator. This leads to the following error (no other errors are created anywhere so far, everything just silently goes wrong, JSON syntax validators also have no complaints):</p>\n\n<pre><code>TypeError: &lt;class 'troposphere.iam.PolicyType'&gt;: MickStorageS3BucketsPolicy.PolicyDocument is &lt;class 'list'&gt;, expected (&lt;class 'dict'&gt;,)\n</code></pre>\n\n<p>However, clearly my PolicyDocument is of type dictionary, and I don't understand how it can be interpreted as a list. I have stared at this for many hours now, I may have become blind to the problem but I would Really really appreciate any help at this point!!!!</p>\n\n<p>The security group and inbound traffic settings do work properly, my dockerized flask app runs fine (on the EC2) but just can't access the bucket (though I have to start it manually through SSH because userdata won't execute, I also tried doing that using the CFN-init segment in the ec2 metadata (under commands) but nothing executes, even if I try to run CFNinit manually after connecting by SSH).</p>\n\n<p>This is the cloudformation template I wrote:</p>\n\n<pre><code>{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \"Description\" : \"Attach IAM Role to an EC2\",\n  \"Parameters\" : {\n    \"KeyName\" : {\n      \"Description\" : \"EC2 Instance SSH Key\",\n      \"Type\" : \"AWS::EC2::KeyPair::KeyName\",\n      \"Default\" : \"MickFirstSSHKeyPair\"\n    },\n    \"InstanceType\" : {\n      \"Description\" : \"EC2 instance specs configuration\",\n      \"Type\" : \"String\",\n      \"Default\" : \"t2.micro\",\n      \"AllowedValues\" : [\"t2.micro\", \"t2.small\", \"t2.medium\"]\n    }\n  },\n  \"Mappings\" : {\n    \"AMIs\" : {\n      \"us-east-1\" : {\n        \"Name\" : \"ami-8c1be5f6\"\n      },\n      \"us-east-2\" : {\n        \"Name\" : \"ami-c5062ba0\"\n      },\n      \"eu-west-1\" : {\n        \"Name\" : \"ami-acd005d5\"\n      },\n      \"eu-west-3\" : {\n        \"Name\" : \"ami-05b93cd5a1b552734\"\n      },\n      \"us-west-2\" : {\n        \"Name\" : \"ami-0f2176987ee50226e\"\n      },\n      \"ap-southeast-2\" : {\n        \"Name\" : \"ami-8536d6e7\"\n      }     \n    }\n  },\n  \"Resources\" : {\n    \"mickmys3storageinstance\" : {\n      \"Type\" : \"AWS::S3::Bucket\",\n      \"Properties\" : {\n\n      }\n    },\n    \"mickmys3processedinstance\" : {\n      \"Type\" : \"AWS::S3::Bucket\",\n      \"Properties\" : {\n\n      }\n    },\n\n    \"MickMainEC2\" : {\n      \"Type\" : \"AWS::EC2::Instance\",\n      \"Metadata\" : {\n        \"AWS::CloudFormation::Init\" : {\n          \"config\" : {\n            \"files\" : {\n\n            },\n            \"commands\" : {\n\n            }\n\n          }\n        }\n      },\n      \"Properties\" : {\n        \"UserData\": {\n            \"Fn::Base64\" : \"echo 'Heelo ww' &gt; ~/hello.txt\" \n        },\n        \"InstanceType\" : {\n          \"Ref\" : \"InstanceType\"\n        },\n        \"ImageId\" : {\n          \"Fn::FindInMap\" : [\n            \"AMIs\",\n            {\n              \"Ref\" : \"AWS::Region\"\n            },\n            \"Name\"\n          ]\n        },\n        \"KeyName\" : {\n          \"Ref\" : \"KeyName\"\n        },\n        \"IamInstanceProfile\" : {\n          \"Ref\" : \"ListS3BucketsInstanceProfile\"\n        },\n        \"SecurityGroupIds\" : [\n          {\n            \"Ref\" : \"SSHAccessSG\"\n          },\n          {\n            \"Ref\" : \"PublicAccessSG\"\n          }\n        ],\n        \"Tags\" : [\n          {\n            \"Key\" : \"Name\",\n            \"Value\" : \"MickMainEC2\"\n          }\n        ]\n      }\n    },\n    \"SSHAccessSG\" : {\n      \"Type\" : \"AWS::EC2::SecurityGroup\",\n      \"Properties\" : {\n        \"GroupDescription\" : \"Allow SSH access from anywhere\",\n        \"SecurityGroupIngress\" : [\n          {\n            \"FromPort\" : \"22\",\n            \"ToPort\" : \"22\",\n            \"IpProtocol\" : \"tcp\",\n            \"CidrIp\" : \"0.0.0.0/0\"\n          }\n        ],\n        \"Tags\" : [\n          {\n            \"Key\" : \"Name\",\n            \"Value\" : \"SSHAccessSG\"\n          }\n        ]\n      }\n    },\n    \"PublicAccessSG\" : {\n      \"Type\" : \"AWS::EC2::SecurityGroup\",\n      \"Properties\" : {\n        \"GroupDescription\" : \"Allow HTML requests from anywhere\",\n        \"SecurityGroupIngress\" : [\n          {\n            \"FromPort\" : \"80\",\n            \"ToPort\" : \"80\",\n            \"IpProtocol\" : \"tcp\",\n            \"CidrIp\" : \"0.0.0.0/0\"\n          }\n        ],\n        \"Tags\" : [\n          {\n            \"Key\" : \"Name\",\n            \"Value\" : \"PublicAccessSG\"\n          }\n        ]\n      }\n    },\n    \"ListS3BucketsInstanceProfile\" : {\n      \"Type\" : \"AWS::IAM::InstanceProfile\",\n      \"Properties\" : {\n        \"Path\" : \"/\",\n        \"Roles\" : [\n          {\n            \"Ref\" : \"MickListS3BucketsRole\"\n          }\n        ]\n      }\n    },\n    \"MickStorageS3BucketsPolicy\" : {\n        \"Type\" : \"AWS::IAM::Policy\",\n        \"Properties\" : {\n            \"PolicyName\" : \"MickStorageS3BucketsPolicy\",\n\n            \"PolicyDocument\" : {\n                \"Version\": \"2012-10-17\",\n                \"Statement\": [\n                    {\n                        \"Sid\": \"ListObjectsInBucket\",\n                        \"Effect\": \"Allow\",\n                        \"Action\": [\n                        \"s3:ListBucket\"\n                        ],\n                        \"Resource\": [\n                            \"arn:aws:s3:::mickmys3storageinstance\", \"arn:aws:s3:::mickmys3storageinstance/*\"\n                        ]\n                    },  \n                    {\n                        \"Sid\": \"AllObjectActions\",\n                        \"Effect\": \"Allow\",\n                        \"Action\": [\"s3:*Object\"],\n                        \"Resource\": [\n                            \"arn:aws:s3:::mickmys3storageinstance\", \"arn:aws:s3:::mickmys3storageinstance/*\"\n                        ]\n                    }\n                ]\n            },\n            \"Roles\" : [\n                {\n                    \"Ref\" : \"MickListS3BucketsRole\"\n                }\n            ]           \n        }\n    },\n    \"MickListS3BucketsRole\" : {\n      \"Type\" : \"AWS::IAM::Role\",\n      \"Properties\" : {\n        \"AssumeRolePolicyDocument\": {\n          \"Version\" : \"2012-10-17\",\n          \"Statement\" : [\n            {\n              \"Effect\" : \"Allow\",\n              \"Principal\" : {\n                \"Service\" : [\"ec2.amazonaws.com\"]\n              },\n              \"Action\" : [\n                \"sts:AssumeRole\"\n              ]\n            }\n          ]\n        },\n        \"Path\" : \"/\"\n      }\n    }\n  },\n  \"Outputs\" : {\n    \"EC2\" : {\n      \"Description\" : \"EC2 IP address\",\n      \"Value\" : {\n        \"Fn::Join\" : [\n          \"\",\n          [\n            \"ssh ec2-user@\",\n            {\n              \"Fn::GetAtt\" : [\n                \"MickMainEC2\",\n                \"PublicIp\"\n              ]\n            },\n            \" -i \",\n            {\n              \"Ref\" : \"KeyName\"\n            },\n            \".pem\"\n          ]\n        ]\n      }\n    }\n  }\n}\n</code></pre>\n\n<p>Here is my troposphere script generating the error on importing the above:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>from troposphere import Ref, Template\nimport troposphere.ec2 as ec2\n\nfrom troposphere.template_generator import TemplateGenerator\nimport json\nwith open(\"myStackFile.JSON\") as f:\n    json_template = json.load(f)\ntemplate = TemplateGenerator(json_template)\ntemplate.to_json()\n\n\nprint(template.to_yaml())\n\n</code></pre>\n\n<p>I expected the roles to be assigned correctly, as well as the userdata to be executed. I expected troposphere to import the JSON, as it has the correct syntax and also the correct class typing as according to the documentation as far as I can see. I have doublechecked everything by hand for many many hours, I am not sure how to proceed finding the issue with this CloudFormation script. In the future (and I would advise anyone to do the same) I will not edit JSON (or worse, YAML) files by hand any more, and use higher level tools exclusively.</p>\n\n<p>Thank you for ANY help/pointers!</p>\n\n<p>Kind regards</p>\n", "OwnerUserId": "11725049", "LastEditorUserId": "492773", "LastEditDate": "2019-07-01T18:41:20.407", "LastActivityDate": "2019-07-01T18:51:43.577", "Title": "Why does this CloudFormation Template script not work?", "Tags": "|python|json|amazon-web-services|aws-cloudformation|", "AnswerCount": "1", "CommentCount": "1", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "131550539", "PostId": "56839132", "Score": "0", "Text": "Hi, Can you explain how to use that  template_generator?", "CreationDate": "2022-11-21T17:40:24.533", "UserId": "10477460", "filtered-sentences": []}], "history": [{"Id": "200708425", "PostHistoryTypeId": "5", "PostId": "56839132", "RevisionGUID": "dd883ad0-3e9c-4343-aa22-acaa390b1d98", "CreationDate": "2019-07-01T18:41:20.407", "UserId": "492773", "Comment": "added 4 characters in body", "Text": "I'm trying to create a stack on AWS CloudFormation, with an EC2 instance and 2 S3 buckets. My script is attempting to assign a Policy to the EC2 instance that allows access to the Storage bucket, but no matter what I do the rights are not assigned. Additionally, the userdata is not executed at all.\r\n\r\nI tried testing thoroughly if the EC2 really does not have the rights: the CLI confirmed that it does not. I replaced the userdata with a simple script making a textfile, it really is not created. AWS Designer gives no complaints and shows the correct template structure. The stack description runs and executes with no errors, except the S3 storage bucket access and the user data don't work (no warnings).\r\n\r\nAfter a LOT of manual editing and checking very carefully with the documentation, I realised I should have done this in a higher level language. Therefore I tried to import the script in a simple python Troposphere script using the templateGenerator. This leads to the following error (no other errors are created anywhere so far, everything just silently goes wrong, JSON syntax validators also have no complaints):\r\n\r\n    TypeError: <class 'troposphere.iam.PolicyType'>: MickStorageS3BucketsPolicy.PolicyDocument is <class 'list'>, expected (<class 'dict'>,)\r\n\r\nHowever, clearly my PolicyDocument is of type dictionary, and I don't understand how it can be interpreted as a list. I have stared at this for many hours now, I may have become blind to the problem but I would Really really appreciate any help at this point!!!!\r\n\r\nThe security group and inbound traffic settings do work properly, my dockerized flask app runs fine (on the EC2) but just can't access the bucket (though I have to start it manually through SSH because userdata won't execute, I also tried doing that using the CFN-init segment in the ec2 metadata (under commands) but nothing executes, even if I try to run CFNinit manually after connecting by SSH).\r\n\r\nThis is the cloudformation template I wrote:\r\n```JSON\r\n{\r\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\r\n  \"Description\" : \"Attach IAM Role to an EC2\",\r\n  \"Parameters\" : {\r\n    \"KeyName\" : {\r\n      \"Description\" : \"EC2 Instance SSH Key\",\r\n      \"Type\" : \"AWS::EC2::KeyPair::KeyName\",\r\n   \"Default\" : \"MickFirstSSHKeyPair\"\r\n    },\r\n    \"InstanceType\" : {\r\n      \"Description\" : \"EC2 instance specs configuration\",\r\n      \"Type\" : \"String\",\r\n      \"Default\" : \"t2.micro\",\r\n      \"AllowedValues\" : [\"t2.micro\", \"t2.small\", \"t2.medium\"]\r\n    }\r\n  },\r\n  \"Mappings\" : {\r\n    \"AMIs\" : {\r\n      \"us-east-1\" : {\r\n        \"Name\" : \"ami-8c1be5f6\"\r\n      },\r\n      \"us-east-2\" : {\r\n        \"Name\" : \"ami-c5062ba0\"\r\n      },\r\n      \"eu-west-1\" : {\r\n        \"Name\" : \"ami-acd005d5\"\r\n      },\r\n   \"eu-west-3\" : {\r\n        \"Name\" : \"ami-05b93cd5a1b552734\"\r\n      },\r\n   \"us-west-2\" : {\r\n        \"Name\" : \"ami-0f2176987ee50226e\"\r\n      },\r\n      \"ap-southeast-2\" : {\r\n        \"Name\" : \"ami-8536d6e7\"\r\n      }  \r\n    }\r\n  },\r\n  \"Resources\" : {\r\n    \"mickmys3storageinstance\" : {\r\n   \"Type\" : \"AWS::S3::Bucket\",\r\n      \"Properties\" : {\r\n        \r\n   }\r\n    },\r\n \"mickmys3processedinstance\" : {\r\n   \"Type\" : \"AWS::S3::Bucket\",\r\n      \"Properties\" : {\r\n        \r\n   }\r\n    },\r\n \r\n    \"MickMainEC2\" : {\r\n      \"Type\" : \"AWS::EC2::Instance\",\r\n   \"Metadata\" : {\r\n     \"AWS::CloudFormation::Init\" : {\r\n    \"config\" : {\r\n      \"files\" : {\r\n   \r\n   },\r\n   \"commands\" : {\r\n     \r\n   }\r\n    \r\n    }\r\n  }\r\n   },\r\n      \"Properties\" : {\r\n     \"UserData\": {\r\n   \"Fn::Base64\" : \"echo 'Heelo ww' > ~/hello.txt\" \r\n  },\r\n        \"InstanceType\" : {\r\n          \"Ref\" : \"InstanceType\"\r\n        },\r\n        \"ImageId\" : {\r\n          \"Fn::FindInMap\" : [\r\n            \"AMIs\",\r\n            {\r\n              \"Ref\" : \"AWS::Region\"\r\n            },\r\n            \"Name\"\r\n          ]\r\n        },\r\n        \"KeyName\" : {\r\n          \"Ref\" : \"KeyName\"\r\n        },\r\n        \"IamInstanceProfile\" : {\r\n          \"Ref\" : \"ListS3BucketsInstanceProfile\"\r\n        },\r\n        \"SecurityGroupIds\" : [\r\n          {\r\n            \"Ref\" : \"SSHAccessSG\"\r\n    },\r\n    {\r\n   \"Ref\" : \"PublicAccessSG\"\r\n          }\r\n        ],\r\n        \"Tags\" : [\r\n          {\r\n            \"Key\" : \"Name\",\r\n            \"Value\" : \"MickMainEC2\"\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    \"SSHAccessSG\" : {\r\n      \"Type\" : \"AWS::EC2::SecurityGroup\",\r\n      \"Properties\" : {\r\n        \"GroupDescription\" : \"Allow SSH access from anywhere\",\r\n        \"SecurityGroupIngress\" : [\r\n          {\r\n            \"FromPort\" : \"22\",\r\n            \"ToPort\" : \"22\",\r\n            \"IpProtocol\" : \"tcp\",\r\n            \"CidrIp\" : \"0.0.0.0/0\"\r\n          }\r\n        ],\r\n        \"Tags\" : [\r\n          {\r\n            \"Key\" : \"Name\",\r\n            \"Value\" : \"SSHAccessSG\"\r\n          }\r\n        ]\r\n      }\r\n    },\r\n \"PublicAccessSG\" : {\r\n      \"Type\" : \"AWS::EC2::SecurityGroup\",\r\n      \"Properties\" : {\r\n        \"GroupDescription\" : \"Allow HTML requests from anywhere\",\r\n        \"SecurityGroupIngress\" : [\r\n          {\r\n            \"FromPort\" : \"80\",\r\n            \"ToPort\" : \"80\",\r\n            \"IpProtocol\" : \"tcp\",\r\n            \"CidrIp\" : \"0.0.0.0/0\"\r\n          }\r\n        ],\r\n        \"Tags\" : [\r\n          {\r\n            \"Key\" : \"Name\",\r\n            \"Value\" : \"PublicAccessSG\"\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    \"ListS3BucketsInstanceProfile\" : {\r\n      \"Type\" : \"AWS::IAM::InstanceProfile\",\r\n      \"Properties\" : {\r\n        \"Path\" : \"/\",\r\n        \"Roles\" : [\r\n          {\r\n            \"Ref\" : \"MickListS3BucketsRole\"\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    \"MickStorageS3BucketsPolicy\" : {\r\n        \"Type\" : \"AWS::IAM::Policy\",\r\n        \"Properties\" : {\r\n   \"PolicyName\" : \"MickStorageS3BucketsPolicy\",\r\n            \r\n      \"PolicyDocument\" : {\r\n       \"Version\": \"2012-10-17\",\r\n                \"Statement\": [\r\n     {\r\n      \"Sid\": \"ListObjectsInBucket\",\r\n      \"Effect\": \"Allow\",\r\n      \"Action\": [\r\n      \"s3:ListBucket\"\r\n      ],\r\n      \"Resource\": [\r\n       \"arn:aws:s3:::mickmys3storageinstance\", \"arn:aws:s3:::mickmys3storageinstance/*\"\r\n      ]\r\n     }, \r\n     {\r\n      \"Sid\": \"AllObjectActions\",\r\n      \"Effect\": \"Allow\",\r\n      \"Action\": [\"s3:*Object\"],\r\n      \"Resource\": [\r\n       \"arn:aws:s3:::mickmys3storageinstance\", \"arn:aws:s3:::mickmys3storageinstance/*\"\r\n      ]\r\n     }\r\n                ]\r\n   },\r\n            \"Roles\" : [\r\n                {\r\n                    \"Ref\" : \"MickListS3BucketsRole\"\r\n                }\r\n            ]   \r\n        }\r\n    },\r\n    \"MickListS3BucketsRole\" : {\r\n      \"Type\" : \"AWS::IAM::Role\",\r\n      \"Properties\" : {\r\n        \"AssumeRolePolicyDocument\": {\r\n          \"Version\" : \"2012-10-17\",\r\n          \"Statement\" : [\r\n            {\r\n              \"Effect\" : \"Allow\",\r\n              \"Principal\" : {\r\n                \"Service\" : [\"ec2.amazonaws.com\"]\r\n              },\r\n              \"Action\" : [\r\n                \"sts:AssumeRole\"\r\n              ]\r\n            }\r\n          ]\r\n        },\r\n        \"Path\" : \"/\"\r\n      }\r\n    }\r\n  },\r\n  \"Outputs\" : {\r\n    \"EC2\" : {\r\n      \"Description\" : \"EC2 IP address\",\r\n      \"Value\" : {\r\n        \"Fn::Join\" : [\r\n          \"\",\r\n          [\r\n            \"ssh ec2-user@\",\r\n            {\r\n              \"Fn::GetAtt\" : [\r\n                \"MickMainEC2\",\r\n                \"PublicIp\"\r\n              ]\r\n            },\r\n            \" -i \",\r\n            {\r\n              \"Ref\" : \"KeyName\"\r\n            },\r\n            \".pem\"\r\n          ]\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\nHere is my troposphere script generating the error on importing the above:\r\n```python\r\nfrom troposphere import Ref, Template\r\nimport troposphere.ec2 as ec2\r\n\r\nfrom troposphere.template_generator import TemplateGenerator\r\nimport json\r\nwith open(\"myStackFile.JSON\") as f:\r\n    json_template = json.load(f)\r\ntemplate = TemplateGenerator(json_template)\r\ntemplate.to_json()\r\n\r\n\r\nprint(template.to_yaml())\r\n\r\n```\r\n\r\nI expected the roles to be assigned correctly, as well as the userdata to be executed. I expected troposphere to import the JSON, as it has the correct syntax and also the correct class typing as according to the documentation as far as I can see. I have doublechecked everything by hand for many many hours, I am not sure how to proceed finding the issue with this CloudFormation script. In the future (and I would advise anyone to do the same) I will not edit JSON (or worse, YAML) files by hand any more, and use higher level tools exclusively.\r\n\r\nThank you for ANY help/pointers!\r\n\r\nKind regards", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I'm trying to create a stack on AWS CloudFormation, with an EC2 instance and 2 S3 buckets. ", "keywords": ["instance"]}, {"source": "Text", "text": "My script is attempting to assign a Policy to the EC2 instance that allows access to the Storage bucket, but no matter what I do the rights are not assigned. ", "keywords": ["instance", "storage", "policy"]}, {"source": "Text", "text": "I tried testing thoroughly if the EC2 really does not have the rights: the CLI confirmed that it does not. ", "keywords": ["test"]}, {"source": "Text", "text": "The stack description runs and executes with no errors, except the S3 storage bucket access and the user data don't work (no warnings). ", "keywords": ["storage"]}, {"source": "Text", "text": "This is the cloudformation template I wrote: ```JSON { \"AWSTemplateFormatVersion\" : \"2010-09-09\", \"Description\" : \"Attach IAM Role to an EC2\", \"Parameters\" : { \"KeyName\" : { \"Description\" : \"EC2 Instance SSH Key\", \"Type\" : \"AWS::EC2::KeyPair::KeyName\", \"Default\" : \"MickFirstSSHKeyPair\" }, \"InstanceType\" : { \"Description\" : \"EC2 instance specs configuration\", \"Type\" : \"String\", \"Default\" : \"t2.micro\", \"AllowedValues\" : [\"t2.micro\", \"t2.small\", \"t2.medium\"] } }, \"Mappings\" : { \"AMIs\" : { \"us-east-1\" : { \"Name\" : \"ami-8c1be5f6\" ", "keywords": ["instance"]}, {"source": "Text", "text": "}, \"ap-southeast-2\" : { \"Name\" : \"ami-8536d6e7\" } } }, \"Resources\" : { \"mickmys3storageinstance\" : { \"Type\" : \"AWS::S3::Bucket\", \"Properties\" : { } }, \"mickmys3processedinstance\" : { \"Type\" : \"AWS::S3::Bucket\", \"Properties\" : { } }, \"MickMainEC2\" : { \"Type\" : \"AWS::EC2::Instance\", \"Metadata\" : { \"AWS::CloudFormation::Init\" : { \"config\" : { \"files\" : { }, \"commands\" : { } } } }, \"Properties\" : { \"UserData\": { \"Fn::Base64\" : \"echo 'Heelo ww' ", "keywords": ["instance"]}, {"source": "Text", "text": "} ] } }, \"ListS3BucketsInstanceProfile\" : { \"Type\" : \"AWS::IAM::InstanceProfile\", \"Properties\" : { \"Path\" : \"/\", \"Roles\" : [ { \"Ref\" : \"MickListS3BucketsRole\" } ] } }, \"MickStorageS3BucketsPolicy\" : { \"Type\" : \"AWS::IAM::Policy\", \"Properties\" : { \"PolicyName\" : \"MickStorageS3BucketsPolicy\", \"PolicyDocument\" : { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"ListObjectsInBucket\", \"Effect\": \"Allow\", \"Action\": [ \"s3:ListBucket\" ], \"Resource\": [ \"arn:aws:s3:::mickmys3storageinstance\", \"arn:aws:s3:::mickmys3storageinstance/*\" ] }, { \"Sid\": \"AllObjectActions\", \"Effect\": \"Allow\", \"Action\": [\"s3:*Object\"], \"Resource\": [ \"arn:aws:s3:::mickmys3storageinstance\", \"arn:aws:s3:::mickmys3storageinstance/*\" ] } ] }, \"Roles\" : [ { \"Ref\" : \"MickListS3BucketsRole\" } ] } }, \"MickListS3BucketsRole\" : { \"Type\" : \"AWS::IAM::Role\", \"Properties\" : { \"AssumeRolePolicyDocument\": { \"Version\" : \"2012-10-17\", \"Statement\" : [ { \"Effect\" : \"Allow\", \"Principal\" : { \"Service\" : [\"ec2.amazonaws.com\"] }, \"Action\" : [ \"sts:AssumeRole\" ] } ] }, \"Path\" : \"/\" } } }, \"Outputs\" : { \"EC2\" : { \"Description\" : \"EC2 IP address\", \"Value\" : { \"Fn::Join\" : [ \"\", [ \"ssh ec2-user@\", { \"Fn::GetAtt\" : [ \"MickMainEC2\", \"PublicIp\" ] }, \" -i \", { \"Ref\" : \"KeyName\" }, \".pem\" ] ] } } } } ``` ", "keywords": ["policy"]}]}, {"Id": "200701275", "PostHistoryTypeId": "2", "PostId": "56839132", "RevisionGUID": "42ab7195-7770-4183-8b42-aabf590f6cc0", "CreationDate": "2019-07-01T16:25:19.600", "UserId": "11725049", "Text": "I'm trying to create a stack on AWS CloudFormation, with an EC2 instance and 2 S3 buckets. My script is attempting to assign a Policy to the EC2 instance that allows access to the Storage bucket, but no matter what I do the rights are not assigned. Additionally, the userdata is not executed at all.\r\n\r\nI tried testing thoroughly if the EC2 really does not have the rights: the CLI confirmed that it does not. I replaced the userdata with a simple script making a textfile, it really is not created. AWS Designer gives no complaints and shows the correct template structure. The stack description runs and executes with no errors, except the S3 storage bucket access and the user data don't work (no warnings).\r\n\r\nAfter a LOT of manual editing and checking very carefully with the documentation, I realised I should have done this in a higher level language. Therefore I tried to import the script in a simple python Troposphere script using the templateGenerator. This leads to the following error (no other errors are created anywhere so far, everything just silently goes wrong, JSON syntax validators also have no complaints):\r\n\r\nTypeError: <class 'troposphere.iam.PolicyType'>: MickStorageS3BucketsPolicy.PolicyDocument is <class 'list'>, expected (<class 'dict'>,)\r\n\r\nHowever, clearly my PolicyDocument is of type dictionary, and I don't understand how it can be interpreted as a list. I have stared at this for many hours now, I may have become blind to the problem but I would Really really appreciate any help at this point!!!!\r\n\r\nThe security group and inbound traffic settings do work properly, my dockerized flask app runs fine (on the EC2) but just can't access the bucket (though I have to start it manually through SSH because userdata won't execute, I also tried doing that using the CFN-init segment in the ec2 metadata (under commands) but nothing executes, even if I try to run CFNinit manually after connecting by SSH).\r\n\r\nThis is the cloudformation template I wrote:\r\n```JSON\r\n{\r\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\r\n  \"Description\" : \"Attach IAM Role to an EC2\",\r\n  \"Parameters\" : {\r\n    \"KeyName\" : {\r\n      \"Description\" : \"EC2 Instance SSH Key\",\r\n      \"Type\" : \"AWS::EC2::KeyPair::KeyName\",\r\n   \"Default\" : \"MickFirstSSHKeyPair\"\r\n    },\r\n    \"InstanceType\" : {\r\n      \"Description\" : \"EC2 instance specs configuration\",\r\n      \"Type\" : \"String\",\r\n      \"Default\" : \"t2.micro\",\r\n      \"AllowedValues\" : [\"t2.micro\", \"t2.small\", \"t2.medium\"]\r\n    }\r\n  },\r\n  \"Mappings\" : {\r\n    \"AMIs\" : {\r\n      \"us-east-1\" : {\r\n        \"Name\" : \"ami-8c1be5f6\"\r\n      },\r\n      \"us-east-2\" : {\r\n        \"Name\" : \"ami-c5062ba0\"\r\n      },\r\n      \"eu-west-1\" : {\r\n        \"Name\" : \"ami-acd005d5\"\r\n      },\r\n   \"eu-west-3\" : {\r\n        \"Name\" : \"ami-05b93cd5a1b552734\"\r\n      },\r\n   \"us-west-2\" : {\r\n        \"Name\" : \"ami-0f2176987ee50226e\"\r\n      },\r\n      \"ap-southeast-2\" : {\r\n        \"Name\" : \"ami-8536d6e7\"\r\n      }  \r\n    }\r\n  },\r\n  \"Resources\" : {\r\n    \"mickmys3storageinstance\" : {\r\n   \"Type\" : \"AWS::S3::Bucket\",\r\n      \"Properties\" : {\r\n        \r\n   }\r\n    },\r\n \"mickmys3processedinstance\" : {\r\n   \"Type\" : \"AWS::S3::Bucket\",\r\n      \"Properties\" : {\r\n        \r\n   }\r\n    },\r\n \r\n    \"MickMainEC2\" : {\r\n      \"Type\" : \"AWS::EC2::Instance\",\r\n   \"Metadata\" : {\r\n     \"AWS::CloudFormation::Init\" : {\r\n    \"config\" : {\r\n      \"files\" : {\r\n   \r\n   },\r\n   \"commands\" : {\r\n     \r\n   }\r\n    \r\n    }\r\n  }\r\n   },\r\n      \"Properties\" : {\r\n     \"UserData\": {\r\n   \"Fn::Base64\" : \"echo 'Heelo ww' > ~/hello.txt\" \r\n  },\r\n        \"InstanceType\" : {\r\n          \"Ref\" : \"InstanceType\"\r\n        },\r\n        \"ImageId\" : {\r\n          \"Fn::FindInMap\" : [\r\n            \"AMIs\",\r\n            {\r\n              \"Ref\" : \"AWS::Region\"\r\n            },\r\n            \"Name\"\r\n          ]\r\n        },\r\n        \"KeyName\" : {\r\n          \"Ref\" : \"KeyName\"\r\n        },\r\n        \"IamInstanceProfile\" : {\r\n          \"Ref\" : \"ListS3BucketsInstanceProfile\"\r\n        },\r\n        \"SecurityGroupIds\" : [\r\n          {\r\n            \"Ref\" : \"SSHAccessSG\"\r\n    },\r\n    {\r\n   \"Ref\" : \"PublicAccessSG\"\r\n          }\r\n        ],\r\n        \"Tags\" : [\r\n          {\r\n            \"Key\" : \"Name\",\r\n            \"Value\" : \"MickMainEC2\"\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    \"SSHAccessSG\" : {\r\n      \"Type\" : \"AWS::EC2::SecurityGroup\",\r\n      \"Properties\" : {\r\n        \"GroupDescription\" : \"Allow SSH access from anywhere\",\r\n        \"SecurityGroupIngress\" : [\r\n          {\r\n            \"FromPort\" : \"22\",\r\n            \"ToPort\" : \"22\",\r\n            \"IpProtocol\" : \"tcp\",\r\n            \"CidrIp\" : \"0.0.0.0/0\"\r\n          }\r\n        ],\r\n        \"Tags\" : [\r\n          {\r\n            \"Key\" : \"Name\",\r\n            \"Value\" : \"SSHAccessSG\"\r\n          }\r\n        ]\r\n      }\r\n    },\r\n \"PublicAccessSG\" : {\r\n      \"Type\" : \"AWS::EC2::SecurityGroup\",\r\n      \"Properties\" : {\r\n        \"GroupDescription\" : \"Allow HTML requests from anywhere\",\r\n        \"SecurityGroupIngress\" : [\r\n          {\r\n            \"FromPort\" : \"80\",\r\n            \"ToPort\" : \"80\",\r\n            \"IpProtocol\" : \"tcp\",\r\n            \"CidrIp\" : \"0.0.0.0/0\"\r\n          }\r\n        ],\r\n        \"Tags\" : [\r\n          {\r\n            \"Key\" : \"Name\",\r\n            \"Value\" : \"PublicAccessSG\"\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    \"ListS3BucketsInstanceProfile\" : {\r\n      \"Type\" : \"AWS::IAM::InstanceProfile\",\r\n      \"Properties\" : {\r\n        \"Path\" : \"/\",\r\n        \"Roles\" : [\r\n          {\r\n            \"Ref\" : \"MickListS3BucketsRole\"\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    \"MickStorageS3BucketsPolicy\" : {\r\n        \"Type\" : \"AWS::IAM::Policy\",\r\n        \"Properties\" : {\r\n   \"PolicyName\" : \"MickStorageS3BucketsPolicy\",\r\n            \r\n      \"PolicyDocument\" : {\r\n       \"Version\": \"2012-10-17\",\r\n                \"Statement\": [\r\n     {\r\n      \"Sid\": \"ListObjectsInBucket\",\r\n      \"Effect\": \"Allow\",\r\n      \"Action\": [\r\n      \"s3:ListBucket\"\r\n      ],\r\n      \"Resource\": [\r\n       \"arn:aws:s3:::mickmys3storageinstance\", \"arn:aws:s3:::mickmys3storageinstance/*\"\r\n      ]\r\n     }, \r\n     {\r\n      \"Sid\": \"AllObjectActions\",\r\n      \"Effect\": \"Allow\",\r\n      \"Action\": [\"s3:*Object\"],\r\n      \"Resource\": [\r\n       \"arn:aws:s3:::mickmys3storageinstance\", \"arn:aws:s3:::mickmys3storageinstance/*\"\r\n      ]\r\n     }\r\n                ]\r\n   },\r\n            \"Roles\" : [\r\n                {\r\n                    \"Ref\" : \"MickListS3BucketsRole\"\r\n                }\r\n            ]   \r\n        }\r\n    },\r\n    \"MickListS3BucketsRole\" : {\r\n      \"Type\" : \"AWS::IAM::Role\",\r\n      \"Properties\" : {\r\n        \"AssumeRolePolicyDocument\": {\r\n          \"Version\" : \"2012-10-17\",\r\n          \"Statement\" : [\r\n            {\r\n              \"Effect\" : \"Allow\",\r\n              \"Principal\" : {\r\n                \"Service\" : [\"ec2.amazonaws.com\"]\r\n              },\r\n              \"Action\" : [\r\n                \"sts:AssumeRole\"\r\n              ]\r\n            }\r\n          ]\r\n        },\r\n        \"Path\" : \"/\"\r\n      }\r\n    }\r\n  },\r\n  \"Outputs\" : {\r\n    \"EC2\" : {\r\n      \"Description\" : \"EC2 IP address\",\r\n      \"Value\" : {\r\n        \"Fn::Join\" : [\r\n          \"\",\r\n          [\r\n            \"ssh ec2-user@\",\r\n            {\r\n              \"Fn::GetAtt\" : [\r\n                \"MickMainEC2\",\r\n                \"PublicIp\"\r\n              ]\r\n            },\r\n            \" -i \",\r\n            {\r\n              \"Ref\" : \"KeyName\"\r\n            },\r\n            \".pem\"\r\n          ]\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\nHere is my troposphere script generating the error on importing the above:\r\n```python\r\nfrom troposphere import Ref, Template\r\nimport troposphere.ec2 as ec2\r\n\r\nfrom troposphere.template_generator import TemplateGenerator\r\nimport json\r\nwith open(\"myStackFile.JSON\") as f:\r\n    json_template = json.load(f)\r\ntemplate = TemplateGenerator(json_template)\r\ntemplate.to_json()\r\n\r\n\r\nprint(template.to_yaml())\r\n\r\n```\r\n\r\nI expected the roles to be assigned correctly, as well as the userdata to be executed. I expected troposphere to import the JSON, as it has the correct syntax and also the correct class typing as according to the documentation as far as I can see. I have doublechecked everything by hand for many many hours, I am not sure how to proceed finding the issue with this CloudFormation script. In the future (and I would advise anyone to do the same) I will not edit JSON (or worse, YAML) files by hand any more, and use higher level tools exclusively.\r\n\r\nThank you for ANY help/pointers!\r\n\r\nKind regards", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I'm trying to create a stack on AWS CloudFormation, with an EC2 instance and 2 S3 buckets. ", "keywords": ["instance"]}, {"source": "Text", "text": "My script is attempting to assign a Policy to the EC2 instance that allows access to the Storage bucket, but no matter what I do the rights are not assigned. ", "keywords": ["instance", "storage", "policy"]}, {"source": "Text", "text": "I tried testing thoroughly if the EC2 really does not have the rights: the CLI confirmed that it does not. ", "keywords": ["test"]}, {"source": "Text", "text": "The stack description runs and executes with no errors, except the S3 storage bucket access and the user data don't work (no warnings). ", "keywords": ["storage"]}, {"source": "Text", "text": "This is the cloudformation template I wrote: ```JSON { \"AWSTemplateFormatVersion\" : \"2010-09-09\", \"Description\" : \"Attach IAM Role to an EC2\", \"Parameters\" : { \"KeyName\" : { \"Description\" : \"EC2 Instance SSH Key\", \"Type\" : \"AWS::EC2::KeyPair::KeyName\", \"Default\" : \"MickFirstSSHKeyPair\" }, \"InstanceType\" : { \"Description\" : \"EC2 instance specs configuration\", \"Type\" : \"String\", \"Default\" : \"t2.micro\", \"AllowedValues\" : [\"t2.micro\", \"t2.small\", \"t2.medium\"] } }, \"Mappings\" : { \"AMIs\" : { \"us-east-1\" : { \"Name\" : \"ami-8c1be5f6\" ", "keywords": ["instance"]}, {"source": "Text", "text": "}, \"ap-southeast-2\" : { \"Name\" : \"ami-8536d6e7\" } } }, \"Resources\" : { \"mickmys3storageinstance\" : { \"Type\" : \"AWS::S3::Bucket\", \"Properties\" : { } }, \"mickmys3processedinstance\" : { \"Type\" : \"AWS::S3::Bucket\", \"Properties\" : { } }, \"MickMainEC2\" : { \"Type\" : \"AWS::EC2::Instance\", \"Metadata\" : { \"AWS::CloudFormation::Init\" : { \"config\" : { \"files\" : { }, \"commands\" : { } } } }, \"Properties\" : { \"UserData\": { \"Fn::Base64\" : \"echo 'Heelo ww' ", "keywords": ["instance"]}, {"source": "Text", "text": "} ] } }, \"ListS3BucketsInstanceProfile\" : { \"Type\" : \"AWS::IAM::InstanceProfile\", \"Properties\" : { \"Path\" : \"/\", \"Roles\" : [ { \"Ref\" : \"MickListS3BucketsRole\" } ] } }, \"MickStorageS3BucketsPolicy\" : { \"Type\" : \"AWS::IAM::Policy\", \"Properties\" : { \"PolicyName\" : \"MickStorageS3BucketsPolicy\", \"PolicyDocument\" : { \"Version\": \"2012-10-17\", \"Statement\": [ { \"Sid\": \"ListObjectsInBucket\", \"Effect\": \"Allow\", \"Action\": [ \"s3:ListBucket\" ], \"Resource\": [ \"arn:aws:s3:::mickmys3storageinstance\", \"arn:aws:s3:::mickmys3storageinstance/*\" ] }, { \"Sid\": \"AllObjectActions\", \"Effect\": \"Allow\", \"Action\": [\"s3:*Object\"], \"Resource\": [ \"arn:aws:s3:::mickmys3storageinstance\", \"arn:aws:s3:::mickmys3storageinstance/*\" ] } ] }, \"Roles\" : [ { \"Ref\" : \"MickListS3BucketsRole\" } ] } }, \"MickListS3BucketsRole\" : { \"Type\" : \"AWS::IAM::Role\", \"Properties\" : { \"AssumeRolePolicyDocument\": { \"Version\" : \"2012-10-17\", \"Statement\" : [ { \"Effect\" : \"Allow\", \"Principal\" : { \"Service\" : [\"ec2.amazonaws.com\"] }, \"Action\" : [ \"sts:AssumeRole\" ] } ] }, \"Path\" : \"/\" } } }, \"Outputs\" : { \"EC2\" : { \"Description\" : \"EC2 IP address\", \"Value\" : { \"Fn::Join\" : [ \"\", [ \"ssh ec2-user@\", { \"Fn::GetAtt\" : [ \"MickMainEC2\", \"PublicIp\" ] }, \" -i \", { \"Ref\" : \"KeyName\" }, \".pem\" ] ] } } } } ``` ", "keywords": ["policy"]}]}, {"Id": "200701276", "PostHistoryTypeId": "1", "PostId": "56839132", "RevisionGUID": "42ab7195-7770-4183-8b42-aabf590f6cc0", "CreationDate": "2019-07-01T16:25:19.600", "UserId": "11725049", "Text": "Why does this CloudFormation Template script not work?", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "200701277", "PostHistoryTypeId": "3", "PostId": "56839132", "RevisionGUID": "42ab7195-7770-4183-8b42-aabf590f6cc0", "CreationDate": "2019-07-01T16:25:19.600", "UserId": "11725049", "Text": "|python|json|amazon-web-services|aws-cloudformation|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "56840977", "PostTypeId": "2", "ParentId": "56839132", "CreationDate": "2019-07-01T18:51:43.577", "Score": "1", "Body": "<p>Your user data isn't executed because you forgot <code>#!/bin/bash</code>. From the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html\" rel=\"nofollow noreferrer\">documentation</a>:</p>\n\n<blockquote>\n  <p>User data shell scripts must start with the #! characters and the path to the interpreter you want to read the script (commonly /bin/bash). For a great introduction on shell scripting, see the BASH Programming HOW-TO at the Linux Documentation Project (tldp.org).</p>\n</blockquote>\n\n<p>For the bucket permissions, I believe the issue is you specify the CloudFormation resource name in the policy instead of the actual bucket name. If you want the bucket to actually be named <code>mickmys3storageinstance</code>, you need:</p>\n\n<pre><code>\"mickmys3storageinstance\" : {\n  \"Type\" : \"AWS::S3::Bucket\",\n  \"Properties\" : {\n    \"BucketName\": \"mickmys3storageinstance\"\n  }\n},\n</code></pre>\n\n<p>Otherwise you should use <code>Ref</code> or <code>Fn::Sub</code> in the policy to get the actual bucket name.</p>\n\n<pre><code>                {\n                    \"Sid\": \"ListObjectsInBucket\",\n                    \"Effect\": \"Allow\",\n                    \"Action\": [\n                    \"s3:ListBucket\"\n                    ],\n                    \"Resource\": [\n                        {\"Fn::Sub\": \"${mickmys3storageinstance.Arn}\"},\n                        {\"Fn::Sub\": \"${mickmys3storageinstance.Arn}/*\"}\n                    ]\n                },  \n</code></pre>\n", "OwnerUserId": "492773", "LastActivityDate": "2019-07-01T18:51:43.577", "CommentCount": "2", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "100296059", "PostId": "56840977", "Score": "0", "Text": "Thank you so much!!! Your help is really appreciated!!!!!! \n\nI managed to fix the problem with the policy according to your advice. Thanks!! \n\nThe userdata problem was not resolved by adding the shell script line, but I eventually worked around it by playing with the join and base64 functions (don't know why, but I'm not touching it any more).\n\nYou really did help me a lot and I am very grateful for your support, both practically and symbolically! I'm not sure if I'm supposed to ask this here, but if you have a patreon please leave me a link. :)\n\nThanks!!!!", "CreationDate": "2019-07-03T15:44:16.530", "UserId": "11725049", "filtered-sentences": [{"source": "Text", "text": "I managed to fix the problem with the policy according to your advice. ", "keywords": ["policy"]}]}, {"Id": "100298421", "PostId": "56840977", "Score": "1", "Text": "Glad I could help. Please pay it forward by helping other people here :)", "CreationDate": "2019-07-03T17:04:27.280", "UserId": "492773", "filtered-sentences": [{"source": "Text", "text": "Please pay it forward by helping other people here :)", "keywords": ["pay"]}]}], "history": [{"Id": "200708904", "PostHistoryTypeId": "2", "PostId": "56840977", "RevisionGUID": "f4e3f974-04c2-4e41-ba4e-9e8d4e783648", "CreationDate": "2019-07-01T18:51:43.577", "UserId": "492773", "Text": "Your user data isn't executed because you forgot `#!/bin/bash`. From the [documentation][1]:\r\n\r\n> User data shell scripts must start with the #! characters and the path to the interpreter you want to read the script (commonly /bin/bash). For a great introduction on shell scripting, see the BASH Programming HOW-TO at the Linux Documentation Project (tldp.org).\r\n\r\nFor the bucket permissions, I believe the issue is you specify the CloudFormation resource name in the policy instead of the actual bucket name. If you want the bucket to actually be named `mickmys3storageinstance`, you need:\r\n\r\n    \"mickmys3storageinstance\" : {\r\n      \"Type\" : \"AWS::S3::Bucket\",\r\n      \"Properties\" : {\r\n        \"BucketName\": \"mickmys3storageinstance\"\r\n      }\r\n    },\r\n\r\nOtherwise you should use `Ref` or `Fn::Sub` in the policy to get the actual bucket name.\r\n\r\n                    {\r\n                        \"Sid\": \"ListObjectsInBucket\",\r\n                        \"Effect\": \"Allow\",\r\n                        \"Action\": [\r\n                        \"s3:ListBucket\"\r\n                        ],\r\n                        \"Resource\": [\r\n                            {\"Fn::Sub\": \"${mickmys3storageinstance.Arn}\"},\r\n                            {\"Fn::Sub\": \"${mickmys3storageinstance.Arn}/*\"}\r\n                        ]\r\n                    },  \r\n\r\n  [1]: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "For the bucket permissions, I believe the issue is you specify the CloudFormation resource name in the policy instead of the actual bucket name. ", "keywords": ["policy"]}, {"source": "Text", "text": "If you want the bucket to actually be named `mickmys3storageinstance`, you need: \"mickmys3storageinstance\" : { \"Type\" : \"AWS::S3::Bucket\", \"Properties\" : { \"BucketName\": \"mickmys3storageinstance\" } }, Otherwise you should use `Ref` or `Fn::Sub` in the policy to get the actual bucket name. ", "keywords": ["policy"]}]}], "filtered-sentences": [{"source": "Body", "text": "For the bucket permissions, I believe the issue is you specify the CloudFormation resource name in the policy instead of the actual bucket name. ", "keywords": ["policy"]}, {"source": "Body", "text": "If you want the bucket to actually be named mickmys3storageinstance, you need: Otherwise you should use Ref or Fn::Sub in the policy to get the actual bucket name.", "keywords": ["policy"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I'm trying to create a stack on AWS CloudFormation, with an EC2 instance and 2 S3 buckets. ", "keywords": ["instance"]}, {"source": "Body", "text": "My script is attempting to assign a Policy to the EC2 instance that allows access to the Storage bucket, but no matter what I do the rights are not assigned. ", "keywords": ["instance", "storage", "policy"]}, {"source": "Body", "text": "I tried testing thoroughly if the EC2 really does not have the rights: the CLI confirmed that it does not. ", "keywords": ["test"]}, {"source": "Body", "text": "The stack description runs and executes with no errors, except the S3 storage bucket access and the user data don't work (no warnings). ", "keywords": ["storage"]}]}