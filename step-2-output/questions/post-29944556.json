{"Id": "29944556", "PostTypeId": "1", "CreationDate": "2015-04-29T13:01:06.517", "Score": "2", "ViewCount": "595", "Body": "<p>I'm looking at the various offerings form Amazon for managing a cloud based app and in short am unsure whether it is best to attempt to accomplish what I need using simply EC2 &amp; EBS,  Beanstalk, or OpsWorks or even CloudFormation.</p>\n\n<p>To elaborate I want to offer customers of our web/Tomcat based app a cloud based trial version upon sign up, running on a custom domain (via Route53) with their data stored on an EBS volume.  Certain directorys on the file system will need to be created upon instance creation. </p>\n\n<p>My intention is make appropriate calls using the Java AWS SDK upon successful sign up to provision a system for the user, who will then be notified of the URL to access their custom site.</p>\n\n<p>I'm not looking at multi-scaling as the number of concurrent users will never be high but each customers version should be running in isolation.</p>\n\n<p>So I'm looking at the beanstalk API.. but then saw the OpsWorks Api, and then the CloudFormation templates.</p>\n\n<p>If I were to use the Beanstalk API, I could launch an 'environment' for each customer,  which means all customers would be part of the same beanstalk 'Application', meaning if I update the app version.. everyone would receive the update which sounds positive, however it seems wrong doing an environment per customer as typically environments are used for testing,production etc...</p>\n\n<p>So I'm back at the beginning wondering what would be the typical deployment strategy for this type of AWS based SAAS system.</p>\n\n<p>For clarity, the app does not require RDS and would only require a single instance per customer.</p>\n", "OwnerUserId": "333276", "LastEditorUserId": "333276", "LastEditDate": "2015-04-29T13:12:20.357", "LastActivityDate": "2015-04-30T03:18:32.550", "Title": "What is the recommended AWS service for SAAS apps?", "Tags": "|amazon-web-services|amazon-ec2|amazon-elastic-beanstalk|aws-cloudformation|aws-opsworks|", "AnswerCount": "1", "CommentCount": "7", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "48010024", "PostId": "29944556", "Score": "0", "Text": "Do you need a single ec2 instance or multiple instances?", "CreationDate": "2015-04-29T13:05:58.060", "UserId": "672586", "filtered-sentences": [{"source": "Text", "text": "Do you need a single ec2 instance or multiple instances?", "keywords": ["instance"]}]}, {"Id": "48010364", "PostId": "29944556", "Score": "0", "Text": "Only a single instance per customer (updated question to reflect)", "CreationDate": "2015-04-29T13:12:48.420", "UserId": "333276", "filtered-sentences": [{"source": "Text", "text": "Only a single instance per customer (updated question to reflect)", "keywords": ["instance"]}]}, {"Id": "48011778", "PostId": "29944556", "Score": "0", "Text": "Does your single install of the app require the full resources of a single instance?  It seems wasteful and expensive to install one customer per server unless the system needs really warrant that.  Most SaaS use a cluster of servers that are shared by all of the tenants of the software application.  This is more economical for you and means that everyone can share the same up to date build of the software.", "CreationDate": "2015-04-29T13:40:52.003", "UserId": "4179009", "filtered-sentences": [{"source": "Text", "text": "Does your single install of the app require the full resources of a single instance? ", "keywords": ["instance"]}, {"source": "Text", "text": "It seems wasteful and expensive to install one customer per server unless the system needs really warrant that. ", "keywords": ["expense"]}, {"source": "Text", "text": "Most SaaS use a cluster of servers that are shared by all of the tenants of the software application. ", "keywords": ["cluster"]}]}, {"Id": "48011840", "PostId": "29944556", "Score": "0", "Text": "To add to that.  Could you put your 'trial' customers on a large shared server.  Then when you upgrade out of the trial you migrate them to their own solo instance (if your needs warrant that)", "CreationDate": "2015-04-29T13:41:51.183", "UserId": "4179009", "filtered-sentences": [{"source": "Text", "text": "Then when you upgrade out of the trial you migrate them to their own solo instance (if your needs warrant that)", "keywords": ["instance"]}]}, {"Id": "48013399", "PostId": "29944556", "Score": "0", "Text": "Unfortunately not, each customer would need their own server.  \nPerhaps to save costs, we can keep their EBS backed data, and when they're not using it.. i.e. sessions are all closed we terminate the instance then only fire up an instance again as needed, re-attaching the EBS volume...", "CreationDate": "2015-04-29T14:11:49.997", "UserId": "333276", "filtered-sentences": [{"source": "Text", "text": "i.e. sessions are all closed we terminate the instance then only fire up an instance again as needed, re-attaching the EBS volume...", "keywords": ["instance"]}]}, {"Id": "48021623", "PostId": "29944556", "Score": "0", "Text": "Would it be enough to have isolation on container level? Different docker containers for each customer? You can allocate different EBS for each app if nessesary but keep them all on EC2 instance. It would be very cheap.", "CreationDate": "2015-04-29T17:18:15.930", "UserId": "4673255", "filtered-sentences": [{"source": "Text", "text": "You can allocate different EBS for each app if nessesary but keep them all on EC2 instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "It would be very cheap.", "keywords": ["cheap"]}]}, {"Id": "48042736", "PostId": "29944556", "Score": "0", "Text": "Thanks Greg, that's something I'll into.  The app requires 2gb Memory, so I was looking into the minimum spec it work (happily) in, hence the t2.small and one customer per instance.", "CreationDate": "2015-04-30T07:06:29.407", "UserId": "333276", "filtered-sentences": [{"source": "Text", "text": "The app requires 2gb Memory, so I was looking into the minimum spec it work (happily) in, hence the t2.small and one customer per instance.", "keywords": ["instance"]}]}], "history": [{"Id": "89312707", "PostHistoryTypeId": "2", "PostId": "29944556", "RevisionGUID": "058af542-ec8a-4c0c-8a9b-2aabc5bfd723", "CreationDate": "2015-04-29T13:01:06.517", "UserId": "333276", "Text": "I'm looking at the various offerings form Amazon for managing a cloud based app and in short am unsure whether it is best to attempt to accomplish what I need using simply EC2 & EBS,  Beanstalk, or OpsWorks or even CloudFormation.\r\n\r\nTo elaborate I want to offer customers of our web/Tomcat based app a cloud based trial version upon sign up, running on a custom domain (via Route53) with their data stored on an EBS volume.  Certain directorys on the file system will need to be created upon instance creation. \r\n\r\nMy intention is make appropriate calls using the Java AWS SDK upon successful sign up to provision a system for the user, who will then be notified of the URL to access their custom site.\r\n\r\nI'm not looking at multi-scaling as the number of concurrent users will never be high but each customers version should be running in isolation.\r\n\r\nSo I'm looking at the beanstalk API.. but then saw the OpsWorks Api, and then the CloudFormation templates.\r\n\r\nIf I were to use the Beanstalk API, I could launch an 'environment' for each customer,  which means all customers would be part of the same beanstalk 'Application', meaning if I update the app version.. everyone would receive the update which sounds positive, however it seems wrong doing an environment per customer as typically environments are used for testing,production etc...\r\n\r\nSo I'm back at the beginning wondering what would be the typical deployment strategy for this type of AWS based SAAS system.\r\n\r\nFor clarity, the app does not require RDS. ", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "To elaborate I want to offer customers of our web/Tomcat based app a cloud based trial version upon sign up, running on a custom domain (via Route53) with their data stored on an EBS volume. ", "keywords": ["domain"]}, {"source": "Text", "text": "Certain directorys on the file system will need to be created upon instance creation. ", "keywords": ["instance"]}, {"source": "Text", "text": "everyone would receive the update which sounds positive, however it seems wrong doing an environment per customer as typically environments are used for testing,production etc... ", "keywords": ["test"]}]}, {"Id": "89312708", "PostHistoryTypeId": "1", "PostId": "29944556", "RevisionGUID": "058af542-ec8a-4c0c-8a9b-2aabc5bfd723", "CreationDate": "2015-04-29T13:01:06.517", "UserId": "333276", "Text": "What is the recommended AWS service for SAAS apps?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "89312709", "PostHistoryTypeId": "3", "PostId": "29944556", "RevisionGUID": "058af542-ec8a-4c0c-8a9b-2aabc5bfd723", "CreationDate": "2015-04-29T13:01:06.517", "UserId": "333276", "Text": "|amazon-web-services|amazon-ec2|amazon-elastic-beanstalk|aws-cloudformation|aws-opsworks|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "89313654", "PostHistoryTypeId": "5", "PostId": "29944556", "RevisionGUID": "234bd509-0b8c-4bfc-8ddc-9c70aff54373", "CreationDate": "2015-04-29T13:12:20.357", "UserId": "333276", "Comment": "added 53 characters in body", "Text": "I'm looking at the various offerings form Amazon for managing a cloud based app and in short am unsure whether it is best to attempt to accomplish what I need using simply EC2 & EBS,  Beanstalk, or OpsWorks or even CloudFormation.\r\n\r\nTo elaborate I want to offer customers of our web/Tomcat based app a cloud based trial version upon sign up, running on a custom domain (via Route53) with their data stored on an EBS volume.  Certain directorys on the file system will need to be created upon instance creation. \r\n\r\nMy intention is make appropriate calls using the Java AWS SDK upon successful sign up to provision a system for the user, who will then be notified of the URL to access their custom site.\r\n\r\nI'm not looking at multi-scaling as the number of concurrent users will never be high but each customers version should be running in isolation.\r\n\r\nSo I'm looking at the beanstalk API.. but then saw the OpsWorks Api, and then the CloudFormation templates.\r\n\r\nIf I were to use the Beanstalk API, I could launch an 'environment' for each customer,  which means all customers would be part of the same beanstalk 'Application', meaning if I update the app version.. everyone would receive the update which sounds positive, however it seems wrong doing an environment per customer as typically environments are used for testing,production etc...\r\n\r\nSo I'm back at the beginning wondering what would be the typical deployment strategy for this type of AWS based SAAS system.\r\n\r\nFor clarity, the app does not require RDS and would only require a single instance per customer.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "To elaborate I want to offer customers of our web/Tomcat based app a cloud based trial version upon sign up, running on a custom domain (via Route53) with their data stored on an EBS volume. ", "keywords": ["domain"]}, {"source": "Text", "text": "Certain directorys on the file system will need to be created upon instance creation. ", "keywords": ["instance"]}, {"source": "Text", "text": "everyone would receive the update which sounds positive, however it seems wrong doing an environment per customer as typically environments are used for testing,production etc... ", "keywords": ["test"]}, {"source": "Text", "text": "For clarity, the app does not require RDS and would only require a single instance per customer.", "keywords": ["instance"]}]}], "answers": [{"Id": "29958428", "PostTypeId": "2", "ParentId": "29944556", "CreationDate": "2015-04-30T03:18:32.550", "Score": "2", "Body": "<p>You should take a look at Docker <a href=\"https://www.docker.com/\" rel=\"nofollow\">https://www.docker.com/</a> and running your service in containers using the new ECS <a href=\"http://aws.amazon.com/documentation/ecs/\" rel=\"nofollow\">http://aws.amazon.com/documentation/ecs/</a> (elastic container service). </p>\n\n<p>This would allow you to provision environments in a matter of seconds, and you would be able to run more than one per instance, thus optimising the costs and resource usage.</p>\n", "OwnerUserId": "490139", "LastActivityDate": "2015-04-30T03:18:32.550", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "89365617", "PostHistoryTypeId": "2", "PostId": "29958428", "RevisionGUID": "2dddcba1-866e-49c3-a1c5-bd59e553a910", "CreationDate": "2015-04-30T03:18:32.550", "UserId": "490139", "Text": "You should take a look at Docker https://www.docker.com/ and running your service in containers using the new ECS http://aws.amazon.com/documentation/ecs/ (elastic container service). \r\n\r\nThis would allow you to provision environments in a matter of seconds, and you would be able to run more than one per instance, thus optimising the costs and resource usage.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "This would allow you to provision environments in a matter of seconds, and you would be able to run more than one per instance, thus optimising the costs and resource usage.", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "This would allow you to provision environments in a matter of seconds, and you would be able to run more than one per instance, thus optimising the costs and resource usage.", "keywords": ["instance"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "To elaborate I want to offer customers of our web/Tomcat based app a cloud based trial version upon sign up, running on a custom domain (via Route53) with their data stored on an EBS volume. ", "keywords": ["domain"]}, {"source": "Body", "text": "Certain directorys on the file system will need to be created upon instance creation. ", "keywords": ["instance"]}, {"source": "Body", "text": "everyone would receive the update which sounds positive, however it seems wrong doing an environment per customer as typically environments are used for testing,production etc... ", "keywords": ["test"]}, {"source": "Body", "text": "For clarity, the app does not require RDS and would only require a single instance per customer.", "keywords": ["instance"]}]}