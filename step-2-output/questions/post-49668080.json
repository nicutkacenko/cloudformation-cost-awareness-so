{"Id": "49668080", "PostTypeId": "1", "CreationDate": "2018-04-05T08:52:59.510", "Score": "6", "ViewCount": "238", "Body": "<p><b>Disclosure :</b>\n<br> </p>\n\n<ul>\n<li>I have few questions for the containerization and orchestration tools\navailable today in the market.</li>\n<li>I have worked on docker swarm,\nkubernetes, and Elastic Bean Stalk.</li>\n</ul>\n\n<p><b>Problem</b>: I want to automate scaling without having to deal with ec2 instances where I don't have to worry about of scaling of instances. I know that GKE provides that but I want to stick with the AWS. The system where I can define scaling triggers based on requests, memory, CPU on the dashboard (same as elastic-beanstalk but I will need to run multiple services. all services will have different scaling triggers ). From what I read, One common thing is kubernetes and ECS is that I have to write scripts based on cloud-watch events. </p>\n\n<hr>\n\n<p><b>Q.1: For Docker Swarm:</b>\n<br><br>\n   How is Docker Swarm better to balance the load and auto scale when I have to already provide more than 1 Virtual machines (created by docker-machine) as workers for my manager?\n<br><br>\n<b>My View:</b>\n<br></p>\n\n<ul>\n<li>This is cost wise not good as I will have to anyway pay for this 2\ninstances. </li>\n<li>This VM's will still remain present when there is a low\nload.</li>\n<li>I don't think except a manually running script there won't be\nany auto-scaling possible here.</li>\n<li>I will be managing a single docker-compose.yml here.</li>\n</ul>\n\n<hr>\n\n<p><b>Q.2: For Kubernetes:</b>\n<br><br>\n   Does Kubernetes scale up on instance level?\n<br><br>\n<b>My View:</b>\n<br></p>\n\n<ul>\n<li>Kubernetes provides options for Autoscaling (like horizontal scaling\netc.)  but this all happens on service level, in the end, there will\nbe multiple pods and containers </li>\n<li>As per I know everything will happen\nin Kubernetes Cluster managed by Kops on production, So if it scales on instance level how does it do? as it doesn't have any virtual machine concept like SWARM in docker. </li>\n<li>I will be managing multiple YAML files here based on my services.</li>\n</ul>\n\n<hr>\n\n<p><b>Q.3 For Elastic Bean Stalk:</b>\n<br><br>\n   If Elastic Bean Stalk can manage my Entire Containerization along with AutoScaling and Load Balancing then how are above 2 so much in demand and better to use?\n<br><br>\n<b>My View:</b>\n<br></p>\n\n<ul>\n<li>Elastic Bean Stalk is more moving towards Fargate nowadays which not\navailable for all zones at present.</li>\n<li>I have seen in the process that it gives full control by providing a complete configuration dashboard based on my services.</li>\n<li>It will create a new Instance as per my load and autoscale.</li>\n</ul>\n\n<hr>\n\n<p><i>\nI am confused and <b>unable to convince</b> people who say No to Kubernetes and Docker Swarm,\nIf Someone can Please provide me a detailed overview of What and Why to use in production on AWS? as I don't answer for majorly AutoScaling and LoadBalancing on Production even though knowing this tools above. \n</i></p>\n\n<blockquote>\n  <p>Questions listed above consider AWS as the cloud deployment platform also I would like to let you know that I have a successfully running docker-compose.yml over Docker Swarm and 4 different YAML files for Kubernetes which also work great on Minikube.</p>\n</blockquote>\n", "OwnerUserId": "2986319", "LastEditorUserId": "2986319", "LastEditDate": "2018-04-06T05:48:49.523", "LastActivityDate": "2018-04-06T05:48:49.523", "Title": "Containerisation and Orchestration which Tool to use and why", "Tags": "|docker|kubernetes|aws-cloudformation|docker-swarm|amazon-elastic-beanstalk|", "AnswerCount": "1", "CommentCount": "0", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "170583390", "PostHistoryTypeId": "5", "PostId": "49668080", "RevisionGUID": "d3f34f60-d8ef-4feb-b3e1-62f04f607a0a", "CreationDate": "2018-04-05T10:27:49.310", "UserId": "6097280", "Comment": "summary of problem.", "Text": "<b>Disclosure :</b>\r\n<br> \r\n\r\n - I have few questions for the containerization and orchestration tools\r\n   available today in the market.\r\n - I have worked on docker swarm,\r\n   kubernetes, and Elastic Bean Stalk.\r\n\r\n<b>Problem</b>: I want to automate scaling without having to deal with ec2 instances where I don't have to worry about of scaling of instances. I know that GKE provides that but I want to stick with the AWS. The system where I can define scaling triggers based on requests, memory, CPU on the dashboard (same as elastic-beanstalk but I will need to run multiple services. all services will have different scaling triggers ). From what I read, One common thing is kubernetes and ECS is that I have to write scripts based on cloud-watch events. \r\n\r\n----------\r\n\r\n\r\n<b>Q.1: For Docker Swarm:</b>\r\n<br><br>\r\n   How is Docker Swarm better to balance the load and auto scale when I have to already provide more than 1 Virtual machines (created by docker-machine) as workers for my manager?\r\n<br><br>\r\n<b>My View:</b>\r\n<br>\r\n\r\n - This is cost wise not good as I will have to anyway pay for this 2\r\n   instances. \r\n - This VM's will still remain present when there is a low\r\n   load.\r\n - I don't think except a manually running script there won't be\r\n   any auto-scaling possible here.\r\n - I will be managing a single docker-compose.yml here.\r\n\r\n----------\r\n<b>Q.2: For Kubernetes:</b>\r\n<br><br>\r\n   Does Kubernetes scale up on instance level?\r\n<br><br>\r\n<b>My View:</b>\r\n<br>\r\n\r\n - Kubernetes provides options for Autoscaling (like horizontal scaling\r\n   etc.)  but this all happens on service level, in the end, there will\r\n   be multiple pods and containers \r\n - As per I know everything will happen\r\n   in Kubernetes Cluster managed by Kops on production, So if it scales on instance level how does it do? as it doesn't have any virtual machine concept like SWARM in docker. \r\n - I will be managing multiple YAML files here based on my services.\r\n\r\n----------\r\n\r\n<b>Q.3 For Elastic Bean Stalk:</b>\r\n<br><br>\r\n   If Elastic Bean Stalk can manage my Entire Containerization along with AutoScaling and Load Balancing then how are above 2 so much in demand and better to use?\r\n<br><br>\r\n<b>My View:</b>\r\n<br>\r\n\r\n - Elastic Bean Stalk is more moving towards Fargate nowadays which not\r\n   available for all zones at present.\r\n - I have seen in the process that it gives full control by providing a complete configuration dashboard based on my services.\r\n - It will create a new Instance as per my load and autoscale.\r\n\r\n----------\r\n\r\n<i>\r\nI am confused and <b>unable to convince</b> people who say No to Kubernetes and Docker Swarm,\r\nIf Someone can Please provide me a detailed overview of What and Why to use in production on AWS? as I don't answer for majorly AutoScaling and LoadBalancing on Production even though knowing this tools above. \r\n</i>\r\n\r\n> Questions listed above consider AWS as the cloud deployment platform also I would like to let you know that I have a successfully running docker-compose.yml over Docker Swarm and 4 different YAML files for Kubernetes which also work great on Minikube.\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "The system where I can define scaling triggers based on requests, memory, CPU on the dashboard (same as elastic-beanstalk but I will need to run multiple services. all services will have different scaling triggers ). ", "keywords": ["cpu"]}, {"source": "Text", "text": "My View: - This is cost wise not good as I will have to anyway pay for this 2 instances. ", "keywords": ["cost", "pay"]}, {"source": "Text", "text": "- I will be managing a single docker-compose.yml here. ---------- Q.2: For Kubernetes: Does Kubernetes scale up on instance level? ", "keywords": ["instance"]}, {"source": "Text", "text": "My View: - Kubernetes provides options for Autoscaling (like horizontal scaling etc.) but this all happens on service level, in the end, there will be multiple pods and containers - As per I know everything will happen in Kubernetes Cluster managed by Kops on production, So if it scales on instance level how does it do? as it doesn't have any virtual machine concept like SWARM in docker. ", "keywords": ["instance", "cluster"]}, {"source": "Text", "text": "- It will create a new Instance as per my load and autoscale. ", "keywords": ["instance"]}]}, {"Id": "170583391", "PostHistoryTypeId": "24", "PostId": "49668080", "RevisionGUID": "d3f34f60-d8ef-4feb-b3e1-62f04f607a0a", "CreationDate": "2018-04-05T10:27:49.310", "Comment": "Proposed by 6097280 approved by 2986319 edit id of 3651056", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "170575386", "PostHistoryTypeId": "2", "PostId": "49668080", "RevisionGUID": "f1c96500-958d-417c-84eb-f19d637da1f1", "CreationDate": "2018-04-05T08:52:59.510", "UserId": "2986319", "Text": "<b>Disclosure :</b>\r\n<br> \r\n\r\n - I have few questions for the containerization and orchestration tools\r\n   available today in the market.\r\n - I have worked on docker swarm,\r\n   kubernetes, and Elastic Bean Stalk.\r\n\r\n\r\n----------\r\n\r\n\r\n<b>Q.1: For Docker Swarm:</b>\r\n<br><br>\r\n   How is Docker Swarm better to balance the load and auto scale when I have to already provide more than 1 Virtual machines (created by docker-machine) as workers for my manager?\r\n<br><br>\r\n<b>My View:</b>\r\n<br>\r\n\r\n - This is cost wise not good as I will have to anyway pay for this 2\r\n   instances. \r\n - This VM's will still remain present when there is a low\r\n   load.\r\n - I don't think except a manually running script there won't be\r\n   any auto-scaling possible here.\r\n - I will be managing a single docker-compose.yml here.\r\n\r\n----------\r\n<b>Q.2: For Kubernetes:</b>\r\n<br><br>\r\n   Does Kubernetes scale up on instance level?\r\n<br><br>\r\n<b>My View:</b>\r\n<br>\r\n\r\n - Kubernetes provides options for Autoscaling (like horizontal scaling\r\n   etc.)  but this all happens on service level, in the end, there will\r\n   be multiple pods and containers \r\n - As per I know everything will happen\r\n   in Kubernetes Cluster managed by Kops on production, So if it scales on instance level how does it do? as it doesn't have any virtual machine concept like SWARM in docker. \r\n - I will be managing multiple YAML files here based on my services.\r\n\r\n----------\r\n\r\n<b>Q.3 For Elastic Bean Stalk:</b>\r\n<br><br>\r\n   If Elastic Bean Stalk can manage my Entire Containerization along with AutoScaling and Load Balancing then how are above 2 so much in demand and better to use?\r\n<br><br>\r\n<b>My View:</b>\r\n<br>\r\n\r\n - Elastic Bean Stalk is more moving towards Fargate nowadays which not\r\n   available for all zones at present.\r\n - I have seen in the process that it gives full control by providing a complete configuration dashboard based on my services.\r\n - It will create a new Instance as per my load and autoscale.\r\n\r\n----------\r\n\r\n<i>\r\nI am confused and <b>unable to convince</b> people who say No to Kubernetes and Docker Swarm,\r\nIf Someone can Please provide me a detailed overview of What and Why to use in production on AWS? as I don't answer for majorly AutoScaling and LoadBalancing on Production even though knowing this tools above. \r\n</i>\r\n\r\n> Questions listed above consider AWS as the cloud deployment platform also I would like to let you know that I have a successfully running docker-compose.yml over Docker Swarm and 4 different YAML files for Kubernetes which also work great on Minikube.\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "My View: - This is cost wise not good as I will have to anyway pay for this 2 instances. ", "keywords": ["cost", "pay"]}, {"source": "Text", "text": "- I will be managing a single docker-compose.yml here. ---------- Q.2: For Kubernetes: Does Kubernetes scale up on instance level? ", "keywords": ["instance"]}, {"source": "Text", "text": "My View: - Kubernetes provides options for Autoscaling (like horizontal scaling etc.) but this all happens on service level, in the end, there will be multiple pods and containers - As per I know everything will happen in Kubernetes Cluster managed by Kops on production, So if it scales on instance level how does it do? as it doesn't have any virtual machine concept like SWARM in docker. ", "keywords": ["instance", "cluster"]}, {"source": "Text", "text": "- It will create a new Instance as per my load and autoscale. ", "keywords": ["instance"]}]}, {"Id": "170575387", "PostHistoryTypeId": "1", "PostId": "49668080", "RevisionGUID": "f1c96500-958d-417c-84eb-f19d637da1f1", "CreationDate": "2018-04-05T08:52:59.510", "UserId": "2986319", "Text": "Containerisation and Orchestration which Tool to use and why", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "170575388", "PostHistoryTypeId": "3", "PostId": "49668080", "RevisionGUID": "f1c96500-958d-417c-84eb-f19d637da1f1", "CreationDate": "2018-04-05T08:52:59.510", "UserId": "2986319", "Text": "|amazon-web-services|docker|kubernetes|docker-compose|cloud|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "170649191", "PostHistoryTypeId": "6", "PostId": "49668080", "RevisionGUID": "a483365a-84dd-43bc-92d8-d65d9c077cee", "CreationDate": "2018-04-06T05:48:49.523", "UserId": "2986319", "Comment": "edited tags", "Text": "|docker|kubernetes|aws-cloudformation|docker-swarm|amazon-elastic-beanstalk|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "49675208", "PostTypeId": "2", "ParentId": "49668080", "CreationDate": "2018-04-05T14:44:46.130", "Score": "5", "Body": "<blockquote>\n  <p>I am confused and unable to convince people who say No to Kubernetes and Docker Swarm, If Someone can Please provide me a detailed overview of What and Why to use in production on AWS? </p>\n</blockquote>\n\n<p>Two out of three solutions provided by you are platform-agnostic, so we can talk about them without concentration on AWS.</p>\n\n<p>I recommend you to use Kubernetes, and I will try to explain why below.</p>\n\n<blockquote>\n  <p>How is Docker Swarm better to balance the load and auto scale when I have to already provide more than 1 Virtual machines (created by docker-machine) as workers for my manager? </p>\n</blockquote>\n\n<p>Docker Swarm is a relatively simple platform for orchestration of Docker applications with quite simple logic. To implement node-based autoscaling, you should use some external tools (in AWS, for instance, you can use an Autoscale group with some rules based on CPU load). And you will have to add some custom scripts to add and remove nodes from Docker Swarm cluster. All that things are possible, but you will need to develop it yourself.</p>\n\n<blockquote>\n  <p>Does Kubernetes scale up on instance level? </p>\n</blockquote>\n\n<p>Yes, it does. Kubernetes can scale using <a href=\"https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler\" rel=\"noreferrer\">cluster-autoscale</a> daemon, which can run inside a cluster, and automatically scale your instances up and down based on several metrics, including custom ones. You do not have to create any scripts, all logic is already implemented, you just need to setup rules.</p>\n\n<blockquote>\n  <p>If Elastic Bean Stalk can manage my Entire Containerization along with AutoScaling and Load Balancing then how are above 2 so much in demand and better to use? </p>\n</blockquote>\n\n<p>Elastic Beanstalk is a solution to run applications inside AWS, but you will be limited by its functions. Yes, it can do so many things for you, but if you will need something custom or you will need to create a hybrid cloud solution - that is not an option.</p>\n\n<p>Finally, I can tell you that with Kubernetes you will get:</p>\n\n<ol>\n<li>Tons of documentation and community experience.</li>\n<li>Auto-magic for almost everything, from auto-scaling to A/B testing, and auto-signing Let's Encrypt certifications for your services. You will spend a lot of time implementing all that features in Docker Swarm or Elastic Beanstalk, and some of them can be almost impossible in other orchestrators. </li>\n<li>Platform agnostics. You can migrate to any platform (even to on-premise) with minimal changes in configurations of your applications. Docker Swarm is also working almost everywhere, but it is less functional. </li>\n<li>A lot of other things for scheduling, jobs, application distribution, different types of volumes, and many more.</li>\n</ol>\n\n<p>Also, I can recommend you some Kubernetes modules and apps which can be useful for you on (not only) AWS.</p>\n\n<ul>\n<li><a href=\"https://github.com/jtblin/kube2iam\" rel=\"noreferrer\">Kube2iam</a> tool which provides you with AWS IAM role, assigning it directly to your pods, not instances.</li>\n<li><a href=\"https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler\" rel=\"noreferrer\">Autoscaling</a> module.</li>\n<li><a href=\"https://github.com/jetstack/cert-manager/\" rel=\"noreferrer\">Cert-manager</a> to generate LetsEncrypt SSL keys. It has Route53 integration for DNS challenge.</li>\n<li><a href=\"https://github.com/kubernetes/ingress-nginx\" rel=\"noreferrer\">Nginx-ingress</a> as ingress controller which provides you with a lot of features and the best Nginx experience.</li>\n<li><a href=\"https://github.com/kubernetes/kops\" rel=\"noreferrer\">Kops</a>. But you already know it.</li>\n</ul>\n", "OwnerUserId": "5937420", "LastActivityDate": "2018-04-05T14:44:46.130", "CommentCount": "0", "ContentLicense": "CC BY-SA 3.0", "history": [{"Id": "170604589", "PostHistoryTypeId": "2", "PostId": "49675208", "RevisionGUID": "900f1294-f79f-4fc8-b507-2ba5480fb94f", "CreationDate": "2018-04-05T14:44:46.130", "UserId": "5937420", "Text": "> I am confused and unable to convince people who say No to Kubernetes and Docker Swarm, If Someone can Please provide me a detailed overview of What and Why to use in production on AWS? \r\n\r\nTwo out of three solutions provided by you are platform-agnostic, so we can talk about them without concentration on AWS.\r\n\r\nI recommend you to use Kubernetes, and I will try to explain why below.\r\n\r\n> How is Docker Swarm better to balance the load and auto scale when I have to already provide more than 1 Virtual machines (created by docker-machine) as workers for my manager? \r\n\r\nDocker Swarm is a relatively simple platform for orchestration of Docker applications with quite simple logic. To implement node-based autoscaling, you should use some external tools (in AWS, for instance, you can use an Autoscale group with some rules based on CPU load). And you will have to add some custom scripts to add and remove nodes from Docker Swarm cluster. All that things are possible, but you will need to develop it yourself.\r\n\r\n> Does Kubernetes scale up on instance level? \r\n\r\nYes, it does. Kubernetes can scale using [cluster-autoscale][1] daemon, which can run inside a cluster, and automatically scale your instances up and down based on several metrics, including custom ones. You do not have to create any scripts, all logic is already implemented, you just need to setup rules.\r\n\r\n> If Elastic Bean Stalk can manage my Entire Containerization along with AutoScaling and Load Balancing then how are above 2 so much in demand and better to use? \r\n\r\nElastic Beanstalk is a solution to run applications inside AWS, but you will be limited by its functions. Yes, it can do so many things for you, but if you will need something custom or you will need to create a hybrid cloud solution - that is not an option.\r\n\r\nFinally, I can tell you that with Kubernetes you will get:\r\n\r\n  1. Tons of documentation and community experience.\r\n  2. Auto-magic for almost everything, from auto-scaling to A/B testing, and auto-signing Let's Encrypt certifications for your services. You will spend a lot of time implementing all that features in Docker Swarm or Elastic Beanstalk, and some of them can be almost impossible in other orchestrators. \r\n  3. Platform agnostics. You can migrate to any platform (even to on-premise) with minimal changes in configurations of your applications. Docker Swarm is also working almost everywhere, but it is less functional. \r\n  4. A lot of other things for scheduling, jobs, application distribution, different types of volumes, and many more.\r\n\r\nAlso, I can recommend you some Kubernetes modules and apps which can be useful for you on (not only) AWS.\r\n\r\n  - [Kube2iam][2] tool which provides you with AWS IAM role, assigning it directly to your pods, not instances.\r\n  - [Autoscaling][1] module.\r\n  - [Cert-manager][3] to generate LetsEncrypt SSL keys. It has Route53 integration for DNS challenge.\r\n  - [Nginx-ingress][4] as ingress controller which provides you with a lot of features and the best Nginx experience.\r\n  - [Kops][5]. But you already know it.\r\n\r\n\r\n  [1]: https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler\r\n  [2]: https://github.com/jtblin/kube2iam\r\n  [3]: https://github.com/jetstack/cert-manager/\r\n  [4]: https://github.com/kubernetes/ingress-nginx\r\n  [5]: https://github.com/kubernetes/kops", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "To implement node-based autoscaling, you should use some external tools (in AWS, for instance, you can use an Autoscale group with some rules based on CPU load). ", "keywords": ["instance", "cpu"]}, {"source": "Text", "text": "And you will have to add some custom scripts to add and remove nodes from Docker Swarm cluster. ", "keywords": ["cluster"]}, {"source": "Text", "text": "> Does Kubernetes scale up on instance level? ", "keywords": ["instance"]}, {"source": "Text", "text": "Kubernetes can scale using [cluster-autoscale][1] daemon, which can run inside a cluster, and automatically scale your instances up and down based on several metrics, including custom ones. ", "keywords": ["cluster"]}, {"source": "Text", "text": "2. Auto-magic for almost everything, from auto-scaling to A/B testing, and auto-signing Let's Encrypt certifications for your services. ", "keywords": ["test"]}, {"source": "Text", "text": "You can migrate to any platform (even to on-premise) with minimal changes in configurations of your applications. ", "keywords": ["change"]}, {"source": "Text", "text": "But you already know it. [1]: https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler [2]: https://github.com/jtblin/kube2iam [3]: https://github.com/jetstack/cert-manager/ [4]: https://github.com/kubernetes/ingress-nginx [5]: https://github.com/kubernetes/kops", "keywords": ["cluster"]}]}], "filtered-sentences": [{"source": "Body", "text": "To implement node-based autoscaling, you should use some external tools (in AWS, for instance, you can use an Autoscale group with some rules based on CPU load). ", "keywords": ["instance", "cpu"]}, {"source": "Body", "text": "And you will have to add some custom scripts to add and remove nodes from Docker Swarm cluster. ", "keywords": ["cluster"]}, {"source": "Body", "text": "Does Kubernetes scale up on instance level? ", "keywords": ["instance"]}, {"source": "Body", "text": "Kubernetes can scale using cluster-autoscale daemon, which can run inside a cluster, and automatically scale your instances up and down based on several metrics, including custom ones. ", "keywords": ["cluster"]}, {"source": "Body", "text": "Auto-magic for almost everything, from auto-scaling to A/B testing, and auto-signing Let's Encrypt certifications for your services. ", "keywords": ["test"]}, {"source": "Body", "text": "You can migrate to any platform (even to on-premise) with minimal changes in configurations of your applications. ", "keywords": ["change"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "The system where I can define scaling triggers based on requests, memory, CPU on the dashboard (same as elastic-beanstalk but I will need to run multiple services. all services will have different scaling triggers ). ", "keywords": ["cpu"]}, {"source": "Body", "text": "My View: This is cost wise not good as I will have to anyway pay for this 2 instances. ", "keywords": ["cost", "pay"]}, {"source": "Body", "text": "Q.2: For Kubernetes: Does Kubernetes scale up on instance level? ", "keywords": ["instance"]}, {"source": "Body", "text": "As per I know everything will happen in Kubernetes Cluster managed by Kops on production, So if it scales on instance level how does it do? as it doesn't have any virtual machine concept like SWARM in docker. ", "keywords": ["instance", "cluster"]}, {"source": "Body", "text": "It will create a new Instance as per my load and autoscale. ", "keywords": ["instance"]}]}