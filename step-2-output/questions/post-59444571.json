{"Id": "59444571", "PostTypeId": "1", "CreationDate": "2019-12-22T13:25:35.400", "Score": "12", "ViewCount": "1432", "Body": "<p>I want to split my SAM application into multiple parts.</p>\n\n<p>I want to create a API ( AWS::Serverless::Api ) in the root stack.</p>\n\n<p>I am creating lambda functions in my child stacks, where I want to give the reference of the API from the root stack to the API Events. </p>\n\n<p>Is this feasible?  I didn't find any good examples for the accessing the API from the root stack into child stack?</p>\n\n<p>I tried with the below template -</p>\n\n<pre><code>parenttemplateapi:\n    Type: AWS::Serverless::Application\n    Properties:\n      Location:\n        ApplicationId: arn:aws:serverlessrepo:us-east-1:account_id:applications/parent-template\n        SemanticVersion: 1.0.0\n\n\n\nHelloWorldFunction:\n    Type: AWS::Serverless::Function \n    Properties:\n      CodeUri: hello_world/\n      Handler: app.lambda_handler\n      Runtime: python2.7\n      Events:\n        HelloWorld:\n          Type: Api\n          Properties:\n            Method: get\n            Path: /hello\n            RestApiId: !GetAtt parenttemplateapi.Outputs.ServerlessGW-restApiId\n</code></pre>\n\n<p>When I tried to deploy this template, I got below errors -</p>\n\n<blockquote>\n  <p>Error: Failed to create changeset for the stack: child-template, ex:\n  Waiter ChangeSetCreateComplete failed: Waiter encountered a terminal\n  failure state Status: FAILED. Reason: Transform\n  AWS::Serverless-2016-10-31 failed with: Internal transform failure.</p>\n</blockquote>\n\n<p>Any pointers/suggestions?</p>\n\n<p>I was referring to below links -</p>\n\n<p><a href=\"https://aws.amazon.com/blogs/compute/announcing-nested-applications-for-aws-sam-and-the-aws-serverless-application-repository/\" rel=\"noreferrer\">https://aws.amazon.com/blogs/compute/announcing-nested-applications-for-aws-sam-and-the-aws-serverless-application-repository/</a></p>\n\n<p>Can the API Gateway Id ( AWS::ApiGateway::RestApi) from the root stack used here?</p>\n\n<p><a href=\"https://dev.to/grahamcox82/building-a-larger-serverless-application-part-3-modular-monorepos-3mon\" rel=\"noreferrer\">https://dev.to/grahamcox82/building-a-larger-serverless-application-part-3-modular-monorepos-3mon</a></p>\n\n<p><strong>Can this be achieved using serverless framework?</strong></p>\n", "OwnerUserId": "1520421", "LastEditorUserId": "1520421", "LastEditDate": "2019-12-22T13:59:14.003", "LastActivityDate": "2020-12-26T16:18:49.750", "Title": "AWS SAM : Nested Stacks, Referring to API gateway from the Root stack", "Tags": "|amazon-web-services|aws-cloudformation|aws-api-gateway|serverless-framework|aws-sam|", "AnswerCount": "1", "CommentCount": "5", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "115697756", "PostId": "59444571", "Score": "3", "Text": "Did you find a solution in another place?", "CreationDate": "2020-12-24T17:34:28.497", "UserId": "6872875", "filtered-sentences": []}, {"Id": "115725030", "PostId": "59444571", "Score": "2", "Text": "This should be possible. However, I would like to know how the parent template looks like and if it contains an output which is named ServerlessGW-restApiId.", "CreationDate": "2020-12-26T13:53:57.310", "UserId": "10473469", "filtered-sentences": []}, {"Id": "115730147", "PostId": "59444571", "Score": "0", "Text": "@MartinL\u00f6per I wonder if you and I worked together on a Visa Token Service Wallet Application once! :) If so, nice bumping into you out here in the Digital Wild West!", "CreationDate": "2020-12-26T19:09:14.927", "UserId": "3879359", "filtered-sentences": []}, {"Id": "115731470", "PostId": "59444571", "Score": "0", "Text": "@lopezdp Not that I remember. But nice to meet you anyway here in the Digital Wild West :D", "CreationDate": "2020-12-26T20:44:25.953", "UserId": "10473469", "filtered-sentences": []}, {"Id": "118476980", "PostId": "59444571", "Score": "0", "Text": "Did you find a solution? by using SAM, not serverless framework?", "CreationDate": "2021-04-09T18:46:42.410", "UserId": "10204803", "filtered-sentences": []}], "history": [{"Id": "211688890", "PostHistoryTypeId": "2", "PostId": "59444571", "RevisionGUID": "a35d23a3-531d-455e-b58f-0d6da02ed500", "CreationDate": "2019-12-22T13:25:35.400", "UserId": "1520421", "Text": "I want to split my SAM application into multiple parts.\r\n\r\nI want to create a API ( AWS::Serverless::Api ) in the root stack.\r\n\r\nI am creating lambda functions in my child stacks, where I want to give the reference of the API from the root stack to the API Events. \r\n\r\nIs this feasible?  I didn't find any good examples for the accessing the API from the root stack into child stack?\r\n\r\nI tried with the below template -\r\n\r\n    parenttemplateapi:\r\n        Type: AWS::Serverless::Application\r\n        Properties:\r\n          Location:\r\n            ApplicationId: arn:aws:serverlessrepo:us-east-1:account_id:applications/parent-template\r\n            SemanticVersion: 1.0.0\r\n\r\n  \r\n\r\n    HelloWorldFunction:\r\n        Type: AWS::Serverless::Function \r\n        Properties:\r\n          CodeUri: hello_world/\r\n          Handler: app.lambda_handler\r\n          Runtime: python2.7\r\n          Events:\r\n            HelloWorld:\r\n              Type: Api\r\n              Properties:\r\n                Method: get\r\n                Path: /hello\r\n                RestApiId: !GetAtt parenttemplateapi.Outputs.ServerlessGW-restApiId\r\n\r\n\r\nWhen I tried to deploy this template, I got below errors -\r\n\r\n> Error: Failed to create changeset for the stack: child-template, ex:\r\n> Waiter ChangeSetCreateComplete failed: Waiter encountered a terminal\r\n> failure state Status: FAILED. Reason: Transform\r\n> AWS::Serverless-2016-10-31 failed with: Internal transform failure.\r\n\r\nAny pointers/suggestions?\r\n\r\nI was referring to below links -\r\n\r\nhttps://aws.amazon.com/blogs/compute/announcing-nested-applications-for-aws-sam-and-the-aws-serverless-application-repository/\r\n\r\nCan the API Gateway Id ( AWS::ApiGateway::RestApi) from the root stack used here?\r\n\r\nhttps://dev.to/grahamcox82/building-a-larger-serverless-application-part-3-modular-monorepos-3mon\r\n\r\n\r\n\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I tried with the below template - parenttemplateapi: Type: AWS::Serverless::Application Properties: Location: ApplicationId: arn:aws:serverlessrepo:us-east-1:account_id:applications/parent-template SemanticVersion: 1.0.0 HelloWorldFunction: Type: AWS::Serverless::Function Properties: CodeUri: hello_world/ Handler: app.lambda_handler Runtime: python2.7 Events: HelloWorld: Type: Api Properties: Method: get Path: /hello RestApiId: !GetAtt parenttemplateapi.Outputs.ServerlessGW-restApiId When I tried to deploy this template, I got below errors - > Error: Failed to create changeset for the stack: child-template, ex: > Waiter ChangeSetCreateComplete failed: Waiter encountered a terminal > failure state Status: FAILED. ", "keywords": ["change"]}]}, {"Id": "211688891", "PostHistoryTypeId": "1", "PostId": "59444571", "RevisionGUID": "a35d23a3-531d-455e-b58f-0d6da02ed500", "CreationDate": "2019-12-22T13:25:35.400", "UserId": "1520421", "Text": "AWS SAM : Nested Stacks, Referring to API gateway from the Root stack", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "211688892", "PostHistoryTypeId": "3", "PostId": "59444571", "RevisionGUID": "a35d23a3-531d-455e-b58f-0d6da02ed500", "CreationDate": "2019-12-22T13:25:35.400", "UserId": "1520421", "Text": "|amazon-web-services|aws-cloudformation|aws-api-gateway|aws-sam|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "211689970", "PostHistoryTypeId": "5", "PostId": "59444571", "RevisionGUID": "c1b53176-5da6-4a47-b559-989fc8c71046", "CreationDate": "2019-12-22T13:59:14.003", "UserId": "1520421", "Comment": "added 52 characters in body; edited tags", "Text": "I want to split my SAM application into multiple parts.\r\n\r\nI want to create a API ( AWS::Serverless::Api ) in the root stack.\r\n\r\nI am creating lambda functions in my child stacks, where I want to give the reference of the API from the root stack to the API Events. \r\n\r\nIs this feasible?  I didn't find any good examples for the accessing the API from the root stack into child stack?\r\n\r\nI tried with the below template -\r\n\r\n    parenttemplateapi:\r\n        Type: AWS::Serverless::Application\r\n        Properties:\r\n          Location:\r\n            ApplicationId: arn:aws:serverlessrepo:us-east-1:account_id:applications/parent-template\r\n            SemanticVersion: 1.0.0\r\n\r\n  \r\n\r\n    HelloWorldFunction:\r\n        Type: AWS::Serverless::Function \r\n        Properties:\r\n          CodeUri: hello_world/\r\n          Handler: app.lambda_handler\r\n          Runtime: python2.7\r\n          Events:\r\n            HelloWorld:\r\n              Type: Api\r\n              Properties:\r\n                Method: get\r\n                Path: /hello\r\n                RestApiId: !GetAtt parenttemplateapi.Outputs.ServerlessGW-restApiId\r\n\r\n\r\nWhen I tried to deploy this template, I got below errors -\r\n\r\n> Error: Failed to create changeset for the stack: child-template, ex:\r\n> Waiter ChangeSetCreateComplete failed: Waiter encountered a terminal\r\n> failure state Status: FAILED. Reason: Transform\r\n> AWS::Serverless-2016-10-31 failed with: Internal transform failure.\r\n\r\nAny pointers/suggestions?\r\n\r\nI was referring to below links -\r\n\r\nhttps://aws.amazon.com/blogs/compute/announcing-nested-applications-for-aws-sam-and-the-aws-serverless-application-repository/\r\n\r\nCan the API Gateway Id ( AWS::ApiGateway::RestApi) from the root stack used here?\r\n\r\nhttps://dev.to/grahamcox82/building-a-larger-serverless-application-part-3-modular-monorepos-3mon\r\n\r\n\r\n**Can this be achieved using serverless framework?**\r\n\r\n\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "I tried with the below template - parenttemplateapi: Type: AWS::Serverless::Application Properties: Location: ApplicationId: arn:aws:serverlessrepo:us-east-1:account_id:applications/parent-template SemanticVersion: 1.0.0 HelloWorldFunction: Type: AWS::Serverless::Function Properties: CodeUri: hello_world/ Handler: app.lambda_handler Runtime: python2.7 Events: HelloWorld: Type: Api Properties: Method: get Path: /hello RestApiId: !GetAtt parenttemplateapi.Outputs.ServerlessGW-restApiId When I tried to deploy this template, I got below errors - > Error: Failed to create changeset for the stack: child-template, ex: > Waiter ChangeSetCreateComplete failed: Waiter encountered a terminal > failure state Status: FAILED. Reason: Transform > AWS::Serverless-2016-10-31 failed with: Internal transform failure. ", "keywords": ["change"]}]}, {"Id": "211689971", "PostHistoryTypeId": "6", "PostId": "59444571", "RevisionGUID": "c1b53176-5da6-4a47-b559-989fc8c71046", "CreationDate": "2019-12-22T13:59:14.003", "UserId": "1520421", "Comment": "added 52 characters in body; edited tags", "Text": "|amazon-web-services|aws-cloudformation|aws-api-gateway|serverless-framework|aws-sam|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "237538316", "PostHistoryTypeId": "33", "PostId": "59444571", "RevisionGUID": "8a9d9c70-8325-47fb-94d3-661e5c350ee4", "CreationDate": "2020-12-24T17:35:38.637", "UserId": "6872875", "Comment": "222501", "filtered-sentences": []}, {"Id": "237937833", "PostHistoryTypeId": "34", "PostId": "59444571", "RevisionGUID": "66647b42-ec38-4b34-ba61-6819dc5d06e2", "CreationDate": "2021-01-01T19:06:05.503", "UserId": "-1", "Comment": "222501", "filtered-sentences": []}], "answers": [{"Id": "65458343", "PostTypeId": "2", "ParentId": "59444571", "CreationDate": "2020-12-26T16:18:49.750", "Score": "3", "Body": "<p>The caveat here is that I do not use AWS SAM as I only use <code>serverless.yml</code> ServerlessFramework files to declare my resources to deploy.</p>\n<p>In my <code>ROOT</code> API, I declare a series of outputs that my child lambdas depend on so that all my endpoints can have the same Rest API ID. This output declaration is nested under my <code>resources</code> declaration in my <code>serverless.yml</code> file as such:</p>\n<pre><code>resources:\n\n  Resources:\n    ...\n    stuff here that you may need\n    ...\n\n  # API Gateway Cross Stack Reference Exports!!!!!\n  # Outputs that other services will depend on!!!\n  Outputs:\n    ApiGatewayRestApiId:\n      Value:\n        Ref: ApiGatewayRestApi\n      Export:\n        Name: ${self:custom.stage}-ApiGatewayRestApiId\n\n    ApiGatewayRestApiRootResourceId:\n      Value:\n        Fn::GetAtt:\n          - ApiGatewayRestApi\n          - RootResourceId\n      Export:\n        Name: ${self:custom.stage}-ApiGatewayRestApiRootResourceId\n</code></pre>\n<p>Once you have this implemented you then need to import the reference to this parent API resource in your child lambdas within the <code>provider</code> section of your <code>serverless.yml</code> file.</p>\n<pre><code>\n\n  # Cross-Stack Reference for sharing of API Gateway URI\n  # created with accounting-api\n  apiGateway:\n    restApiId: ${cf:ROOT_API_NAME_HERE-dev.ApiGatewayRestApiId}\n    #&quot;Fn::ImportValue&quot;: ${self:custom.stage}-ApiGatewayRestApiId\n    restApiRootResourceId:\n      ${cf:ROOT_API_NAME_HERE-dev.ApiGatewayRestApiRootResourceId}\n      #&quot;Fn::ImportValue&quot;: ${self:custom.stage}-ApiGatewayRestApiRootResourceId\n</code></pre>\n<p>You must pay attention to the <code>restApiId</code> that you need to import from the <code>CloudFormation</code> stack from your parent API. You can review the outputs by going into the CloudFormation stack in your Parent API; click on Outputs and find your <code>restApiId</code> values as needed.</p>\n<p>There is also another way that allows you to import the values using <code>Fn::ImportValue</code> which you can review with the example shown here:</p>\n<p><a href=\"https://github.com/serverless/examples/blob/master/aws-node-shared-gateway/users/serverless.yml\" rel=\"nofollow noreferrer\">https://github.com/serverless/examples/blob/master/aws-node-shared-gateway/users/serverless.yml</a></p>\n<p>I have this method commented out in the code Ive pasted for you above for your reference.</p>\n", "OwnerUserId": "3879359", "LastActivityDate": "2020-12-26T16:18:49.750", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "237620054", "PostHistoryTypeId": "2", "PostId": "65458343", "RevisionGUID": "472e7aca-a2e0-46cd-98b5-fc20a177cf53", "CreationDate": "2020-12-26T16:18:49.750", "UserId": "3879359", "Text": "The caveat here is that I do not use AWS SAM as I only use `serverless.yml` ServerlessFramework files to declare my resources to deploy.\r\n\r\nIn my `ROOT` API, I declare a series of outputs that my child lambdas depend on so that all my endpoints can have the same Rest API ID. This output declaration is nested under my `resources` declaration in my `serverless.yml` file as such:\r\n\r\n\r\n```\r\nresources:\r\n\r\n  Resources:\r\n    ...\r\n    stuff here that you may need\r\n    ...\r\n\r\n  # API Gateway Cross Stack Reference Exports!!!!!\r\n  # Outputs that other services will depend on!!!\r\n  Outputs:\r\n    ApiGatewayRestApiId:\r\n      Value:\r\n        Ref: ApiGatewayRestApi\r\n      Export:\r\n        Name: ${self:custom.stage}-ApiGatewayRestApiId\r\n\r\n    ApiGatewayRestApiRootResourceId:\r\n      Value:\r\n        Fn::GetAtt:\r\n          - ApiGatewayRestApi\r\n          - RootResourceId\r\n      Export:\r\n        Name: ${self:custom.stage}-ApiGatewayRestApiRootResourceId\r\n```\r\n\r\nOnce you have this implemented you then need to import the reference to this parent API resource in your child lambdas within the `provider` section of your `serverless.yml` file.\r\n\r\n```\r\n\r\n\r\n  # Cross-Stack Reference for sharing of API Gateway URI\r\n  # created with accounting-api\r\n  apiGateway:\r\n    restApiId: ${cf:ROOT_API_NAME_HERE-dev.ApiGatewayRestApiId}\r\n    #\"Fn::ImportValue\": ${self:custom.stage}-ApiGatewayRestApiId\r\n    restApiRootResourceId:\r\n      ${cf:ROOT_API_NAME_HERE-dev.ApiGatewayRestApiRootResourceId}\r\n      #\"Fn::ImportValue\": ${self:custom.stage}-ApiGatewayRestApiRootResourceId\r\n```\r\n\r\nYou must pay attention to the `restApiId` that you need to import from the `CloudFormation` stack from your parent API. You can review the outputs by going into the CloudFormation stack in your Parent API; click on Outputs and find your `restApiId` values as needed.\r\n\r\nThere is also another way that allows you to import the values using `Fn::ImportValue` which you can review with the example shown here:\r\n\r\nhttps://github.com/serverless/examples/blob/master/aws-node-shared-gateway/users/serverless.yml\r\n\r\nI have this method commented out in the code Ive pasted for you above for your reference. \r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "This output declaration is nested under my `resources` declaration in my `serverless.yml` file as such: ``` resources: Resources: ... stuff here that you may need ... # API Gateway Cross Stack Reference Exports!!!!! # Outputs that other services will depend on!!! Outputs: ApiGatewayRestApiId: Value: Ref: ApiGatewayRestApi Export: Name: ${self:custom.stage}-ApiGatewayRestApiId ApiGatewayRestApiRootResourceId: Value: Fn::GetAtt: - ApiGatewayRestApi - RootResourceId Export: Name: ${self:custom.stage}-ApiGatewayRestApiRootResourceId ``` Once you have this implemented you then need to import the reference to this parent API resource in your child lambdas within the `provider` section of your `serverless.yml` file. ``` # Cross-Stack Reference for sharing of API Gateway URI # created with accounting-api apiGateway: restApiId: ${cf:ROOT_API_NAME_HERE-dev.ApiGatewayRestApiId} #\"Fn::ImportValue\": ${self:custom.stage}-ApiGatewayRestApiId restApiRootResourceId: ${cf:ROOT_API_NAME_HERE-dev.ApiGatewayRestApiRootResourceId} #\"Fn::ImportValue\": ${self:custom.stage}-ApiGatewayRestApiRootResourceId ``` ", "keywords": ["provider"]}, {"source": "Text", "text": "You must pay attention to the `restApiId` that you need to import from the `CloudFormation` stack from your parent API. ", "keywords": ["pay"]}]}], "filtered-sentences": [{"source": "Body", "text": "Once you have this implemented you then need to import the reference to this parent API resource in your child lambdas within the provider section of your serverless.yml file. ", "keywords": ["provider"]}, {"source": "Body", "text": "You must pay attention to the restApiId that you need to import from the CloudFormation stack from your parent API. ", "keywords": ["pay"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Body", "text": "I tried with the below template - When I tried to deploy this template, I got below errors - Error: Failed to create changeset for the stack: child-template, ex: Waiter ChangeSetCreateComplete failed: Waiter encountered a terminal failure state Status: FAILED. ", "keywords": ["change"]}]}