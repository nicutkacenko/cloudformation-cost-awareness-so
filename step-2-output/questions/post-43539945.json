{"Id": "43539945", "PostTypeId": "1", "CreationDate": "2017-04-21T10:12:01.790", "Score": "3", "ViewCount": "2093", "Body": "<p>I am using <strong>Two Custom Resources</strong> in my <strong>cloudFormation template.</strong> Basically these Custom Resources are lambda functions which have custom code. I want to <strong>start</strong> the <strong>creation</strong> of <strong>second lambda</strong> after a <strong>constant 3 minutes</strong>.</p>\n\n<p>I thought using the cloudFormation's <strong>WaitCondition</strong>  with <strong>timeout property</strong> to solve this. But it need a <strong>WaitHandle</strong> which has to receive success signals before the timeout. Once the signals are received, the WaitCondition turns to <strong>Create-Complete.</strong> But in my case, I cant make the custom function to send signal to wait handle. I need to have a constant 3 minute wait time after completion of <strong>First Custom Resource.</strong> Then, start the creation of <strong>Second Custom Resource</strong> after the <strong>Create-Complete</strong> of <strong>WaitCondition.</strong> Here is my code:</p>\n\n<pre><code>\"SecondCustomResource\": {\n  \"Type\": \"Custom::SecondCustomResource\",\n  \"DependsOn\" : \"WaitCondition\",\n  \"Properties\": {\n    \"ServiceToken\": { \"Fn::GetAtt\" : [\"SecondCustomResourceFunction\", \"Arn\"] }\n  }\n},\n\n\n\"SecondCustomResourceFunction\": {\n  \"Type\": \"AWS::Lambda::Function\",\n  \"Properties\": {\n    \"Code\": {\n        \"S3Bucket\": { \"Ref\": \"S3Bucket\" },\n        \"S3Key\": { \"Ref\": \"S3Key\" }\n    },\n    \"Handler\": { \"Fn::Join\" : [ \"\", [{ \"Ref\": \"ModuleName\" },\".handler\"] ] },\n    \"Runtime\": \"nodejs4.3\",\n    \"Timeout\": \"30\"\n  }\n},\n\n\n\"WaitCondition\": {\n  \"Type\" : \"AWS::CloudFormation::WaitCondition\",\n  \"DependsOn\" : \"FirstCustomResource\",\n  \"Properties\": {\n    \"Timeout\": \"180\"\n  }\n},\n\n\n\"FirstCustomResource\": {\n  \"Type\": \"Custom::FirstCustomResource\",\n  \"Properties\": {\n    \"ServiceToken\": { \"Fn::GetAtt\" : [\"FirstCustomResourceFunction\", \"Arn\"] }\n  }\n},\n\n\n\"FirstCustomResourceFunction\": {\n  \"Type\": \"AWS::Lambda::Function\",\n  \"Properties\": {\n    \"Code\": {\n        \"S3Bucket\": { \"Ref\": \"S3Bucket\" },\n        \"S3Key\": { \"Ref\": \"S3Key\" }\n    },\n    \"Handler\": { \"Fn::Join\" : [ \"\", [{ \"Ref\": \"ModuleName\" },\".handler\"] ] },\n    \"Runtime\": \"nodejs4.3\",\n    \"Timeout\": \"30\"\n  }\n}\n</code></pre>\n\n<p>This does not seem to work. Any hack or work-around to have a constant WaitCondition ?</p>\n", "OwnerUserId": "3477322", "LastActivityDate": "2017-04-21T16:05:06.857", "Title": "Creating a cloudFormation waitCondition with constant timeout", "Tags": "|amazon-web-services|aws-cloudformation|", "AnswerCount": "1", "CommentCount": "2", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "74135101", "PostId": "43539945", "Score": "1", "Text": "Do you have an instance in the stack that could provide the \"sleep\" then signal the handle?", "CreationDate": "2017-04-21T11:34:13.900", "UserId": "168589", "filtered-sentences": [{"source": "Text", "text": "Do you have an instance in the stack that could provide the \"sleep\" then signal the handle?", "keywords": ["instance"]}]}, {"Id": "74135154", "PostId": "43539945", "Score": "0", "Text": "No. I am deploying a kubernetes cluster in the custom function. Sending the success signal from Google cloud would be difficult.", "CreationDate": "2017-04-21T11:35:42.823", "UserId": "3477322", "filtered-sentences": [{"source": "Text", "text": "I am deploying a kubernetes cluster in the custom function. ", "keywords": ["cluster"]}]}], "history": [{"Id": "143647777", "PostHistoryTypeId": "2", "PostId": "43539945", "RevisionGUID": "799f541f-434d-4801-8785-dc2a2131cdeb", "CreationDate": "2017-04-21T10:12:01.790", "UserId": "3477322", "Text": "I am using **Two Custom Resources** in my **cloudFormation template.** Basically these Custom Resources are lambda functions which have custom code. I want to **start** the **creation** of **second lambda** after a **constant 3 minutes**.\r\n\r\n\r\nI thought using the cloudFormation's **WaitCondition**  with **timeout property** to solve this. But it need a **WaitHandle** which has to receive success signals before the timeout. Once the signals are received, the WaitCondition turns to **Create-Complete.** But in my case, I cant make the custom function to send signal to wait handle. I need to have a constant 3 minute wait time after completion of **First Custom Resource.** Then, start the creation of **Second Custom Resource** after the **Create-Complete** of **WaitCondition.** Here is my code:\r\n\r\n\r\n\r\n\r\n    \"SecondCustomResource\": {\r\n      \"Type\": \"Custom::SecondCustomResource\",\r\n      \"DependsOn\" : \"WaitCondition\",\r\n      \"Properties\": {\r\n        \"ServiceToken\": { \"Fn::GetAtt\" : [\"SecondCustomResourceFunction\", \"Arn\"] }\r\n      }\r\n    },\r\n\r\n\r\n    \"SecondCustomResourceFunction\": {\r\n      \"Type\": \"AWS::Lambda::Function\",\r\n      \"Properties\": {\r\n        \"Code\": {\r\n            \"S3Bucket\": { \"Ref\": \"S3Bucket\" },\r\n            \"S3Key\": { \"Ref\": \"S3Key\" }\r\n        },\r\n        \"Handler\": { \"Fn::Join\" : [ \"\", [{ \"Ref\": \"ModuleName\" },\".handler\"] ] },\r\n        \"Runtime\": \"nodejs4.3\",\r\n        \"Timeout\": \"30\"\r\n      }\r\n    },\r\n\r\n\r\n    \"WaitCondition\": {\r\n      \"Type\" : \"AWS::CloudFormation::WaitCondition\",\r\n      \"DependsOn\" : \"FirstCustomResource\",\r\n      \"Properties\": {\r\n        \"Timeout\": \"180\"\r\n      }\r\n    },\r\n\r\n\r\n    \"FirstCustomResource\": {\r\n      \"Type\": \"Custom::FirstCustomResource\",\r\n      \"Properties\": {\r\n        \"ServiceToken\": { \"Fn::GetAtt\" : [\"FirstCustomResourceFunction\", \"Arn\"] }\r\n      }\r\n    },\r\n\r\n\r\n    \"FirstCustomResourceFunction\": {\r\n      \"Type\": \"AWS::Lambda::Function\",\r\n      \"Properties\": {\r\n        \"Code\": {\r\n            \"S3Bucket\": { \"Ref\": \"S3Bucket\" },\r\n            \"S3Key\": { \"Ref\": \"S3Key\" }\r\n        },\r\n        \"Handler\": { \"Fn::Join\" : [ \"\", [{ \"Ref\": \"ModuleName\" },\".handler\"] ] },\r\n        \"Runtime\": \"nodejs4.3\",\r\n        \"Timeout\": \"30\"\r\n      }\r\n    }\r\n\r\n\r\n\r\n\r\nThis does not seem to work. Any hack or work-around to have a constant WaitCondition ?\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "143647778", "PostHistoryTypeId": "1", "PostId": "43539945", "RevisionGUID": "799f541f-434d-4801-8785-dc2a2131cdeb", "CreationDate": "2017-04-21T10:12:01.790", "UserId": "3477322", "Text": "Creating a cloudFormation waitCondition with constant timeout", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "143647779", "PostHistoryTypeId": "3", "PostId": "43539945", "RevisionGUID": "799f541f-434d-4801-8785-dc2a2131cdeb", "CreationDate": "2017-04-21T10:12:01.790", "UserId": "3477322", "Text": "|amazon-web-services|aws-cloudformation|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "answers": [{"Id": "43547281", "PostTypeId": "2", "ParentId": "43539945", "CreationDate": "2017-04-21T16:05:06.857", "Score": "1", "Body": "<blockquote>\n  <blockquote>\n    <p>I just want a constant 3 minute wait time between my first and second custom resource. Is this possible ? &lt;&lt;</p>\n  </blockquote>\n</blockquote>\n\n<p>Probably.  I would think you want to try it by doing these two things.\n1. Put a \"sleep\" function into the FirstCustomResourceFunction that sleeps for 3 minutes before signalling success.  See this, super important, look for \"SUCCESS\" <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html\" rel=\"nofollow noreferrer\">http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html</a></p>\n\n<ol start=\"2\">\n<li>Have SecondCustomResourceFunction depend on FirstCustomResource.  That way it will not start until FirstCustomResource is complete (aka sleep and then success).</li>\n</ol>\n\n<p>I think you can get rid of the WaitConditions then.</p>\n\n<p>Be aware that \"All calls made to AWS Lambda must complete execution within 300 seconds.\".  (<a href=\"https://aws.amazon.com/lambda/faqs/\" rel=\"nofollow noreferrer\">https://aws.amazon.com/lambda/faqs/</a>)  So, if your deployment grows by 60%, you're probably cooked.  (That's one of the reasons I was trying to steer you away from using Lambda as a wait state).  I really would try to find some better way.  In 15 years as DevOps, I've never arrived at \"a constant value wait state\" being a successful long term solution.</p>\n", "OwnerUserId": "168589", "LastActivityDate": "2017-04-21T16:05:06.857", "CommentCount": "2", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "74146705", "PostId": "43547281", "Score": "0", "Text": "Interesting!! I thought this, but it is going to be expensive one, when I wait inside the Lambda for the cluster to change the state to Running. I understand your concern on the constant 3 minutes, I think I have to come up with some other solution.", "CreationDate": "2017-04-21T16:08:03.597", "UserId": "3477322", "filtered-sentences": [{"source": "Text", "text": "I thought this, but it is going to be expensive one, when I wait inside the Lambda for the cluster to change the state to Running. ", "keywords": ["expense", "cluster", "change"]}]}, {"Id": "102734825", "PostId": "43547281", "Score": "0", "Text": "Lambda limit is now 900 seconds (15 minutes)  https://docs.aws.amazon.com/lambda/latest/dg/limits.html", "CreationDate": "2019-10-01T01:53:07.307", "UserId": "168589", "filtered-sentences": []}], "history": [{"Id": "143676011", "PostHistoryTypeId": "2", "PostId": "43547281", "RevisionGUID": "ce1015c7-cd95-4215-be15-9985baca9702", "CreationDate": "2017-04-21T16:05:06.857", "UserId": "168589", "Text": ">> I just want a constant 3 minute wait time between my first and second custom resource. Is this possible ? <<\r\n\r\nProbably.  I would think you want to try it by doing these two things.\r\n1. Put a \"sleep\" function into the FirstCustomResourceFunction that sleeps for 3 minutes before signalling success.  See this, super important, look for \"SUCCESS\" http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html\r\n\r\n2. Have SecondCustomResourceFunction depend on FirstCustomResource.  That way it will not start until FirstCustomResource is complete (aka sleep and then success).\r\n\r\nI think you can get rid of the WaitConditions then.\r\n\r\nBe aware that \"All calls made to AWS Lambda must complete execution within 300 seconds.\".  (https://aws.amazon.com/lambda/faqs/)  So, if your deployment grows by 60%, you're probably cooked.  (That's one of the reasons I was trying to steer you away from using Lambda as a wait state).  I really would try to find some better way.  In 15 years as DevOps, I've never arrived at \"a constant value wait state\" being a successful long term solution.\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}