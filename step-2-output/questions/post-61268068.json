{"Id": "61268068", "PostTypeId": "1", "AcceptedAnswerId": "61278170", "CreationDate": "2020-04-17T09:19:01.473", "Score": "31", "ViewCount": "18541", "Body": "<p>I recently started working with AWS and IaC, I'm using Cloudformation to provision my AWS resources, but I discovered that AWS provide both a SDK and a CDK to enable you to provision resources programmatically instead of plain json/yaml.</p>\n\n<p>But based on the documentation I did not really understand how they differ, can someone explain me how they differ and for what use case you should use what?</p>\n", "OwnerUserId": "11957372", "LastEditorUserId": "213269", "LastEditDate": "2024-03-22T00:40:41.170", "LastActivityDate": "2024-03-22T00:40:41.170", "Title": "AWS CDK VS SDK for IaC", "Tags": "|amazon-web-services|aws-cloudformation|aws-cdk|", "AnswerCount": "5", "CommentCount": "1", "FavoriteCount": "0", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "124384774", "PostId": "61268068", "Score": "0", "Text": "There are some good answers here, but I also feel that part of the difference between an SDK and CDK is branding:  \"cloud development kit\" just sounds more modern and fancy.", "CreationDate": "2021-12-15T14:28:31.850", "UserId": "534238", "filtered-sentences": []}], "history": [{"Id": "219422768", "PostHistoryTypeId": "2", "PostId": "61268068", "RevisionGUID": "f6ebc980-e99e-47da-8468-04cd5ce64ab9", "CreationDate": "2020-04-17T09:19:01.473", "UserId": "11957372", "Text": "I recently started working with AWS and IaC, I'm using Cloudformation to provision my AWS resources, but I discovered that AWS provide both a SDK and a CDK to enable you to provision resources programmatically instead of plain json/yaml.\r\n\r\nBut based on the documentation I did not really understand how they differ, can someone explain me how they differ and for what use case you should use what?\r\n", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "219422769", "PostHistoryTypeId": "1", "PostId": "61268068", "RevisionGUID": "f6ebc980-e99e-47da-8468-04cd5ce64ab9", "CreationDate": "2020-04-17T09:19:01.473", "UserId": "11957372", "Text": "AWS CDK VS SDK for IaC", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "219422770", "PostHistoryTypeId": "3", "PostId": "61268068", "RevisionGUID": "f6ebc980-e99e-47da-8468-04cd5ce64ab9", "CreationDate": "2020-04-17T09:19:01.473", "UserId": "11957372", "Text": "|amazon-web-services|aws-cloudformation|infrastructure-as-code|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "304566922", "PostHistoryTypeId": "6", "PostId": "61268068", "RevisionGUID": "14f373e1-d065-4c8f-83a4-cd34b4e7401d", "CreationDate": "2024-03-22T00:40:41.170", "UserId": "213269", "Comment": "edited tags", "Text": "|amazon-web-services|aws-cloudformation|aws-cdk|", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "answers": [{"Id": "72388923", "PostTypeId": "2", "ParentId": "61268068", "CreationDate": "2022-05-26T08:28:54.680", "Score": "3", "Body": "<p><strong>Some background first:</strong> <a href=\"https://aws.amazon.com/cloudformation/\" rel=\"nofollow noreferrer\">CloudFormation</a> is Amazon's solution for an \u201cInfrastructure as Code\u201d approach to managing the definition, provisioning and deployment of a bunch of resources across accounts/regions. This is done by using their declarative yaml/json-based template language to define it all, and then executing the templates through various means (console, cli, APIs...). More info:\u2028</p>\n<ul>\n<li>white paper: <a href=\"https://docs.aws.amazon.com/whitepapers/latest/develop-deploy-dotnet-apps-on-aws/infrastructure-as-code.html%E2%80%A8\" rel=\"nofollow noreferrer\">https://docs.aws.amazon.com/whitepapers/latest/develop-deploy-dotnet-apps-on-aws/infrastructure-as-code.html\u2028</a></li>\n<li>faq: <a href=\"https://aws.amazon.com/cloudformation/faqs/\" rel=\"nofollow noreferrer\">https://aws.amazon.com/cloudformation/faqs/</a></li>\n</ul>\n<p>There are other popular IaC solutions or tools to help achieve it more easily out there, such as <a href=\"https://www.terraform.io/\" rel=\"nofollow noreferrer\">Terraform</a> and <a href=\"https://www.vmware.com/topics/glossary/content/kubernetes.html\" rel=\"nofollow noreferrer\">Kubernetes</a> (container orchestration that also uses declarative templates to define desired states).</p>\n<p><em>Potential benefits of IaC</em>: At a high level, you can better <strong>track &amp; audit</strong> your infra, <strong>reuse</strong> definitions/processes, make all your changes in a more <strong>consistent</strong> manner, <strong>faster</strong> thanks to all the automation and assurances you can get with an infra-as-code approach. You may be familiar with these as mentioned in previous answers and more, such as:</p>\n<ul>\n<li>version controlling your infrastructure definitions,</li>\n<li>more efficient and logically complex ways of constructing templates,</li>\n<li>ability to write tests against them,</li>\n<li>do diffs (see &quot;change sets&quot;) before making real infra changes with the templates,</li>\n<li>detect when live infra differs from your definitions,</li>\n<li>automate rollbacks,</li>\n<li>and lots of other state management assistance through a framework like CF that might be needed when performing regular ops duties.</li>\n</ul>\n<p><strong><a href=\"https://aws.amazon.com/cdk/%E2%80%A8\" rel=\"nofollow noreferrer\">CDK</a>:</strong>\nThis is for helping to <em>automate CloudFormation</em> as part of an IaC approach to provisioning and deploying resources. It lets you use various popular programming languages to help with the creation, testing, and management of your CF setup. Some of AWS\u2019s motivations: \u201cYAML is an excellent format for describing the desired state of your cluster, but it is does not have primitives for expressing logic and reusable abstractions.\u201c \u201cAWS CDK uses the familiarity and expressive power of programming languages for modeling your applications.\u201d\u2028 More info: <a href=\"https://docs.aws.amazon.com/cdk/v2/guide/home.html\" rel=\"nofollow noreferrer\">https://docs.aws.amazon.com/cdk/v2/guide/home.html</a></p>\n<p>\u2028However, Amazon knows about other solutions, and happily points them out on the main CDK page now, downplaying its original connection to CF. You don't need to use CloudFormation if you don't want to; specifically, they mention you can use the same CDK constructs with the help of:</p>\n<ul>\n<li><a href=\"https://github.com/hashicorp/terraform-cdk\" rel=\"nofollow noreferrer\">cdktf</a> for Terraform maintained by its creators, Hashicorp\u2028</li>\n<li><a href=\"https://cdk8s.io/\" rel=\"nofollow noreferrer\">cdk8s</a> for Kubernetes <a href=\"https://aws.amazon.com/blogs/containers/introducing-cdk-for-kubernetes/\" rel=\"nofollow noreferrer\">by AWS</a>. re: \u201cWe realized this was exactly the same problem our customers had faced when defining their applications through CloudFormation templates, a problem solved by the\u00a0AWS Cloud Development Kit (AWS CDK), and that we could apply the same design concepts from the AWS CDK to help all Kubernetes users.\u201d\u2028\u2028</li>\n</ul>\n<p><strong><a href=\"https://aws.amazon.com/tools/\" rel=\"nofollow noreferrer\">SDK</a>:</strong>\n\u2028AWS has an API for all of their services, and the various SDKs give you access to them. For example, I can use AWS\u2019s Java SDK to <a href=\"https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/java_api-gateway_code_examples.html\" rel=\"nofollow noreferrer\">manage an API Gateway</a>. If I wanted to script some custom deployment process, I could do so with the SDK, managing all the state, etc. myself. You could probably even re-implement the CloudFormation service with the various underlying APIs... The APIs have varying levels of documentation though. E.g. CloudFormation Java APIs are only mentioned in the <a href=\"https://sdk.amazonaws.com/java/api/latest/\" rel=\"nofollow noreferrer\">raw API reference</a>, not the friendlier Developer Guide.</p>\n", "OwnerUserId": "954643", "LastEditorUserId": "954643", "LastEditDate": "2022-09-18T09:59:18.640", "LastActivityDate": "2022-09-18T09:59:18.640", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "270959418", "PostHistoryTypeId": "2", "PostId": "72388923", "RevisionGUID": "b2130722-c90f-4c87-b6b6-611a4e5e6b5c", "CreationDate": "2022-05-26T08:28:54.680", "UserId": "954643", "Text": "\r\n**Some background first:** [CloudFormation](https://aws.amazon.com/cloudformation/) is Amazon's solution for an \u201cInfrastructure as Code\u201d approach to managing the definition, provisioning and deployment of a bunch of resources across accounts/regions. This is done by using their declarative yaml/json-based template language to define it all, and then executing the templates through various means (console, cli, APIs...). More info:\u2028\r\n\r\n* white paper: https://docs.aws.amazon.com/whitepapers/latest/develop-deploy-dotnet-apps-on-aws/infrastructure-as-code.html\u2028\r\n* faq: https://aws.amazon.com/cloudformation/faqs/ \r\n\r\nThere are other popular IaC solutions or tools to help achieve it more easily out there, such as [Terraform](https://www.terraform.io/) and [Kubernetes](https://www.vmware.com/topics/glossary/content/kubernetes.html) (container orchestration that also uses declarative templates to define desired states).\r\n\r\nYou probably know about potential benefits of IaC mentioned in previous answers and more, such as: version controlling your infrastructure definitions, more efficient and logically complex ways of constructing templates, ability to write tests against them, do diffs (see \"change sets\") before making real infra changes with the templates, detect when live infra differs from your definitions, automate rollbacks, and lots of other state management assistance through the framework that might be needed when performing regular ops duties. At a high level, you can better *track/audit*, *reuse* things, do them all in a more *consistent* manner, *faster* thanks to all the automation and assurances you can get with an infra-as-code approach.\r\n\r\n**[CDK](https://aws.amazon.com/cdk/\u2028\r\n):**\r\nThis originally was for helping to *automate CloudFormation* as part of an IaC approach to provisioning and deploying resources. It lets you use various popular programming languages to help with the creation, testing, and management of your CF setup. Some of AWS\u2019s motivations: \u201cYAML is an excellent format for describing the desired state of your cluster, but it is does not have primitives for expressing logic and reusable abstractions.\u201c \u201cAWS CDK uses the familiarity and expressive power of programming languages for modeling your applications.\u201d\u2028 More info: https://docs.aws.amazon.com/cdk/v2/guide/home.html \r\n\r\n\u2028However, Amazon knows about other solutions, and happily points them out on the main CDK page now, downplaying its original connection to CF. Specifically, they mention you can use the same CDK constructs with:\r\n\r\n* [cdktf](https://github.com/hashicorp/terraform-cdk) for Terraform maintained by its creators, Hashicorp\u2028\r\n* [cdk8s](https://cdk8s.io/) for Kubernetes [by AWS](https://aws.amazon.com/blogs/containers/introducing-cdk-for-kubernetes/). re: \u201cWe realized this was exactly the same problem our customers had faced when defining their applications through CloudFormation templates, a problem solved by the\u00a0AWS Cloud Development Kit (AWS CDK), and that we could apply the same design concepts from the AWS CDK to help all Kubernetes users.\u201d\u2028\u2028\r\n\r\n**[SDK](https://aws.amazon.com/tools/):**\r\n\u2028AWS has an API for all of their services, and the various SDKs give you access to them. For example, I can use AWS\u2019s Java SDK to [manage an API Gateway](https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/java_api-gateway_code_examples.html). If I wanted to script some custom deployment process, I could do so with the SDK, managing all the state, etc. myself. You could probably even re-implement the CloudFormation service with the various underlying APIs... The APIs have varying levels of documentation though. E.g. CloudFormation Java APIs are only mentioned in the [raw API reference](https://sdk.amazonaws.com/java/api/latest/), not the friendlier Developer Guide.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "You probably know about potential benefits of IaC mentioned in previous answers and more, such as: version controlling your infrastructure definitions, more efficient and logically complex ways of constructing templates, ability to write tests against them, do diffs (see \"change sets\") before making real infra changes with the templates, detect when live infra differs from your definitions, automate rollbacks, and lots of other state management assistance through the framework that might be needed when performing regular ops duties. ", "keywords": ["efficient", "change", "test"]}, {"source": "Text", "text": "It lets you use various popular programming languages to help with the creation, testing, and management of your CF setup. ", "keywords": ["test"]}, {"source": "Text", "text": "Some of AWS\u2019s motivations: \u201cYAML is an excellent format for describing the desired state of your cluster, but it is does not have primitives for expressing logic and reusable abstractions.\u201c ", "keywords": ["cluster"]}]}, {"Id": "270959704", "PostHistoryTypeId": "5", "PostId": "72388923", "RevisionGUID": "5c78500c-93c1-4ab1-bcbb-84a4ae71857c", "CreationDate": "2022-05-26T08:34:22.713", "UserId": "954643", "Comment": "added 82 characters in body", "Text": "\r\n**Some background first:** [CloudFormation](https://aws.amazon.com/cloudformation/) is Amazon's solution for an \u201cInfrastructure as Code\u201d approach to managing the definition, provisioning and deployment of a bunch of resources across accounts/regions. This is done by using their declarative yaml/json-based template language to define it all, and then executing the templates through various means (console, cli, APIs...). More info:\u2028\r\n\r\n* white paper: https://docs.aws.amazon.com/whitepapers/latest/develop-deploy-dotnet-apps-on-aws/infrastructure-as-code.html\u2028\r\n* faq: https://aws.amazon.com/cloudformation/faqs/ \r\n\r\nThere are other popular IaC solutions or tools to help achieve it more easily out there, such as [Terraform](https://www.terraform.io/) and [Kubernetes](https://www.vmware.com/topics/glossary/content/kubernetes.html) (container orchestration that also uses declarative templates to define desired states).\r\n\r\n*Potential benefits of IaC*: You may be familiar with these as mentioned in previous answers and more, such as: version controlling your infrastructure definitions, more efficient and logically complex ways of constructing templates, ability to write tests against them, do diffs (see \"change sets\") before making real infra changes with the templates, detect when live infra differs from your definitions, automate rollbacks, and lots of other state management assistance through the framework that might be needed when performing regular ops duties. At a high level, you can better **track & audit**, **reuse** things, do them all in a more **consistent** manner, **faster** thanks to all the automation and assurances you can get with an infra-as-code approach.\r\n\r\n**[CDK](https://aws.amazon.com/cdk/\u2028\r\n):**\r\nThis is for helping to *automate CloudFormation* as part of an IaC approach to provisioning and deploying resources. It lets you use various popular programming languages to help with the creation, testing, and management of your CF setup. Some of AWS\u2019s motivations: \u201cYAML is an excellent format for describing the desired state of your cluster, but it is does not have primitives for expressing logic and reusable abstractions.\u201c \u201cAWS CDK uses the familiarity and expressive power of programming languages for modeling your applications.\u201d\u2028 More info: https://docs.aws.amazon.com/cdk/v2/guide/home.html \r\n\r\n\u2028However, Amazon knows about other solutions, and happily points them out on the main CDK page now, downplaying its original connection to CF. You don't need to use CloudFormation if you don't want to; specifically, they mention you can use the same CDK constructs with the help of:\r\n\r\n* [cdktf](https://github.com/hashicorp/terraform-cdk) for Terraform maintained by its creators, Hashicorp\u2028\r\n* [cdk8s](https://cdk8s.io/) for Kubernetes [by AWS](https://aws.amazon.com/blogs/containers/introducing-cdk-for-kubernetes/). re: \u201cWe realized this was exactly the same problem our customers had faced when defining their applications through CloudFormation templates, a problem solved by the\u00a0AWS Cloud Development Kit (AWS CDK), and that we could apply the same design concepts from the AWS CDK to help all Kubernetes users.\u201d\u2028\u2028\r\n\r\n**[SDK](https://aws.amazon.com/tools/):**\r\n\u2028AWS has an API for all of their services, and the various SDKs give you access to them. For example, I can use AWS\u2019s Java SDK to [manage an API Gateway](https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/java_api-gateway_code_examples.html). If I wanted to script some custom deployment process, I could do so with the SDK, managing all the state, etc. myself. You could probably even re-implement the CloudFormation service with the various underlying APIs... The APIs have varying levels of documentation though. E.g. CloudFormation Java APIs are only mentioned in the [raw API reference](https://sdk.amazonaws.com/java/api/latest/), not the friendlier Developer Guide.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "*Potential benefits of IaC*: You may be familiar with these as mentioned in previous answers and more, such as: version controlling your infrastructure definitions, more efficient and logically complex ways of constructing templates, ability to write tests against them, do diffs (see \"change sets\") before making real infra changes with the templates, detect when live infra differs from your definitions, automate rollbacks, and lots of other state management assistance through the framework that might be needed when performing regular ops duties. ", "keywords": ["efficient", "change", "test"]}, {"source": "Text", "text": "It lets you use various popular programming languages to help with the creation, testing, and management of your CF setup. ", "keywords": ["test"]}, {"source": "Text", "text": "Some of AWS\u2019s motivations: \u201cYAML is an excellent format for describing the desired state of your cluster, but it is does not have primitives for expressing logic and reusable abstractions.\u201c ", "keywords": ["cluster"]}]}, {"Id": "270960608", "PostHistoryTypeId": "5", "PostId": "72388923", "RevisionGUID": "31489f28-34ec-4776-9c29-19af452d08d7", "CreationDate": "2022-05-26T08:48:48.863", "UserId": "954643", "Comment": "added 69 characters in body", "Text": "\r\n**Some background first:** [CloudFormation](https://aws.amazon.com/cloudformation/) is Amazon's solution for an \u201cInfrastructure as Code\u201d approach to managing the definition, provisioning and deployment of a bunch of resources across accounts/regions. This is done by using their declarative yaml/json-based template language to define it all, and then executing the templates through various means (console, cli, APIs...). More info:\u2028\r\n\r\n* white paper: https://docs.aws.amazon.com/whitepapers/latest/develop-deploy-dotnet-apps-on-aws/infrastructure-as-code.html\u2028\r\n* faq: https://aws.amazon.com/cloudformation/faqs/ \r\n\r\nThere are other popular IaC solutions or tools to help achieve it more easily out there, such as [Terraform](https://www.terraform.io/) and [Kubernetes](https://www.vmware.com/topics/glossary/content/kubernetes.html) (container orchestration that also uses declarative templates to define desired states).\r\n\r\n*Potential benefits of IaC*: At a high level, you can better **track & audit** your infra, **reuse** definitions/processes, make all your changes in a more **consistent** manner, **faster** thanks to all the automation and assurances you can get with an infra-as-code approach. You may be familiar with these as mentioned in previous answers and more, such as: \r\n\r\n* version controlling your infrastructure definitions, \r\n* more efficient and logically complex ways of constructing templates, \r\n* ability to write tests against them,\r\n* do diffs (see \"change sets\") before making real infra changes with the templates,\r\n* detect when live infra differs from your definitions,\r\n* automate rollbacks,\r\n* and lots of other state management assistance through a framework like CF that might be needed when performing regular ops duties. \r\n\r\n**[CDK](https://aws.amazon.com/cdk/\u2028\r\n):**\r\nThis is for helping to *automate CloudFormation* as part of an IaC approach to provisioning and deploying resources. It lets you use various popular programming languages to help with the creation, testing, and management of your CF setup. Some of AWS\u2019s motivations: \u201cYAML is an excellent format for describing the desired state of your cluster, but it is does not have primitives for expressing logic and reusable abstractions.\u201c \u201cAWS CDK uses the familiarity and expressive power of programming languages for modeling your applications.\u201d\u2028 More info: https://docs.aws.amazon.com/cdk/v2/guide/home.html \r\n\r\n\u2028However, Amazon knows about other solutions, and happily points them out on the main CDK page now, downplaying its original connection to CF. You don't need to use CloudFormation if you don't want to; specifically, they mention you can use the same CDK constructs with the help of:\r\n\r\n* [cdktf](https://github.com/hashicorp/terraform-cdk) for Terraform maintained by its creators, Hashicorp\u2028\r\n* [cdk8s](https://cdk8s.io/) for Kubernetes [by AWS](https://aws.amazon.com/blogs/containers/introducing-cdk-for-kubernetes/). re: \u201cWe realized this was exactly the same problem our customers had faced when defining their applications through CloudFormation templates, a problem solved by the\u00a0AWS Cloud Development Kit (AWS CDK), and that we could apply the same design concepts from the AWS CDK to help all Kubernetes users.\u201d\u2028\u2028\r\n\r\n**[SDK](https://aws.amazon.com/tools/):**\r\n\u2028AWS has an API for all of their services, and the various SDKs give you access to them. For example, I can use AWS\u2019s Java SDK to [manage an API Gateway](https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/java_api-gateway_code_examples.html). If I wanted to script some custom deployment process, I could do so with the SDK, managing all the state, etc. myself. You could probably even re-implement the CloudFormation service with the various underlying APIs... The APIs have varying levels of documentation though. E.g. CloudFormation Java APIs are only mentioned in the [raw API reference](https://sdk.amazonaws.com/java/api/latest/), not the friendlier Developer Guide.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "*Potential benefits of IaC*: At a high level, you can better **track & audit** your infra, **reuse** definitions/processes, make all your changes in a more **consistent** manner, **faster** thanks to all the automation and assurances you can get with an infra-as-code approach. ", "keywords": ["change"]}, {"source": "Text", "text": "You may be familiar with these as mentioned in previous answers and more, such as: * version controlling your infrastructure definitions, * more efficient and logically complex ways of constructing templates, * ability to write tests against them, * do diffs (see \"change sets\") before making real infra changes with the templates, * detect when live infra differs from your definitions, * automate rollbacks, * and lots of other state management assistance through a framework like CF that might be needed when performing regular ops duties. ", "keywords": ["efficient", "change", "test"]}, {"source": "Text", "text": "It lets you use various popular programming languages to help with the creation, testing, and management of your CF setup. ", "keywords": ["test"]}, {"source": "Text", "text": "Some of AWS\u2019s motivations: \u201cYAML is an excellent format for describing the desired state of your cluster, but it is does not have primitives for expressing logic and reusable abstractions.\u201c ", "keywords": ["cluster"]}]}, {"Id": "278452987", "PostHistoryTypeId": "5", "PostId": "72388923", "RevisionGUID": "266148a1-ef18-445f-9032-90d08fd0bc00", "CreationDate": "2022-09-18T09:59:18.640", "UserId": "954643", "Comment": "fix cdk link", "Text": "\r\n**Some background first:** [CloudFormation](https://aws.amazon.com/cloudformation/) is Amazon's solution for an \u201cInfrastructure as Code\u201d approach to managing the definition, provisioning and deployment of a bunch of resources across accounts/regions. This is done by using their declarative yaml/json-based template language to define it all, and then executing the templates through various means (console, cli, APIs...). More info:\u2028\r\n\r\n* white paper: https://docs.aws.amazon.com/whitepapers/latest/develop-deploy-dotnet-apps-on-aws/infrastructure-as-code.html\u2028\r\n* faq: https://aws.amazon.com/cloudformation/faqs/ \r\n\r\nThere are other popular IaC solutions or tools to help achieve it more easily out there, such as [Terraform](https://www.terraform.io/) and [Kubernetes](https://www.vmware.com/topics/glossary/content/kubernetes.html) (container orchestration that also uses declarative templates to define desired states).\r\n\r\n*Potential benefits of IaC*: At a high level, you can better **track & audit** your infra, **reuse** definitions/processes, make all your changes in a more **consistent** manner, **faster** thanks to all the automation and assurances you can get with an infra-as-code approach. You may be familiar with these as mentioned in previous answers and more, such as: \r\n\r\n* version controlling your infrastructure definitions, \r\n* more efficient and logically complex ways of constructing templates, \r\n* ability to write tests against them,\r\n* do diffs (see \"change sets\") before making real infra changes with the templates,\r\n* detect when live infra differs from your definitions,\r\n* automate rollbacks,\r\n* and lots of other state management assistance through a framework like CF that might be needed when performing regular ops duties. \r\n\r\n**[CDK](https://aws.amazon.com/cdk/\u2028):**\r\nThis is for helping to *automate CloudFormation* as part of an IaC approach to provisioning and deploying resources. It lets you use various popular programming languages to help with the creation, testing, and management of your CF setup. Some of AWS\u2019s motivations: \u201cYAML is an excellent format for describing the desired state of your cluster, but it is does not have primitives for expressing logic and reusable abstractions.\u201c \u201cAWS CDK uses the familiarity and expressive power of programming languages for modeling your applications.\u201d\u2028 More info: https://docs.aws.amazon.com/cdk/v2/guide/home.html \r\n\r\n\u2028However, Amazon knows about other solutions, and happily points them out on the main CDK page now, downplaying its original connection to CF. You don't need to use CloudFormation if you don't want to; specifically, they mention you can use the same CDK constructs with the help of:\r\n\r\n* [cdktf](https://github.com/hashicorp/terraform-cdk) for Terraform maintained by its creators, Hashicorp\u2028\r\n* [cdk8s](https://cdk8s.io/) for Kubernetes [by AWS](https://aws.amazon.com/blogs/containers/introducing-cdk-for-kubernetes/). re: \u201cWe realized this was exactly the same problem our customers had faced when defining their applications through CloudFormation templates, a problem solved by the\u00a0AWS Cloud Development Kit (AWS CDK), and that we could apply the same design concepts from the AWS CDK to help all Kubernetes users.\u201d\u2028\u2028\r\n\r\n**[SDK](https://aws.amazon.com/tools/):**\r\n\u2028AWS has an API for all of their services, and the various SDKs give you access to them. For example, I can use AWS\u2019s Java SDK to [manage an API Gateway](https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/java_api-gateway_code_examples.html). If I wanted to script some custom deployment process, I could do so with the SDK, managing all the state, etc. myself. You could probably even re-implement the CloudFormation service with the various underlying APIs... The APIs have varying levels of documentation though. E.g. CloudFormation Java APIs are only mentioned in the [raw API reference](https://sdk.amazonaws.com/java/api/latest/), not the friendlier Developer Guide.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "*Potential benefits of IaC*: At a high level, you can better **track & audit** your infra, **reuse** definitions/processes, make all your changes in a more **consistent** manner, **faster** thanks to all the automation and assurances you can get with an infra-as-code approach. ", "keywords": ["change"]}, {"source": "Text", "text": "You may be familiar with these as mentioned in previous answers and more, such as: * version controlling your infrastructure definitions, * more efficient and logically complex ways of constructing templates, * ability to write tests against them, * do diffs (see \"change sets\") before making real infra changes with the templates, * detect when live infra differs from your definitions, * automate rollbacks, * and lots of other state management assistance through a framework like CF that might be needed when performing regular ops duties. ", "keywords": ["efficient", "change", "test"]}, {"source": "Text", "text": "It lets you use various popular programming languages to help with the creation, testing, and management of your CF setup. ", "keywords": ["test"]}, {"source": "Text", "text": "Some of AWS\u2019s motivations: \u201cYAML is an excellent format for describing the desired state of your cluster, but it is does not have primitives for expressing logic and reusable abstractions.\u201c ", "keywords": ["cluster"]}]}], "filtered-sentences": [{"source": "Body", "text": "Potential benefits of IaC: At a high level, you can better track & audit your infra, reuse definitions/processes, make all your changes in a more consistent manner, faster thanks to all the automation and assurances you can get with an infra-as-code approach. ", "keywords": ["change"]}, {"source": "Body", "text": "You may be familiar with these as mentioned in previous answers and more, such as: version controlling your infrastructure definitions, more efficient and logically complex ways of constructing templates, ability to write tests against them, do diffs (see \"change sets\") before making real infra changes with the templates, detect when live infra differs from your definitions, automate rollbacks, and lots of other state management assistance through a framework like CF that might be needed when performing regular ops duties. ", "keywords": ["efficient", "change", "test"]}, {"source": "Body", "text": "It lets you use various popular programming languages to help with the creation, testing, and management of your CF setup. ", "keywords": ["test"]}, {"source": "Body", "text": "Some of AWS\u2019s motivations: \u201cYAML is an excellent format for describing the desired state of your cluster, but it is does not have primitives for expressing logic and reusable abstractions.\u201c ", "keywords": ["cluster"]}]}, {"Id": "76363448", "PostTypeId": "2", "ParentId": "61268068", "CreationDate": "2023-05-30T09:30:45.633", "Score": "0", "Body": "<p>In terms of creating infrastructure , aws cdk is preferred.\nAlthough popular tools for IaC are AWS Cloudformation and Terraform. AWS prefers cloudformation as it's their native service but I guess since developers are more suited to javascript, java and python , hence cdk is an attempt to make code developer friendly which cloudformation doesn't offer (In case if you don't know how to use cloudformation designer). The whole purpose of cdk is to create single click code for infra setup.</p>\n<p>For access to aws services or operations, sdk is preferred. In fact I heard this term sdk after 6 months working in boto3. Other popular way for operations to carry out via code is aws-cli. The whole purpose of sdk is to give developers access to cloud environment without giving them access to management console from security POV (although it can also be done via SCPs, IAM roles)</p>\n<p>aws cdk can be used for operations and sdk for infra creation interchangably</p>\n", "OwnerUserId": "8163970", "LastActivityDate": "2023-05-30T09:30:45.633", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "293489571", "PostHistoryTypeId": "2", "PostId": "76363448", "RevisionGUID": "b566ccf6-6afe-4fb6-82ea-11bbac91b47f", "CreationDate": "2023-05-30T09:30:45.633", "UserId": "8163970", "Text": "In terms of creating infrastructure , aws cdk is preferred.\r\nAlthough popular tools for IaC are AWS Cloudformation and Terraform. AWS prefers cloudformation as it's their native service but I guess since developers are more suited to javascript, java and python , hence cdk is an attempt to make code developer friendly which cloudformation doesn't offer (In case if you don't know how to use cloudformation designer). The whole purpose of cdk is to create single click code for infra setup.\r\n\r\nFor access to aws services or operations, sdk is preferred. In fact I heard this term sdk after 6 months working in boto3. Other popular way for operations to carry out via code is aws-cli. The whole purpose of sdk is to give developers access to cloud environment without giving them access to management console from security POV (although it can also be done via SCPs, IAM roles)\r\n\r\naws cdk can be used for operations and sdk for infra creation interchangably", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "69855644", "PostTypeId": "2", "ParentId": "61268068", "CreationDate": "2021-11-05T15:28:47.120", "Score": "0", "Body": "<p>I find that the difference for me is that the CDK codifies the CloudFormation JSON/YAML.  First response, is great ya okay in code but the benefit on the code side of things is you can write unit testing against the code.  Therefore you get to build that sense of security or insurance policy against the provisioned services in the CDK.</p>\n<p>There are other ways to test CF, however, with a dev background, this feels more comfortable.</p>\n", "OwnerUserId": "6031301", "LastActivityDate": "2021-11-05T15:28:47.120", "CommentCount": "0", "ContentLicense": "CC BY-SA 4.0", "history": [{"Id": "257360650", "PostHistoryTypeId": "2", "PostId": "69855644", "RevisionGUID": "bb45d4be-dace-442c-8e67-9f745369759e", "CreationDate": "2021-11-05T15:28:47.120", "UserId": "6031301", "Text": "I find that the difference for me is that the CDK codifies the CloudFormation JSON/YAML.  First response, is great ya okay in code but the benefit on the code side of things is you can write unit testing against the code.  Therefore you get to build that sense of security or insurance policy against the provisioned services in the CDK. \r\n\r\nThere are other ways to test CF, however, with a dev background, this feels more comfortable. ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": [{"source": "Text", "text": "First response, is great ya okay in code but the benefit on the code side of things is you can write unit testing against the code. ", "keywords": ["test"]}, {"source": "Text", "text": "Therefore you get to build that sense of security or insurance policy against the provisioned services in the CDK. ", "keywords": ["policy"]}, {"source": "Text", "text": "There are other ways to test CF, however, with a dev background, this feels more comfortable.", "keywords": ["test"]}]}], "filtered-sentences": [{"source": "Body", "text": "First response, is great ya okay in code but the benefit on the code side of things is you can write unit testing against the code. ", "keywords": ["test"]}, {"source": "Body", "text": "Therefore you get to build that sense of security or insurance policy against the provisioned services in the CDK. ", "keywords": ["policy"]}, {"source": "Body", "text": "There are other ways to test CF, however, with a dev background, this feels more comfortable.", "keywords": ["test"]}]}, {"Id": "62823770", "PostTypeId": "2", "ParentId": "61268068", "CreationDate": "2020-07-09T21:10:33.900", "Score": "30", "Body": "<p><strong>CDK:</strong> Is a framework to model and provision your infrastructure or stack. Stack can consist of a database for ex: DynamoDB, S3 Bucket, Lambda, API Gateway etc. It provides a facility to write code to create an infrastructure in AWS. Also called Infrastructure as code.\n<a href=\"https://docs.aws.amazon.com/cdk/latest/guide/home.html\" rel=\"noreferrer\">Check here</a></p>\n<p><strong>SDK:</strong> These are the code libraries provided by Amazon in various languages, like Java, Python, PHP, Javascript, Typescript etc. These libraries help interact with AWS services (like creating data in DynamoDB) which you either create through CDK or console. SDKs simplify using AWS services in your application with an API.\n<a href=\"https://aws.amazon.com/tools/\" rel=\"noreferrer\">Check here</a></p>\n", "OwnerUserId": "4748886", "LastEditorUserId": "4748886", "LastEditDate": "2021-11-18T19:28:05.787", "LastActivityDate": "2021-11-18T19:28:05.787", "CommentCount": "3", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "124333974", "PostId": "62823770", "Score": "1", "Text": "Is CDK a subset of SDK in terms of the work that it accomplishes regardless of the approach it takes like generating CloudFormation JSON/YAML ?", "CreationDate": "2021-12-13T14:51:49.783", "UserId": "9384494", "filtered-sentences": []}, {"Id": "124364428", "PostId": "62823770", "Score": "7", "Text": "No, CDK is Infrastructure as Code, which means you can write code to create AWS resources like API Gateway, DynamoDB or Lambda. On the other hand SDK helps to interact with these AWS resources for ex: fetch the items from DynamoDB or list the contents of S3 bucket.", "CreationDate": "2021-12-14T18:28:39.130", "UserId": "4748886", "filtered-sentences": []}, {"Id": "135152038", "PostId": "62823770", "Score": "1", "Text": "SDK also supports creating AWS resources, so CDK can be perceived as a subset of AWS SDK.", "CreationDate": "2023-07-10T21:21:28.107", "UserId": "1247399", "filtered-sentences": []}], "history": [{"Id": "226267873", "PostHistoryTypeId": "2", "PostId": "62823770", "RevisionGUID": "bb8ac380-ad53-4746-95eb-86cb94349a21", "CreationDate": "2020-07-09T21:10:33.900", "UserId": "4748886", "Text": "**CDK:** Is a framework to model and provision your infrastructure or stack. Stack can consist a database for ex: DynamoDB, S3 Bucket, Lambda, API Gateway etc. Provides a facility to write code to create infrastructure.\r\n\r\n**SDK:** These are code libraries provided by Amazon in various languages, like Java, Python, PHP, Javascript, Typescript etc. These libraries help interact with AWS services which you either create through CDK or console. SDKs simplify using AWS services in your application with an API. ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "234771666", "PostHistoryTypeId": "5", "PostId": "62823770", "RevisionGUID": "b647a2d0-c684-4121-a475-5470a232d1ab", "CreationDate": "2020-11-12T12:49:44.937", "UserId": "4748886", "Comment": "added 43 characters in body", "Text": "**CDK:** Is a framework to model and provision your infrastructure or stack. Stack can consist of a database for ex: DynamoDB, S3 Bucket, Lambda, API Gateway etc. It provides a facility to write code to create infrastructure.\r\n\r\n**SDK:** These are the code libraries provided by Amazon in various languages, like Java, Python, PHP, Javascript, Typescript etc. These libraries help interact with AWS services (like creating data in DynamoDB) which you either create through CDK or console. SDKs simplify using AWS services in your application with an API. ", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "258285570", "PostHistoryTypeId": "5", "PostId": "62823770", "RevisionGUID": "c0af9974-9df8-4baf-b6a9-2162e763dbc4", "CreationDate": "2021-11-18T19:28:05.787", "UserId": "4748886", "Comment": "Added relevant links to read more details.", "Text": "**CDK:** Is a framework to model and provision your infrastructure or stack. Stack can consist of a database for ex: DynamoDB, S3 Bucket, Lambda, API Gateway etc. It provides a facility to write code to create an infrastructure in AWS. Also called Infrastructure as code.\r\n[Check here][1]\r\n\r\n**SDK:** These are the code libraries provided by Amazon in various languages, like Java, Python, PHP, Javascript, Typescript etc. These libraries help interact with AWS services (like creating data in DynamoDB) which you either create through CDK or console. SDKs simplify using AWS services in your application with an API.\r\n[Check here][2]\r\n\r\n\r\n  [1]: https://docs.aws.amazon.com/cdk/latest/guide/home.html\r\n  [2]: https://aws.amazon.com/tools/", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}, {"Id": "61278170", "PostTypeId": "2", "ParentId": "61268068", "CreationDate": "2020-04-17T18:21:46.417", "Score": "25", "Body": "<p>AWS SDK is a library primarily to ease the access to the AWS services by handling for you the data (de)serialization, credentials management, failure handling, etc. Perhaps, for specific scenarios, you could use the AWS SDK as the infrastructure as a code tool, however it could be cumbersome as it is not the intended usage of the library.</p>\n<p>Based on the <a href=\"https://docs.aws.amazon.com/whitepapers/latest/develop-deploy-dotnet-apps-on-aws/infrastructure-as-code.html\" rel=\"noreferrer\">https://docs.aws.amazon.com/whitepapers/latest/develop-deploy-dotnet-apps-on-aws/infrastructure-as-code.html</a>, dedicated tools for the IaC are AWS CloudFormation and AWS CDK.</p>\n<p>AWS CDK is an abstraction on top of CloudFormation. CDK scripts are in fact transformed to the CloudFormation definitions when scripts are synthesized.</p>\n<p>The difference can be best described on an example: Imagine that for each lambda function in your stack you want to create an error CloudWatch alarm and connect to the SNS topic.</p>\n<p>With CloudFormation you will either a) need to write a pretty much similar bunch of yaml/json definitions for each lambda function to ensure the monitoring, b) use the nested stack templates, c) use CloudFormation modules.</p>\n<p>With CDK you can write a generic code construct - class or method, which can create the alarm for the given lambda function and create the SNS alarm action for given topic.</p>\n<p>In other words, CDK helps you generalize and re-use your IaC in a very familiar way to how you develop your business code. The code is shorter and more readable than the CF definitions.</p>\n<p>The difference is even more remarkable when you need to set up similar resources in different AWS regions and when you have different AWS account per environment. You can manage all AWS accounts and regions with a single CDK codebase.</p>\n", "OwnerUserId": "2712553", "LastEditorUserId": "2712553", "LastEditDate": "2021-05-05T08:10:02.490", "LastActivityDate": "2021-05-05T08:10:02.490", "CommentCount": "4", "ContentLicense": "CC BY-SA 4.0", "comments": [{"Id": "108434187", "PostId": "61278170", "Score": "0", "Text": "Thats a great answer, thank you for giving a thoroughly explanation! :)", "CreationDate": "2020-04-18T19:08:24.660", "UserId": "11957372", "filtered-sentences": []}, {"Id": "119121278", "PostId": "61278170", "Score": "7", "Text": "I am curious as to why this is the chosen answer, given that it doesn't address the difference between the CDK and SDK?", "CreationDate": "2021-05-04T23:52:28.233", "UserId": "3508752", "filtered-sentences": []}, {"Id": "119127665", "PostId": "61278170", "Score": "0", "Text": "Fair point @max_max_mir, I added it to the description. Let me know if you are happy with the answer now.", "CreationDate": "2021-05-05T08:10:45.763", "UserId": "2712553", "filtered-sentences": []}, {"Id": "134705697", "PostId": "61278170", "Score": "0", "Text": "I thought IaC like CloudFormation helps you to define the infrastructure as some templates. If we backs to use an arbitrary programming language to define cloud resource, why don't we just use the SDK to call the create/delete APIs?", "CreationDate": "2023-06-02T16:08:07.070", "UserId": "12556635", "filtered-sentences": []}], "history": [{"Id": "219464225", "PostHistoryTypeId": "2", "PostId": "61278170", "RevisionGUID": "a42f1106-d46a-4603-b330-781fad4ef90a", "CreationDate": "2020-04-17T18:21:46.417", "UserId": "2712553", "Text": "AWS CDK is an abstraction on top of CloudFormation. CDK scripts are in fact transformed to the CloudFormation definitions when scripts are synthesized.\r\n\r\nThe difference can be best described on an example: Imagine that for each lambda function in your stack you want to create error CloudWatch alarm, SNS topic for the alarm, and email subscription for the topic.\r\n\r\nWith CloudFormation you will need to write pretty much similar bunch of yaml/json definitions for each lambda function to ensure the monitoring.\r\n\r\nWith CDK you can write a generic code construct - class or method, which can create alarm, topic and subscription for provided lambda function.\r\n\r\nIn other words, CDK helps you generalize and re-use your IaC. The code is shorter and more readable than plain CF definitions.\r\n\r\nThe difference is even more remarkable when you need to setup similar resources in different AWS regions and when you have different AWS account per environment. You can manage all AWS accounts and regions with single CDK codebase.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "235746945", "PostHistoryTypeId": "5", "PostId": "61278170", "RevisionGUID": "cd7ec07a-6a84-4c7a-9c08-63a1944aa2a9", "CreationDate": "2020-11-26T20:37:15.907", "UserId": "2712553", "Comment": "nested stacks and cf modules option addition", "Text": "AWS CDK is an abstraction on top of CloudFormation. CDK scripts are in fact transformed to the CloudFormation definitions when scripts are synthesized.\r\n\r\nThe difference can be best described on an example: Imagine that for each lambda function in your stack you want to create an error CloudWatch alarm and connect to the SNS topic.\r\n\r\nWith CloudFormation you will either a) need to write a pretty much similar bunch of yaml/json definitions for each lambda function to ensure the monitoring, b) use the nested stack templates, c) use CloudFormation modules.\r\n\r\nWith CDK you can write a generic code construct - class or method, which can create the alarm for the given lambda function and create the SNS alarm action for given topic.\r\n\r\nIn other words, CDK helps you generalize and re-use your IaC in a very familiar way to how you develop your business code. The code is shorter and more readable than the CF definitions.\r\n\r\nThe difference is even more remarkable when you need to set up similar resources in different AWS regions and when you have different AWS account per environment. You can manage all AWS accounts and regions with a single CDK codebase.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}, {"Id": "245990710", "PostHistoryTypeId": "5", "PostId": "61278170", "RevisionGUID": "52f5f994-6ea7-4771-94b3-6655439898ac", "CreationDate": "2021-05-05T08:10:02.490", "UserId": "2712553", "Comment": "AWS SDK note", "Text": "AWS SDK is a library primarily to ease the access to the AWS services by handling for you the data (de)serialization, credentials management, failure handling, etc. Perhaps, for specific scenarios, you could use the AWS SDK as the infrastructure as a code tool, however it could be cumbersome as it is not the intended usage of the library.\r\n\r\nBased on the https://docs.aws.amazon.com/whitepapers/latest/develop-deploy-dotnet-apps-on-aws/infrastructure-as-code.html, dedicated tools for the IaC are AWS CloudFormation and AWS CDK.\r\n\r\nAWS CDK is an abstraction on top of CloudFormation. CDK scripts are in fact transformed to the CloudFormation definitions when scripts are synthesized.\r\n\r\nThe difference can be best described on an example: Imagine that for each lambda function in your stack you want to create an error CloudWatch alarm and connect to the SNS topic.\r\n\r\nWith CloudFormation you will either a) need to write a pretty much similar bunch of yaml/json definitions for each lambda function to ensure the monitoring, b) use the nested stack templates, c) use CloudFormation modules.\r\n\r\nWith CDK you can write a generic code construct - class or method, which can create the alarm for the given lambda function and create the SNS alarm action for given topic.\r\n\r\nIn other words, CDK helps you generalize and re-use your IaC in a very familiar way to how you develop your business code. The code is shorter and more readable than the CF definitions.\r\n\r\nThe difference is even more remarkable when you need to set up similar resources in different AWS regions and when you have different AWS account per environment. You can manage all AWS accounts and regions with a single CDK codebase.", "ContentLicense": "CC BY-SA 4.0", "filtered-sentences": []}], "filtered-sentences": []}], "contains-topic": true, "filtered-sentences": []}