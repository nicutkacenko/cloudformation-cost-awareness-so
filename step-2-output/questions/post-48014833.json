{"Id": "48014833", "PostTypeId": "1", "AcceptedAnswerId": "48019301", "CreationDate": "2017-12-28T21:53:42.560", "Score": "1", "ViewCount": "3301", "Body": "<p>I am quite new to AWS and want to know how to achieve following task with CloudFormation.</p>\n\n<p>I want to spin up an EC2 instance with tomcat and deploy a java application on it. This java application will perform some operation. Once the operation is done, I want to delete all the resources created by this CloudFormation stack.</p>\n\n<p>All these activities should be automatic. For example -- I will create the CloudFormation stack JSON file. At particular time of a day, a job should be kicked off (I don't know where in AWS to configure such job or how). But I know through Jenkins we can create a CloudFormation stack that will create all resources.</p>\n\n<p>Then, after some time (lets say 2 hrs), another job should kick off and delete all resources created by CloudFormation.</p>\n\n<p>Is this possible in AWS? If yes, any hints on how to do this?</p>\n", "OwnerUserId": "5402945", "LastEditorUserId": "174777", "LastEditDate": "2017-12-29T10:58:49.423", "LastActivityDate": "2017-12-29T10:58:49.423", "Title": "Create and delete EC2 instance with CloudFormation", "Tags": "|amazon-web-services|amazon-ec2|aws-cloudformation|", "AnswerCount": "3", "CommentCount": "2", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "83011876", "PostId": "48014833", "Score": "0", "Text": "What do you mean by \"all resources\"? Are you wanting to create anything in AWS aside from the EC2 instance itself (with software installed)?", "CreationDate": "2017-12-29T10:53:20.393", "UserId": "174777", "filtered-sentences": [{"source": "Text", "text": "Are you wanting to create anything in AWS aside from the EC2 instance itself (with software installed)?", "keywords": ["instance"]}]}, {"Id": "83012631", "PostId": "48014833", "Score": "0", "Text": "Depending on the operation, you may want to look into the Data Pipeline, especially if you're pulling data from another AWS resource such as DynamoDB/Redshift/Sql/S3.", "CreationDate": "2017-12-29T11:21:30.420", "UserId": "2075622", "filtered-sentences": []}], "history": [{"Id": "163642724", "PostHistoryTypeId": "2", "PostId": "48014833", "RevisionGUID": "5fe60187-7113-4bed-85c6-3c2593ea73dd", "CreationDate": "2017-12-28T21:53:42.560", "UserId": "5402945", "Text": "     I am quite new to AWS & want to know how to achieve following task with cloud formation.\r\n\r\nI want to spin up an EC2 instance with tomcat & deploy a java application on it. This java application will perform some operation. Once the operation is done, i want to delete all the resources created by this cloudformation stack.\r\n\r\nAll these activities should be automatic. For ex -- i will create cloudformation stack json file. At particular time of a day, a job should be kicked off ( i dont know where in AWS to configure such job & how. But I know thorugh Jenkin we can run cloudformation stack) run cloudformation, which will create all resources & after some time (lets say 2 hrs), another job should kick off & delete all resources created by cloud formation.\r\n      Is this possible in AWS?and yes, any hints on how to do this?\r\n", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "I want to spin up an EC2 instance with tomcat & deploy a java application on it. ", "keywords": ["instance"]}]}, {"Id": "163642725", "PostHistoryTypeId": "1", "PostId": "48014833", "RevisionGUID": "5fe60187-7113-4bed-85c6-3c2593ea73dd", "CreationDate": "2017-12-28T21:53:42.560", "UserId": "5402945", "Text": "Create and delete EC2 instance with cloud formation", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Create and delete EC2 instance with cloud formation", "keywords": ["instance"]}]}, {"Id": "163642726", "PostHistoryTypeId": "3", "PostId": "48014833", "RevisionGUID": "5fe60187-7113-4bed-85c6-3c2593ea73dd", "CreationDate": "2017-12-28T21:53:42.560", "UserId": "5402945", "Text": "|amazon-web-services|amazon-ec2|aws-cloudformation|", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": []}, {"Id": "163670477", "PostHistoryTypeId": "5", "PostId": "48014833", "RevisionGUID": "6fb2384e-3ce2-4aae-b844-415f5ccee38c", "CreationDate": "2017-12-29T10:58:49.423", "UserId": "174777", "Comment": "Formatting", "Text": "I am quite new to AWS and want to know how to achieve following task with CloudFormation.\r\n\r\nI want to spin up an EC2 instance with tomcat and deploy a java application on it. This java application will perform some operation. Once the operation is done, I want to delete all the resources created by this CloudFormation stack.\r\n\r\nAll these activities should be automatic. For example -- I will create the CloudFormation stack JSON file. At particular time of a day, a job should be kicked off (I don't know where in AWS to configure such job or how). But I know through Jenkins we can create a CloudFormation stack that will create all resources.\r\n\r\nThen, after some time (lets say 2 hrs), another job should kick off and delete all resources created by CloudFormation.\r\n\r\nIs this possible in AWS? If yes, any hints on how to do this?", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "I want to spin up an EC2 instance with tomcat and deploy a java application on it. ", "keywords": ["instance"]}]}, {"Id": "163670478", "PostHistoryTypeId": "4", "PostId": "48014833", "RevisionGUID": "6fb2384e-3ce2-4aae-b844-415f5ccee38c", "CreationDate": "2017-12-29T10:58:49.423", "UserId": "174777", "Comment": "Formatting", "Text": "Create and delete EC2 instance with CloudFormation", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Create and delete EC2 instance with CloudFormation", "keywords": ["instance"]}]}], "answers": [{"Id": "48015088", "PostTypeId": "2", "ParentId": "48014833", "CreationDate": "2017-12-28T22:18:59.313", "Score": "0", "Body": "<p>You can use Lambda to execute events on a <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/with-scheduled-events.html\" rel=\"nofollow noreferrer\">regular schedule</a>.</p>\n\n<p>Write a Lambda function that calls CloudFormation to create your stack of resources. You might even consider including a termination Lambda function in your CloudFormation stack and configure it to run on a schedule (2 hours after the stack was created) to delete the stack that the termination Lambda function itself is part of (have not tried this, but believe that it will work). Or you could trigger stack deletion from cron on the EC2 instance running your Java app, of course).</p>\n", "OwnerUserId": "271415", "LastActivityDate": "2017-12-28T22:18:59.313", "CommentCount": "1", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "83021286", "PostId": "48015088", "Score": "0", "Text": "Thanks Jarmod for your reply.  I will try to implement this. I have very limited knowledge of Lambda, hence dont know will it work or not. After implementing i will leave my comments here.", "CreationDate": "2017-12-29T17:03:26.990", "UserId": "5402945", "filtered-sentences": []}], "history": [{"Id": "163643802", "PostHistoryTypeId": "2", "PostId": "48015088", "RevisionGUID": "518421a5-ec30-424f-83f7-1f94bb4ca9f0", "CreationDate": "2017-12-28T22:18:59.313", "UserId": "271415", "Text": "You can use Lambda to execute events on a [regular schedule][1].\r\n\r\nWrite a Lambda function that calls CloudFormation to create your stack of resources. You might even consider including a termination Lambda function in your CloudFormation stack and configure it to run on a schedule (2 hours after the stack was created) to delete the stack that the termination Lambda function itself is part of (have not tried this, but believe that it will work). Or you could trigger stack deletion from cron on the EC2 instance running your Java app, of course).\r\n\r\n\r\n  [1]: http://docs.aws.amazon.com/lambda/latest/dg/with-scheduled-events.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Or you could trigger stack deletion from cron on the EC2 instance running your Java app, of course). ", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "Or you could trigger stack deletion from cron on the EC2 instance running your Java app, of course).", "keywords": ["instance"]}]}, {"Id": "48021494", "PostTypeId": "2", "ParentId": "48014833", "CreationDate": "2017-12-29T10:56:37.207", "Score": "0", "Body": "<p>If all you want is an EC2 instance, it's probably easier to simply create the EC2 instance rather than a CloudFormation stack.</p>\n\n<ul>\n<li>Something (eg an AWS Lambda function triggered by Amazon CloudWatch Events) calls the EC2 API to <strong>create the instance</strong></li>\n<li>User Data is passed to the EC2 instance to <strong>install the desired software</strong> <em>OR</em> use a <strong>custom AMI</strong> with all software pre-installed</li>\n<li>Have the instance <strong>terminate itself</strong> when it has finished processing -- this could be as simple as calling the Operating System to shutdown the machine, with the <em>EC2 Shutdown Behavior</em> set to Terminate.</li>\n</ul>\n", "OwnerUserId": "174777", "LastActivityDate": "2017-12-29T10:56:37.207", "CommentCount": "2", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "83023137", "PostId": "48021494", "Score": "0", "Text": "Thanks John for your reply. I still not sure how the third step can be perform(terminating EC2). But i will read about it.", "CreationDate": "2017-12-29T18:19:59.010", "UserId": "5402945", "filtered-sentences": []}, {"Id": "83027461", "PostId": "48021494", "Score": "0", "Text": "Alternatively, you can make an API call equivalent to `aws ec2 terminate-instances`.", "CreationDate": "2017-12-29T21:37:19.583", "UserId": "174777", "filtered-sentences": []}], "history": [{"Id": "163670370", "PostHistoryTypeId": "2", "PostId": "48021494", "RevisionGUID": "dcea0271-1c97-41da-b2c8-66ee0226ef91", "CreationDate": "2017-12-29T10:56:37.207", "UserId": "174777", "Text": "If all you want is an EC2 instance, it's probably easier to simply create the EC2 instance rather than a CloudFormation stack.\r\n\r\n* Something (eg an AWS Lambda function triggered by Amazon CloudWatch Events) calls the EC2 API to **create the instance**\r\n* User Data is passed to the EC2 instance to **install the desired software** *OR* use a **custom AMI** with all software pre-installed\r\n* Have the instance **terminate itself** when it has finished processing -- this could be as simple as calling the Operating System to shutdown the machine, with the *EC2 Shutdown Behavior* set to Terminate.", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "If all you want is an EC2 instance, it's probably easier to simply create the EC2 instance rather than a CloudFormation stack. ", "keywords": ["instance"]}, {"source": "Text", "text": "* Something (eg an AWS Lambda function triggered by Amazon CloudWatch Events) calls the EC2 API to **create the instance** * User Data is passed to the EC2 instance to **install the desired software** *OR* use a **custom AMI** with all software pre-installed * Have the instance **terminate itself** when it has finished processing -- this could be as simple as calling the Operating System to shutdown the machine, with the *EC2 Shutdown Behavior* set to Terminate.", "keywords": ["instance"]}]}], "filtered-sentences": [{"source": "Body", "text": "If all you want is an EC2 instance, it's probably easier to simply create the EC2 instance rather than a CloudFormation stack. ", "keywords": ["instance"]}, {"source": "Body", "text": "Something (eg an AWS Lambda function triggered by Amazon CloudWatch Events) calls the EC2 API to create the instance User Data is passed to the EC2 instance to install the desired software OR use a custom AMI with all software pre-installed Have the instance terminate itself when it has finished processing -- this could be as simple as calling the Operating System to shutdown the machine, with the EC2 Shutdown Behavior set to Terminate.", "keywords": ["instance"]}]}, {"Id": "48019301", "PostTypeId": "2", "ParentId": "48014833", "CreationDate": "2017-12-29T07:48:31.350", "Score": "2", "Body": "<p>Just to confirm, what you intend to do is have an EC2 instance get created on a schedule, and then have it shut down after 2 hours. The common way of accomplishing that is to use an <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html\" rel=\"nofollow noreferrer\">Auto-Scaling Group (ASG)</a> with a <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-as-scheduledaction.html\" rel=\"nofollow noreferrer\">ScheduledAction</a> to scale up and a <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-as-scheduledaction.html\" rel=\"nofollow noreferrer\">ScheduledAction</a> to scale down.</p>\n\n<p>ASGs have a \"desired capacity\" (the number of instances in the ASG). You would want this to be \"0\" by default, change it to \"1\" at your desired time, and change it back to \"0\" two hours after that. What that will do is automatically start and subsequently terminate your EC2 instance on your schedule.</p>\n\n<p>They also use a <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-launchconfig.html\" rel=\"nofollow noreferrer\">LaunchConfiguration</a>, which is a template for your EC2 instances that will start on the schedule.</p>\n\n<pre><code>MyASG: \n  Type: AWS::AutoScaling::AutoScalingGroup\n  Properties: \n    AvailabilityZones: !GetAZs !Ref \"AWS::Region\"\n    LaunchConfigurationName: !Ref MyLaunchConfiguration\n    MaxSize: 1\n    MinSize: 0\n    DesiredCapacity: 0\n\nScheduledActionUp: \n  Type: AWS::AutoScaling::ScheduledAction\n  Properties:\n    AutoScalingGroupName: !Ref MyASG\n    DesiredCapacity: 1\n    Recurrence: \"0 7 * * *\"\n\nScheduledActionDown: \n  Type: AWS::AutoScaling::ScheduledAction\n  Properties:\n    AutoScalingGroupName: !Ref MyASG\n    DesiredCapacity: 0\n    Recurrence: \"0 9 * * *\"\n\nMyLaunchConfiguration:\n  Type: AWS::AutoScaling::LaunchConfiguration\n  Properties:\n    ImageId:  ami-xxxxxxxxx # &lt;-- Specify the AMI ID that you want\n    InstanceType: t2.micro # &lt;-- Chaneg the instance size if you want\n    KeyName: my-key # &lt;-- Change to the name of an EC2 SSH key that you've added\n    UserData: \n      Fn::Base64: !Sub |\n        #!/bin/bash\n        yum install -y aws-cfn-bootstrap\n        # ...\n        # ... run some commands to set up the instance, if you need to\n        # ...\n  Metadata:\n    AWS::CloudFormation::Init:\n      config:\n        files:\n          \"/etc/something/something.conf\":\n            mode: 000600\n            owner: root\n            group: root\n            content: !Sub |\n              #\n              # Add the content of a config file, if you need to\n              #\n</code></pre>\n\n<p>Depending on what you want your instances to interact with, you might also need to add a <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html\" rel=\"nofollow noreferrer\">Security Group</a> and/or an <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\" rel=\"nofollow noreferrer\">IAM Instance Profile</a> along with an <a href=\"http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html\" rel=\"nofollow noreferrer\">IAM Role</a>.</p>\n\n<p>If you're using Jenkins to deploy the program that will run, you would add a step to bake an AMI, build and push a docker image, or take whatever other action you need to deploy your application to the place that it will be used by your instance.</p>\n\n<p>I note that in your question you say that you want to delete all of the resources created by CloudFormation. Usually, when you deploy a stack like this, the stack remains deployed. The ASG will remain there until you decide to remove the stack, but it won't cost anything when you're not running EC2 instances. I think I understand your intent here, so the advice that I'm giving aligns with that.</p>\n", "OwnerUserId": "4206678", "LastEditorUserId": "4206678", "LastEditDate": "2017-12-29T08:02:44.417", "LastActivityDate": "2017-12-29T08:02:44.417", "CommentCount": "3", "ContentLicense": "CC BY-SA 3.0", "comments": [{"Id": "83021151", "PostId": "48019301", "Score": "0", "Text": "Thanks Miles. I will implement this & will leave my comments here.", "CreationDate": "2017-12-29T16:57:25.617", "UserId": "5402945", "filtered-sentences": []}, {"Id": "83026085", "PostId": "48019301", "Score": "0", "Text": "With this approach, everytime the new instance will spin up i will have to deploy my application jar on it correct? If i will not get charged for stopped EC2 instance, then i can use Lambda function to start and stop EC2 (as suggested by Jarmod & John below), in that case, i will avoid hassle of deploying my application. Correct me if i am wrong?", "CreationDate": "2017-12-29T20:28:22.380", "UserId": "5402945", "filtered-sentences": [{"source": "Text", "text": "With this approach, everytime the new instance will spin up i will have to deploy my application jar on it correct? ", "keywords": ["instance"]}, {"source": "Text", "text": "If i will not get charged for stopped EC2 instance, then i can use Lambda function to start and stop EC2 (as suggested by Jarmod & John below), in that case, i will avoid hassle of deploying my application. ", "keywords": ["instance"]}]}, {"Id": "83039091", "PostId": "48019301", "Score": "0", "Text": "You can definitely use a lambda function to start and stop an ec2 instance without terminating it. However, AWS encourage you to treat your instances as \"cattle, not pets\", so that you can be confident that if a fresh server needs to start, it won't have any problem doing so - they start so frequently that you'd learn about an error quickly. If you're going to take the other route, your infrastructure will be far less resilient. If something goes wrong with your server, you might have to completely rebuild it. FWIW, you can also create an ASG and ScheduledActions via the console, to start out.", "CreationDate": "2017-12-30T13:56:54.160", "UserId": "4206678", "filtered-sentences": [{"source": "Text", "text": "You can definitely use a lambda function to start and stop an ec2 instance without terminating it. ", "keywords": ["instance"]}]}], "history": [{"Id": "163662086", "PostHistoryTypeId": "5", "PostId": "48019301", "RevisionGUID": "04642a43-da7e-4e16-9e05-27e58a597549", "CreationDate": "2017-12-29T08:02:44.417", "UserId": "4206678", "Comment": "Added Jenkins info", "Text": "Just to confirm, what you intend to do is have an EC2 instance get created on a schedule, and then have it shut down after 2 hours. The common way of accomplishing that is to use an [Auto-Scaling Group (ASG)][1] with a [ScheduledAction][2] to scale up and a [ScheduledAction][2] to scale down.\r\n\r\nASGs have a \"desired capacity\" (the number of instances in the ASG). You would want this to be \"0\" by default, change it to \"1\" at your desired time, and change it back to \"0\" two hours after that. What that will do is automatically start and subsequently terminate your EC2 instance on your schedule.\r\n\r\nThey also use a [LaunchConfiguration][3], which is a template for your EC2 instances that will start on the schedule.\r\n\r\n    MyASG: \r\n      Type: AWS::AutoScaling::AutoScalingGroup\r\n      Properties: \r\n        AvailabilityZones: !GetAZs !Ref \"AWS::Region\"\r\n        LaunchConfigurationName: !Ref MyLaunchConfiguration\r\n        MaxSize: 1\r\n        MinSize: 0\r\n        DesiredCapacity: 0\r\n\r\n    ScheduledActionUp: \r\n      Type: AWS::AutoScaling::ScheduledAction\r\n      Properties:\r\n        AutoScalingGroupName: !Ref MyASG\r\n        DesiredCapacity: 1\r\n        Recurrence: \"0 7 * * *\"\r\n\r\n    ScheduledActionDown: \r\n      Type: AWS::AutoScaling::ScheduledAction\r\n      Properties:\r\n        AutoScalingGroupName: !Ref MyASG\r\n        DesiredCapacity: 0\r\n        Recurrence: \"0 9 * * *\"\r\n\r\n    MyLaunchConfiguration:\r\n      Type: AWS::AutoScaling::LaunchConfiguration\r\n      Properties:\r\n        ImageId:  ami-xxxxxxxxx # <-- Specify the AMI ID that you want\r\n        InstanceType: t2.micro # <-- Chaneg the instance size if you want\r\n        KeyName: my-key # <-- Change to the name of an EC2 SSH key that you've added\r\n        UserData: \r\n          Fn::Base64: !Sub |\r\n            #!/bin/bash\r\n            yum install -y aws-cfn-bootstrap\r\n            # ...\r\n            # ... run some commands to set up the instance, if you need to\r\n            # ...\r\n      Metadata:\r\n        AWS::CloudFormation::Init:\r\n          config:\r\n            files:\r\n              \"/etc/something/something.conf\":\r\n                mode: 000600\r\n                owner: root\r\n                group: root\r\n                content: !Sub |\r\n                  #\r\n                  # Add the content of a config file, if you need to\r\n                  #\r\n\r\nDepending on what you want your instances to interact with, you might also need to add a [Security Group][4] and/or an [IAM Instance Profile][5] along with an [IAM Role][6].\r\n\r\nIf you're using Jenkins to deploy the program that will run, you would add a step to bake an AMI, build and push a docker image, or take whatever other action you need to deploy your application to the place that it will be used by your instance.\r\n\r\nI note that in your question you say that you want to delete all of the resources created by CloudFormation. Usually, when you deploy a stack like this, the stack remains deployed. The ASG will remain there until you decide to remove the stack, but it won't cost anything when you're not running EC2 instances. I think I understand your intent here, so the advice that I'm giving aligns with that.\r\n\r\n\r\n  [1]: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html\r\n  [2]: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-as-scheduledaction.html\r\n  [3]: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-launchconfig.html\r\n  [4]: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html\r\n  [5]: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\r\n  [6]: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Just to confirm, what you intend to do is have an EC2 instance get created on a schedule, and then have it shut down after 2 hours. ", "keywords": ["instance"]}, {"source": "Text", "text": "You would want this to be \"0\" by default, change it to \"1\" at your desired time, and change it back to \"0\" two hours after that. ", "keywords": ["change"]}, {"source": "Text", "text": "What that will do is automatically start and subsequently terminate your EC2 instance on your schedule. ", "keywords": ["instance"]}, {"source": "Text", "text": "MyASG: Type: AWS::AutoScaling::AutoScalingGroup Properties: AvailabilityZones: !GetAZs !Ref \"AWS::Region\" LaunchConfigurationName: !Ref MyLaunchConfiguration MaxSize: 1 MinSize: 0 DesiredCapacity: 0 ScheduledActionUp: Type: AWS::AutoScaling::ScheduledAction Properties: AutoScalingGroupName: !Ref MyASG DesiredCapacity: 1 Recurrence: \"0 7 * * *\" ScheduledActionDown: Type: AWS::AutoScaling::ScheduledAction Properties: AutoScalingGroupName: !Ref MyASG DesiredCapacity: 0 Recurrence: \"0 9 * * *\" MyLaunchConfiguration: Type: AWS::AutoScaling::LaunchConfiguration Properties: ImageId: ami-xxxxxxxxx # <-- Specify the AMI ID that you want InstanceType: t2.micro # <-- Chaneg the instance size if you want KeyName: my-key # <-- Change to the name of an EC2 SSH key that you've added UserData: Fn::Base64: !Sub | #!/bin/bash yum install -y aws-cfn-bootstrap # ... # ... run some commands to set up the instance, if you need to # ... Metadata: AWS::CloudFormation::Init: config: files: \"/etc/something/something.conf\": mode: 000600 owner: root group: root content: !Sub | # # Add the content of a config file, if you need to # Depending on what you want your instances to interact with, you might also need to add a [Security Group][4] and/or an [IAM Instance Profile][5] along with an [IAM Role][6]. ", "keywords": ["instance", "billing mode", "change"]}, {"source": "Text", "text": "If you're using Jenkins to deploy the program that will run, you would add a step to bake an AMI, build and push a docker image, or take whatever other action you need to deploy your application to the place that it will be used by your instance. ", "keywords": ["instance"]}, {"source": "Text", "text": "The ASG will remain there until you decide to remove the stack, but it won't cost anything when you're not running EC2 instances. ", "keywords": ["cost"]}]}, {"Id": "163661570", "PostHistoryTypeId": "2", "PostId": "48019301", "RevisionGUID": "6dc0f169-a726-41a2-967a-058a9cde4d1e", "CreationDate": "2017-12-29T07:48:31.350", "UserId": "4206678", "Text": "Just to confirm, what you intend to do is have an EC2 instance get created on a schedule, and then have it shut down after 2 hours. The common way of accomplishing that is to use an [Auto-Scaling Group (ASG)][1] with a [ScheduledAction][2] to scale up and a [ScheduledAction][2] to scale down.\r\n\r\nASGs have a \"desired capacity\" (the number of instances in the ASG). You would want this to be \"0\" by default, change it to \"1\" at your desired time, and change it back to \"0\" two hours after that. What that will do is automatically start and subsequently terminate your EC2 instance on your schedule.\r\n\r\nThey also use a [LaunchConfiguration][3], which is a template for your EC2 instances that will start on the schedule.\r\n\r\n    MyASG: \r\n      Type: AWS::AutoScaling::AutoScalingGroup\r\n      Properties: \r\n        AvailabilityZones: !GetAZs !Ref \"AWS::Region\"\r\n        LaunchConfigurationName: !Ref MyLaunchConfiguration\r\n        MaxSize: 1\r\n        MinSize: 0\r\n        DesiredCapacity: 0\r\n\r\n    ScheduledActionUp: \r\n      Type: AWS::AutoScaling::ScheduledAction\r\n      Properties:\r\n        AutoScalingGroupName: !Ref MyASG\r\n        DesiredCapacity: 1\r\n        Recurrence: \"0 7 * * *\"\r\n\r\n    ScheduledActionDown: \r\n      Type: AWS::AutoScaling::ScheduledAction\r\n      Properties:\r\n        AutoScalingGroupName: !Ref MyASG\r\n        DesiredCapacity: 0\r\n        Recurrence: \"0 9 * * *\"\r\n\r\n    MyLaunchConfiguration:\r\n      Type: AWS::AutoScaling::LaunchConfiguration\r\n      Properties:\r\n        ImageId:  ami-xxxxxxxxx # <-- Specify the AMI ID that you want\r\n        InstanceType: t2.micro # <-- Chaneg the instance size if you want\r\n        KeyName: my-key # <-- Change to the name of an EC2 SSH key that you've added\r\n        UserData: \r\n          Fn::Base64: !Sub |\r\n            #!/bin/bash\r\n            yum install -y aws-cfn-bootstrap\r\n            # ...\r\n            # ... run some commands to set up the instance, if you need to\r\n            # ...\r\n      Metadata:\r\n        AWS::CloudFormation::Init:\r\n          config:\r\n            files:\r\n              \"/etc/something/something.conf\":\r\n                mode: 000600\r\n                owner: root\r\n                group: root\r\n                content: !Sub |\r\n                  #\r\n                  # Add the content of a config file, if you need to\r\n                  #\r\n\r\nDepending on what you want your instances to interact with, you might also need to add a [Security Group][4] and/or an [IAM Instance Profile][5] along with an [IAM Role][6].\r\n\r\nI note that in your question you say that you want to delete all of the resources created by CloudFormation. Usually, when you deploy a stack like this, the stack remains deployed. The ASG will remain there until you decide to remove the stack, but it won't cost anything when you're not running EC2 instances. I think I understand your intent here, so the advice that I'm giving aligns with that.\r\n\r\n\r\n  [1]: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html\r\n  [2]: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-as-scheduledaction.html\r\n  [3]: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-launchconfig.html\r\n  [4]: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html\r\n  [5]: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html\r\n  [6]: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html", "ContentLicense": "CC BY-SA 3.0", "filtered-sentences": [{"source": "Text", "text": "Just to confirm, what you intend to do is have an EC2 instance get created on a schedule, and then have it shut down after 2 hours. ", "keywords": ["instance"]}, {"source": "Text", "text": "You would want this to be \"0\" by default, change it to \"1\" at your desired time, and change it back to \"0\" two hours after that. ", "keywords": ["change"]}, {"source": "Text", "text": "What that will do is automatically start and subsequently terminate your EC2 instance on your schedule. ", "keywords": ["instance"]}, {"source": "Text", "text": "MyASG: Type: AWS::AutoScaling::AutoScalingGroup Properties: AvailabilityZones: !GetAZs !Ref \"AWS::Region\" LaunchConfigurationName: !Ref MyLaunchConfiguration MaxSize: 1 MinSize: 0 DesiredCapacity: 0 ScheduledActionUp: Type: AWS::AutoScaling::ScheduledAction Properties: AutoScalingGroupName: !Ref MyASG DesiredCapacity: 1 Recurrence: \"0 7 * * *\" ScheduledActionDown: Type: AWS::AutoScaling::ScheduledAction Properties: AutoScalingGroupName: !Ref MyASG DesiredCapacity: 0 Recurrence: \"0 9 * * *\" MyLaunchConfiguration: Type: AWS::AutoScaling::LaunchConfiguration Properties: ImageId: ami-xxxxxxxxx # <-- Specify the AMI ID that you want InstanceType: t2.micro # <-- Chaneg the instance size if you want KeyName: my-key # <-- Change to the name of an EC2 SSH key that you've added UserData: Fn::Base64: !Sub | #!/bin/bash yum install -y aws-cfn-bootstrap # ... # ... run some commands to set up the instance, if you need to # ... Metadata: AWS::CloudFormation::Init: config: files: \"/etc/something/something.conf\": mode: 000600 owner: root group: root content: !Sub | # # Add the content of a config file, if you need to # Depending on what you want your instances to interact with, you might also need to add a [Security Group][4] and/or an [IAM Instance Profile][5] along with an [IAM Role][6]. ", "keywords": ["instance", "billing mode", "change"]}, {"source": "Text", "text": "The ASG will remain there until you decide to remove the stack, but it won't cost anything when you're not running EC2 instances. ", "keywords": ["cost"]}]}], "filtered-sentences": [{"source": "Body", "text": "Just to confirm, what you intend to do is have an EC2 instance get created on a schedule, and then have it shut down after 2 hours. ", "keywords": ["instance"]}, {"source": "Body", "text": "You would want this to be \"0\" by default, change it to \"1\" at your desired time, and change it back to \"0\" two hours after that. ", "keywords": ["change"]}, {"source": "Body", "text": "What that will do is automatically start and subsequently terminate your EC2 instance on your schedule. ", "keywords": ["instance"]}, {"source": "Body", "text": "Depending on what you want your instances to interact with, you might also need to add a Security Group and/or an IAM Instance Profile along with an IAM Role. ", "keywords": ["instance"]}, {"source": "Body", "text": "If you're using Jenkins to deploy the program that will run, you would add a step to bake an AMI, build and push a docker image, or take whatever other action you need to deploy your application to the place that it will be used by your instance. ", "keywords": ["instance"]}, {"source": "Body", "text": "The ASG will remain there until you decide to remove the stack, but it won't cost anything when you're not running EC2 instances. ", "keywords": ["cost"]}]}], "contains-topic": true, "filtered-sentences": [{"source": "Title", "text": "Create and delete EC2 instance with CloudFormation", "keywords": ["instance"]}, {"source": "Body", "text": "I want to spin up an EC2 instance with tomcat and deploy a java application on it. ", "keywords": ["instance"]}]}